{"version":3,"sources":["helpers/bns/constants.tsx","components/CreateNavigator/CreateNavigator.module.css","components/Navbar/Navbar.module.css","components/CreateSteps/P5CustomForwards/P5CustomForwards.module.css","helpers/bns/calcBidDomainTx.tsx","helpers/bns/calcTx.tsx","components/AboutContent/AboutContent.module.css","helpers/bns/formathelpers.tsx","components/CreateSteps/P1RestoreOrBackup/P1RestoreOrBackup.module.css","components/CreateSteps/P4ActionChoice/P4ActionChoice.module.css","components/CreateSteps/P3DomainAndWallet/P3DomainAndWallet.module.css","helpers/bns/cryptography.tsx","components/SearchResults/SearchResults.module.css","components/HomeContent/HomeContent.module.css","interfaces/index.tsx","components/general/RoundButton/RoundButton.tsx","store/reducers/Reducer.tsx","store/index.tsx","helpers/sanitize.js","store/actions/changeAliasAction.tsx","helpers/bns/types/types.tsx","helpers/bns/actions/actions.tsx","helpers/bns/calcBnsState.tsx","helpers/bns/actions/batch.tsx","helpers/bns/stringByteCount.tsx","api/blockstream.tsx","store/actions/searchAction.tsx","helpers/bitcoin.tsx","store/actions/createNewWalletAction.tsx","store/actions/changePageInfoAction.tsx","store/actions/scanAddressFullyAction.tsx","store/actions/changeChoicesBNSAction.tsx","components/SearchResults/SearchResults.tsx","helpers/timediff.tsx","helpers/bns/findLatestForwards.tsx","helpers/bns/interpretFw.tsx","components/HomeContent/HomeContent.tsx","pages/Home.tsx","components/AboutContent/AboutContent.tsx","pages/About.tsx","components/CreateSteps/P1RestoreOrBackup/P1RestoreOrBackup.tsx","components/CreateSteps/CreateHeader/CreateHeader.tsx","components/CreateSteps/P2LoadWallet/P2LoadWallet.tsx","components/CreateSteps/P3DomainAndWallet/P3DomainAndWallet.tsx","components/CreateSteps/P4ActionChoice/P4ActionChoice.tsx","components/CreateSteps/P5CustomForwards/P5CustomForwards.tsx","components/CreateSteps/P6Broadcast/P6Broadcast.tsx","components/CreateNavigator/CreateNavigator.tsx","pages/Create.tsx","components/Navbar/Navbar.tsx","App.tsx","components/DevPanel/DevPanel.tsx","index.tsx","helpers/bns/calcP2WSH.tsx","components/DevPanel/DevPanel.module.css","components/CreateSteps/CreateHeader/CreateHeader.module.css","components/CreateSteps/P2LoadWallet/P2LoadWallet.module.css","helpers/bns/initialState.tsx","components/general/RoundButton/RoundButton.module.css"],"names":["console","warn","BYTES_MAX","MIN_BURN","MIN_NOTIFY","OWNERSHIP_DURATION_BY_BLOCKS","module","exports","calcTx","stringToEmbed","wallet","domain","choices","networkChoice","vBytes","feeRate","user","getUser","address","network","bitcoin","calcP2WSH","domainName","notificationsAddress","fee","Math","ceil","valueNeeded","usedUtxoOfPayer","totalGathered","utxoList","forEach","utxo","push","value","Error","change","keyPair","fromWIF","WIF","psbt","setVersion","setLocktime","addInput","hash","txid","index","vout","sequence","nonWitnessUtxo","Buffer","from","hex","nonce","toString","encryptionKey","log","data","encrypt","embed","burnAmount","action","special","reduce","maxBurn","list","rules","max","output0value","addOutput","script","output","signInput","validateSignaturesOfInput","finalizeAllInputs","tx","extractTransaction","thisVirtualSize","virtualSize","getId","toHex","byteLength","existsCurrentOwner","st","currentOwner","getOwnerAddress","setOwner","newOwnerAddress","users","getOwner","ownerAddress","updateOwnerHistory","ownersHistory","JSON","parse","stringify","newUser","clearOwner","getParsedHeight","chain","parsedHeight","setParsedHeight","height","getLastOwnerBurnedValue","isOwnerExpired","owner","winHeight","getTxTimestamp","status","block_time","getTxHeight","block_height","getTxOutput0BurnValue","getTxInput0SourceUserAddress","vin","prevout","scriptpubkey_address","updateSourceUserFromTx","fromAddress","updateHeight","readEmbeddedData","isOpreturnOutput0","embeddedDataHex","scriptpubkey_asm","split","slice","join","getTxOutput0Data","embeddedDataBuffer","decryptionKey","embeddedDataUtf8","decrypt","embeddedDataUtf8Array","forwardsInThisTx","word","thisForward","updateTimestamp","forwards","addToUserForwards","atLeastTwoOutputs","length","isNotify","getTxOutput1NotifyAddress","notificationAddress","getNotificationAddress","didNotifyMin","getTxOutput1NotifyValue","isAddressTheCurrentOwner","didBurnMin","burnedPreviousRateMin","stringText","stringForKey","stringForIV","key","crypto","createHash","update","digest","iv","cipher","createCipheriv","encrypted","concat","final","bufferCypher","decipher","createDecipheriv","decrypted","ActionTypes","RoundButton","props","style","display","show","colorbutton","colorbuttontext","sizebutton","className","styles","roundButtonWrap","roundButton","back","backArrow","undefined","next","nextArrow","children","STORE_SEARCH_RESULTS_FAIL","STORE_SEARCH_RESULTS","TYPING","NEW_WALLET","CHANGE_PAGE_INFO","UPDATE_WALLET","UPDATE_DOMAIN","ACTION_FAIL","LOAD_STATE","CHOICES_BNS_ACTION","reducer","state","payload","type","lastTimeStamp","Date","now","txHistory","checkedHistory","checkedUtxo","pageInfo","initialState","mnemonic","alias","extension","bidding","current","txHex","Store","React","createContext","sanitize","inputString","stringOrArray","Array","isArray","filter","logicFilters","choice","str","letter","resultingString","warning","outputString","indexOf","fn","BNSActions","RENEW","ONLY_FORWARDS","CLAIM_OWNERSHIP","OUTS_2","info","OUT_0","OUT_1","NOTIFIED_MIN","BURNED_MIN","NO_OWNER","EXISTS_OWNER","BURN_LAST_WIN","USER_IS_OWNER","IS_OWNER_EXPIRED","claimOwnershipAction","args","permissions","conditions","execute","senderAddress","winTimestamp","currentOwnerRenewAction","updateForwardingInfoAction","autoCheckForOwnerExpired","calcBnsState","notificationsHistory","currentHeight","newState","reverse","sort","prev","areAllConditionsMet","eaCondition","actions","okConditions","okPermissions","areAllPermissionsMet","eaPermission","stringByteCount","API_PATH_TESTNET","API_PATH_BITCOIN","getHeight","strNetwork","a","async","API_PATH","axios","get","res","rateLimit","addRawTxToArray","arrayUtxo","erroredOutputs","error","arrayUtxoWithHex","Object","entries","indexString","parseInt","tries","getUTXOList","getAddressHistory","Promise","r","setTimeout","searchAction","dispatch","router","notificationsTxHistory","createNewWallet","bip39","generateMnemonic","seedBuffer","mnemonicToSeed","fromSeed","derivePath","toWIF","p2wpkh","pubkey","publicKey","loadWallet","strMnemonic","createNewWalletAction","changePageInfoAction","page","scanAddressFullyAction","addressType","walletAddress","walletTxHistory","utxoListWalletAddress","utxoListNotificationAddress","changeChoicesBNSAction","SearchResults","useContext","diff","isExpired","dh","blocksUntilExpires","timestampMsec","referenceTimestampMsec","abs","d","floor","h","m","dhm","msDiff","timeDiff","latestForwards","sortedForwards","currentNetworks","eaForward","values","findLatestForwards","wrapper","describe","notisExpired","listContainer","to","createLink","map","fw","ifw","startsWith","render","where","what","link","interpretFw","listItem","href","encodeURI","target","rel","HomeContent","match","params","history","isSearchDone","inputEl","useRef","useEffect","selectionEnd","selectionStart","focus","lblMainTitle","lblMainTitleAfter","noselect","divSearch","divSearchAfter","id","txtSearch","cols","rows","spellCheck","placeholder","ref","onChange","e","sanitizedString","changeAliasAction","onKeyPress","onClick","Home","AboutContent","About","pages","CreateHeader","useState","window","innerWidth","width","setWidth","resize","addEventListener","removeEventListener","fontScale","min","barHeight","aliasMarginTop","marginTop","aliasFontSize","fontSize","cutOverflow","bar","ext","spacer","P1RestoreOrBackup","ROOT","setPage","backup","setBackup","wordCount","v","title","Orange","buttonWrapper","LOAD_BACKUP","contentWrapper","thisDiv","document","getElementById","getSelection","selectAllChildren","restoreBackup","cleanString","toLowerCase","trimLeft","trim","P2LoadWallet","qrCode","setQrCode","qr","toDataURL","err","url","imgQr","src","alt","open","pathEdit","P3DomainAndWallet","apiStatus","setApiStatus","utxoArray","readyStatus","isReady","isWalletAddress","isDomainAvailable","isWalletTheOwner","domainInfo","domainButton","walletInfo","walletButton","unspent","balance","sum","toFixed","ownership","P4ActionChoice","checkActions","allActions","checkedActions","checkedPermissions","permission","isAllowed","specialTxDirections","condition","isUsable","every","permissionList","runAllActionPermissionChecks","availableActions","unavailableActions","unavailableActions__title","unavailableActions__actionList","unavailableActions__actionList__action","unavailableActions__actionList__action__title","unavailableActions__actionList__action__permissionList","unavailableActions__actionList__action__permissionList__permission","P5CustomForwards","customAdd","setCustomAdd","plannedChanges","setPlannedChanges","combineForwards","objForwards","forwardsString","keys","fwNetwork","bytesOfChanges","changes","bytesLeft","bytesOver","updateItem","updateInfo","updateCancel","newData","stopPropagation","editor","btnDelete","editorNetwork","cleanText","editorAddress","btnAdd","pastList","i","pastPair","pastNetwork","pastAddress","P6Broadcast","feeSelection","Rate","usdAPI","feeAPI","txSummary","content","response","txPush","CreateNavigator","horizontalScaler","Create","Navbar","root","App","searchParam","URLSearchParams","location","search","pushState","pathname","path","component","exact","json","require","ReactDOM","useReducer","Provider","hidden","setHidden","onDevKey","activeElement","divDev","button","encodeURIComponent","createElement","download","innerHTML","container","appendChild","click","remove","dlState","btnOutline","sheet","parentNode","removeChild","createTextNode","head","op","hash160","bufferData","witnessScript","compile","OP_DROP","p2wsh","redeem"],"mappings":"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","file":"static/js/main.8068d5c4.chunk.js","sourcesContent":["/**\n * Constants used to determine rules on BNS\n */\n\n// testing mode true/false to reduce waiting time for tests\nconst TESTING = true\nTESTING && console.warn('Testing mode ON')\n\n// max data safe to embed in OP_RETURN type tx (bytes)\nconst BYTES_MAX = 80\n\n// Satoshis to burn minimum for attempting ownership (satoshi)\nconst MIN_BURN = 1000\n\n//  Minimum to use for notification output (satoshi)\nconst MIN_NOTIFY  = 1000\n\n// Ownership duration after victory (blocks)\nconst OWNERSHIP_DURATION_BY_BLOCKS = !TESTING ? 52560 : 1000\n// ^ (real) 52560 blocks ~365 days.\n// (testing) 288 blocks ~48 hours. 1000 blocks ~ a week\n// Block times can vary from 10 minutes.\n// const CHALLENGE_PERIOD_DURATION_BY_BLOCKS = 3456\n// ^ ~24 hours. Only matters if someone is monitoring specific domainName, otherwise they won't know what domainName the bids are for.\n\nexport {\n  TESTING,\n  MIN_BURN,\n  MIN_NOTIFY,\n  OWNERSHIP_DURATION_BY_BLOCKS,\n  BYTES_MAX\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CreateNavigator_wrapper__24rTe\",\"horizontalScaler\":\"CreateNavigator_horizontalScaler__2qmoi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Navbar_root__2XES1\",\"warning\":\"Navbar_warning__1HOBZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P5CustomForwards_wrapper__2kAy2\",\"title\":\"P5CustomForwards_title__29aFH\",\"changes\":\"P5CustomForwards_changes__23bYg\",\"pastList\":\"P5CustomForwards_pastList__3rXdy\",\"buttonWrapper\":\"P5CustomForwards_buttonWrapper__3hvwB\",\"editor\":\"P5CustomForwards_editor__1ZVVF\",\"updateItem\":\"P5CustomForwards_updateItem__1wAhx\",\"updateCancel\":\"P5CustomForwards_updateCancel__3b5bW\",\"updateInfo\":\"P5CustomForwards_updateInfo__2OBcF\",\"editorNetwork\":\"P5CustomForwards_editorNetwork__1L6UB\",\"editorAddress\":\"P5CustomForwards_editorAddress__1N25M\",\"btnAdd\":\"P5CustomForwards_btnAdd__1tiSg\",\"btnDelete\":\"P5CustomForwards_btnDelete__3NCte\",\"pastPair\":\"P5CustomForwards_pastPair__3YvIk\",\"pastNetwork\":\"P5CustomForwards_pastNetwork__35eVe\",\"pastAddress\":\"P5CustomForwards_pastAddress__3-W_H\",\"bytesLeft\":\"P5CustomForwards_bytesLeft__2zySr\",\"bytesOver\":\"P5CustomForwards_bytesOver__ysfMq\"};","import * as bitcoin from 'bitcoinjs-lib'\nimport { calcP2WSH } from './calcP2WSH'\nimport { MIN_BURN, MIN_NOTIFY } from './constants'\nimport { encrypt } from './cryptography'\nimport { IDomain } from './types/'\nimport { getUser } from './formathelpers'\n\n/**\n * Creates hex of tx to bid on domain.\n * Throws error if not enough funds.\n * Leave vBytes blank, it will call itself via recursion until it derives needed size.\n * @param   {string}      stringToEmbed           - string of forwarding information to embed in tx.\n * @param   {object}      wallet                  - { WIF, address, txHistory, utxoList, ... }.\n * @param   {object}      domain                  - all domain info\n * @param   {number}      feeRate                 - fee rate in satoshi/vBytes.\n * @param   {string}      networkChoice           - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @param   {number=}     [vBytes=0]              - size of transaction in vBytes. *\n * @returns {object}                              - { thisVirtualSize, txid, hex, valueNeeded, fee, change }.\n */\nexport const calcBidDomainTx = (\n  stringToEmbed: string,\n  wallet: any,\n  domain: IDomain,\n  feeRate: number,\n  networkChoice: string,\n  vBytes: number = 0\n): any => {\n\n  const user = getUser({ domain }, wallet.address)\n\n  const network = bitcoin.networks[networkChoice]\n  const { notificationsAddress } = calcP2WSH(domain.domainName, networkChoice)\n\n  // calculate funds necessary for this tx, more than needed better than less.\n  const fee = Math.ceil(vBytes * feeRate)\n  const valueNeeded = MIN_BURN + MIN_NOTIFY + fee; // sat\n  // gather necessary utxo to use until enough to cover costs\n  let usedUtxoOfPayer: Array<any> = []\n  let totalGathered = 0 // sat\n  wallet.utxoList?.forEach((utxo: any) => {\n    // while not enough funds\n    if (totalGathered < valueNeeded) {\n      usedUtxoOfPayer.push(utxo)\n      totalGathered += utxo.value\n    }\n  })\n  // if still not enough funds\n  if (totalGathered < valueNeeded) {\n    throw new Error('Not enough funds in all the utxo')\n  }\n  const change = totalGathered - valueNeeded\n\n  // calculate keys from wallet import format key\n  const keyPair = bitcoin.ECPair.fromWIF(wallet.WIF, network)\n  // create Partially Signed Bitcoin Transaction object to build tx\n  const psbt = new bitcoin.Psbt({ network })\n  psbt.setVersion(2)    // default\n  psbt.setLocktime(0)   // default\n\n  // add all inputs (owner address must always be at index 0)\n  usedUtxoOfPayer.forEach(utxo => {\n    psbt.addInput({\n      hash: utxo.txid,\n      index: utxo.vout,\n      sequence: 0xfffffffe,\n      nonWitnessUtxo: Buffer.from(utxo.hex, 'hex') // should work for segwit and nonsegwit inputs\n    })\n  })\n\n  // add inputs of all ACS UTXO from this owner or it doesn't count (TODO)\n\n\n  // add the op_return output (always index 0)\n  // if first time sending, nonce is '0', otherwise the last blockheight when notification was sent from this owner address\n  // TODO calculate nonce in case this owner has unspent acs utxo left at notification address\n  // const nonce = getLastMessageHeight(wallet.address, notificationsAddress, notificationTxHistory)\n  const nonce = user.nonce.toString()\n  const encryptionKey =  domain.domainName + wallet.address + nonce\n  const data = encrypt(stringToEmbed, encryptionKey)\n  const embed = bitcoin.payments.embed({ data: [data] })\n  psbt.addOutput({\n    script: embed.output,\n    value: MIN_BURN,\n  })\n\n  // add notification output (always index 1)\n  psbt.addOutput({\n    address: notificationsAddress, // calculated from domainName provided\n    value: MIN_NOTIFY\n  })\n\n  // add change output (anything is fine for index 2 or higher outputs)\n  psbt.addOutput({\n    address: wallet.address,\n    value: change\n  })\n\n  // at this point all inputs & outputs added so ready to sign\n\n  usedUtxoOfPayer.forEach((utxo, index) => {\n    // sign p2wpkh of controlling\n    psbt.signInput(index, keyPair)\n    // (TODO) signing ACS inputs will need script\n\n    if (!psbt.validateSignaturesOfInput(index)) {\n      throw new Error('Signature validation failed for input index ' + index.toString())\n    }\n  })\n\n  psbt.finalizeAllInputs()\n\n  const tx = psbt.extractTransaction()\n  const thisVirtualSize = tx.virtualSize()\n  const txid = tx.getId()\n  const hex = tx.toHex()\n\n  if (vBytes >= thisVirtualSize) {\n    // If this tx fee was calculated for a vBytes size equal to or larger than the resulting derived tx (thisVirtualSize),\n    // fee should be safe by being equal to or larger than necessary at required feeRate.\n    // Obviously vBytes = 0 will never give the correct fee minimum the first time through.\n    console.log('virtualSize', tx.virtualSize())\n    console.log('byteLength', tx.byteLength())\n    console.log('getId', tx.getId())\n    console.log('hex', tx.toHex())\n    console.log('')\n    return { thisVirtualSize, txid, hex, valueNeeded, fee, change }\n  } else {\n    // Redo this tx calculation using the virtual size we just calculated for vByte optional parameter.\n    return calcBidDomainTx(stringToEmbed, wallet, domain, feeRate, networkChoice, thisVirtualSize)\n  }\n}\n","import * as bitcoin from 'bitcoinjs-lib'\nimport { calcP2WSH } from './calcP2WSH'\nimport { MIN_BURN, MIN_NOTIFY } from './constants'\nimport { encrypt } from './cryptography'\nimport { IDomain } from './types/'\nimport { getUser } from './formathelpers'\n\n/**\n * Creates hex of tx to bid on domain.\n * Throws error if not enough funds.\n * Leave vBytes blank, it will call itself via recursion until it derives needed size.\n * @param   {string}      stringToEmbed           - string of forwarding information to embed in tx.\n * @param   {object}      wallet                  - { WIF, address, txHistory, utxoList, ... }.\n * @param   {object}      domain                  - all domain info\n * @param   {object}      choices                 - user action and tx choices\n * @param   {string}      networkChoice           - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @param   {number=}     [vBytes=0]              - size of transaction in vBytes. *\n * @returns {object}                              - { thisVirtualSize, txid, hex, valueNeeded, fee, change }.\n */\nexport const calcTx = (\n  stringToEmbed: string,\n  wallet: any,\n  domain: IDomain,\n  choices: { action: any, feeRate: number  },\n  networkChoice: string,\n  vBytes: number = 0\n): any => {\n\n  // grab fee rate\n  const feeRate = choices.feeRate\n  // grab user object\n  const user = getUser({ domain }, wallet.address)\n  // grab network object\n  const network = bitcoin.networks[networkChoice]\n\n  // calculate domain notification address\n  const { notificationsAddress } = calcP2WSH(domain.domainName, networkChoice)\n\n  // calculate funds necessary for this tx, round up sat for more better than being below minimum.\n  const fee = Math.ceil(vBytes * feeRate)\n  const valueNeeded = MIN_BURN + MIN_NOTIFY + fee; // sat\n  // gather necessary utxo to use until enough to cover costs\n  let usedUtxoOfPayer: Array<any> = []\n  let totalGathered = 0 // sat\n  wallet.utxoList?.forEach((utxo: any) => {\n    // while not enough funds\n    if (totalGathered < valueNeeded) {\n      usedUtxoOfPayer.push(utxo)\n      totalGathered += utxo.value\n    }\n  })\n  // if still not enough funds\n  if (totalGathered < valueNeeded) {\n    throw new Error('Not enough funds in all the utxo')\n  }\n  const change = totalGathered - valueNeeded\n\n  // calculate keys from wallet import format key\n  const keyPair = bitcoin.ECPair.fromWIF(wallet.WIF, network)\n  // create Partially Signed Bitcoin Transaction object to build tx\n  const psbt = new bitcoin.Psbt({ network })\n  psbt.setVersion(2)    // default\n  psbt.setLocktime(0)   // default\n\n  // add all inputs (owner address must always be at index 0)\n  usedUtxoOfPayer.forEach(utxo => {\n    psbt.addInput({\n      hash: utxo.txid,\n      index: utxo.vout,\n      sequence: 0xfffffffe,\n      nonWitnessUtxo: Buffer.from(utxo.hex, 'hex') // should work for segwit and nonsegwit inputs\n    })\n  })\n\n  // add inputs of all ACS UTXO from this owner or it doesn't count (TODO)\n\n\n  // add the op_return output (always index 0)\n  // if first time sending, nonce is '0', otherwise the last blockheight when this user has sent ANY tx to that notification address\n  // TODO calculate nonce in case this owner has unspent acs utxo left at notification address\n  const nonce = user.nonce.toString()\n  const encryptionKey =  domain.domainName + wallet.address + nonce\n  console.log('nonce used to encrypt', domain.domainName, wallet.address, nonce)\n  const data = encrypt(stringToEmbed, encryptionKey)\n  const embed = bitcoin.payments.embed({ data: [data] })\n\n  // output[0]: check special tx choices for max amount required to burn from special rules\n  const burnAmount = choices.action.special.reduce((maxBurn: number, list: any) => {\n    console.log(maxBurn, list.rules)\n    return (\n      ('output0value' in list.rules) ? Math.max(maxBurn, list.rules.output0value) : maxBurn\n    )\n  }, 0)\n  psbt.addOutput({\n    script: embed.output,\n    value: burnAmount,\n  })\n  console.log('rules say to burn ', burnAmount)\n\n  // add notification output (always index 1)\n  psbt.addOutput({\n    address: notificationsAddress, // calculated from domainName provided\n    value: MIN_NOTIFY\n  })\n\n  // add change output (anything is fine for index 2 or higher outputs)\n  psbt.addOutput({\n    address: wallet.address,\n    value: change\n  })\n\n  // at this point all inputs & outputs added so ready to sign\n\n  usedUtxoOfPayer.forEach((utxo, index) => {\n    // sign p2wpkh of controlling\n    psbt.signInput(index, keyPair)\n    // (TODO) signing ACS inputs will need script\n\n    if (!psbt.validateSignaturesOfInput(index)) {\n      throw new Error('Signature validation failed for input index ' + index.toString())\n    }\n  })\n\n  psbt.finalizeAllInputs()\n\n  const tx = psbt.extractTransaction()\n  const thisVirtualSize = tx.virtualSize()\n  const txid = tx.getId()\n  const hex = tx.toHex()\n\n  if (vBytes >= thisVirtualSize) {\n    // If this tx fee was calculated for a vBytes size equal to or larger than the resulting derived tx (thisVirtualSize),\n    // fee should be safe by being equal to or larger than necessary at required feeRate.\n    // Obviously vBytes = 0 will never give the correct fee minimum the first time through.\n    console.log('virtualSize', tx.virtualSize())\n    console.log('byteLength', tx.byteLength())\n    console.log('getId', tx.getId())\n    console.log('hex', tx.toHex())\n    console.log('')\n    return { thisVirtualSize, txid, hex, valueNeeded, fee, change, burnAmount, choices }\n  } else {\n    // Redo this tx calculation using the virtual size we just calculated for vByte optional parameter.\n    return calcTx(\n      stringToEmbed, wallet, domain, choices, networkChoice, thisVirtualSize\n    )\n  }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AboutContent_wrapper__1kfnm\"};","import { newUser } from './initialState'\nimport { OWNERSHIP_DURATION_BY_BLOCKS, MIN_BURN, MIN_NOTIFY } from './constants'\nimport { IUser, Iforward, IBnsState } from './types/'\nimport { decrypt } from './cryptography'\n\n// ========== helper functions =====================\n\nexport const existsCurrentOwner = (st: IBnsState): boolean => st.domain.currentOwner !== ''\n\nexport const getOwnerAddress = (st: IBnsState): string => st.domain.currentOwner || ''\n\nexport const setOwner = (st: IBnsState, newOwnerAddress: string) => {\n  st.domain.currentOwner = newOwnerAddress\n}\n\nexport const getUser = (st: IBnsState, address: string): IUser => st.domain.users[address]\n\nexport const getOwner = (st: IBnsState) => {\n  const ownerAddress = getOwnerAddress(st)\n  if (!ownerAddress) return undefined\n  return getUser(st, ownerAddress)\n}\n\nexport const updateOwnerHistory = (st: IBnsState): void => {\n  st.domain.ownersHistory.push(getOwner(st) || JSON.parse(JSON.stringify(newUser)))\n}\n\nexport const clearOwner = (st: IBnsState): void => { st.domain.currentOwner = '' }\n\nexport const getCurrentHeight = (st: IBnsState): number => st.chain?.currentHeight || 0\nexport const getParsedHeight = (st: IBnsState): number => st.chain?.parsedHeight || 0\nexport const setParsedHeight = (st: IBnsState, height: number): void => {\n  st.chain && (st.chain.parsedHeight = height)\n}\n\nexport const getNotificationAddress = (st: IBnsState): string => st.domain.notificationAddress || ''\n\nexport const getLastOwnerBurnedValue = (st: IBnsState): number => getOwner(st)?.burnAmount || 0\n\nexport const isOwnerExpired = (st: IBnsState): boolean => {\n  if (existsCurrentOwner(st)) return true\n  const owner = getOwner(st)\n  if (!owner) return true\n  const blocksSinceUpdate = getParsedHeight(st) - owner.winHeight\n  return blocksSinceUpdate > OWNERSHIP_DURATION_BY_BLOCKS\n}\n\n// ===== tx functions (getters) =====================\n\nexport const getTxTimestamp = (tx: any): number => tx.status.block_time || 0\nexport const getTxHeight = (tx: any): number => tx.status.block_height || 0\n\nexport const getTxOutput0BurnValue = (tx: any): number => tx.vout[0]?.value || 0\nexport const getTxOutput0Data = (tx: any):string => {\n  if (isOpreturnOutput0(tx)) {\n    // remove 'OP_RETURN OP_PUSHBYTES_5 ' from it and return the rest\n    return tx.vout[0].scriptpubkey_asm.split(' ').slice(2).join('')\n  }\n  return ''\n}\n\nexport const getTxOutput1NotifyValue = (tx: any): number => tx.vout[1]?.value || 0\nexport const getTxOutput1NotifyAddress = (tx: any): string => tx.vout[1]?.scriptpubkey_address || ''\n\nexport const getTxInput0SourceUserAddress = (tx: any): string => (\n  tx.vin[0]?.prevout.scriptpubkey_address || ''\n)\n\n\n// ======= update state from tx (setters) ========\n\n// update the info for the source user of the tx within bns state\n// when ran a second time, it simply updates nonce for post-tx value\nexport const updateSourceUserFromTx = (st: IBnsState, tx: any): void => {\n  const fromAddress = getTxInput0SourceUserAddress(tx)\n\n  // create new user if not already one of users\n  if (!(fromAddress in st.domain.users)) {\n    // create new user object by copying values of newUser object\n    st.domain.users[fromAddress] = JSON.parse(JSON.stringify(newUser))\n    console.log('new source created:')\n  }\n\n  // update user\n  const user = st.domain.users[fromAddress]\n  user.address = fromAddress\n  user.nonce = user.updateHeight\n  user.updateHeight = getTxHeight(tx)\n  console.log('source:', user)\n}\n\nexport const addToUserForwards = (\n  st: IBnsState,\n  fromAddress: string,\n  forwardsInThisTx: Array<Iforward>\n) => {\n  const user = getUser(st, fromAddress)\n  user.forwards = [...user.forwards, ...forwardsInThisTx]\n}\n\nexport const readEmbeddedData = (st: IBnsState, tx: any):void => {\n  // only go on if there is op_return with embedded data on output 0\n  if (!isOpreturnOutput0(tx)) {\n    console.log(getTxHeight(tx), ': no op_return found for txid')\n    return undefined\n  }\n\n  // get useful object references\n  const fromAddress = getTxInput0SourceUserAddress(tx)\n  const user = getUser(st, fromAddress)\n  const nonce = user.nonce.toString()\n\n  const embeddedDataHex = getTxOutput0Data(tx)\n  const embeddedDataBuffer = Buffer.from(embeddedDataHex, 'hex')\n\n  const decryptionKey = st.domain.domainName + user.address + nonce\n  console.log(\n    getTxHeight(tx),\n    ': decryption key: ',\n    st.domain.domainName,\n    user.address,\n    nonce\n  )\n  const embeddedDataUtf8 = decrypt(embeddedDataBuffer, decryptionKey)\n  console.log(getTxHeight(tx), ': found embedded data:', embeddedDataUtf8)\n\n  // split by spaces into array\n  const embeddedDataUtf8Array = embeddedDataUtf8.split(' ')\n\n  // collect all forwards in this tx\n  const forwardsInThisTx: Array<Iforward> = []\n\n  embeddedDataUtf8Array.forEach((word: string, index: number) => {\n    // everything must be space separated in pairs\n    // so single block might mean failed decryption or\n    // last unpaired block might be padding or future versioning\n    // grabbing only odd and 1 before it values, only grabbing pairs\n    if (index % 2 === 1) {\n      const networkPiece = embeddedDataUtf8Array[index - 1]\n      const forwardingAddressPiece = word\n      const thisForward = {\n        network:          networkPiece,\n        address:          forwardingAddressPiece,\n        updateHeight:     getTxHeight(tx),\n        updateTimestamp:  getTxTimestamp(tx)\n      }\n      forwardsInThisTx.push(thisForward)\n    }\n  })\n\n  // update forwards on the user\n  addToUserForwards(st, fromAddress, forwardsInThisTx)\n}\n\n// ===== rule checks (getters) =====\n\n// Describe:    2 outputs minimum\n// Required:    ALL\nexport const atLeastTwoOutputs = (tx: any): boolean => tx.vout.length >= 2\n\n// Describe:    Is [0] output OP_RETURN type\n// Required:    ALL\nexport const isOpreturnOutput0 = (tx: any): boolean => (\n  tx.vout[0].scriptpubkey_asm.split(' ')[0] === 'OP_RETURN'\n)\n\n// Describe:    Is [1] output this domain's notification address?\n// Required:    ALL\nexport const isNotify =  (st: IBnsState, tx: any): boolean => (\n  getTxOutput1NotifyAddress(tx) === getNotificationAddress(st)\n)\n\n// Describe:    At least minimum amount used in notification output? (Dust level is main danger)\n// Required:    ALL\nexport const didNotifyMin = (tx: any): boolean => getTxOutput1NotifyValue(tx) >= MIN_NOTIFY\n\n// Describe:    Is sender the current domain owner (input [0], id'ed by address)?\n// Required:    renew lease\n// Irrelevant:  available domain claim, forwarding information updates (warn)\nexport const isAddressTheCurrentOwner = (st: IBnsState, address: string): boolean =>  getOwnerAddress(st) === address\n\n// Describe:    At least minimum amount burned?\n// Required:    available domain claim, renew lease\n// Irrelevant:  forwarding information updates\nexport const didBurnMin = (tx: any): boolean => getTxOutput0BurnValue(tx) >= MIN_BURN\n\n// Describe:    Burned at least as much as previously burnt\nexport const burnedPreviousRateMin = (st: IBnsState, tx: any): boolean => (\n  getTxOutput0BurnValue(tx) >= getLastOwnerBurnedValue(st)\n)\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P1RestoreOrBackup_wrapper__32TQJ\",\"title\":\"P1RestoreOrBackup_title__2rH-6\",\"contentWrapper\":\"P1RestoreOrBackup_contentWrapper__1NT85\",\"buttonWrapper\":\"P1RestoreOrBackup_buttonWrapper__2ryAq\",\"describe\":\"P1RestoreOrBackup_describe__1RMqs\",\"Orange\":\"P1RestoreOrBackup_Orange__2IaJN\",\"spacer\":\"P1RestoreOrBackup_spacer__3luud\",\"backup\":\"P1RestoreOrBackup_backup__357rd\",\"restoreBackup\":\"P1RestoreOrBackup_restoreBackup__VUHgs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P4ActionChoice_wrapper__2u2J5\",\"title\":\"P4ActionChoice_title__2PdRs\",\"availableActions\":\"P4ActionChoice_availableActions__1O5aS\",\"unavailableActions\":\"P4ActionChoice_unavailableActions__3rEYI\",\"buttonWrapper\":\"P4ActionChoice_buttonWrapper__3Sx3Y\",\"unavailableActions__title\":\"P4ActionChoice_unavailableActions__title__2EQ4_\",\"unavailableActions__actionList\":\"P4ActionChoice_unavailableActions__actionList__1VAc_\",\"unavailableActions__actionList__action\":\"P4ActionChoice_unavailableActions__actionList__action__GMwoW\",\"unavailableActions__actionList__action__title\":\"P4ActionChoice_unavailableActions__actionList__action__title__3ljZU\",\"unavailableActions__actionList__action__permissionList\":\"P4ActionChoice_unavailableActions__actionList__action__permissionList__2pKeq\",\"unavailableActions__actionList__action__permissionList__permission\":\"P4ActionChoice_unavailableActions__actionList__action__permissionList__permission__2eF7F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P3DomainAndWallet_wrapper__1ElFg\",\"contentWrapper\":\"P3DomainAndWallet_contentWrapper__vm5qp\",\"title\":\"P3DomainAndWallet_title__3ing2\",\"domainInfo\":\"P3DomainAndWallet_domainInfo__3p2aJ\",\"domainButton\":\"P3DomainAndWallet_domainButton__2PIDz\",\"walletInfo\":\"P3DomainAndWallet_walletInfo__2cQY0\",\"walletButton\":\"P3DomainAndWallet_walletButton__MmLZ3\",\"unspent\":\"P3DomainAndWallet_unspent__bUWZW\",\"buttonWrapper\":\"P3DomainAndWallet_buttonWrapper__djJkL\",\"ownership\":\"P3DomainAndWallet_ownership__lSY6a\",\"balance\":\"P3DomainAndWallet_balance__2fns7\"};","import crypto from 'crypto'\n\n/**\n * Encrypt - symmetric - aes-256-crt\n * @param   {string}  stringText      To be encrypted (up to 80 bytes)\n * @param   {string}  stringForKey    Derive Key from (not final Key).\n * @param   {string}  stringForIV     Derive IV from (not final IV). Defaults as stringForKey.\n * @returns {Buffer}                  Buffer to embed in tx.\n */\nexport const encrypt = (\n  stringText: string, stringForKey: string, stringForIV: string = stringForKey\n) => {\n  // aes-NUMBER-TYPE\n  // Must have key size matching NUMBER (in aes name) of bits (NUMBER/8 bytes)\n  // Must have IV matching encryption block size, 16 bytes for AES128-to-256-range in cbc mode\n  // sha256 can make 32 byte buffer out of anything and then .slice(0, N) can cut it to N bytes\n\n  const key = crypto.createHash('sha256').update(stringForKey).digest()             // 32 bytes\n  const iv = crypto.createHash('sha256').update(stringForIV).digest().slice(0, 16)  // 16 bytes\n\n  let cipher = crypto.createCipheriv('aes-256-ctr', key, iv)\n  let encrypted = cipher.update(Buffer.from(stringText))\n\n  encrypted = Buffer.concat([encrypted, cipher.final()])\n\n  return encrypted\n}\n\n /**\n * Decrypt - symmetric - aes-256-crt\n * @param   {Buffer}  stringText      Buffer to be decrypted.\n * @param   {string}  stringForKey    Derive Key from (not final Key).\n * @param   {string}  stringForIV     Derive IV from (not final IV). Defaults as stringForKey.\n * @returns {Buffer}                  Buffer to utf8 embeded in tx.\n */\nexport const decrypt = (\n  bufferCypher: Buffer, stringForKey: string, stringForIV: string = stringForKey\n) => {\n\n  const key = crypto.createHash('sha256').update(stringForKey).digest()             // 32 bytes\n  const iv = crypto.createHash('sha256').update(stringForIV).digest().slice(0, 16)  // 16 bytes\n\n  let decipher = crypto.createDecipheriv('aes-256-ctr', key, iv)\n\n  // first part\n  let decrypted = decipher.update(bufferCypher)\n\n  // the rest\n  decrypted = Buffer.concat([decrypted, decipher.final()])\n\n  return decrypted.toString('utf8')\n}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SearchResults_wrapper__VvaYk\",\"listContainer\":\"SearchResults_listContainer__12vQE\",\"listItem\":\"SearchResults_listItem__3Udwx\",\"key\":\"SearchResults_key__358jo\",\"describe\":\"SearchResults_describe__3HACm\",\"expired\":\"SearchResults_expired__2ptnD\",\"notExpired\":\"SearchResults_notExpired__2m4VI\",\"createLink\":\"SearchResults_createLink__13Wez\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lblMainTitle\":\"HomeContent_lblMainTitle__1LqCG\",\"lblMainTitleAfter\":\"HomeContent_lblMainTitleAfter__J9CsB\",\"divSearch\":\"HomeContent_divSearch__3dKw5\",\"divSearchAfter\":\"HomeContent_divSearchAfter__2MAMf\",\"txtSearch\":\"HomeContent_txtSearch__3HpSp\"};","import { BNSActions } from './../helpers/bns/types/'\n/**\n * All the interfaces & enums\n */\n\n// for global state action creators\nexport enum ActionTypes {\n  STORE_SEARCH_RESULTS = 'STORE_SEARCH_RESULTS',\n  STORE_SEARCH_RESULTS_FAIL = 'STORE_SEARCH_RESULTS_FAIL',\n  TYPING = 'TYPING',\n  NEW_WALLET = 'NEW_WALLET',\n  CHANGE_PAGE_INFO = 'CHANGE_PAGE_INFO',\n  UPDATE_WALLET = 'UPDATE_WALLET',\n  UPDATE_DOMAIN = 'UPDATE_DOMAIN',\n  ACTION_FAIL = 'ACTION_FAIL',\n  LOAD_STATE = 'LOAD_STATE',\n  CHOICES_BNS_ACTION = 'CHOICES_BNS_ACTION'\n}\n\nexport type Dispatch = React.Dispatch<IAction>\n\nexport interface IAction {\n  type: ActionTypes\n  payload: any\n}\n\nexport interface Iforward {\n  network: string\n  address: string\n  updateHeight: number\n  updateTimestamp: number\n}\n\nexport interface IUser {\n  address:      string\n  forwards:     Array<Iforward>\n  burnAmount:   number\n  winHeight:    number\n  winTimestamp: number\n  nonce:        number\n  updateHeight: number\n}\n\nexport interface IState {\n  network: string\n  alias: string\n  extension: string\n  domain: {\n    domainName: string\n    notificationAddress: string\n    txHistory: Array<any>\n    utxoList: Array<any>\n    users: {\n      [key: string]: IUser\n    }\n    currentOwner: string\n    bidding: {}\n    checkedHistory: boolean\n    checkedUtxo: boolean\n  }\n  wallet: {\n    address: string\n    mnemonic: string\n    WIF: string\n    txHistory: Array<any>\n    utxoList: Array<any>\n    checkedHistory: boolean\n    checkedUtxo: boolean\n  }\n  chain: {\n    height: number\n  }\n  choices: {\n    action: {\n      type: BNSActions\n      info: string\n      special: Array<any> | []\n    } | {}\n    feeRate: number\n    txHex: string\n  }\n  pageInfo: {\n    current: number\n  }\n  lastTimeStamp: number\n}","import React from 'react'\nimport styles from './RoundButton.module.css'\n\n/**\n * Standard button for this app.\n *\n * Pass the following props to customize it.\n *\n * next='true' to add next arrow at right.\n *\n * back='true' to add back arrow on left.\n *\n * show='true' to display element vs show='false' to set display to none (dom still exists).\n *\n * sizebutton='2.9' to make the button size 2.9x standard var(--s) size used (defined in global global.css).\n *\n * colorbutton='var(--colorBitcoinOrange)' to customize color.\n *\n * colorbuttonText='var(--colorButtonText)' to customize text color.\n *\n * Defaults (vars defined in global global.css):\n *\n * sizebutton = 2.5. ( means font size calc(2.5/2.9 * var(--s)) )\n *\n * colorbutton = var(--colorBitcoinOrange).\n *\n * colorbuttontext = var(--colorButtonText).\n */\nexport const RoundButton = (props:any): JSX.Element => {\n  return (\n    <div\n      // variables defined by string will be available to button & its children for scope\n      style={{\n        display: (\n          (props?.show === 'false') ? 'none' : 'inline-block'\n        ) as React.CSSProperties,\n        '--colorThisButton': (\n          props.colorbutton ? props.colorbutton : `var(--colorBitcoinOrange)`\n        )  as React.CSSProperties,\n        '--colorThisButtonText': (\n          props.colorbuttontext ? props.colorbuttontext : `var(--colorButtonText)`\n        ) as React.CSSProperties,\n        '--sizeButton': (\n          props.sizebutton\n          // Button was designed at 2.9 * var(--s) scale font so\n          // this just lets user redefine font & everything else proportionally\n            ? `calc(${props.sizebutton}/2.9 * var(--s))`\n            : `calc(2.5/2.9 * var(--s))`\n        ) as React.CSSProperties\n      }}\n      className={ styles.roundButtonWrap }\n      {...props}\n    >\n      <div\n        className={ [\n          styles.roundButton,\n          props.back ? styles.backArrow : undefined,\n          props.next ? styles.nextArrow : undefined,\n        ].join(' ') }\n      >\n        { props.children }\n      </div>\n    </div>\n  )\n}\n","import { IState, IAction, ActionTypes } from '../../interfaces'\nimport { initialState } from './../'\nconst {\n  STORE_SEARCH_RESULTS_FAIL,\n  STORE_SEARCH_RESULTS,\n  TYPING,\n  NEW_WALLET,\n  CHANGE_PAGE_INFO,\n  UPDATE_WALLET,\n  UPDATE_DOMAIN,\n  ACTION_FAIL,\n  LOAD_STATE,\n  CHOICES_BNS_ACTION\n} = ActionTypes\n\n/**\n * Reducer edits global state via information in payload.\n * Action is object { payload, type }.\n * type describes what type of changes to global state to make.\n * payload contains data provided to make those changes.\n */\nexport default function reducer (state: IState, action: IAction): IState {\n  const { payload } = action\n\n  switch (action.type) {\n\n    case CHOICES_BNS_ACTION: {\n      // BNS action chosen\n      return {\n        ...state,\n        choices: {\n          ...state.choices,\n          ...payload\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case UPDATE_WALLET: {\n      // after full scan of the wallet address\n      return {\n        ...state,\n        wallet: {\n          ...state.wallet, // wif/mnemonic/address unchanged\n          txHistory: payload.wallet.txHistory,\n          utxoList: payload.wallet.utxoList,\n          checkedHistory: true,\n          checkedUtxo: true\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case UPDATE_DOMAIN: {\n      return {\n        ...state,\n        domain: {\n          ...payload.domain,\n          checkedHistory: true,\n          checkedUtxo: true\n        },\n        chain: {\n          height: payload.chain.height\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case CHANGE_PAGE_INFO:\n      // navigation info for controlling domains\n      return {\n        ...state,\n        pageInfo: payload\n      }\n\n    case NEW_WALLET: {\n      // store totally new wallet object\n      return {\n        ...state,\n        wallet: {\n          ...initialState.wallet,\n          address: payload.address,\n          mnemonic: payload.mnemonic,\n          WIF: payload.WIF\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case STORE_SEARCH_RESULTS: {\n      // store results of looking up totally new alias\n      // update notifications and ownership information\n\n      return {\n        ...state,\n        alias: payload.alias,\n        domain: {\n          ...initialState.domain,\n          ...payload.domain,\n          checkedHistory: true\n        },\n        chain: {\n          height: payload.chain.height\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case STORE_SEARCH_RESULTS_FAIL: {\n      // store results of looking up totally new alias\n      // reset notifications and ownership information\n      return {\n        ...state,\n        alias: payload.alias,\n        domain: {\n          ...initialState.domain,\n          domainName: payload.domainName,\n          notificationAddress: payload.notificationAddress\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case TYPING: {\n      // change of alias part of domain name\n      // this change renders owner and notification information outdated\n      return {\n        ...state,\n        alias: payload,\n        domain: initialState.domain,\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case ACTION_FAIL: {\n      return {\n        ...state,\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case LOAD_STATE: {\n      return {\n        ...payload,\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    default: {\n      console.warn('Unknown action type')\n      return state\n    }\n  }\n}\n\n// can split maybe like this later if gets too long\n// https://dev.to/vanderleisilva/global-state-management-with-react-hooks-and-context-5f6h\n\n","import React from 'react'\nimport { IState } from '../interfaces'\nimport reducer from './reducers/Reducer'\n\n// Change state process:\n// 1. Component calls action from src/store/actions/\n// 2. Action does stuff (e.g. API calls) and dispatches results to reducer in src/store/reducer/\n// 3. Reducer modifies state based on dispatched payload and type of action.\n\n// initial state\n// (changes to design need to be matched in reducers & interfaces)\nexport const initialState: IState = {\n  network: 'testnet',             // 'testnet' or 'bitcoin'\n  alias: 'satoshi',               // first half of domain name\n  extension: '.btc',              // last half of domain name\n  domain: {                       // domain info from notifications\n    domainName: '',\n    notificationAddress: '',      // p2wsh address for this domain name (alias + extension)\n    txHistory: [],                // array of all tx for this address (old addressHistory)\n    utxoList: [],                 // array of all current utxo for this address\n    users: {},                    // object with all interacting users\n    currentOwner: '',             // address of user that controls domain\n    bidding: {},                  // bidding info\n    checkedHistory: false,        // if notifications tx history has ever been updated\n    checkedUtxo: false            // if notifications utxo including raw tx has ever been updated\n  },\n  wallet: {                       // wallet information & utxo for controlling domain names\n    address: '',                  // public address (p2wpkh)\n    mnemonic: '',                 // mnemonic for private key derivation\n    WIF: '',                      // wallet import format for private key derivation\n    txHistory: [],                // array of all tx for this address\n    utxoList: [],                 // array of all current utxo for this address\n    checkedHistory: false,        // if wallet tx history has ever been updated\n    checkedUtxo: false            // if wallet utxo including raw tx has ever been updated\n  },\n  chain: {\n    height: 0                     // height of blockchain\n  },\n  pageInfo: {                     // user navigation information for controlling domain name\n    current: 1\n  },\n  choices: {\n    action: [],                   // choices and data for action to take\n    feeRate: 1.1,                 // fee rate to use in sat/bByte,\n    txHex: ''                     // hex of raw transaction, ideally ready for broadcast\n  },\n  lastTimeStamp: Date.now(),      // last change timestamp, to detect any changes to state or time out\n\n}\n\n// helper methods\nexport const getOwner = (st: IState) => {\n  const ownerAddress = st.domain.currentOwner\n  return st.domain.users[ownerAddress]\n}\n\nexport const getUser = (st: IState, address: string) => {\n  return st.domain.users[address]\n}\n\nexport const Store = React.createContext<any>(initialState)\n// returns object with .Provider and .Consumer\n// Provider makes state available to all child components no matter how deep\n\n\n\n// creates wrapping element for global state\nexport function StoreProvider ({ children }: JSX.ElementChildrenAttribute): JSX.Element {\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n\n  return (\n    <Store.Provider value={{ state, dispatch }}>\n      { children }\n    </Store.Provider>\n  )\n}\n","/**\r\n * Takes in a string of interest inputString\r\n * and Array of strings or string describing filter.\r\n * Returns the string of interst with only characters present in filters selected.\r\n */\r\nexport default function  sanitize (inputString, stringOrArray) {\r\n  // get choice input into same form of array of string(s) of choices\r\n  let choices; // :string | Array<string>\r\n  if (Array.isArray(stringOrArray)) {\r\n    choices = stringOrArray;\r\n  }\r\n  if (typeof stringOrArray === 'string') {\r\n    choices = [stringOrArray];\r\n  }\r\n\r\n  // add each choice to filter selection\r\n\r\n  // string mask\r\n  let filter = '';\r\n  // array of functions\r\n  const logicFilters = [];\r\n\r\n  choices.forEach(choice => {\r\n\r\n    // short masks\r\n    if (choice === 'numbers') {\r\n      filter += '0123456789';\r\n    }\r\n    if (choice === 'decimal_point') {\r\n      filter += '.';\r\n    }\r\n    if (choice === 'hex') {\r\n      filter += '0123456789abcdefABCDEF';\r\n    }\r\n    if (choice === 'lowcaps') {\r\n      filter += 'abcdefghijklmnopqrstuvwxyz';\r\n    }\r\n    if (choice === 'highcaps') {\r\n      filter += 'ABCDEFGHIJKLMNOPQRSTUVWYZ';\r\n    }\r\n    if (choice === 'spaces') {\r\n      filter += ' ';\r\n    }\r\n\r\n    // longer masks\r\n    if (choice === 'base58') {\r\n      // https://en.wikipedia.org/wiki/Base58#cite_note-3\r\n      filter += '12345689ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\r\n    }\r\n    if (choice === 'basic') {\r\n      filter += '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    }\r\n    if (choice === 'oneline') {\r\n      filter += '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,./-_!`~[]{}|@#%^&()-=?$';\r\n    }\r\n    if (choice === 'url') {\r\n      filter += `0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:/?#[]@!$&'()*+,;=-_.~`;\r\n    }\r\n\r\n    // ========================================================\r\n    // functions\r\n    // adds anon function to array of functions\r\n\r\n    if (choice === 'no_spaces') {\r\n      logicFilters.push(str =>\r\n        str.split('')\r\n          .filter(letter => letter !== ' ')\r\n          .join(''))\r\n    }\r\n\r\n    if (choice === 'single_space_width') {\r\n      logicFilters.push(str =>\r\n        // split by 2+ spaces and replace with single space\r\n        str.split(/  */).join(' ')\r\n      )\r\n    }\r\n\r\n    // keep only first decimal point\r\n    if (choice === 'decimal_point') {\r\n\r\n      logicFilters.push(str =>\r\n        (str\r\n          // splits to array between .\r\n          .split('.')\r\n          // join first 2 elements with ., others with empty string\r\n          // returns a string\r\n          .reduce((resultingString = '', letter, index) =>\r\n            // real . goes b/w array's index 0 and 1, even if string had . first\r\n            (index === 1)\r\n              ? [ ...resultingString, letter ].join('.')\r\n              : [ ...resultingString, letter ].join('')\r\n          , undefined)\r\n        )\r\n      )\r\n    }\r\n\r\n\r\n\r\n  })\r\n\r\n  if (filter.length === 0 && logicFilters.length === 0) {\r\n    console.warning('sanitize used w/o any known filters', stringOrArray)\r\n  }\r\n\r\n  let outputString = '';\r\n\r\n  // apply string mask to only keep characters within filter string\r\n  outputString = inputString\r\n    .split('')\r\n    .filter(letter => filter.indexOf(letter) > -1)\r\n    .join('');\r\n\r\n  // use every selected logic function on the outputString\r\n  logicFilters.forEach(fn => outputString = fn(outputString))\r\n\r\n  return outputString;\r\n}\r\n\r\n\r\n// function sanitizeOld (inString, type) {\r\n//   let filter;\r\n//   if (type === 'base58') {\r\n//     // https://en.wikipedia.org/wiki/Base58#cite_note-3\r\n//     filter = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\r\n//   } else if (type === 'hex') {\r\n//     filter = '0123456789abcdef';\r\n//   } else if (type === 'basic') {\r\n//     filter = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n//   } else if (type === 'numbers') {\r\n//     filter = '0123456789';\r\n//   } else if (type === 'fractions') {\r\n//     filter = '0123456789.';\r\n//   } else if (type === 'oneline') {\r\n//     filter = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,./-_!`~[]{}|@#%^&()-=?$';\r\n//   } else if (type === 'url') {\r\n//     filter = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ./-_';\r\n//   } else {\r\n//     console.log('sanitize: valid type not provided');\r\n//     return undefined;\r\n//   }\r\n\r\n//   const res = inString\r\n//     .split('')\r\n//     .filter(letter => filter.indexOf(letter) > -1)\r\n//     .join('');\r\n\r\n//   return res;\r\n// }","import { IState, Dispatch } from '../../interfaces'\nimport sanitize from '../../helpers/sanitize'\nimport { ActionTypes } from './../../interfaces'\nconst { TYPING } = ActionTypes;\n\n/**\n * Cleans up the entered string including removing next line characters\n */\nexport const changeAliasAction = async (state: IState, dispatch: Dispatch, value: any) => {\n  // clean up the string\n  const newString = value\n  const sanitizedString = sanitize(newString, 'url')\n\n  return dispatch({\n    type: TYPING,\n    payload: sanitizedString\n  })\n}\n","// for BNS\nexport enum BNSActions {\n  RENEW = 'RENEW',\n  ONLY_FORWARDS = 'ONLY_FORWARDS',\n  CLAIM_OWNERSHIP = 'CLAIM_OWNERSHIP'\n}\n\nexport interface IUser {\n  address:      string\n  forwards:     Array<Iforward>\n  burnAmount:   number\n  winHeight:    number\n  winTimestamp: number\n  nonce:        number\n  updateHeight: number\n}\n\n  // each forward object has the following data\nexport interface Iforward {\n  network: string\n  address: string\n  updateHeight: number\n  updateTimestamp: number\n}\n\nexport interface IBnsState {\n  domain: IDomain\n  chain?: {\n    parsedHeight: number\n    currentHeight: number\n  }\n}\n\nexport interface IDomain {\n  domainName: string\n  notificationAddress: string\n  txHistory: Array<any>\n  utxoList: Array<any>\n  users: {\n    [key: string]: IUser\n  }\n  currentOwner: string\n  bidding: {}\n  ownersHistory: Array<IUser>\n}\n","import { IBnsState, BNSActions } from './../types/'\nimport { MIN_NOTIFY, MIN_BURN } from './../constants'\nimport {\n  existsCurrentOwner,\n  isOwnerExpired,\n  clearOwner,\n  getParsedHeight,\n  atLeastTwoOutputs,\n  isNotify,\n  isOpreturnOutput0,\n  didNotifyMin,\n  didBurnMin,\n  setOwner,\n  getOwner,\n  getUser,\n  getTxInput0SourceUserAddress,\n  getTxHeight,\n  getTxTimestamp,\n  getTxOutput0BurnValue,\n  isAddressTheCurrentOwner,\n  burnedPreviousRateMin,\n  readEmbeddedData,\n  getLastOwnerBurnedValue\n} from './../formathelpers'\nconst { RENEW, ONLY_FORWARDS, CLAIM_OWNERSHIP } = BNSActions\n\n// =========== CONDITIONS / PERMISSIONS ================\n// Called by the actions for conditions\n// Return object with \"info\": describing condition,\n// \"status\" to check conditoin,\n// and optional \"special\" to give transaction forming specifications\n\nconst OUTS_2 = ({ tx=undefined }: any) => ({\n  info: 'Tx must have 2+ outputs',\n  status: () => atLeastTwoOutputs(tx)\n})\n\nconst OUT_0 = ({ tx=undefined }: any) => ({\n  info: 'Tx must have OP_RETURN @ output[0]',\n  status: () => isOpreturnOutput0(tx)\n})\n\nconst OUT_1 = ({ st, tx=undefined }: any) => ({\n  info: 'Tx must have notification address @ output[1]' ,\n  status: () => isNotify(st, tx)\n})\n\nconst NOTIFIED_MIN = ({ tx=undefined }: any) => ({\n  info: `Tx must have minimum ${MIN_NOTIFY} @ output[1]`,\n  status: () => didNotifyMin(tx)\n})\n\nconst BURNED_MIN = ({ tx=undefined }: any) => ({\n  info: `Tx must burn ${MIN_BURN} @ output[0]`,\n  status: () => didBurnMin(tx),\n  special: { output0value: MIN_BURN }\n})\n\nconst NO_OWNER = ({ st }: any) => ({\n  info: 'There must not be an existing owner',\n  status: () => !existsCurrentOwner(st)\n})\n\nconst EXISTS_OWNER = ({ st }: any) => ({\n  info: 'There must be existing owner',\n  status: () => existsCurrentOwner(st)\n})\n\nconst BURN_LAST_WIN = ({ st, tx=undefined }: any) => ({\n  info: 'Tx must burn the last ownership winning burn amount',\n  status: () => burnedPreviousRateMin(st, tx),\n  special: { output0value: getLastOwnerBurnedValue(st) }\n})\n\nconst USER_IS_OWNER = ({ st, address=undefined }: any) => ({\n  info: `User's address must match owner's address`,\n  status: () => isAddressTheCurrentOwner(st, address)\n})\n\nconst IS_OWNER_EXPIRED = ({ st }: any) => ({\n  info: 'Ownership must be expired at current parsed height',\n  status: () => isOwnerExpired(st)\n})\n\n\n// ============ USER ACTIONs ===============\n\n// Describe: If no owner, sender can claim ownership\nexport const claimOwnershipAction = (st: IBnsState, tx: any = undefined) => {\n  const args = { st, tx }\n  return {\n\n    type: CLAIM_OWNERSHIP,\n    info: 'Claim ownership of an available domain',\n\n    permissions: [\n      NO_OWNER(args)\n    ],\n\n    conditions: [\n      OUTS_2(args),\n      OUT_0(args),\n      OUT_1(args),\n      NOTIFIED_MIN(args),\n\n      BURNED_MIN(args)\n    ],\n\n    execute: () => {\n      // ownership source was already created for sure via updateSourceUserFromTx\n      // only have to set owner address to tx address\n      const height = getTxHeight(tx)\n      const senderAddress =  getTxInput0SourceUserAddress(tx)\n      setOwner(st, senderAddress)\n      getUser(st, senderAddress).winHeight = height\n      getUser(st, senderAddress).winTimestamp = getTxTimestamp(tx)\n      getUser(st, senderAddress).burnAmount = getTxOutput0BurnValue(tx)\n      console.log(\n        `${ st.domain.domainName } : ${ getTxHeight(tx) } height: new owner is ${ getUser(st, senderAddress).address }`\n      )\n    }\n  }\n}\n\n\n// Describe: If from current owner & burned past winning minimum, extend ownership.\nexport const currentOwnerRenewAction = (\n  st: IBnsState,\n  address: string,\n  tx: any = undefined\n) => {\n  const args = { st, address, tx }\n  return {\n\n    type: RENEW,\n    info: 'Extend ownership of this domain',\n\n    permissions: [\n      USER_IS_OWNER(args)\n    ],\n\n    conditions: [\n      OUTS_2(args),\n      OUT_0(args),\n      OUT_1(args),\n      NOTIFIED_MIN(args),\n\n      BURNED_MIN(args),\n      BURN_LAST_WIN(args)\n    ],\n\n    execute: () => {\n      const owner = getOwner(st)\n      // set owner's win height to current tx height therefore updating ownership\n      owner && (owner.winHeight = getTxHeight(tx))\n      owner && (owner.winTimestamp = getTxTimestamp(tx))\n      console.log(\n        `${ st.domain.domainName } : ${ getTxHeight(tx) } height: owner extended ownership ${ owner?.address }`\n      )\n    }\n  }\n}\n\n// Describe: update forwarding information.\nexport const updateForwardingInfoAction = (\n  st: IBnsState,\n  tx: any = undefined\n) => {\n  const args = { st, tx }\n  return {\n\n    type: ONLY_FORWARDS,\n    info: \"Only update forwarding information\",\n\n    permissions: [],\n\n    conditions: [\n      OUTS_2(args),\n      OUT_0(args),\n      OUT_1(args),\n      NOTIFIED_MIN(args)\n    ],\n\n    execute: () => {\n      readEmbeddedData(st, tx)\n    }\n  }\n}\n\n// =========== AUTOMATIC PARSED ACTIONS NOT BY USERS (e.g. TIME BASED) ===========\n\n// Describe: if OWNERSHIP_DURATION_BY_BLOCKS blocks since ownership update, no owner again\nexport const autoCheckForOwnerExpired = (st: IBnsState) => {\n  const args = { st }\n  return {\n    info: 'Existing ownerships that expire are removed',\n\n    conditions: [\n      EXISTS_OWNER(args),\n      IS_OWNER_EXPIRED(args)\n    ],\n\n    execute: () => {\n      clearOwner(st)\n      console.log(st.domain.domainName, getParsedHeight(st), 'ownership expired')\n    }\n  }\n}","import { calcP2WSH } from './calcP2WSH'\nimport { newState } from './initialState'\nimport * as actions from './actions'\nimport { IBnsState } from './types'\nimport {\n  setParsedHeight,\n  updateSourceUserFromTx,\n  getTxHeight,\n  updateOwnerHistory\n } from './formathelpers'\n\n/**\n * Returns ownership and notification information objects.\n * @param   {Array<any>}  notificationsHistory  - Array of any tx with notificationsAddress.\n * @param   {string}      domainName            - Full domainName to use (e.g. 'satoshi.btc').\n * @param   {number}      currentHeight         - Current blockheight of the network chain selected.\n * @param   {string}      networkChoice         - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @returns {IBnsState}                         - BNS state describing object.\n */\nexport const calcBnsState = (\n  notificationsHistory: Array<any>,\n  domainName: string,\n  currentHeight: number,\n  networkChoice: string\n): IBnsState => {\n\n  // initialize temporary derivation state\n  const st = JSON.parse(JSON.stringify(newState)); // deep object clone\n  st.domain.domainName = domainName\n  st.chain && (st.chain.currentHeight = currentHeight)\n  st.domain.notificationAddress = calcP2WSH(domainName, networkChoice)?.notificationsAddress || ''\n\n  // Sorting history from earliest to latest\n  // reversing should speed it up if not complete it\n  st.domain.txHistory = (notificationsHistory\n    .slice().reverse()\n    .sort((prev, next) => {\n      const aBlockHeight = prev.status.block_height\n      const bBlockHeight = next.status.block_height\n      return aBlockHeight - bBlockHeight\n    })\n  )\n\n  // iterate with blockheights of relevant tx to derive st state\n  // Each tx blockheight serves as reference time\n  st.domain.txHistory.forEach((tx: any) => {\n\n    // update current chain's parsed height based on tx confirmed height\n    setParsedHeight(st, getTxHeight(tx))\n\n    // update or create new basic user info based on source address @ input0\n    // this includes user's NONCE set to height of the user's tx prior to this one\n    updateSourceUserFromTx(st, tx)\n\n    // check if owner expired\n    actions.runAllAutomaticChecks(st)\n\n    // run all possible actions\n    // starting with reading embedded data\n    actions.runAllUserActions(st, tx)\n\n    // update nonce\n    // after this tx, this tx height is the last tx height, so the new nonce\n    updateSourceUserFromTx(st, tx)\n\n    // update ownership history each tx even if not owner\n    updateOwnerHistory(st)\n  })\n\n  // final check for current block height\n  setParsedHeight(st, currentHeight)\n\n  actions.autoCheckForOwnerExpired(st)\n\n  return st\n}\n\n","import {\n  currentOwnerRenewAction,\n  claimOwnershipAction,\n  autoCheckForOwnerExpired,\n  updateForwardingInfoAction\n} from './actions'\nimport { IBnsState } from './../types/'\nimport {\n  getTxInput0SourceUserAddress\n} from './../formathelpers'\n\n/****************************************************************************************\n * Returns what actions are available for specific user address at current state\n */\nexport const runAllActionPermissionChecks = (st: IBnsState, address: string) => {\n\n  // Edit this list to include more actions for checks\n  const allActions = [\n    updateForwardingInfoAction(st),\n    currentOwnerRenewAction(st, address),\n    claimOwnershipAction(st)\n  ]\n\n  // check which actions are doable\n  const checkedActions: any[] = []\n  allActions.forEach(action => {\n\n    // check each permission in each action\n    const checkedPermissions: any[] = []\n    action.permissions.forEach((permission: any) => {\n      const isAllowed = permission.status()\n\n      // add to list of permissions checked in this action & their display info\n      checkedPermissions.push({\n        isAllowed,\n        info: permission.info\n      })\n    })\n\n    // grab every special rule so can put together tx based on them\n    const specialTxDirections: any[] = []\n    action.permissions.forEach((permission: any) => {\n      if ('special' in permission) specialTxDirections.push({\n        info: permission.info,\n        rules: permission.special\n      })\n    })\n    action.conditions.forEach((condition: any) => {\n      if ('special' in condition) specialTxDirections.push({\n        info: condition.info,\n        rules: condition.special\n      })\n    })\n\n\n    // add to list of all actions with summary of all their permissions checks\n    checkedActions.push({\n      type: action.type,\n      info: action.info,\n      isUsable: checkedPermissions.every(permission => permission.isAllowed),\n      permissionList: checkedPermissions,\n      special: specialTxDirections\n    })\n  })\n\n  // return array of doable actions\n  return checkedActions\n}\n\n/****************************************************************************************\n * Executes all actions possible by user that sent tx.\n * Nothing returned.\n */\nexport const runAllUserActions = (st: IBnsState, tx: any) => {\n\n  // edit this list\n  const allUserActions = [\n    updateForwardingInfoAction(st, tx),\n    currentOwnerRenewAction(st, getTxInput0SourceUserAddress(tx), tx),\n    claimOwnershipAction(st, tx)\n  ]\n\n  allUserActions.forEach((action: any) => {\n\n    // check that all conditions & permissions are true\n    const okConditions = action.conditions.reduce(\n      (areAllConditionsMet: boolean, eaCondition: any) => areAllConditionsMet && eaCondition.status()\n    , true)\n\n    const okPermissions = action.permissions.reduce(\n      (areAllPermissionsMet: boolean, eaPermission: any) => areAllPermissionsMet && eaPermission.status()\n    , true)\n\n    if (okConditions && okPermissions) action.execute()\n  })\n}\n\n/****************************************************************************************\n * Executes non-user actions like ownership expiration over time.\n * Nothing returned.\n */\nexport const runAllAutomaticChecks = (st: IBnsState) => {\n\n  // list of all automatic actions\n  const allAutoChecks = [\n    autoCheckForOwnerExpired(st)\n  ]\n\n  allAutoChecks.forEach(action => {\n    // check that all conditions are true\n    const ok = action.conditions.reduce((areAllConditionsMet, eaCondition) => (\n      areAllConditionsMet && eaCondition.status()\n    ), true)\n    if (ok) action.execute()\n  })\n}\n\n\n","import { encrypt } from './cryptography'\n\n/**\n * Returns number of bytes the string has after encryption.\n * Encryption is used directly to measure result accurately\n * even if cryption method changes in the future.\n */\nexport const stringByteCount = (data: string): number => {\n  const cipher: Buffer = encrypt(data, 'arbitrary key and iv seeding string')\n  // returns buffer, so length should be bytesize\n  return cipher.length;\n}","import axios from 'axios'\n\n// Documentation\n// https://github.com/Blockstream/esplora/blob/esplora_v2.00/API.md\n// https://github.com/Blockstream/esplora/blob/master/API.md#post-tx\n\nconst API_PATH_TESTNET = 'https://blockstream.info/testnet/api/'\nconst API_PATH_BITCOIN = 'https://blockstream.info/api/'\nconst API_RATE_LIMIT = 0.6    // guessing calls per second cap\n\n// (TODO) a single instance of async task executing loop per API to ensure rate limit holds per API\n// Meanwhile calling function can use its own busy flag to ensure promises are resolved before repeats.\n// RawTx requests and multipage history (length > 25) are main risks.\n\n\nexport async function getHeight (strNetwork: string) {\n  const API_PATH = (\n    (strNetwork === 'testnet')\n    ? API_PATH_TESTNET\n    : API_PATH_BITCOIN\n  ) + 'blocks/tip/height'\n  console.log(API_PATH)\n\n  try {\n\n    const res = await axios.get(API_PATH)\n    console.log('getHeight', res.data)\n    return res.data\n\n  } catch (e) {\n\n    console.log(e)\n    await rateLimit()\n    throw new Error('Blockstream.info API height get failed')\n  }\n\n}\n\n/**\n * API request for each UTXO in array to get the raw tx necessary for psbt.\n * @param     {Array}     arrayUtxo       Array of UTXO.\n * @param     {string}    strNetwork      Network type: 'bitcoin' or 'testnet'.\n * @returns   {object}                    { arrayTx: arrayTx w/ .hex, error: string, fails: number }\n */\nexport async function addRawTxToArray (arrayUtxo: Array<any>, strNetwork: string) {\n  // to track failures indecies\n  let erroredOutputs = ''\n\n  // abort if empty array\n  if (arrayUtxo?.length === 0) { return { arrayUtxo, error: 'no utxo' } }\n\n  // clone array\n  const arrayUtxoWithHex = [...arrayUtxo]\n\n  // iterate through original utxo and add hex onto clone, 2 tries max each\n  for (const [indexString, utxo] of Object.entries(arrayUtxo)) {\n    // indexString is a string so convert for array index use\n    const index = parseInt(indexString, 10)\n\n    let tries = 2\n    while (tries-- > 0) {\n      try {\n        const { txid } = utxo\n\n        // raw tx hex path on API\n        const API_PATH = (\n          (strNetwork === 'testnet')\n            ? API_PATH_TESTNET\n            : API_PATH_BITCOIN\n        ) + 'tx/' + txid + '/hex'\n        console.log(API_PATH)\n\n        const res = await axios.get(API_PATH)\n\n        console.log(index, 'index utxo has raw hex of', res.data)\n\n        // add hex data into cloned utxo array\n        arrayUtxoWithHex[index].hex = res.data\n\n        // break while loop if got data, don't need more tries\n        break\n\n      } catch(e) {\n        // keeping track of failures\n        console.log('fail detected', indexString, utxo, tries, erroredOutputs, e)\n        // keep track of indecies missing hex\n        erroredOutputs += indexString + ' '\n      }\n\n      await rateLimit()\n    }\n  }\n\n  // return summary object\n  return { arrayUtxoWithHex, erroredOutputs }\n}\n\n/**\n * API request for all utxo for this address\n * @param     {string}    address       Bitcoin address.\n * @param     {string}    strNetwork    Network type: 'bitcoin' or 'testnet'.\n * @returns   {Array}                   Array of UTXO.\n */\nexport async function getUTXOList (address: string, strNetwork: string) {\n  const API_PATH = (\n    (strNetwork === 'testnet')\n    ? API_PATH_TESTNET\n    : API_PATH_BITCOIN\n  ) + 'address/' + address + '/utxo'\n  console.log(API_PATH)\n\n  try {\n    const res = await axios.get(API_PATH)\n\n    console.log('getUTXOList', res.data)\n\n    await rateLimit()\n\n    return res.data\n\n  } catch (e) {\n\n    console.log(e)\n    await rateLimit()\n    throw new Error('Blockstream.info API access failed')\n\n  }\n}\n\n/**\n * API request all transactions for a specific address.\n * parameters: (address, network).\n * @param   {string} address    - address on network.\n * @param   {string} network    - 'testnet' or 'bitcoin' to match bitcoinjs-lib.\n * @returns {Array<object>}     -  Array of tx objects.\n */\nexport async function getAddressHistory (address: string, network: string) {\n  // https://blockstream.info/testnet/api/address/tb1qprkzdaqt5jkxrhy57ngvra8k0rvq63ulksz8cx85qwke3myhjrtq9s6nj3/txs/chain\n  // GET /address/:address/txs/chain[/:last_seen_txid]\n  // Get confirmed transaction history for the specified address/scripthash, sorted with newest first.\n  // Returns 25 transactions per page. More can be requested by specifying the last txid seen by the previous query.\n\n  const CONFIRMED_PAGES_ADDON = '/txs/chain'\n\n  const API_PATH = (\n    (network === 'testnet')\n    ? API_PATH_TESTNET\n    : API_PATH_BITCOIN\n  ) + 'address/' + address + CONFIRMED_PAGES_ADDON\n\n  try {\n    const res = await axios.get(API_PATH)\n\n    console.log('blockstream.info API address history request', res)\n    return res.data\n\n  } catch (e) {\n    console.log(e)\n    throw new Error('Blockstream.info API access failed')\n  }\n}\n\n/**\n * Broadcasts content onto the blockchain.\n * parameters: (content, network).\n * @param   {string}  content  - raw hex content of transaction.\n * @param   {string}  network  - 'testnet' or 'bitcoin' to match bitcoinjs-lib.\n * @returns {string}           - Successful broadcast returns txid, otherwise error reason.\n */\nexport async function txPush (content: string, network: string) {\n\n  const API_PATH =\n    (network === 'testnet')\n    ? API_PATH_TESTNET + 'broadcast'\n    : API_PATH_BITCOIN + 'broadcast'\n\n  try {\n    const res = await axios.get(API_PATH, {\n      params: {\n        tx: content\n      }\n    })\n\n    // console.log(res)\n    console.log('Broadcasted on', network)\n\n    // returns txid on success\n    return { txid: res.data }\n\n  } catch (e) {\n    console.log('Failed pushtx', network, e)\n\n    // console.log('error main message:', e.response.data)\n    return { error: e.response.data }\n  }\n}\n\n// Slow down based on rate limit.\n// Convert hz to time in milliseconds.\nasync function rateLimit () {\n  return new Promise(r => setTimeout(r, 1000.0 / API_RATE_LIMIT))\n}\n","import { IState, Dispatch, ActionTypes } from '../../interfaces'\nimport { calcP2WSH, calcBnsState } from '../../helpers/bns'\nimport { getAddressHistory, getHeight } from './../../api/blockstream'\nconst { STORE_SEARCH_RESULTS_FAIL, STORE_SEARCH_RESULTS } = ActionTypes;\n\n/**\n * Get address,\n * tx with notification address,\n * calculate owner,\n * find current owner's forwarding info,\n * send/dispatch to reducer to store important data found\n */\nexport const searchAction = async (state: IState, dispatch: Dispatch, router: any = undefined) => {\n  const domainName = state.alias + state.extension\n  // stop if no alias submitted, nothing to save to state\n  if (!state.alias) { return undefined }\n\n  // find address for this alias\n  const { notificationsAddress } = calcP2WSH(domainName, state.network)\n\n  // (TODO) should check if max length for API reached to know if to use pages & append value (25?)\n\n  try {\n\n    // 1. Get current blockheight from API so ownership is using latest possible info\n\n    const currentHeight = await getHeight(state.network)\n\n    // 2. Get API response for all tx history of this address\n    // This will grab all tx that \"notified\" this address by sending to it\n    // Upon failure error should be caught in this function\n    const notificationsTxHistory = await getAddressHistory(notificationsAddress, state.network)\n\n    // calculate bns data from this history via helper functions\n    const { domain } = calcBnsState(\n      notificationsTxHistory,\n      domainName,\n      currentHeight,\n      state.network\n    )\n\n    // 3. if navigated via id, use router to navigate home w/o id in url\n    if (router) { router?.push('/') }\n\n    // store data\n    return dispatch({\n      type: STORE_SEARCH_RESULTS,\n      payload: {\n        alias: state.alias,\n        domain,\n        chain: {\n          height: currentHeight\n        }\n      }\n    })\n\n  } catch (e) {\n    console.log(e)\n    // still updating the notification address\n    return dispatch({\n      type: STORE_SEARCH_RESULTS_FAIL,\n      payload: {\n        alias: state.alias,               // can save alias\n        domainName,\n        notificationsAddress              // can save this easy derivation\n      }\n    });\n  }\n}\n\n// test address tb1qprkzdaqt5jkxrhy57ngvra8k0rvq63ulksz8cx85qwke3myhjrtq9s6nj3\n// has mixture of tx sent to it on testnet\n// https://blockstream.info/testnet/address/tb1qprkzdaqt5jkxrhy57ngvra8k0rvq63ulksz8cx85qwke3myhjrtq9s6nj3","import * as bitcoin from 'bitcoinjs-lib'\r\nimport bip39 from 'bip39'\r\n\r\n\r\n/**\r\n * Scans the address for utxo on a given network.\r\n * (In BNS would be useful for wallet and notification address)\r\n */\r\n// export const scanAddress = async (address: string, strNetwork: string) => {\r\n  // create array of utxo\r\n\r\n\r\n  // add full tx hex to that array (might take time)\r\n// }\r\n\r\n/**\r\n * Make new mnemonic for p2wpkh m/44'/0'/0'/0/0 address and WIF.\r\n * @param     {string}    strNetwork    String describing network ('bitcoin', 'testnet').\r\n * @returns   {object}                  Object { mnemonic, WIF, address } - all strings.\r\n */\r\nexport const createNewWallet = (strNetwork: string) => {\r\n  // network version. bitcoin or testnet\r\n  const network = bitcoin.networks[strNetwork]\r\n  // create backup phrase\r\n  const mnemonic = bip39.generateMnemonic()\r\n  const seedBuffer = bip39.mnemonicToSeed(mnemonic)\r\n  // create derivation master node\r\n  const masterNode = bitcoin.bip32.fromSeed(seedBuffer, network)\r\n  // derive m/44'/0'/0'/0 /0 node\r\n  const childNode0 = masterNode.derivePath(\"m/44'/0'/0'\").derivePath(\"0/0\")\r\n  // get private key in wallet import format for that child node\r\n  const WIF = childNode0.toWIF()\r\n  // derive a standard p2wpkh address from that WIF\r\n  const keyPair = bitcoin.ECPair.fromWIF(WIF, network)\r\n  const address = bitcoin.payments.p2wpkh({ pubkey: keyPair.publicKey, network }).address\r\n\r\n  return { mnemonic, WIF, address }\r\n}\r\n\r\n/**\r\n * Load p2wpkh m/44'/0'/0'/0/0 wallet info from mnemonic.\r\n * @param     {string}    strMnemonic     Mnemonic string of 12 words as described in bip39.\r\n * @param     {string}    strNetwork      String describing network ('bitcoin', 'testnet').\r\n * @returns   {object}                    Object { mnemonic, WIF, address } - all strings.\r\n */\r\nexport const loadWallet = (strMnemonic: string, strNetwork: string) => {\r\n  // network version. bitcoin or testnet\r\n  const network = bitcoin.networks[strNetwork]\r\n  const seedBuffer = bip39.mnemonicToSeed(strMnemonic)\r\n  // create derivation master node\r\n  const masterNode = bitcoin.bip32.fromSeed(seedBuffer, network)\r\n  // derive m/44'/0'/0'/0 /0 node\r\n  const childNode0 = masterNode.derivePath(\"m/44'/0'/0'\").derivePath(\"0/0\")\r\n  // get private key in wallet import format for that child node\r\n  const WIF = childNode0.toWIF()\r\n  // derive a standard p2wpkh address from that WIF\r\n  const keyPair = bitcoin.ECPair.fromWIF(WIF, network)\r\n  const address = bitcoin.payments.p2wpkh({ pubkey: keyPair.publicKey, network }).address\r\n\r\n  return { mnemonic: strMnemonic, WIF, address }\r\n}\r\n\r\n\r\n//\r\n/**\r\n * Parse UTXO array to get total unspent balance in satoshi.\r\n * @param     {Array}    utxoArray      Array of UTXO objects with '.value' field in satoshi.\r\n * @returns   {number}                  Total number of unspent satoshi.\r\n */\r\nexport function getUnspentSum(utxoArray: Array<any>): number {\r\n\r\n  const sumSats = utxoArray?.reduce(\r\n    (sum: number, utxo: any) => sum + utxo.value\r\n    , 0) || 0\r\n\r\n  return sumSats\r\n}","import { IState, Dispatch } from '../../interfaces'\nimport { ActionTypes } from './../../interfaces'\n\nimport { createNewWallet, loadWallet } from './../../helpers/bitcoin'\n\nconst { NEW_WALLET } = ActionTypes;\n\n/**\n * Create new wallet address & backup.\n * If mnemonic is provided, wallet is generated from that.\n */\nexport const createNewWalletAction = async (\n  state: IState, dispatch: Dispatch, strMnemonic: string = ''\n) => {\n\n  // load all the wallet info from mnemonic or generate new random mnemonic to do it\n  const { mnemonic, WIF, address } = (\n    (strMnemonic === '')\n      ? createNewWallet(state.network)\n      : loadWallet(strMnemonic, state.network)\n  )\n\n  return dispatch({\n    type: NEW_WALLET,\n    payload: { mnemonic, WIF, address }\n  })\n}","import { IState, Dispatch, ActionTypes } from '../../interfaces'\nconst { CHANGE_PAGE_INFO } = ActionTypes;\n\n\n/**\n * Request to change page info that's checked for validity here\n */\nexport const changePageInfoAction = async (state: IState, dispatch: Dispatch, page: number) => {\n  // for now no checks\n\n  const { pageInfo } = state\n  pageInfo.current = page\n\n  return dispatch({\n    type: CHANGE_PAGE_INFO,\n    payload: pageInfo\n  })\n}","import { IState, Dispatch, ActionTypes } from '../../interfaces'\nimport { calcP2WSH, calcBnsState } from '../../helpers/bns'\nimport { getAddressHistory, getUTXOList, addRawTxToArray, getHeight } from '../../api/blockstream'\nconst { UPDATE_WALLET, UPDATE_DOMAIN, ACTION_FAIL } = ActionTypes\n\n/**\n * Scans the address for utxo on a given network (w/ API).\n * Add hex of each tx that created utxo (for psbt).\n * addressType is one of enums ActionTypes that's either UPDATE_WALLET or UPDATE_NOTIFICATION.\n * If scanning wallet, then update wallet state.\n * If scanning notification address, then update notification state.\n * Notification scan will reproduce address scan first before getting details.\n */\nexport const scanAddressFullyAction = async (\n  state: IState,\n  dispatch: Dispatch,\n  addressType: ActionTypes\n) => {\n  const domainName = state.alias + state.extension\n\n  // wallet address scan\n  if (addressType === UPDATE_WALLET) {\n    // wallet address\n\n    try {\n\n      // 1. get address TX history\n\n      const walletAddress = state.wallet.address\n      const walletTxHistory = await getAddressHistory(walletAddress, state.network)\n\n      // 2. get address UTXO list (could also calculate from tx history or API)\n\n      const utxoListWalletAddress = await getUTXOList(walletAddress, state.network)\n\n      // 3. get raw tx for each UTXO (psbt requirement...)\n\n      const { arrayUtxoWithHex, erroredOutputs } = await addRawTxToArray(utxoListWalletAddress, state.network)\n\n      console.log({ walletAddress, walletTxHistory, utxoListWalletAddress, arrayUtxoWithHex, erroredOutputs })\n\n      return dispatch({\n        type: UPDATE_WALLET,\n        payload: {\n          wallet: {\n            txHistory: walletTxHistory,\n            utxoList: arrayUtxoWithHex\n          }\n        }\n      })\n\n    } catch (e) {\n      console.log('Wallet address scan failed')\n      console.log(e)\n      // abort\n      return dispatch({\n        type: ACTION_FAIL,\n        payload: {}\n      });\n    }\n  }\n\n  // notification address scan\n  if (addressType === UPDATE_DOMAIN) {\n\n\n    try {\n\n      // 1. get current blockheight from API so ownership is using latest possible info\n\n      const currentHeight = await getHeight(state.network)\n\n      // 2. get address TX history\n\n      const { notificationsAddress } = calcP2WSH(domainName, state.network)\n      const notificationsTxHistory = await getAddressHistory(notificationsAddress, state.network)\n\n\n      // 3. get address UTXO list (could also calculate from tx history or API)\n\n      const utxoListNotificationAddress = await getUTXOList(notificationsAddress, state.network)\n\n      // 4. get raw tx for each UTXO (psbt requirement...)\n\n      const { arrayUtxoWithHex, erroredOutputs } = await addRawTxToArray(utxoListNotificationAddress, state.network)\n\n      // (TODO) add utxo param & use to calcBnsState\n      const { domain } = calcBnsState(\n        notificationsTxHistory,\n        domainName,\n        currentHeight,\n        state.network\n      )\n\n      console.log({ domain, utxoListNotificationAddress, arrayUtxoWithHex, erroredOutputs })\n\n      return dispatch({\n        type: UPDATE_DOMAIN,\n        payload: {\n          domain: {\n            ...domain,\n            utxoList: arrayUtxoWithHex\n          },\n          chain: {\n            height: currentHeight\n          }\n        }\n      })\n\n    } catch (e) {\n      console.log('Notification address scan failed')\n      console.log(e)\n      // abort\n      return dispatch({\n        type: ACTION_FAIL,\n        payload: {}\n      });\n    }\n\n  }\n\n  throw new Error('unexpected address type')\n}","import { IState, Dispatch, ActionTypes } from '../../interfaces'\nconst { CHOICES_BNS_ACTION } = ActionTypes;\n\n/**\n * Cleans up the entered string including removing next line characters\n */\nexport const changeChoicesBNSAction = async (\n  state: IState,\n  dispatch: Dispatch,\n  choices: any\n) => {\n\n  return dispatch({\n    type: CHOICES_BNS_ACTION,\n    payload: choices\n  })\n}\n\n","import React from 'react'\nimport { Store, getOwner } from './../../store'\nimport { Link } from 'react-router-dom'\n\nimport styles from './SearchResults.module.css'\nimport timeDiff from './../../helpers/timediff'\nimport { OWNERSHIP_DURATION_BY_BLOCKS, interpretFw, findLatestForwards } from '../../helpers/bns/'\n\n\nexport const SearchResults = () => {\n  // global state\n  const { state } = React.useContext(Store)\n\n  // temp object to keep track of timers\n  let diff = { isExpired: true, dh: '' }\n\n  // calc time left in ownership via block heights\n  const owner = getOwner(state)\n  if (owner) {\n    const heightOfExpiration = owner.winHeight + OWNERSHIP_DURATION_BY_BLOCKS\n    const blocksUntilExpires = (heightOfExpiration - state.chain.height)\n    const msUntilExpires = blocksUntilExpires * 10.0 * 60.0 * 1000.0\n    diff = timeDiff(msUntilExpires, 0)\n  }\n\n  // account expires or isExpired information\n  const expirationMsg = () => {\n    // abort if no known ownership history\n    if (!owner) return ('')\n    return (\n      <div\n        className={ diff.isExpired ? styles.isExpired : styles.notisExpired }\n      >\n        { !diff.isExpired && ('expires in ' + diff.dh) }\n      </div>\n    )\n  }\n\n  // calculate latest forwards\n  const latestForwards = owner ? findLatestForwards(owner.forwards) : []\n\n  return (\n    <>\n      <div className={ styles.wrapper }>\n        <div\n          className={ styles.describe }\n        >\n          { latestForwards.length } matches on { state.network } {'  '}\n          { expirationMsg() }\n        </div>\n        <div className={ styles.listContainer } >\n          {(diff.isExpired) && (\n            <Link\n              to='/create'\n              className={ styles.createLink }\n            >\n              Domain available!\n            </Link>\n          )}\n        </div>\n        <div className={ styles.listContainer } >\n          {\n            latestForwards.map(fw => {\n              const ifw = interpretFw(fw)\n              if (ifw.render) {\n                return (\n                  <a\n                    key={ fw.network }\n                    className={ styles.listItem }\n                    href={ encodeURI(ifw?.link || '') || undefined }\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <span className={ styles.key }>{ ifw.where }</span>\n                    { ifw.what }\n                  </a>\n                )\n              } else {\n                return ('')\n              }\n            })\n          }\n        </div>\n      </div>\n    </>\n  )\n}\n","\n/**\n * Difference between timestampMsec timestamp relative to current time or another reference referenceTimestampMsec timestamp.\n * Returns days-hours-minutes string, days-hours string, if expired, and ms of difference.\n * @param   {number}  timestampMsec               Timestamp of interest (milliseconds).\n * @param   {number}  [referenceTimestampMsec=]   Reference timestamp (milliseconds).\n * @returns {object}                              { dhm, dh, isExpired, msDiff }.\n */\nexport default function timeDiff(\n  timestampMsec: number, referenceTimestampMsec: number = Date.now()\n): {\n  dhm: string\n  dh: string\n  isExpired: boolean\n  msDiff: number\n} {\n  let diff = timestampMsec - referenceTimestampMsec\n  // note sign\n  const isExpired = (diff <= 0)\n  // mod away higher time frames\n  diff = Math.abs(diff)\n  const d = Math.floor(diff / (1000 * 60 * 60 * 24))\n  // remove days\n  diff -= d * (1000 * 60 * 60 * 24)\n  const h = Math.floor(diff / (1000 * 60 * 60)) % 24\n  // remove hours\n  diff -= h * (1000 * 60 * 60)\n  const m = Math.floor(diff / (1000 * 60)) % 60\n  return {\n    dhm: `${d} days ${h} hours ${m} min`,\n    dh: `${d} days ${h} hours`,\n    isExpired,        // time difference is to the past of now? (boolean)\n    msDiff: diff\n  };\n}","  // take array of all forwards for owner and return array with only latest forwards\nexport const findLatestForwards = (forwards: Array<any>) => {\n  // simplest would be to go through object where keys of cloned network would overwrite\n  // sort first for simplicity\n  const sortedForwards = [...forwards].sort((prev, next) => {\n    // sorts by index proportional to block height and time\n    const prevHeight = prev.updateHeight\n    const nextHeight = next.updateHeight\n    return prevHeight - nextHeight\n  })\n  // now just overwrite values for same networks in order of sorted array\n  const currentNetworks: {[key: string]: any} = {}\n  sortedForwards.forEach(eaForward => {\n    currentNetworks[eaForward.network] = eaForward\n  })\n  // return just array of values, networks still part of values as well\n  return Object.values(currentNetworks)\n}\n","/**\n * Reads a single forward info object to interpret its values\n * as where the forwarding address should be used, what it is, and what link to use.\n * Returns {what: string, where: string, link: string, render: boolean}.\n */\nexport function interpretFw (\n  fw: { network: string, address: string, updateHeight: number, updateTimestamp: number }\n) {\n  // blank address means it was removed\n  // ! at start means it's a command, not a network\n  if (fw.address === '' || fw.network.startsWith('!')) {\n    return {\n      render: false\n    }\n  }\n\n  if (fw.network === 'p2wsh' || fw.network === 'btc' || fw.network === 'p2pkh') {\n    return {\n      where: 'btc:',\n      what: (\n        fw.address\n      ),\n      link: (\n        'https://blockstream.info/address/' + fw.address\n      ),\n      render: true\n    }\n  }\n\n  if (fw.network === 'http' || fw.network === 'https' || fw.network === 'url' || fw.network === 'web') {\n    return {\n      where: 'https://',\n      what: fw.address,\n      link: 'https://' + fw.address,\n      render: true\n    }\n  }\n\n  if (fw.network === 'twitter') {\n    return {\n      where: 'twitter.com/',\n      what: fw.address,\n      link: 'https://twitter.com/' + fw.address,\n      render: true\n    }\n  }\n\n  if (fw.network === 'github') {\n    return {\n      where: 'github.com/',\n      what: fw.address,\n      link: 'https://github.com/' + fw.address,\n      render: true\n    }\n  }\n\n  if (fw.network === 'youtube') {\n    return {\n      where: 'youtu.be/',\n      what: fw.address,\n      link: 'https://www.youtube.com/watch?v=' + fw.address,\n      render: true\n    }\n  }\n\n  // if unknown forward network, no link, and the rest is shown as is\n  return {\n    where: fw.network,\n    what: fw.address,\n    link: undefined,\n    render: true\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport { RoundButton } from './../general/RoundButton'\nimport { Store } from './../../store/'\nimport { searchAction, changeAliasAction } from './../../store/actions/'\nimport { SearchResults } from './../SearchResults'\nimport styles from './HomeContent.module.css'\n\nexport const HomeContent = (props: any): JSX.Element => {\n  const { state, dispatch } = React.useContext(Store)\n\n  // if page is loaded with #/id/:alias format\n  // this will change alias to that one\n  // then it will navigate to '/'\n  // and then it will do search with new alias\n  // http://localhost:3000/#/id/satoshi\n  const alias = props?.match?.params?.alias\n  if (alias) {\n    searchAction({...state, alias}, dispatch, props.history)\n  }\n\n  // is serach done\n  const isSearchDone = () => state.domain.checkedHistory\n\n  // put the textarea (by ref) into focus on mount and move caret to end\n  const inputEl = useRef<HTMLTextAreaElement>(null)\n  useEffect(() => {\n    if (inputEl && inputEl.current) {\n      inputEl.current.selectionEnd = inputEl.current.value.length\n      inputEl.current.selectionStart = inputEl.current.value.length\n      inputEl.current.focus()\n    }\n  }, [])\n\n  const placeHolder = 'satoshi'\n  return (\n    <>\n      <div className={\n        !isSearchDone()\n          ? [styles.lblMainTitle, styles.noselect].join(' ')\n          : [styles.lblMainTitle, styles.lblMainTitleAfter, styles.noselect].join(' ')\n      }>\n        <span>Bitcoin</span> Name System\n      </div>\n      <div className={\n        !isSearchDone()\n          ? styles.divSearch\n          : [styles.divSearch, styles.divSearchAfter].join(' ')\n      }>\n        <textarea\n          id=\"txtSearch\"\n          className={ styles.txtSearch }\n          cols={ 30 }\n          rows={ 1 }\n          spellCheck={ false }\n          value={ state.alias }\n          placeholder={ placeHolder }\n          ref={ inputEl }\n          onChange={ e => changeAliasAction(state, dispatch, e?.target?.value) }\n          onKeyPress={ e => { e.key === 'Enter' && searchAction(state, dispatch) } }\n        ></textarea>\n        <RoundButton\n          sizebutton='2.6'\n          onClick={ () => searchAction(state, dispatch) }\n        >\n          .btc\n        </RoundButton>\n      </div>\n      <div style={{ display: isSearchDone() ? 'block' : 'none' }}>\n        <SearchResults />\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { HomeContent } from './../components/HomeContent'\n\nconst Home = (props: any): JSX.Element => {\n  return (\n    <>\n      <HomeContent { ...props } />\n    </>\n  )\n}\nexport default Home","import React from 'react'\nimport { Store } from './../../store/'\nimport styles from './AboutContent.module.css'\n\nexport const AboutContent = () => {\n  const { state } = React.useContext(Store)\n\n  return (\n    <>\n      <div>\n        About page\n      </div>\n      <div className={ styles.wrapper }>\n        <pre>\n          { JSON.stringify({ ...state }, null, 2) }\n        </pre>\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { AboutContent } from './../components/AboutContent'\n\nexport default function About(): JSX.Element {\n  return (\n    <>\n      <AboutContent />\n    </>\n  )\n}\n\n// for lazy loading:\n// const RoundButton = React.lazy<any>(() => import('../components/RoundButton')\n// <React.Suspense\n//   fallback={\n//     <div>loading...</div>\n//   }\n// >\n// </React.Suspense>\n","import React, { useState } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P1RestoreOrBackup.module.css'\nimport { createNewWalletAction, changePageInfoAction } from '../../../store/actions/'\nimport sanitize from './../../../helpers/sanitize'\nimport { Store } from './../../../store/'\n\nenum pages {\n  ROOT,\n  NEW_WALLET,\n  LOAD_BACKUP\n}\n\n// restore backup or create new\nexport const P1RestoreOrBackup = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n  const [ page, setPage ] = useState(pages.ROOT) // local state\n  const [ backup, setBackup ] = useState('') // local state\n\n  // count non empty string strings separated by spaces\n  const wordCount = backup.split(' ').filter(v => v !== '').length\n\n  return (\n    <div className={ styles.wrapper }>\n\n      {/* ROOT PAGE */}\n      <div\n        style={{ display: page === pages.ROOT ? 'block' : 'none' }}\n      >\n        <div\n          className={ styles.title }\n        >\n          Need <span className={ styles.Orange }>BTC</span> address to control<br />\n          the domain name\n        </div>\n        <div\n          className={ styles.buttonWrapper }\n        >\n          <RoundButton\n            show={ (state.wallet.mnemonic.length > 0) ? 'false' : 'true' }\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n              createNewWalletAction(state, dispatch)\n            }}\n          >\n            I need a new wallet\n          </RoundButton>\n          <RoundButton\n            show={ (state.wallet.mnemonic.length > 0) ? 'true' : 'false' }\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n            }}\n          >\n            Current backup\n          </RoundButton>\n          <RoundButton\n            onClick={() => {\n              setPage(pages.LOAD_BACKUP)\n            }}\n          >\n            Restore from backup\n          </RoundButton>\n          <RoundButton\n            show={ (!!state.wallet?.address).toString() }\n            onClick={() => {\n              changePageInfoAction(state, dispatch, 2)\n            }}\n            next='true'\n            colorbutton={'var(--colorHighlight)'}\n          >\n            Don't change wallet\n          </RoundButton>\n        </div>\n      </div>\n\n      {/* NEW_WALLET PAGE */ }\n\n      <div\n        className={ styles.contentWrapper }\n        style={{ display: page === pages.NEW_WALLET ? 'flex' : 'none' }}\n      >\n        <div className={ styles.describe }>\n          Randomly generated for domain control\n          <br /><br />\n          Backup this private phrase\n          or you will lose access\n        </div>\n        <div\n          id='divBackup'\n          spellCheck={ false }\n          className={ styles.backup }\n          onClick={ () => {\n            // select div entire contents\n            const thisDiv = document?.getElementById('divBackup')\n            if (thisDiv) {\n              window.getSelection()?.selectAllChildren(thisDiv)\n            }\n          }}\n        >\n          { state.wallet.mnemonic }\n        </div>\n        <div className={ styles.buttonWrapper } >\n          <RoundButton\n            onClick={() => {\n              setPage(pages.ROOT)\n            }}\n            back='true'\n          >\n            Back\n          </RoundButton>\n          <RoundButton\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n              createNewWalletAction(state, dispatch)\n            }}\n          >\n            New\n          </RoundButton>\n          <RoundButton\n            next='true'\n            onClick={() => {\n              changePageInfoAction(state, dispatch, 2)\n            }}\n          >\n            I'm done with backup\n          </RoundButton>\n        </div>\n      </div>\n\n      {/* LOAD_BACKUP PAGE */ }\n\n      <div\n        style={{ display: page === pages.LOAD_BACKUP ? 'block' : 'none' }}\n      >\n        <div className={ styles.title }>\n          Type or paste your backup here\n        </div>\n        <br></br>\n        <div>\n          { (wordCount).toString() + ' words now. 12 minimum.' }\n        </div>\n        <br></br>\n        <textarea\n          className={ styles.restoreBackup }\n          cols={ 30 }\n          rows={ 3 }\n          spellCheck={ false }\n          placeholder={ 'mnemonic backup' }\n          onChange={ e => {\n            // lowcaps, spaces, single space max, only one space on left while typing\n            const cleanString = sanitize(\n              e.target.value.toLowerCase(),\n              'lowcaps spaces single_space_width'.split(' ')\n            ).trimLeft()\n            setBackup(cleanString.trim()) // store without trailing space\n            e.target.value = cleanString // quick update\n          } }\n        ></textarea>\n        <div className={ styles.buttonWrapper } >\n          <RoundButton\n            onClick={() => {\n              setPage(pages.ROOT)\n            }}\n            back='true'\n          >\n            Back\n          </RoundButton>\n          <RoundButton\n            // 12 words minimum separated by spaces (TODO): proper checks\n            show={ (wordCount >= 12) ? 'true' : 'false' }\n            next='true'\n            onClick={() => {\n              createNewWalletAction(state, dispatch, backup)\n              changePageInfoAction(state, dispatch, 2)\n            }}\n          >\n            Done\n          </RoundButton>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","import React, { useEffect, useState } from 'react'\nimport styles from './CreateHeader.module.css'\nimport { Store } from './../../../store/'\n\n// restore backup or create new\nexport const CreateHeader = () => {\n  const { state } = React.useContext(Store) // global state\n\n  // Make sure entire alias is always visible on top through\n  // resizing based on letter count.\n  //\n  // get window width in component instance state 'width'\n  // so can resize alias based on char count\n  const [ width, setWidth ] = useState(window.innerWidth)\n  useEffect(() => {\n    const resize = () => { setWidth(window.innerWidth) }\n    window.addEventListener('resize', resize);\n    return () => window.removeEventListener('resize', resize);\n  }, [])\n  const domainName = state.alias + state.extension\n  // enforces max size to font size so 1 letter alias has same font as 19 letter alias\n  const fontScale = Math.min(\n      Math.floor(1.3 * width / domainName.length),\n      Math.floor(1.3 * width / 20)\n  )\n\n  const barHeight = { height: (0.12 * width + 0.4 * fontScale).toString() + 'px' }\n  const aliasMarginTop = { marginTop: (0.03 * width - 0.3 * fontScale).toString() + 'px' }\n  const aliasFontSize = { fontSize: fontScale.toString() + 'px' }\n\n  return (\n    <>\n      <div\n        className={ styles.cutOverflow }\n        style={ barHeight }\n      >\n        <div\n          className={ styles.bar }\n          style={ barHeight }\n        />\n      </div>\n      <div\n        className={ styles.wrapper }\n        style={ aliasMarginTop }\n      >\n        <span\n          className={ styles.alias }\n          style={ aliasFontSize }\n        >{ state.alias }</span>\n        <span\n          className={ styles.ext }\n          style={ aliasFontSize }\n        >{ state.extension }</span>\n      </div>\n      <div className={ styles.spacer } />\n    </>\n  )\n}\n\n","import React, { useState, useEffect } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P2LoadWallet.module.css'\nimport { Store } from '../../../store'\nimport { changePageInfoAction } from '../../../store/actions'\nimport qr from 'qrcode'\n\n/**\n * Load wallet page, including faucet link for testnet users\n */\nexport const P2LoadWallet = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n\n  // load QR code into local state\n  const [ qrCode, setQrCode] = useState()\n  useEffect(() => {\n    qr.toDataURL(state.wallet.address, { type: 'image/jpeg' }, (err: any, url: any) => {\n      if (!err) { setQrCode(url) }\n    })\n  }, [state.wallet.address])\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.contentWrapper }>\n        <div\n          className={ styles.imgQr }\n        >\n          {/* downloadable */}\n          <img src={qrCode} alt={'QR Code'} />\n        </div>\n        <div>\n          Fund your wallet to control domain.\n        </div>\n        <div className={ styles.address }>\n          { state.wallet.address }\n        </div>\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 1)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          colorbutton={'var(--colorHighlight)'}\n          show={ (state.network === 'testnet').toString() }\n          onClick={ () => {\n            // open faucet page in new window\n            // segwit compatible:\n            // 1) https://testnet-faucet.mempool.co/\n            // 2) https://bitcoinfaucet.uo1.net/\n            window.open('https://bitcoinfaucet.uo1.net/', '_blank')\n            // window.open('https://testnet-faucet.mempool.co/', '_blank')\n          }}\n        >\n          Testnet: tBTC faucet\n        </RoundButton>\n        <RoundButton\n          onClick={ () => {\n            // open blockstream explorer for address in new window/tab\n            const pathEdit = (state.network === 'testnet') ? 'testnet/' : ''\n            window.open(\n              `https://blockstream.info/${pathEdit}address/${state.wallet.address}`\n            , '_blank')\n          }}\n        >\n          Open explorer\n        </RoundButton>\n        <RoundButton\n          next='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 3)\n          }}\n        >\n          Ready\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P3DomainAndWallet.module.css'\nimport { Store } from '../../../store'\nimport { changePageInfoAction } from '../../../store/actions'\nimport { scanAddressFullyAction } from './../../../store/actions'\nimport { ActionTypes } from './../../../interfaces'\nimport { getUnspentSum } from './../../../helpers/bitcoin'\n\n/**\n * Bid on network\n */\nexport const P3DomainAndWallet = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n\n  // Local state: keep track if API is busy\n  const [ apiStatus, setApiStatus ] = React.useState('ok')\n\n  // on state update detected by timestamp, reset api status\n  React.useEffect(() => { setApiStatus('ok') }, [ state.lastTimeStamp ])\n\n  // most important for domain notificaiton address is the transaction history to know ownership\n  // but also the current utxo in case we want to control the domain\n  const domainInfo = () => {\n    if (state.domain.checkedHistory && state.domain.checkedUtxo) {\n      return ('✓')\n    } else {\n      return ('needs scan')\n    }\n  }\n\n  // wallet needs utxo info including raw tx & tx history for nonce\n  const walletInfo = () => {\n    if (state.wallet.checkedHistory && state.wallet.checkedUtxo) {\n      return ( '✓' )\n    } else {\n      return ('needs scan')\n    }\n  }\n\n  // are all necessary scans done\n  const areScansDone = () => {\n    return (\n      state.wallet.checkedUtxo &&\n      state.wallet.checkedHistory &&\n      state.domain.checkedUtxo &&\n      state.domain.checkedHistory\n    )\n  }\n\n  // Conditions to enable next pages.\n  // if owner - full control\n  // if domain available - bid\n  // if not owner, warn user\n  // (TODO) if auction period, challenge bids\n  const readyStatus = () => {\n    if (!areScansDone()) {\n      // needs scans\n      return { isReady: false,  type: 'missing', info: 'Scan both to move on' }\n    }\n    const ownerAddress = state.domain.currentOwner;\n    const walletAddress = state.wallet.address;\n    const isWalletAddress = (walletAddress !== '')\n    const isDomainAvailable = (ownerAddress === '')\n    const isWalletTheOwner = (walletAddress === ownerAddress)\n    if (!isWalletAddress) {\n      return { isReady: false,  type: 'nowallet', info: 'No wallet loaded' }\n    }\n    if (isWalletTheOwner && !isDomainAvailable) {\n      return { isReady: true,   type: 'owner',    info: 'Your domain ready' }\n    }\n    if (!isWalletTheOwner && isDomainAvailable) {\n      return { isReady: true,   type: 'open',     info: 'Domain is available' }\n    }\n    if (!isWalletTheOwner && !isDomainAvailable) {\n      return { isReady: false,  type: 'taken',    info: 'Not your domain' }\n    }\n    console.log('Unknown status of ownership', ownerAddress, walletAddress, isWalletAddress, isDomainAvailable, isWalletTheOwner)\n    return { isReady: false,    type: 'unknown',  info: '' }\n  }\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Wallet and domain history needed. <br />\n        (No offline method yet)\n      </div>\n      <div className={ styles.domainInfo }>\n        { (apiStatus !== 'domain')  && 'Domain ' + domainInfo() }\n        { (apiStatus === 'domain')  && 'Domain scanning...' }\n      </div>\n      <div className={ styles.domainButton }>\n        <RoundButton\n          onClick={ () => {\n            if (apiStatus === 'ok') {\n              setApiStatus('domain')\n              scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_DOMAIN)\n            }\n          }}\n        >\n          API Scan\n        </RoundButton>\n      </div>\n      <div className={ styles.walletInfo }>\n        { (apiStatus !== 'wallet')  && 'Wallet ' + walletInfo() }\n        { (apiStatus === 'wallet') && 'Wallet scanning...' }\n      </div>\n      <div className={ styles.walletButton }>\n        <RoundButton\n          onClick={ () => {\n            if (apiStatus === 'ok') {\n              setApiStatus('wallet')\n              scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_WALLET)\n            }\n          }}\n        >\n          API Scan\n        </RoundButton>\n      </div>\n      <div className={ styles.unspent }>\n        <div className={ styles.balance }>\n          { state.wallet.checkedUtxo? (getUnspentSum(state.wallet.utxoList) / 1e8).toFixed(8) : 'n/a' }\n        </div>\n        { (state.network === 'testnet') ? ' tBTC' : ' BTC' }\n      </div>\n      <div className={ styles.ownership }>\n        { readyStatus().info }\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 2)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          show={ readyStatus().isReady ? 'true' : 'false' }\n          next='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 4)\n          }}\n        >\n          Ready\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P4ActionChoice.module.css'\nimport { Store } from '../../../store'\nimport { changePageInfoAction, changeChoicesBNSAction } from '../../../store/actions'\n\nimport { runAllActionPermissionChecks, calcBnsState } from './../../../helpers/bns/'\n\n\n/**\n * Bid on network\n */\nexport const P4ActionChoice = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n\n  // simulate bns state once again just in case\n  // up to current block height\n  const bns = calcBnsState(\n    state.domain.txHistory,\n    state.domain.domainName,\n    state.chain.height,\n    state.network\n  )\n  // and get all permissions\n  const checkActions = runAllActionPermissionChecks(bns, state.wallet.address)\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Available actions\n      </div>\n      <div className={ styles.availableActions }>\n        {\n          checkActions.map(action => {\n            if (action.isUsable) {\n              console.log('special tx instructions:', action.special)\n              return (\n              <RoundButton\n                next={ 'true' }\n                onClick={ () => {\n                  changeChoicesBNSAction(state, dispatch, {\n                    action: {\n                      type: action.type,\n                      info: action.info,\n                      special: action.special\n                    }\n                  })\n                  changePageInfoAction(state, dispatch, 5)\n                }}\n                key={ action.info }\n              >\n                { action.info }\n              </RoundButton>\n              )\n            } else {\n              return ''\n            }\n          })\n        }\n      </div>\n      <div className={ styles.unavailableActions }>\n        <div className={ styles.unavailableActions__title }>\n          Unavailable actions:\n        </div>\n        <div className={ styles.unavailableActions__actionList }>\n          {\n            checkActions.map(action => {\n              if (!action.isUsable) {\n                return (\n                  <div\n                    className={\n                      styles.unavailableActions__actionList__action\n                    }\n                    key={ action.info }\n                  >\n                    <div\n                      className={\n                        styles.unavailableActions__actionList__action__title\n                      }\n                    >\n                      { action.info }\n                    </div>\n                    <div\n                      className={\n                        styles.unavailableActions__actionList__action__permissionList\n                      }\n                    >\n                      { action.permissionList.map((permission: any) => {\n                        return (\n                          <div\n                            className={\n                              styles.unavailableActions__actionList__action__permissionList__permission\n                            }\n                            key={permission.info}\n                          >\n                            - { permission.info }\n                          </div>\n                        )\n                      })}\n                    </div>\n                  </div>\n                )\n              } else {\n                return ('')\n              }\n            })\n          }\n        </div>\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 3)\n          }}\n        >\n          Back\n        </RoundButton>\n      </div>\n    </div>\n  )\n}","import React, { useEffect } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P5CustomForwards.module.css'\nimport { Store, getOwner } from '../../../store'\nimport { changePageInfoAction, changeChoicesBNSAction } from '../../../store/actions'\nimport { calcTx, stringByteCount, BYTES_MAX } from '../../../helpers/bns'\nimport sanitize from '../../../helpers/sanitize'\n\n/**\n * Bid on network\n */\nexport const P5CustomForwards = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  // array of network:forwardingAddress objects\n  const forwards = getOwner(state)?.forwards.slice().reverse() || []\n\n  // local state for plannedChanges to embed (content inside textboxes for network/address)\n  const [customAdd, setCustomAdd] = React.useState({network: '', address: '' })\n\n  // local state for all plannedChanges to embed in this tx\n  const initialPlannedChanges = {}\n  const [plannedChanges, setPlannedChanges] = React.useState(\n    initialPlannedChanges as { [key: string]: string }\n  )\n\n  // local state for tx hex\n  // const [tx, setTx] = React.useState({ hex: '', txid: '' })\n\n\n  // combine forwards into a string for the tx\n  const combineForwards = (objForwards: any) => {\n    let forwardsString = ''\n    Object.keys(objForwards).forEach(fwNetwork => {\n      forwardsString += fwNetwork + ' ' + objForwards[fwNetwork] + ' '\n    })\n    if (forwardsString.length > 0) { forwardsString = forwardsString.slice(0, -1) }\n    console.log('string to embed:', '\"' + forwardsString + '\"')\n    return forwardsString\n  }\n\n  // calculate tx (on mount or changes in global state or local plannedChanges to embed)\n  useEffect(() => {\n\n\n  }, [state, dispatch, plannedChanges])\n\n\n\n  // console.log('tx attempt info', tx)\n\n  const bytesOfChanges = stringByteCount(combineForwards(plannedChanges))\n  console.log(bytesOfChanges)\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Update forwarding information\n      </div>\n      <div className={ styles.changes }>\n        {/* bytes info */ }\n        { (Object.keys(plannedChanges).length === 0) && 'Nothing added yet' }\n        { (bytesOfChanges <= BYTES_MAX) &&\n          <div className={ styles.bytesLeft }>\n            { BYTES_MAX - bytesOfChanges } Bytes left\n          </div>\n        }\n        { (bytesOfChanges > BYTES_MAX) &&\n          <div className={ styles.bytesOver }>\n            Too much by { bytesOfChanges - BYTES_MAX } Bytes\n          </div>\n        }\n        { Object.keys(plannedChanges).map((fwNetwork) => {\n          return (\n            <div\n              className={ styles.updateItem }\n              key={ fwNetwork }\n              onClick={ () => {\n                setCustomAdd({ network: fwNetwork, address: plannedChanges[fwNetwork] })\n              } }\n            >\n              <div\n                className={ styles.updateInfo }\n              >\n                {\n                  (plannedChanges[fwNetwork] !== '')\n                    ? (<>\n                      Updating forwarding on <span>{ ' ' + fwNetwork + ' ' }</span>\n                      network to address of <span>{ ' ' + plannedChanges[fwNetwork] + ' ' }</span>\n                      <i>{' '}(+{ stringByteCount(fwNetwork + ' ' + plannedChanges[fwNetwork]) }B)</i>\n                    </>)\n                    : (<>\n                      Deleting previously set forwarding information for\n                      <span>{ ' ' + fwNetwork + ' '}</span> network\n                      <i>{' '}(+{ stringByteCount(fwNetwork + ' ' + plannedChanges[fwNetwork]) }B)</i>\n                    </>)\n                }\n              </div>\n              <div\n                className={ ['btnCircle', styles.updateCancel, 'addTooltipRight'].join(' ') }\n                onClick={ (e) => {\n                  const newData = { ...plannedChanges }\n                  delete newData[fwNetwork]\n                  setPlannedChanges(newData)\n                  e.stopPropagation()\n                } }\n              >\n                <span>×</span>\n                <aside>Remove from planned changes</aside>\n              </div>\n            </div>\n          )\n        }) }\n      </div>\n      <div className={ styles.editor } >\n        { (customAdd.network.length > 0) &&\n          <div\n            className={ [styles.btnDelete, 'canPress'].join(' ') }\n            onClick={ () => {\n              setPlannedChanges({\n                ...plannedChanges,\n                [customAdd.network]: ''\n              })\n              setCustomAdd({ network: '', address: '' })\n            } }\n          >\n            No address\n          </div>\n        }\n        <div\n          className={ styles.editorNetwork }\n        >\n          <aside>Network</aside>\n          <textarea\n            spellCheck={ false }\n            value={ customAdd.network }\n            placeholder={ 'e.g. btc' }\n            onChange={ (e) => {\n              const cleanText = sanitize(e.target.value, 'oneline')\n              setCustomAdd({ ...customAdd, network: cleanText })\n              e.target.value = cleanText\n            } }\n          ></textarea>\n        </div>\n        <div\n          className={ styles.editorAddress }\n        >\n          <aside>Forwarding address</aside>\n          <textarea\n            spellCheck={ false }\n            value={ customAdd.address }\n            placeholder={ 'e.g. your btc address' }\n            onChange={ (e) => {\n              const cleanText = sanitize(e.target.value, 'oneline')\n              setCustomAdd({ ...customAdd, address: e.target.value })\n              e.target.value = cleanText\n            } }\n          ></textarea>\n        </div>\n        <div\n          className={ ['btnCircle', styles.btnAdd, 'canPress', 'addTooltip'].join(' ') }\n          onClick={ () => {\n            setPlannedChanges({\n              ...plannedChanges,\n              [customAdd.network]: customAdd.address\n            })\n            setCustomAdd({ network: '', address: '' })\n          } }\n        >\n          <span>+</span>\n          <aside>Add to planned changes</aside>\n        </div>\n      </div>\n      <div className={ styles.pastList } >\n        { forwards.map((fw: any, i: number) => {\n          return (\n            <div\n              className={ styles.pastPair }\n              key={ i }\n              onClick={ () => {\n                setCustomAdd({ network: fw.network, address: fw.address })\n              } }\n            >\n              <div className={ styles.pastNetwork } >\n                { fw.network }\n              </div>\n              <div className={ styles.pastAddress } >\n                { fw.address }\n              </div>\n            </div>\n          )\n        }) }\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 4)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          next='true'\n          onClick={ () => {\n            // update global state tx hex storage\n            const res = changeChoicesBNSAction(state, dispatch, {\n              txHex: calcTx(\n                combineForwards(plannedChanges),\n                state.wallet,\n                state.domain,\n                state.choices,\n                state.network\n              ).hex\n            })\n            console.log(res)\n            changePageInfoAction(state, dispatch, 6)\n          }}\n        >\n          Ready\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport { Store } from '../../../store'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P6Broadcast.module.css'\nimport { changePageInfoAction } from '../../../store/actions'\nimport { txPush } from './../../../api/blockstream'\n/**\n * Broadcast tx page.\n * Fee selection.\n * Transaction summary/status. *\n */\nexport const P6Broadcast = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Decide fee rate to broadcast\n      </div>\n      <div className={ styles.feeSelection }>\n        <div className={ styles.Rate }>\n          Fee 1.1 sat/vByte\n        </div>\n        <div className={ styles.usdAPI }>\n          get USD estimates\n        </div>\n        <div className={ styles.feeAPI }>\n          get fee estimates\n        </div>\n      </div>\n      <div className={ styles.txSummary }>\n        tx stats or tx fail\n      </div>\n      <div className={ styles.txHex }>\n        Tx hex: { state.choices.txHex }\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          onClick={ () => {\n            console.log('tx hex', state.choices.txHex)\n            txPush(state.choices.txHex, state.network)\n          } }\n        >\n          Broadcast\n        </RoundButton>\n        <RoundButton\n          onClick={ () => changePageInfoAction(state, dispatch, 5)\n          }\n        >\n          Back\n        </RoundButton>\n      </div>\n\n    </div>\n  )\n}","import React from 'react'\nimport { Store } from './../../store/'\nimport { P1RestoreOrBackup } from '../CreateSteps/P1RestoreOrBackup'\nimport { P2LoadWallet } from '../CreateSteps/P2LoadWallet'\nimport { P3DomainAndWallet } from '../CreateSteps/P3DomainAndWallet'\nimport { P4ActionChoice } from '../CreateSteps/P4ActionChoice'\nimport { P5CustomForwards } from '../CreateSteps/P5CustomForwards'\nimport { P6Broadcast } from './../CreateSteps/P6Broadcast'\nimport styles from './CreateNavigator.module.css'\n\n/**\n * Handle navigation of alias manipulation\n */\nexport const CreateNavigator = () => {\n  // global state\n  const { state } = React.useContext(Store)\n\n  const page = state.pageInfo?.current\n\n  !page && console.log('Unknown Page')\n\n  return (\n    <div className={ [styles.wrapper, 'scrollbar'].join(' ') }>\n      <div className={ styles.horizontalScaler } >\n        { (page === 1) && <P1RestoreOrBackup /> }\n        { (page === 2) && <P2LoadWallet /> }\n        { (page === 3) && <P3DomainAndWallet /> }\n        { (page === 4) && <P4ActionChoice /> }\n        { (page === 5) && <P5CustomForwards /> }\n        { (page === 6) && <P6Broadcast /> }\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { CreateHeader } from './../components/CreateSteps/CreateHeader'\nimport { CreateNavigator } from './../components/CreateNavigator'\n\n/**\n * Combine header & body components for alias manipulation\n */\nexport default function Create () {\n  return (\n    <>\n      <CreateHeader />\n      <CreateNavigator />\n    </>\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styles from './Navbar.module.css'\n\nexport const Navbar = (): JSX.Element => {\n  return (\n    <>\n      <div\n        className={ styles.warning }\n      >\n        FOR TESTING, DO NOT USE\n      </div>\n      <div\n        className={ styles.root }\n      >\n        <a\n          href=\"https://github.com/ildarmgt/BitcoinNameSystem\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          { 'source' }\n        </a>\n        <Link to='/about'>about</Link>\n        <Link to='/create'>owners</Link>\n        <Link to='/'>search</Link>\n      </div>\n    </>\n  )\n}\n\n// Hash history cannot PUSH the same path; a new entry will not be added to the history stack\n// Only issue is the warning in console, but that only exists in development mode so can be ignored.","import React from 'react';\nimport { Route, Switch } from 'react-router-dom'\nimport Home from './pages/Home'\nimport About from './pages/About'\nimport Create from './pages/Create'\nimport { Navbar } from './components/Navbar'\n\n// using for routing\nconst App = (): JSX.Element => {\n  // onbtc.me?satoshi can now forward to onbtc.me/#/id/satoshi which resets to onbtc.me after search\n  // redirect to auto searching path routed in return and remove query from url\n  const searchParam = (new URLSearchParams(window.location.search)).keys().next().value\n  searchParam && console.log('search param detected after ?', searchParam)\n  // no forward slash before # in string is vital\n  searchParam && window.history.pushState({}, '', window.location.pathname + '#/id/' + searchParam)\n\n  return (\n    <>\n      {/* switch only renders first match instead of all matches */}\n      <Switch>\n        <Route path='/id/:alias' component={Home} />\n        <Route exact path='/id/' component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/create\" component={Create} />\n        <Route path='/:noise' component={Home} />\n        <Route exact path='/' component={Home} />\n      </Switch>\n      <Navbar />\n      {/* <Route exact path=\"/\" render={() => <Home />} /> */}\n    </>\n  );\n}\nexport default App;\n","import React, { useState, useEffect } from 'react'\nimport styles from './DevPanel.module.css'\nimport { Store } from '../../store/'\nimport { ActionTypes } from './../../interfaces/'\nconst json = require('./../../utils/test.json');\n\ninterface IState {\n  blShow: boolean\n  setShow: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nexport const DevPanel = (props: any): JSX.Element => {\n  const { state, dispatch } = React.useContext(Store) // global state\n\n  // store if DevPanel is hidden\n  const [hidden, setHidden] = useState<boolean>(false);\n\n  // reruns to reattach keyup event to toggle hidden class\n  useEffect(() => {\n    const onDevKey = (e: any) => {\n      if (e.key === '`') {\n        setHidden(!hidden)\n      } else {\n        // give focus back to the input bar\n        if (document.activeElement?.id !== 'txtSearch') {\n          const txtSearch = document.getElementById('txtSearch') as HTMLTextAreaElement\n          txtSearch?.focus()\n        }\n      }\n    }\n    document.addEventListener('keyup', onDevKey)\n    return () => {\n      document.removeEventListener('keyup', onDevKey)\n    }\n  }, [hidden])\n\n  const onOutlineClick = () => {\n    const id: string = 'outliner';\n    const sheet: HTMLElement | null = document.getElementById(id);\n    if (!sheet) {\n      const outlineCss = '* {box-shadow: 0 0 0 1px red;}'\n      const style = document.createElement('style')\n      style.type = 'text/css'\n      style.id = id\n      style.appendChild(document.createTextNode(outlineCss))\n      document.head.appendChild(style)\n    } else {\n      sheet.parentNode?.removeChild(sheet)\n    }\n  }\n\n  const dlState = () => {\n    let data = \"text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(state))\n    let a = document.createElement('a')\n    a.href = 'data:' + data\n    a.download = 'test.json'\n    a.innerHTML = 'download JSON'\n    let container = document.getElementById('container')\n    container?.appendChild(a)\n    a.click()\n    a.remove()\n  }\n\n  return (\n    <div\n      className={[\n        styles.divDev,\n        !hidden ? styles.hidden : ''\n      ].join(' ')}\n      { ...props }\n    >\n      <div><b>DevPanel</b></div>\n      <div\n        className={ styles.button }\n        onClick={ () => {\n          dlState()\n        } }\n      >\n        Save State\n      </div>\n      <div\n        className={ [styles.btnOutline, styles.button].join(' ') }\n        onClick={ onOutlineClick }\n      >\n        Outline\n      </div>\n      <div\n        className={ styles.button }\n        onClick={ () => {\n          console.log(json);\n          dispatch({ type: ActionTypes.LOAD_STATE, payload: json });\n        } }\n      >\n        Load State\n      </div>\n      <div\n        className={ styles.button }\n        onClick={ () => {\n          console.log(state);\n        } }\n      >\n        Console State\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './css/global.css';\nimport App from './App';\nimport { StoreProvider } from './store'\nimport { DevPanel } from './components/DevPanel'\n\n// Using for store access and hash router base\nReactDOM.render(\n  <StoreProvider>\n    <HashRouter>\n      <App />\n    </HashRouter>\n    <DevPanel />\n  </StoreProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\n// import * as serviceWorker from './serviceWorker';","import * as bitcoin from 'bitcoinjs-lib'\nconst op = bitcoin.opcodes;\nconst hash160 = bitcoin.crypto.hash160;\n\n\n/**\n * Get p2wsh notificaiton address from domainName and network.\n * @param   {string} domainName         - full domainName to use (e.g. 'satoshi.btc').\n * @param   {string} networkChoice      - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @returns {object}                    - { notificationsAddress - p2wsh address derived from domainName }.\n */\nexport const calcP2WSH = (domainName: string, networkChoice: string) => {\n  const network = bitcoin.networks[networkChoice];\n\n  // convert domainName into buffer so it can be put into script\n  const bufferData = Buffer.from(domainName, 'utf8');\n\n  // easily spendable script for ACS notification output\n  // specific to this domainName\n  const witnessScript = bitcoin.script.compile([\n    hash160(bufferData),\n    op.OP_DROP\n  ]);\n\n  // calculate p2wsh address for this witnessScript & network\n  const p2wsh = bitcoin.payments.p2wsh({\n    redeem: {\n      output: witnessScript,\n      network\n    },\n    network\n  })\n  const notificationsAddress = p2wsh.address;\n\n  return {\n    notificationsAddress\n  };\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"divDev\":\"DevPanel_divDev__2q66m\",\"hidden\":\"DevPanel_hidden__Wlj3v\",\"btnOutline\":\"DevPanel_btnOutline__2FJLx\",\"button\":\"DevPanel_button__1DKHt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cutOverflow\":\"CreateHeader_cutOverflow__3s_72\",\"bar\":\"CreateHeader_bar__27ge1\",\"wrapper\":\"CreateHeader_wrapper__3cPTN\",\"alias\":\"CreateHeader_alias__1dNdj\",\"ext\":\"CreateHeader_ext__17sc6\",\"spacer\":\"CreateHeader_spacer__3tstm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P2LoadWallet_wrapper__vI_bb\",\"contentWrapper\":\"P2LoadWallet_contentWrapper__UNLo4\",\"buttonWrapper\":\"P2LoadWallet_buttonWrapper__1rrct\",\"address\":\"P2LoadWallet_address__37xx2\",\"imgQr\":\"P2LoadWallet_imgQr__3Avh3\"};","import { IUser, IBnsState } from './types/'\n\n// Initializing values\n\nexport const newState: IBnsState = {\n  domain: {                                     // notification info for this domain name\n    domainName:                   '',           // domain name\n    notificationAddress:          '',           // p2wsh address for this domain name (alias + extension)\n    txHistory:                    [],           // array of all tx for this address (old addressHistory)\n    utxoList:                     [],           // array of all current utxo for this address\n    users:                        {},           // keeps track of interacting users / source addresses with addresses as keys\n    currentOwner:                 '',           // points to a source address or blank string\n    bidding:                      {},           // bidding\n    ownersHistory:                []            // owner history log\n  },\n  chain: {\n    parsedHeight:                 0,            // parsed height for derivation\n    currentHeight:                0             // real world block height\n  }\n}\n\n// values to initialize users with\nexport const newUser: IUser = {\n  address:        '',           // address in control\n  forwards:       [],           // for forwards later\n  burnAmount:     0,            // burned to get ownership\n  winHeight:      0,            // blockheight winning bid\n  winTimestamp:   0,            // winHeight in block's timestamp\n  nonce:          0,            // for counting previous notification height from this address, no matter good/bad/type\n  updateHeight:   0             // the height of most current parsed update, created after nonce height & therefore using it\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"roundButtonWrap\":\"RoundButton_roundButtonWrap__2X50a\",\"roundButton\":\"RoundButton_roundButton__tfjmf\",\"nextArrow\":\"RoundButton_nextArrow__SS6Nl\",\"backArrow\":\"RoundButton_backArrow__2MJJm\"};"],"sourceRoot":""}