{"version":3,"sources":["components/CreateSteps/P5CustomForwards/P5CustomForwards.module.css","components/CreateNavigator/CreateNavigator.module.css","components/CreateSteps/P6Broadcast/P6Broadcast.module.css","helpers/bns/constants.tsx","helpers/bns/calcTx.tsx","components/CreateSteps/P1RestoreOrBackup/P1RestoreOrBackup.module.css","components/CreateSteps/P4ActionChoice/P4ActionChoice.module.css","helpers/bns/formathelpers.tsx","helpers/bns/bitcoin.tsx","components/CreateSteps/P3DomainAndWallet/P3DomainAndWallet.module.css","components/SearchResults/SearchResults.module.css","helpers/bns/types/types.tsx","interfaces/index.tsx","components/general/RoundButton/RoundButton.tsx","store/reducers/Reducer.tsx","store/index.tsx","helpers/sanitize.js","store/actions/changeAliasAction.tsx","helpers/bns/actions/actions.tsx","helpers/bns/actions/batch.tsx","helpers/bns/calcBnsState.tsx","helpers/bns/forwards/findLatestForwards.tsx","helpers/bns/stringByteCount.tsx","api/blockstream.tsx","store/actions/searchAction.tsx","store/actions/createNewWalletAction.tsx","store/actions/changePageInfoAction.tsx","store/actions/scanAddressFullyAction.tsx","store/actions/changeChoicesBNSAction.tsx","helpers/timediff.tsx","components/general/Details/Details.tsx","components/SearchResults/SearchResults.tsx","helpers/bns/forwards/interpretFw.tsx","components/HomeContent/HomeContent.tsx","pages/Home.tsx","components/AboutContent/graphic.svg","components/AboutContent/AboutContent.tsx","pages/About.tsx","components/CreateSteps/P1RestoreOrBackup/P1RestoreOrBackup.tsx","components/CreateSteps/CreateHeader/CreateHeader.tsx","components/CreateSteps/P2LoadWallet/P2LoadWallet.tsx","components/CreateSteps/P3DomainAndWallet/P3DomainAndWallet.tsx","components/general/InputForm/InputForm.tsx","components/CreateSteps/P4ActionChoice/P4ActionChoice.tsx","components/CreateSteps/P5CustomForwards/P5CustomForwards.tsx","components/CreateSteps/P6Broadcast/P6Broadcast.tsx","components/CreateNavigator/CreateNavigator.tsx","pages/Create.tsx","components/Navbar/Navbar.tsx","components/wallet/FeesSelection/FeesSelection.tsx","components/wallet/Withdraw/Withdraw.tsx","pages/Wallet.tsx","App.tsx","components/DevPanel/DevPanel.tsx","index.tsx","helpers/bns/cryptography.tsx","components/HomeContent/HomeContent.module.css","components/wallet/FeesSelection/FeesSelection.module.css","components/DevPanel/DevPanel.module.css","components/general/RoundButton/RoundButton.module.css","components/CreateSteps/CreateHeader/CreateHeader.module.css","components/Navbar/Navbar.module.css","components/wallet/Withdraw/Withdraw.module.css","helpers/bns/calcP2WSH.tsx","components/general/Details/Details.module.css","components/CreateSteps/P2LoadWallet/P2LoadWallet.module.css","components/general/InputForm/InputForm.module.css","helpers/bns/initialState.tsx","components/AboutContent/AboutContent.module.css"],"names":["module","exports","console","warn","BYTES_MAX","MIN_BURN","MIN_NOTIFY","OWNERSHIP_DURATION_BY_BLOCKS","hash160","bitcoin","op","calcTx","wallet","domain","choices","networkChoice","vBytes","utxoList","length","Error","feeRate","user","getUser","address","network","calcP2WSH","domainName","notificationsAddress","fee","Math","ceil","valueNeeded","totalGathered","gatheredFromWallet","gatheredFromOther","isACSRequired","action","special","some","list","rules","inputs","log","toBeUsedUtxoOfNotifications","derivedUtxoList","forEach","utxo","from_scriptpubkey_address","push","value","toBeUsedUtxoOfUserWallet","toFixed","keyPair","fromWIF","WIF","psbt","setVersion","setLocktime","addInput","hash","txid","index","vout","sequence","nonWitnessUtxo","Buffer","from","hex","witnessScript","compile","OP_DROP","inputScript","OP_TRUE","nonce","toString","encryptionKey","finalEmbedString","actionContent","embedString","join","data","encrypt","embed","burnAmount","reduce","maxBurn","max","output0value","addOutput","script","output","changeAddress","type","split","change","signInput","validateSignaturesOfInput","i","finalizeInput","getFinalScripts","tx","extractTransaction","thisVirtualSize","virtualSize","getId","toHex","nInputs","ins","nOutputs","outs","byteLength","notifyAmount","nInputsFromWallet","nInputsFromOther","existsCurrentOwner","st","currentOwner","existsUser","users","createNewUser","JSON","parse","stringify","newUser","getOwnerAddress","setOwner","newOwnerAddress","getOwner","ownerAddress","updateOwnerHistory","ownersHistory","clearOwner","getParsedHeight","chain","parsedHeight","setParsedHeight","height","getNotificationAddress","notificationAddress","getLastOwnerBurnedValue","isOwnerExpired","owner","winHeight","getTxTimestamp","status","block_time","getTxHeight","block_height","getTxOutput0BurnValue","getTxInput0SourceUserAddress","vin","prevout","scriptpubkey_address","updateSourceUserFromTx","fromAddress","updateHeight","readEmbeddedData","isOpreturnOutput0","embeddedDataHex","scriptpubkey_asm","slice","getTxOutput0Data","embeddedDataBuffer","decryptionKey","embeddedDataUtf8","decrypt","embeddedDataUtf8Array","forwardsInThisTx","word","thisForward","updateTimestamp","forwards","addToUserForwards","atLeastTwoOutputs","isNotify","getTxOutput1NotifyAddress","didNotifyMin","getTxOutput1NotifyValue","isAddressTheCurrentOwner","isSenderTheCurrentOwner","didBurnMin","burnedPreviousRateMin","isCommandCalled","command","getCommandCalled","txHeight","startsWith","updateUtxoFromTx","input","spentUtxoIndex","findIndex","splice","noUnspentUserNotificationsUtxo","userOfTxAddress","userThatCreatedThisUtxo","isInThePast","varuint","require","createNewWallet","strNetwork","mnemonic","bip39","generateMnemonic","seedBuffer","mnemonicToSeed","fromSeed","derivePath","toWIF","p2wpkh","pubkey","publicKey","loadWallet","strMnemonic","getUnspentSum","utxoArray","sum","inputIndex","isSegwit","isP2SH","isP2WSH","payment","p2wsh","redeem","p2sh","finalScriptSig","finalScriptWitness","witness","vector","buffer","allocUnsafe","writeVarInt","currentLen","varintLen","encodingLength","concat","encode","writeVarSlice","writeSlice","witnessStackToScriptWitness","undefined","BNSActions","ActionTypes","RoundButton","props","style","display","show","colorbutton","colorbuttontext","sizebutton","className","styles","roundButtonWrap","back","roundButton","backArrow","next","nextArrow","children","overhead","STORE_SEARCH_RESULTS_FAIL","STORE_SEARCH_RESULTS","TYPING","NEW_WALLET","CHANGE_PAGE_INFO","UPDATE_WALLET","UPDATE_DOMAIN","ACTION_FAIL","LOAD_STATE","CHOICES_BNS_ACTION","reducer","state","payload","lastTimeStamp","Date","now","txHistory","pageInfo","checkedWallet","checkedDomain","current","initialState","alias","checkedLightSearch","extension","bidding","txHex","Store","React","createContext","sanitize","inputString","stringOrArray","Array","isArray","filter","logicFilters","choice","str","letter","resultingString","numbers","digits","map","parseInt","warning","outputString","indexOf","fn","RENEW","ONLY_FORWARDS","CLAIM_OWNERSHIP","SEND_OWNERSHIP","CHANGE_ADDRESS","OUTS_2","info","OUT_0","OUT_1","NOTIFIED_MIN","BURNED_MIN","NO_OWNER","EXISTS_OWNER","BURN_LAST_WIN","USER_IS_OWNER","IS_OWNER_EXPIRED","NO_UNSPENT_USER_NOTIFICATIONS_UTXO","USER_ADDRESS_NOT_NOTIFICATION_ADDRESS","IS_COMMAND_CALLED","changeAddressAction","args","commandSignal","permissions","conditions","execute","thisCommand","newAddress","oldOwner","winTimestamp","suggestions","sendOwnershipAction","claimOwnershipAction","senderAddress","currentOwnerRenewAction","updateForwardingInfoAction","autoCheckForOwnerExpiredAction","updateUtxoFromTxAction","runAllAutomaticActions","areAllConditionsMet","eaCondition","calcBnsState","notificationsHistory","currentHeight","newState","reverse","sort","prev","actions","okConditions","okPermissions","areAllPermissionsMet","eaPermission","findLatestForwards","sortedForwards","currentNetworks","eaForward","Object","values","stringByteCount","API_PATH_TESTNET","API_PATH_BITCOIN","getFeeEstimates","a","async","axios","get","res","rateLimit","getHeight","API_PATH","addRawTxToArray","erroredOutputs","error","entries","indexString","tries","getUTXOList","getAddressHistory","txPush","content","params","response","Promise","r","setTimeout","searchAction","dispatch","router","notificationsTxHistory","createNewWalletAction","changePageInfoAction","page","scanAddressFullyAction","addressType","walletAddress","walletTxHistory","utxoListWalletAddress","newDomain","changeChoicesBNSAction","timeDiff","timestampMsec","referenceTimestampMsec","diff","isExpired","abs","d","floor","h","m","dhm","dh","msDiff","Details","useState","showDetails","setShowDetails","wrapper","toggleDetails","onClick","title","description","arrow","down","details","SearchResults","useContext","blocksUntilExpires","latestForwards","listContainer","describe","to","createLink","ownershipDetails","breakable","toUTCString","fw","ifw","render","onNetwork","where","what","link","interpretFw","key","listItem","href","encodeURI","target","rel","HomeContent","match","history","isSearchDone","inputEl","useRef","useEffect","selectionEnd","selectionStart","focus","lblMainTitle","lblMainTitleAfter","divSearch","divSearchAfter","id","txtSearch","cols","rows","spellCheck","placeholder","ref","onChange","e","sanitizedString","changeAliasAction","onKeyPress","Home","_extends","assign","arguments","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","fillRule","clipRule","clipPath","fill","fontFamily","fontWeight","fontSize","transform","x","y","stroke","strokeWidth","strokeLinecap","strokeLinejoin","strokeMiterlimit","_ref","svgRef","overflow","preserveAspectRatio","viewBox","ForwardRef","forwardRef","AboutContent","contentWrapper","drawing","About","pages","CreateHeader","useHistory","window","innerWidth","width","setWidth","resize","addEventListener","removeEventListener","fontScale","min","barHeight","aliasMarginTop","marginTop","aliasFontSize","cutOverflow","bar","ext","spacer","P1RestoreOrBackup","ROOT","setPage","backup","setBackup","wordCount","v","Orange","buttonWrapper","LOAD_BACKUP","restoreBackup","cleanString","toLowerCase","trimLeft","trim","P2LoadWallet","qrCode","setQrCode","qr","toDataURL","err","url","imgQr","src","alt","open","pathEdit","P3DomainAndWallet","apiStatus","setApiStatus","readyStatus","isReady","domainInfo","domainButton","walletInfo","walletButton","unspent","balance","ownership","InputForm","shiftRight","label","thisInputLabel","textarea","thisInputValue","thisInputPlaceholder","thisInputOnChange","button","thisSubmitButtonOnClick","P4ActionChoice","checkActions","allActions","checkedActions","checkedPermissions","permission","isAllowed","specialTxDirections","condition","isUsable","every","permissionList","runAllActionPermissionChecks","dataExtraForm","setDataExtraForm","showStatus","availableActions","inputForms","actionCommandText","unavailableActions","unavailableActions__title","unavailableActions__actionList","unavailableActions__actionList__action","unavailableActions__actionList__action__title","unavailableActions__actionList__action__permissionList","unavailableActions__actionList__action__permissionList__permission","P5CustomForwards","plannedChanges","plannedChangesSoFar","words","setPlannedChanges","objForwards","forwardsString","fwNetwork","pastForwards","textboxContent","setTextboxContent","bytesOfChanges","combineForwards","subtitle","changes","bytesLeft","bytesOver","updateItem","updateInfo","updateCancel","newData","stopPropagation","editor","btnDelete","editorNetwork","cleanText","editorAddress","btnAdd","pastList","pastPair","pastNetwork","pastAddress","P6Broadcast","feeText","setFeeText","showSuggestions","apiSuccess","min20","min40","min60","feeSuggestions","setFeeSuggestions","txIssue","String","message","endsWith","numberOfUpdates","countSoFar","ok","reason","broadcastStatus","setBroadcastStatus","unitBTC","showBTC","sats","finalCost","fees","fees__rate","cleanNumber","parseFloat","fees__apicall","apiSuggest","tryFees","fees__feeSelection","fees__feeSelection__choice","totalCost","txSummary","status__button","PATH","status__failed","CreateNavigator","horizontalScaler","Create","Navbar","isCreatePage","location","pathname","isHomePage","isAboutPage","root","pageNum","selected","FeesSelection","Withdraw","request","total","App","searchParam","URLSearchParams","search","pushState","path","component","exact","Wallet","json","ReactDOM","useReducer","Provider","hidden","setHidden","onDevKey","document","activeElement","getElementById","divDev","encodeURIComponent","download","innerHTML","container","appendChild","click","remove","dlState","btnOutline","sheet","parentNode","removeChild","createTextNode","head","stringText","stringForKey","stringForIV","crypto","createHash","update","digest","iv","cipher","createCipheriv","encrypted","final","bufferCypher","decipher","createDecipheriv","decrypted","bufferData"],"mappings":"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","file":"static/js/main.227f15c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P5CustomForwards_wrapper__2kAy2\",\"title\":\"P5CustomForwards_title__29aFH\",\"subtitle\":\"P5CustomForwards_subtitle__1iqt_\",\"changes\":\"P5CustomForwards_changes__23bYg\",\"pastList\":\"P5CustomForwards_pastList__3rXdy\",\"buttonWrapper\":\"P5CustomForwards_buttonWrapper__3hvwB\",\"editor\":\"P5CustomForwards_editor__1ZVVF\",\"updateItem\":\"P5CustomForwards_updateItem__1wAhx\",\"updateCancel\":\"P5CustomForwards_updateCancel__3b5bW\",\"updateInfo\":\"P5CustomForwards_updateInfo__2OBcF\",\"editorNetwork\":\"P5CustomForwards_editorNetwork__1L6UB\",\"editorAddress\":\"P5CustomForwards_editorAddress__1N25M\",\"btnAdd\":\"P5CustomForwards_btnAdd__1tiSg\",\"btnDelete\":\"P5CustomForwards_btnDelete__3NCte\",\"pastPair\":\"P5CustomForwards_pastPair__3YvIk\",\"pastNetwork\":\"P5CustomForwards_pastNetwork__35eVe\",\"pastAddress\":\"P5CustomForwards_pastAddress__3-W_H\",\"bytesLeft\":\"P5CustomForwards_bytesLeft__2zySr\",\"bytesOver\":\"P5CustomForwards_bytesOver__ysfMq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CreateNavigator_wrapper__24rTe\",\"horizontalScaler\":\"CreateNavigator_horizontalScaler__2qmoi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P6Broadcast_wrapper__32tq-\",\"title\":\"P6Broadcast_title__2fzea\",\"fees\":\"P6Broadcast_fees__STZ2e\",\"txSummary\":\"P6Broadcast_txSummary__24FzE\",\"status\":\"P6Broadcast_status__3SsMv\",\"totalCost\":\"P6Broadcast_totalCost__Agr2T\",\"buttonWrapper\":\"P6Broadcast_buttonWrapper__ROAk6\",\"status__button\":\"P6Broadcast_status__button__fFvc3\",\"status__failed\":\"P6Broadcast_status__failed__1moa8\",\"fees__rate\":\"P6Broadcast_fees__rate__16JxD\",\"fees__apicall\":\"P6Broadcast_fees__apicall__3yPVT\",\"fees__feeSelection\":\"P6Broadcast_fees__feeSelection__rCjmf\",\"fees__feeSelection__choice\":\"P6Broadcast_fees__feeSelection__choice__1jG8w\",\"balance\":\"P6Broadcast_balance__1ZVur\"};","/**\n * Constants used to determine rules on BNS\n */\n\n// testing mode true/false to reduce waiting time for tests\nconst TESTING = true\nTESTING && console.warn('Testing mode ON')\n\n// max data safe to embed in OP_RETURN type tx (bytes)\nconst BYTES_MAX = 80\n\n// Satoshis to burn minimum for attempting ownership (satoshi)\nconst MIN_BURN = 1000\n\n//  Minimum to use for notification output (satoshi)\nconst MIN_NOTIFY  = 1000\n\n// Ownership duration after victory (blocks)\nconst OWNERSHIP_DURATION_BY_BLOCKS = !TESTING ? 52560 : 1000\n// ^ (real) 52560 blocks ~365 days.\n// (testing) 288 blocks ~48 hours. 1000 blocks ~ a week\n// Block times can vary from 10 minutes.\n// const CHALLENGE_PERIOD_DURATION_BY_BLOCKS = 3456\n// ^ ~24 hours. Only matters if someone is monitoring specific domainName, otherwise they won't know what domainName the bids are for.\n\nexport {\n  TESTING,\n  MIN_BURN,\n  MIN_NOTIFY,\n  OWNERSHIP_DURATION_BY_BLOCKS,\n  BYTES_MAX\n}","import * as bitcoin from 'bitcoinjs-lib'\nimport { calcP2WSH } from './calcP2WSH'\nimport { MIN_BURN, MIN_NOTIFY } from './constants'\nimport { encrypt } from './cryptography'\nimport { I_Domain, I_Action_Choice } from './types/'\nimport { getUser } from './formathelpers'\nimport { getFinalScripts } from './bitcoin'\n\nconst hash160 = bitcoin.crypto.hash160\nconst op = bitcoin.opcodes\n\ninterface I_Tx_Result {\n  thisVirtualSize: number\n  txid: number\n  hex: string\n  valueNeeded: number\n  fee: number\n  change: number\n  burnAmount: number\n  notifyAmount: number\n  totalGathered: number\n  gatheredFromWallet: number\n  gatheredFromOther: number\n  nInputs: number\n  nOutputs: number\n  nInputsFromWallet: number\n  nInputsFromOther: number\n}\n\n/**\n * Creates hex of tx to bid on domain.\n * Throws error if not enough funds.\n * Leave vBytes blank, it will call itself via recursion until it derives needed size.\n * @param   {object}      wallet                  - { WIF, address, txHistory, utxoList, ... }.\n * @param   {object}      domain                  - all domain info\n * @param   {object}      choices                 - { action, feeRate, embedString, ... }\n * @param   {string}      networkChoice           - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @param   {number=}     [vBytes=0]              - size of transaction in vBytes. *\n * @returns {object}                              - Tx Results.\n */\nexport const calcTx = (\n  wallet: any,\n  domain: I_Domain,\n  choices: { action: I_Action_Choice, feeRate: number, embedString: string, [key: string]: any },\n  networkChoice: string,\n  vBytes: number = 0\n): I_Tx_Result => {\n\n  if (wallet.utxoList.length === 0) {\n    throw new Error('Wallet has no funds (utxo) to use')\n  }\n\n  // grab fee rate\n  const feeRate = choices.feeRate\n  // grab user object\n  const user = getUser({ domain }, wallet.address)\n  // grab network object\n  const network = bitcoin.networks[networkChoice]\n\n  // calculate domain notification address\n  const { notificationsAddress } = calcP2WSH(domain.domainName, networkChoice)\n\n  // calculate funds necessary for this tx, round up sat for more better than being below minimum.\n  const fee = Math.ceil(vBytes * feeRate)\n  const valueNeeded = MIN_BURN + MIN_NOTIFY + fee; // sat\n\n  // gather necessary utxo to use until enough to cover costs\n  let totalGathered = 0 // sat\n\n  // track multiple sources for providing detailed information\n  let gatheredFromWallet = 0\n  let gatheredFromOther = 0\n\n  // prepare extra inputs from other rules\n  // adding these first to totalGathered satoshi since have to add them all anyway\n  const isACSRequired = choices.action.special.some(list =>\n    list.rules.inputs && (list.rules.inputs === 'NO_USER_NOTIFICATION_UTXO')\n  )\n  isACSRequired && console.log('spending user\\'s previous acs utxo appears required')\n  let toBeUsedUtxoOfNotifications: Array<any> = []\n  if (isACSRequired) {\n    // must consume all ACS utxo wallet.address has created\n    // get all utxo for notification address\n    domain.derivedUtxoList.forEach(utxo => {\n      // use only utxo created from this wallet's address\n      if (utxo.from_scriptpubkey_address === wallet.address) {\n        toBeUsedUtxoOfNotifications.push(utxo)\n        totalGathered += utxo.value\n        gatheredFromOther += utxo.value\n      }\n    })\n  }\n\n  // Adding remaining funds from user's wallet to total Gathered\n  // Must always add at least 1 user utxo @ index 0 to indicate ownership\n  let toBeUsedUtxoOfUserWallet: Array<any> = []\n  wallet.utxoList.forEach((utxo: any) => {\n    // while not enough funds or if haven't added a single user utxo yet\n    if (totalGathered < valueNeeded || toBeUsedUtxoOfUserWallet.length === 0) {\n      toBeUsedUtxoOfUserWallet.push(utxo)\n      totalGathered += utxo.value\n      gatheredFromWallet += utxo.value\n    }\n  })\n\n  // all utxo parsed at this point\n\n  // if still not enough funds after all possible inputs,\n  // there are simply not enough funds to do the tx\n  if (totalGathered < valueNeeded) {\n    throw new Error('Not enough funds available (' + (valueNeeded / 1e8).toFixed(8) + ' sats)')\n  }\n\n\n  // calculate keys from wallet import format key\n  const keyPair = bitcoin.ECPair.fromWIF(wallet.WIF, network)\n  // create Partially Signed Bitcoin Transaction object to build tx\n  const psbt = new bitcoin.Psbt({ network })\n  psbt.setVersion(2)    // default\n  psbt.setLocktime(0)   // default\n\n  // add all inputs to transaction\n\n  // must be first added as owner address must always be at index 0 input\n  toBeUsedUtxoOfUserWallet.forEach(utxo => {\n    psbt.addInput({\n      hash: utxo.txid,\n      index: utxo.vout,\n      sequence: 0xfffffffe,\n      // should work for segwit and nonsegwit inputs\n      nonWitnessUtxo: Buffer.from(utxo.hex, 'hex')\n    })\n  })\n\n  // calculate witnessScript\n  const witnessScript = bitcoin.script.compile([\n    hash160(Buffer.from(domain.domainName, 'utf8')),\n    op.OP_DROP\n  ])\n\n  const inputScript = bitcoin.script.compile([op.OP_TRUE])\n\n  if (isACSRequired) {\n\n    // add each utxo to inputs\n    toBeUsedUtxoOfNotifications.forEach(utxo => {\n      if (!utxo.hex) {\n        // abort if missing raw hex\n        throw new Error(`Utxo is missing hex, txid: ${utxo.txid}, vout:${utxo.vout}`)\n      }\n      psbt.addInput({\n        hash: utxo.txid,\n        index: utxo.vout,\n        sequence: 0xfffffffe,\n        nonWitnessUtxo: Buffer.from(utxo.hex, 'hex'),\n        witnessScript: witnessScript\n      })\n    })\n  }\n\n  // inputs done\n\n  // outputs now\n\n  // add the op_return output (always index 0)\n  // if first time sending, nonce is '0', otherwise the last blockheight when this user has sent ANY tx to that notification address\n  // TODO calculate nonce in case this owner has unspent acs utxo left at notification address\n  const nonce = user.nonce.toString()\n  const encryptionKey =  domain.domainName + wallet.address + nonce\n  console.log('nonce used to encrypt', domain.domainName, wallet.address, nonce)\n  // if there's extra content add it, otherwise just regular string\n  const finalEmbedString = choices.action.actionContent !== ''\n    ? [choices.action.actionContent, choices.embedString].join(' ')\n    : choices.embedString\n  console.log('string embedded is', finalEmbedString)\n\n  const data = encrypt(finalEmbedString, encryptionKey)\n  const embed = bitcoin.payments.embed({ data: [data] })\n\n  // output[0]: check special tx rules for max amount required to burn among all of them\n  const burnAmount = choices.action.special.reduce((maxBurn: number, list: any) => {\n    console.log('choices.action.special each item:', list)\n    return (\n      // if there's another burn rule, use the highest value\n      ('output0value' in list.rules)\n        ? Math.max(maxBurn, list.rules.output0value)\n        : maxBurn\n    )\n  }, 0)\n  psbt.addOutput({\n    script: embed.output,\n    value: burnAmount,\n  })\n  console.log('rules say to burn ', burnAmount)\n\n  // output[1] add notification output (always index 1)\n  psbt.addOutput({\n    address: notificationsAddress, // calculated from domainName provided\n    value: MIN_NOTIFY\n  })\n\n  // output[2] add change output (anything is fine for output[2] or higher)\n  const changeAddress = choices.action.type === 'CHANGE_ADDRESS'\n    ? choices.action.actionContent.split(' ')[1] // new address\n    : wallet.address\n  const change = totalGathered - valueNeeded\n  psbt.addOutput({\n    address: changeAddress,\n    value: change\n  })\n\n  // at this point all inputs & outputs added so ready to sign\n\n  toBeUsedUtxoOfUserWallet.forEach((utxo, index) => {\n    // sign p2wpkh of controlling\n    psbt.signInput(index, keyPair)\n    // (TODO) signing ACS inputs will need script\n\n    if (!psbt.validateSignaturesOfInput(index)) {\n      throw new Error('Signature validation failed for input index ' + index.toString())\n    }\n  })\n\n  // finalizing inputs\n  // psbt.finalizeAllInputs()\n\n  // finalize regular p2wsh inputs normally\n  for (let i = 0; i < toBeUsedUtxoOfUserWallet.length; i++) {\n    psbt.finalizeInput(i)\n  }\n  // finalize witness script stack inputs with extra parameter\n  // for the submitted script parameters & original full script\n  for (\n    let i = toBeUsedUtxoOfUserWallet.length;\n    i < toBeUsedUtxoOfUserWallet.length + toBeUsedUtxoOfNotifications.length;\n    i++\n  ) {\n    psbt.finalizeInput(i, getFinalScripts({ inputScript, network }))\n  }\n\n  const tx = psbt.extractTransaction()\n  console.log(tx)\n  const thisVirtualSize = tx.virtualSize()\n  const txid = tx.getId()\n  const hex = tx.toHex()\n  const nInputs = tx.ins.length\n  const nOutputs = tx.outs.length\n\n  if (vBytes >= thisVirtualSize) {\n    // If this tx fee was calculated for a vBytes size equal to or larger than the resulting derived tx (thisVirtualSize),\n    // fee should be safe by being equal to or larger than necessary at required feeRate.\n    // Obviously vBytes = 0 will never give the correct fee minimum the first time through.\n    console.log('virtualSize', tx.virtualSize())\n    console.log('byteLength', tx.byteLength())\n    console.log('getId', tx.getId())\n    console.log('hex', tx.toHex())\n    console.log('')\n    return {\n      txid,\n      thisVirtualSize,\n      hex, valueNeeded,\n      fee,\n      change,\n      burnAmount,\n      notifyAmount: MIN_NOTIFY,\n      totalGathered,\n      gatheredFromWallet,\n      gatheredFromOther,\n      nInputs,\n      nOutputs,\n      nInputsFromWallet: toBeUsedUtxoOfUserWallet.length,\n      nInputsFromOther: toBeUsedUtxoOfNotifications.length || 0\n    }\n  } else {\n    // Redo this tx calculation using the virtual size we just calculated for vByte optional parameter.\n    return calcTx(\n      wallet, domain, choices, networkChoice, thisVirtualSize\n    )\n  }\n}\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P1RestoreOrBackup_wrapper__32TQJ\",\"title\":\"P1RestoreOrBackup_title__2rH-6\",\"contentWrapper\":\"P1RestoreOrBackup_contentWrapper__1NT85\",\"buttonWrapper\":\"P1RestoreOrBackup_buttonWrapper__2ryAq\",\"describe\":\"P1RestoreOrBackup_describe__1RMqs\",\"Orange\":\"P1RestoreOrBackup_Orange__2IaJN\",\"spacer\":\"P1RestoreOrBackup_spacer__3luud\",\"backup\":\"P1RestoreOrBackup_backup__357rd\",\"restoreBackup\":\"P1RestoreOrBackup_restoreBackup__VUHgs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P4ActionChoice_wrapper__2u2J5\",\"title\":\"P4ActionChoice_title__2PdRs\",\"availableActions\":\"P4ActionChoice_availableActions__1O5aS\",\"inputForms\":\"P4ActionChoice_inputForms__3vlaZ\",\"unavailableActions\":\"P4ActionChoice_unavailableActions__3rEYI\",\"buttonWrapper\":\"P4ActionChoice_buttonWrapper__3Sx3Y\",\"unavailableActions__title\":\"P4ActionChoice_unavailableActions__title__2EQ4_\",\"unavailableActions__actionList\":\"P4ActionChoice_unavailableActions__actionList__1VAc_\",\"unavailableActions__actionList__action\":\"P4ActionChoice_unavailableActions__actionList__action__GMwoW\",\"unavailableActions__actionList__action__title\":\"P4ActionChoice_unavailableActions__actionList__action__title__3ljZU\",\"unavailableActions__actionList__action__permissionList\":\"P4ActionChoice_unavailableActions__actionList__action__permissionList__2pKeq\",\"unavailableActions__actionList__action__permissionList__permission\":\"P4ActionChoice_unavailableActions__actionList__action__permissionList__permission__2eF7F\"};","import { newUser } from './initialState'\nimport { OWNERSHIP_DURATION_BY_BLOCKS, MIN_BURN, MIN_NOTIFY } from './constants'\nimport { I_User, I_Forward, I_BnsState, I_TX, I_UTXO } from './types/'\nimport { decrypt } from './cryptography'\n\n// ========== helper functions =====================\n\nexport const existsCurrentOwner = (st: I_BnsState): boolean => st.domain.currentOwner !== ''\nexport const existsUser = (st: I_BnsState, address: string): boolean => !!st.domain.users[address]\n\nexport const createNewUser = (st: I_BnsState, address: string): void => {\n  // create new user\n  st.domain.users[address] = JSON.parse(JSON.stringify(newUser))\n  // update its address for easy access\n  st.domain.users[address].address = address\n}\n\nexport const getOwnerAddress = (st: I_BnsState): string => st.domain.currentOwner || ''\n\nexport const setOwner = (st: I_BnsState, newOwnerAddress: string) => {\n  st.domain.currentOwner = newOwnerAddress\n}\n\nexport const getUser = (st: I_BnsState, address: string): I_User => st.domain.users[address]\n\nexport const getOwner = (st: I_BnsState) => {\n  const ownerAddress = getOwnerAddress(st)\n  if (!ownerAddress) return undefined\n  return getUser(st, ownerAddress)\n}\n\nexport const updateOwnerHistory = (st: I_BnsState): void => {\n  st.domain.ownersHistory.push(getOwner(st) || JSON.parse(JSON.stringify(newUser)))\n}\n\nexport const clearOwner = (st: I_BnsState): void => { st.domain.currentOwner = '' }\n\nexport const getCurrentHeight = (st: I_BnsState): number => st.chain?.currentHeight || 0\nexport const getParsedHeight = (st: I_BnsState): number => st.chain?.parsedHeight || 0\nexport const setParsedHeight = (st: I_BnsState, height: number): void => {\n  st.chain && (st.chain.parsedHeight = height)\n}\n\nexport const getNotificationAddress = (st: I_BnsState): string => st.domain.notificationAddress || ''\n\nexport const getLastOwnerBurnedValue = (st: I_BnsState): number => getOwner(st)?.burnAmount || 0\n\nexport const isOwnerExpired = (st: I_BnsState): boolean => {\n  if (!existsCurrentOwner(st)) return true // no owner same as expired\n  const owner = getOwner(st)\n  if (!owner) {\n    console.log('isOwnerExpired: owner exists but no user with such address stored')\n    return true\n  }\n  const blocksSinceUpdate = getParsedHeight(st) - owner.winHeight\n  return blocksSinceUpdate > OWNERSHIP_DURATION_BY_BLOCKS\n}\n\n// ===== tx functions (getters) =====================\n\nexport const getTxTimestamp = (tx: I_TX): number => tx.status.block_time || 0\nexport const getTxHeight = (tx: I_TX): number => tx.status.block_height || 0\n\nexport const getTxOutput0BurnValue = (tx: I_TX): number => tx.vout[0]?.value || 0\nexport const getTxOutput0Data = (tx: I_TX):string => {\n  if (isOpreturnOutput0(tx)) {\n    // remove 'OP_RETURN OP_PUSHBYTES_5 ' from it and return the rest\n    return tx.vout[0].scriptpubkey_asm.split(' ').slice(2).join('')\n  }\n  return ''\n}\n\nexport const getTxOutput1NotifyValue = (tx: I_TX): number => tx.vout[1]?.value || 0\nexport const getTxOutput1NotifyAddress = (tx: I_TX): string => tx.vout[1]?.scriptpubkey_address || ''\n\nexport const getTxInput0SourceUserAddress = (tx: I_TX): string => (\n  tx.vin[0]?.prevout.scriptpubkey_address || ''\n)\n\n\n// ======= update state from tx (setters) ========\n\n// update the info for the source user of the tx within bns state\n// when ran a second time, it simply updates nonce for post-tx value\nexport const updateSourceUserFromTx = (st: I_BnsState, tx: I_TX): void => {\n  const fromAddress = getTxInput0SourceUserAddress(tx)\n\n  // create new user if not already one of users\n  // if (!(fromAddress in st.domain.users)) {\n  if (!existsUser(st, fromAddress)) {\n    // create new user object by copying values of newUser object\n    createNewUser(st, fromAddress)\n    console.log('new source created:', fromAddress)\n  }\n\n  // update user heights/times\n  const user = st.domain.users[fromAddress]\n  user.nonce = user.updateHeight\n  user.updateHeight = getTxHeight(tx)\n}\n\nexport const addToUserForwards = (\n  st: I_BnsState,\n  fromAddress: string,\n  forwardsInThisTx: Array<I_Forward>\n) => {\n  const user = getUser(st, fromAddress)\n  user.forwards = [...user.forwards, ...forwardsInThisTx]\n}\n\n// parse embedded data and store in forwards\nexport const readEmbeddedData = (st: I_BnsState, tx: I_TX):void => {\n  // only go on if there is op_return with embedded data on output 0\n  if (!isOpreturnOutput0(tx)) {\n    console.log(getTxHeight(tx), ': no op_return found for txid')\n    return undefined\n  }\n\n  // get useful object references\n  const fromAddress = getTxInput0SourceUserAddress(tx)\n  const user = getUser(st, fromAddress)\n  const nonce = user.nonce.toString()\n\n  const embeddedDataHex = getTxOutput0Data(tx)\n  const embeddedDataBuffer = Buffer.from(embeddedDataHex, 'hex')\n\n  const decryptionKey = st.domain.domainName + user.address + nonce\n  console.log(\n    getTxHeight(tx),\n    ': decryption key: ',\n    st.domain.domainName,\n    user.address,\n    nonce\n  )\n  const embeddedDataUtf8 = decrypt(embeddedDataBuffer, decryptionKey)\n  console.log(getTxHeight(tx), ': found embedded data:', embeddedDataUtf8)\n\n  // split by spaces into array\n  const embeddedDataUtf8Array = embeddedDataUtf8.split(' ')\n\n  // collect all forwards in this tx\n  const forwardsInThisTx: Array<I_Forward> = []\n\n  embeddedDataUtf8Array.forEach((word: string, index: number) => {\n    // everything must be space separated in pairs\n    // so single block might mean failed decryption or\n    // last unpaired block might be padding or future versioning\n    // grabbing only odd and 1 before it values, only grabbing pairs\n    if (index % 2 === 1) {\n      const networkPiece = embeddedDataUtf8Array[index - 1]\n      const forwardingAddressPiece = word\n      const thisForward = {\n        network:          networkPiece,\n        address:          forwardingAddressPiece,\n        updateHeight:     getTxHeight(tx),\n        updateTimestamp:  getTxTimestamp(tx)\n      }\n      forwardsInThisTx.push(thisForward)\n    }\n  })\n\n  // update forwards on the user\n  addToUserForwards(st, fromAddress, forwardsInThisTx)\n}\n\n// ===== rule checks (getters) =====\n\n// Describe:    2 outputs minimum\nexport const atLeastTwoOutputs = (tx: I_TX): boolean => tx.vout.length >= 2\n\n// Describe:    Is [0] output OP_RETURN type\nexport const isOpreturnOutput0 = (tx: I_TX): boolean => (\n  tx.vout[0].scriptpubkey_asm.split(' ')[0] === 'OP_RETURN'\n)\n\n// Describe:    Is [1] output this domain's notification address?\nexport const isNotify =  (st: I_BnsState, tx: I_TX): boolean => (\n  getTxOutput1NotifyAddress(tx) === getNotificationAddress(st)\n)\n\n// Describe:    At least minimum amount used in notification output? (Dust level is main danger)\nexport const didNotifyMin = (tx: I_TX): boolean => getTxOutput1NotifyValue(tx) >= MIN_NOTIFY\n\n// Describe:    Is address the current domain owner?\nexport const isAddressTheCurrentOwner = (st: I_BnsState, address: string): boolean =>\n  getOwnerAddress(st) === address\n\n// Describe:    Is tx sender the current domain owner (input [0], id'ed by address)?\nexport const isSenderTheCurrentOwner = (st: I_BnsState, tx: I_TX): boolean =>\n  getOwnerAddress(st) === getTxInput0SourceUserAddress(tx)\n\n// Describe:    At least minimum amount burned?\nexport const didBurnMin = (tx: I_TX): boolean =>\n  getTxOutput0BurnValue(tx) >= MIN_BURN\n\n// Describe:    Burned at least as much as previously burnt\nexport const burnedPreviousRateMin = (st: I_BnsState, tx: I_TX): boolean => (\n  getTxOutput0BurnValue(tx) >= getLastOwnerBurnedValue(st)\n)\n\n/**\n * Checks if this command exists at tx height from tx user.\n */\nexport const isCommandCalled = (\n  st: I_BnsState,\n  tx: I_TX,\n  command: string\n): boolean  => {\n  return !!getCommandCalled(st, tx, command)\n}\n\n/**\n * Gets command called in most recent forwards from user of tx.\n */\nexport const getCommandCalled = (\n  st: I_BnsState,\n  tx: I_TX,\n  command: string\n): I_Forward | undefined  => {\n\n  // get tx height (only current height is relevant for commands)\n  const txHeight = getTxHeight(tx)\n  // who sent the tx\n  const fromAddress = getTxInput0SourceUserAddress(tx)\n  // get user object of the tx sender\n  const user = getUser(st, fromAddress)\n  // array of forwards\n  const forwards = user.forwards\n\n\n  // scan height and name of each forward\n  for (const thisForward of forwards) {\n    const network = thisForward.network\n    const forwardHeight = thisForward.updateHeight\n    if (forwardHeight === txHeight) {\n      // commands are identified via a string (starts with !)\n      if (network.startsWith(command)) {\n        // found it so return in\n        return thisForward\n      }\n    }\n  }\n\n  return undefined\n}\n\n// Describe: update current derivedUtxoList from tx\n// Since utxo in question are the notificaiton address utxo,\n// they will always be part of txHistory\nexport const updateUtxoFromTx = (st: I_BnsState, tx: I_TX): void => {\n  const notificationAddress = getNotificationAddress(st)\n\n  // scan every tx input for notification address and remove those from utxo set\n  tx.vin.forEach((input: any) => {\n    // can scan by previous address or by current utxo list's txid+vout pairs\n    if (input.prevout.scriptpubkey_address === notificationAddress) {\n      const txid = input.txid\n      const vout = input.vout\n      // find first match with these values in derivedUtxoList\n      const spentUtxoIndex = st.domain.derivedUtxoList.findIndex(utxo => (\n        utxo.txid === txid && utxo.vout === vout\n      ))\n      // remove element at the position found\n      // utxo can only be spent once so first match ok\n      st.domain.derivedUtxoList.splice(spentUtxoIndex, 1)\n    }\n  })\n\n  // scan every tx output for notification address and add those to utxo set\n  tx.vout.forEach((output: any, vout: number) => {\n    if (output.scriptpubkey_address === notificationAddress) {\n      // if output address is notification address, it's always new utxo\n      // mark from address as address @ input 0 of the tx\n      st.domain.derivedUtxoList.push({\n        txid: tx.txid,\n        vout: vout,\n        status: tx.status,\n        value: output.value,\n        from_scriptpubkey_address: getTxInput0SourceUserAddress(tx)\n      } as I_UTXO)\n    }\n  })\n}\n\n// returns true only if there are no utxo (at notification address)\n// where the sender address (input[0] in the past) is the same as\n// the sender address of this tx (input[0])\nexport const noUnspentUserNotificationsUtxo = (st: I_BnsState, tx: I_TX): boolean => {\n  // sender address of this tx\n  const userOfTxAddress = getTxInput0SourceUserAddress(tx)\n  const txHeight = getTxHeight(tx)\n\n  // go through all derived utxo and make sure none are from this sender\n  for (const utxo of st.domain.derivedUtxoList) {\n    // user that created this utxo\n    const userThatCreatedThisUtxo = utxo.from_scriptpubkey_address\n\n    // block height of utxo creation\n    const utxoHeight = utxo.status.block_height\n\n    // only utxo formed before this tx height matter\n    // this tx would've likely created a new utxo that shouldn't count\n    const isInThePast = utxoHeight < txHeight\n\n    // all utxo in derived set should have from address\n    !userThatCreatedThisUtxo && console.log(\n      'st.domain.derivedUtxoList for some reason has undefined from_scriptpubkey_address'\n    )\n    // if even 1 matches, the check failed\n    if ((userThatCreatedThisUtxo === userOfTxAddress) && isInThePast) {\n      return false\n    }\n  }\n\n  // only gets this far if no utxo creators match our current tx user\n  return true\n}","import * as bitcoin from 'bitcoinjs-lib'\r\nimport bip39 from 'bip39'\r\nconst varuint = require('varuint-bitcoin');\r\n\r\n\r\n/**\r\n * Scans the address for utxo on a given network.\r\n * (In BNS would be useful for wallet and notification address)\r\n */\r\n// export const scanAddress = async (address: string, strNetwork: string) => {\r\n  // create array of utxo\r\n\r\n\r\n  // add full tx hex to that array (might take time)\r\n// }\r\n\r\n/**\r\n * Make new mnemonic for p2wpkh m/44'/0'/0'/0/0 address and WIF.\r\n * @param     {string}    strNetwork    String describing network ('bitcoin', 'testnet').\r\n * @returns   {object}                  Object { mnemonic, WIF, address } - all strings.\r\n */\r\nexport const createNewWallet = (strNetwork: string) => {\r\n  // network version. bitcoin or testnet\r\n  const network = bitcoin.networks[strNetwork]\r\n  // create backup phrase\r\n  const mnemonic = bip39.generateMnemonic()\r\n  const seedBuffer = bip39.mnemonicToSeed(mnemonic)\r\n  // create derivation master node\r\n  const masterNode = bitcoin.bip32.fromSeed(seedBuffer, network)\r\n  // derive m/44'/0'/0'/0 /0 node\r\n  const childNode0 = masterNode.derivePath(\"m/44'/0'/0'\").derivePath(\"0/0\")\r\n  // get private key in wallet import format for that child node\r\n  const WIF = childNode0.toWIF()\r\n  // derive a standard p2wpkh address from that WIF\r\n  const keyPair = bitcoin.ECPair.fromWIF(WIF, network)\r\n  const address = bitcoin.payments.p2wpkh({ pubkey: keyPair.publicKey, network }).address\r\n\r\n  return { mnemonic, WIF, address }\r\n}\r\n\r\n/**\r\n * Load p2wpkh m/44'/0'/0'/0/0 wallet info from mnemonic.\r\n * @param     {string}    strMnemonic     Mnemonic string of 12 words as described in bip39.\r\n * @param     {string}    strNetwork      String describing network ('bitcoin', 'testnet').\r\n * @returns   {object}                    Object { mnemonic, WIF, address } - all strings.\r\n */\r\nexport const loadWallet = (strMnemonic: string, strNetwork: string) => {\r\n  // network version. bitcoin or testnet\r\n  const network = bitcoin.networks[strNetwork]\r\n  const seedBuffer = bip39.mnemonicToSeed(strMnemonic)\r\n  // create derivation master node\r\n  const masterNode = bitcoin.bip32.fromSeed(seedBuffer, network)\r\n  // derive m/44'/0'/0'/0 /0 node\r\n  const childNode0 = masterNode.derivePath(\"m/44'/0'/0'\").derivePath(\"0/0\")\r\n  // get private key in wallet import format for that child node\r\n  const WIF = childNode0.toWIF()\r\n  // derive a standard p2wpkh address from that WIF\r\n  const keyPair = bitcoin.ECPair.fromWIF(WIF, network)\r\n  const address = bitcoin.payments.p2wpkh({ pubkey: keyPair.publicKey, network }).address\r\n\r\n  return { mnemonic: strMnemonic, WIF, address }\r\n}\r\n\r\n\r\n//\r\n/**\r\n * Parse UTXO array to get total unspent balance in satoshi.\r\n * @param     {Array}    utxoArray      Array of UTXO objects with '.value' field in satoshi.\r\n * @returns   {number}                  Total number of unspent satoshi.\r\n */\r\nexport function getUnspentSum(utxoArray: Array<any>): number {\r\n\r\n  const sumSats = utxoArray?.reduce(\r\n    (sum: number, utxo: any) => sum + utxo.value\r\n    , 0) || 0\r\n\r\n  return sumSats\r\n}\r\n\r\n\r\n/**\r\n * Finalize outputs that require custom scripts.\r\n * Based on based on https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/csv.spec.ts\r\n */\r\nexport const getFinalScripts = ({ inputScript, network }: any) => {\r\n  return function (\r\n    inputIndex: number,\r\n    input: any,\r\n    script: Buffer,\r\n    isSegwit: boolean,\r\n    isP2SH: boolean,\r\n    isP2WSH: boolean,\r\n  ): {\r\n    finalScriptSig: Buffer | undefined;\r\n    finalScriptWitness: Buffer | undefined;\r\n  } {\r\n    // Step 1: Check to make sure the meaningful script matches what you expect.\r\n\r\n    // Step 2: Create final scripts\r\n    let payment: any = {\r\n      network,\r\n      output: script,\r\n      input: inputScript,\r\n    };\r\n    if (isP2WSH && isSegwit)\r\n      payment = bitcoin.payments.p2wsh({\r\n        network,\r\n        redeem: payment,\r\n      });\r\n    if (isP2SH)\r\n      payment = bitcoin.payments.p2sh({\r\n        network,\r\n        redeem: payment,\r\n      });\r\n\r\n    function witnessStackToScriptWitness(witness: Buffer[]): Buffer {\r\n      let buffer = Buffer.allocUnsafe(0);\r\n\r\n      function writeSlice(slice: Buffer): void {\r\n        buffer = Buffer.concat([buffer, Buffer.from(slice)]);\r\n      }\r\n\r\n      function writeVarInt(i: number): void {\r\n        const currentLen = buffer.length;\r\n        const varintLen = varuint.encodingLength(i);\r\n\r\n        buffer = Buffer.concat([buffer, Buffer.allocUnsafe(varintLen)]);\r\n        varuint.encode(i, buffer, currentLen);\r\n      }\r\n\r\n      function writeVarSlice(slice: Buffer): void {\r\n        writeVarInt(slice.length);\r\n        writeSlice(slice);\r\n      }\r\n\r\n      function writeVector(vector: Buffer[]): void {\r\n        writeVarInt(vector.length);\r\n        vector.forEach(writeVarSlice);\r\n      }\r\n\r\n      writeVector(witness);\r\n\r\n      return buffer;\r\n    }\r\n\r\n    return {\r\n      finalScriptSig: payment.input,\r\n      finalScriptWitness:\r\n        payment.witness && payment.witness.length > 0\r\n          ? witnessStackToScriptWitness(payment.witness)\r\n          : undefined,\r\n    };\r\n  }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P3DomainAndWallet_wrapper__1ElFg\",\"contentWrapper\":\"P3DomainAndWallet_contentWrapper__vm5qp\",\"title\":\"P3DomainAndWallet_title__3ing2\",\"domainInfo\":\"P3DomainAndWallet_domainInfo__3p2aJ\",\"domainButton\":\"P3DomainAndWallet_domainButton__2PIDz\",\"walletInfo\":\"P3DomainAndWallet_walletInfo__2cQY0\",\"walletButton\":\"P3DomainAndWallet_walletButton__MmLZ3\",\"unspent\":\"P3DomainAndWallet_unspent__bUWZW\",\"buttonWrapper\":\"P3DomainAndWallet_buttonWrapper__djJkL\",\"ownership\":\"P3DomainAndWallet_ownership__lSY6a\",\"balance\":\"P3DomainAndWallet_balance__2fns7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SearchResults_wrapper__VvaYk\",\"breakable\":\"SearchResults_breakable__3r3ay\",\"listContainer\":\"SearchResults_listContainer__12vQE\",\"listItem\":\"SearchResults_listItem__3Udwx\",\"key\":\"SearchResults_key__358jo\",\"expired\":\"SearchResults_expired__2ptnD\",\"createLink\":\"SearchResults_createLink__13Wez\",\"describe\":\"SearchResults_describe__3HACm\",\"ownershipDetails\":\"SearchResults_ownershipDetails__1Z7p1\"};","// for BNS\nexport enum BNSActions {\n  RENEW = 'RENEW',\n  ONLY_FORWARDS = 'ONLY_FORWARDS',\n  CLAIM_OWNERSHIP = 'CLAIM_OWNERSHIP',\n  SEND_OWNERSHIP = 'SEND_OWNERSHIP',\n  CHANGE_ADDRESS = 'CHANGE_ADDRESS'\n}\n\nexport interface I_BNS_Action {\n  type: BNSActions\n  info: string\n  permissions: Array<any>\n  conditions: Array<any>\n  execute: () => void\n  suggestions?: string | undefined\n}\n\nexport interface I_BNS_Auto_Action {\n  info: string\n  conditions: Array<any>\n  execute: () => void\n}\n\nexport interface I_Action_Choice {\n  type: BNSActions\n  info: string\n  special: Array<any>\n  actionContent: string\n}\n\nexport interface I_BnsState {\n  domain: I_Domain\n  chain?: {\n    parsedHeight: number\n    currentHeight: number\n  }\n}\n\nexport interface I_Domain {\n  domainName: string\n  notificationAddress: string\n  txHistory: Array<I_TX>\n  derivedUtxoList: Array<I_UTXO>\n  utxoList: Array<I_UTXO>\n  users: {\n    [key: string]: I_User\n  }\n  currentOwner: string\n  bidding: {}\n  ownersHistory: Array<I_User>\n}\n\nexport interface I_User {\n  address:      string\n  forwards:     Array<I_Forward>\n  burnAmount:   number\n  winHeight:    number\n  winTimestamp: number\n  nonce:        number\n  updateHeight: number\n}\n\n  // each forward object has the following data\nexport interface I_Forward {\n  network: string\n  address: string\n  updateHeight: number\n  updateTimestamp: number\n}\n\nexport interface I_TX {\n  txid: string\n  version: number\n  locktime: number\n  size: number\n  weight: number\n  fee: number\n  vin: Array <{\n    txid: string\n    vout: number\n    prevout: {\n      scriptpubkey: string\n      scriptpubkey_asm: string\n      scriptpubkey_type: string\n      scriptpubkey_address: string\n    }\n    scriptsig: string\n    scriptsig_asm: string\n    witness: {\n      [key: number]: string\n    }\n    is_coinbase: boolean\n    sequence: number\n  }>\n  vout: Array <{\n    scriptpubkey: string\n    scriptpubkey_asm: string\n    scriptpubkey_type: string\n    scriptpubkey_address: string // op return case?\n    value: number\n  }>\n  status: {\n    confirmed: boolean      // unconfirmed case?\n    block_height: number\n    block_hash: string\n    block_time: number\n  }\n}\n\nexport interface I_UTXO {\n  txid: string\n  vout: number\n  status: {\n    confirmed: boolean\n    block_height: number\n    block_hash: string\n    block_time: number\n  }\n  value: number\n  hex?: string\n  from_scriptpubkey_address?: string\n}\n\nexport interface I_Condition {\n  info: string\n  status: () => boolean\n  special?: { [key: string]: string | number }\n}","import {\n  I_Domain,\n  I_TX,\n  I_UTXO,\n  I_Action_Choice\n} from './../helpers/bns/types/'\n\n/**\n * All the interfaces & enums\n */\n\n\nexport * from './../helpers/bns/types/'\n\n// for global state action creators\nexport enum ActionTypes {\n  STORE_SEARCH_RESULTS = 'STORE_SEARCH_RESULTS',\n  STORE_SEARCH_RESULTS_FAIL = 'STORE_SEARCH_RESULTS_FAIL',\n  TYPING = 'TYPING',\n  NEW_WALLET = 'NEW_WALLET',\n  CHANGE_PAGE_INFO = 'CHANGE_PAGE_INFO',\n  UPDATE_WALLET = 'UPDATE_WALLET',\n  UPDATE_DOMAIN = 'UPDATE_DOMAIN',\n  ACTION_FAIL = 'ACTION_FAIL',\n  LOAD_STATE = 'LOAD_STATE',\n  CHOICES_BNS_ACTION = 'CHOICES_BNS_ACTION'\n}\n\nexport type Dispatch = React.Dispatch<I_Action>\n\nexport interface I_Action {\n  type: ActionTypes\n  payload: any\n}\n\nexport interface I_State {\n  network: string\n  alias: string\n  extension: string\n  domain: I_Domain\n  wallet: {\n    address: string\n    mnemonic: string\n    WIF: string\n    txHistory:  Array<I_TX>\n    utxoList: Array<I_UTXO>\n  }\n  chain: {\n    height: number\n  }\n  choices: {\n    action: I_Action_Choice | {}\n    feeRate: number\n    txHex: string\n    embedString: string\n  }\n  pageInfo: {\n    current: number\n    checkedDomain: boolean\n    checkedWallet: boolean\n    checkedLightSearch: boolean\n  }\n  lastTimeStamp: number\n}\n","import React from 'react'\nimport styles from './RoundButton.module.css'\n\n/**\n * Standard button for this app.\n *\n * Pass the following props to customize it.\n *\n * next='true' to add next arrow at right (off if undefined or '').\n *\n * back='true' to add back arrow on left (off if undefined or '').\n *\n * show='true' to display element vs show='false' to set display to none (dom still exists).\n *\n * sizebutton='2.9' to make the button size 2.9x standard var(--s) size used (defined in global global.css).\n *\n * colorbutton='var(--colorBitcoinOrange)' to customize color.\n *\n * colorbuttonText='var(--colorButtonText)' to customize text color.\n *\n * Defaults (vars defined in global global.css):\n *\n * sizebutton = 2.5. ( means font size calc(2.5/2.9 * var(--s)) )\n *\n * colorbutton = var(--colorBitcoinOrange).\n *\n * colorbuttontext = var(--colorButtonText).\n */\nexport const RoundButton = (props:any): JSX.Element => {\n  return (\n    <div\n      // variables defined by string will be available to button & its children for scope\n      style={ {\n        display: (\n          (props?.show === 'false') ? 'none' : 'inline-block'\n        ) as React.CSSProperties,\n        '--colorThisButton': (\n          props.colorbutton ? props.colorbutton : `var(--colorBitcoinOrange)`\n        )  as React.CSSProperties,\n        '--colorThisButtonText': (\n          props.colorbuttontext ? props.colorbuttontext : `var(--colorButtonText)`\n        ) as React.CSSProperties,\n        '--sizeButton': (\n          props.sizebutton\n          // Button was designed at 2.9 * var(--s) scale font so\n          // this just lets user redefine font & everything else proportionally\n            ? `calc(${props.sizebutton}/2.9 * var(--s))`\n            : `calc(2.5/2.9 * var(--s))`\n        ) as React.CSSProperties\n      } }\n      {...props}\n      className={ [\n        styles.roundButtonWrap,\n        props.back ? styles.back : '',\n        props.className\n      ].join(' ') }\n    >\n      <div\n        className={ [\n          styles.roundButton,\n          props.back ? styles.backArrow : undefined,\n          props.next ? styles.nextArrow : undefined,\n        ].join(' ') }\n      >\n        { props.children }\n        <div\n          className={ styles.overhead }\n        ></div>\n      </div>\n    </div>\n  )\n}\n","import { I_State, I_Action, ActionTypes } from '../../interfaces'\nimport { initialState } from './../'\nconst {\n  STORE_SEARCH_RESULTS_FAIL,\n  STORE_SEARCH_RESULTS,\n  TYPING,\n  NEW_WALLET,\n  CHANGE_PAGE_INFO,\n  UPDATE_WALLET,\n  UPDATE_DOMAIN,\n  ACTION_FAIL,\n  LOAD_STATE,\n  CHOICES_BNS_ACTION\n} = ActionTypes\n\n/**\n * Reducer edits global state via information in payload.\n * Action is object { payload, type }.\n * type describes what type of changes to global state to make.\n * payload contains data provided to make those changes.\n */\nexport default function reducer (state: I_State, action: I_Action): I_State {\n  const { payload } = action\n\n  switch (action.type) {\n\n    case CHOICES_BNS_ACTION: {\n      // BNS action chosen\n      return {\n        ...state,\n        choices: {\n          ...state.choices,\n          ...payload\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case UPDATE_WALLET: {\n      // after full scan of the wallet address\n      return {\n        ...state,\n        wallet: {\n          ...state.wallet, // wif/mnemonic/address unchanged\n          txHistory: payload.wallet.txHistory,\n          utxoList: payload.wallet.utxoList\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedWallet: true\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case UPDATE_DOMAIN: {\n      return {\n        ...state,\n        domain: {\n          ...payload.domain\n        },\n        chain: {\n          height: payload.chain.height\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedDomain: true\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case CHANGE_PAGE_INFO:\n      // navigation info for controlling domains\n      return {\n        ...state,\n        pageInfo: {\n          ...state.pageInfo,\n          current: payload\n        }\n      }\n\n    case NEW_WALLET: {\n      // store totally new wallet object\n      return {\n        ...state,\n        wallet: {\n          ...initialState.wallet,\n          address: payload.address,\n          mnemonic: payload.mnemonic,\n          WIF: payload.WIF\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedWallet: false\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case STORE_SEARCH_RESULTS: {\n      // store results of looking up totally new alias\n      // update notifications and ownership information\n\n      return {\n        ...state,\n        alias: payload.alias,\n        domain: {\n          ...initialState.domain,\n          ...payload.domain\n        },\n        chain: {\n          height: payload.chain.height\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedDomain: false,\n          checkedLightSearch: true\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case STORE_SEARCH_RESULTS_FAIL: {\n      // store results of looking up totally new alias\n      // reset notifications and ownership information\n      return {\n        ...state,\n        alias: payload.alias,\n        domain: {\n          ...initialState.domain,\n          domainName: payload.domainName,\n          notificationAddress: payload.notificationAddress\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedDomain: false,\n          checkedLightSearch: false\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case TYPING: {\n      // change of alias part of domain name\n      // this change renders owner and notification information outdated\n      return {\n        ...state,\n        alias: payload,\n        domain: initialState.domain,\n        pageInfo: {\n          ...state.pageInfo,\n          current: 1,\n          checkedDomain: false,\n          checkedLightSearch: false\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case ACTION_FAIL: {\n      return {\n        ...state,\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case LOAD_STATE: {\n      return {\n        ...payload,\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    default: {\n      console.warn('Unknown action type')\n      return state\n    }\n  }\n}\n\n// can split maybe like this later if gets too long\n// https://dev.to/vanderleisilva/global-state-management-with-react-hooks-and-context-5f6h\n\n","import React from 'react'\nimport { I_State } from '../interfaces'\nimport reducer from './reducers/Reducer'\n\n// Change state process:\n// 1. Component calls action from src/store/actions/\n// 2. Action does stuff (e.g. API calls) and dispatches results to reducer in src/store/reducer/\n// 3. Reducer modifies state based on dispatched payload and type of action.\n\n// initial state\n// (changes to design need to be matched in reducers & interfaces)\nexport const initialState: I_State = {\n  network: 'testnet',             // 'testnet' or 'bitcoin'\n  alias: 'satoshi',               // first half of domain name\n  extension: '.btc',              // last half of domain name\n  domain: {                       // domain info from notifications\n    domainName: '',\n    notificationAddress: '',      // p2wsh address for this domain name (alias + extension)\n    txHistory: [],                // array of all tx for this address (old addressHistory)\n    derivedUtxoList: [],          // calculated utxo set from txHistory parse\n    utxoList: [],                 // array of all real time utxo for this address\n    users: {},                    // object with all interacting users\n    currentOwner: '',             // address of user that controls domain\n    bidding: {},                  // bidding info\n    ownersHistory: []             // history of ownership\n  },\n  wallet: {                       // wallet information & utxo for controlling domain names\n    address: '',                  // public address (p2wpkh)\n    mnemonic: '',                 // mnemonic for private key derivation\n    WIF: '',                      // wallet import format for private key derivation\n    txHistory: [],                // array of all tx for this address\n    utxoList: [],                 // array of all current utxo for this address\n  },\n  chain: {\n    height: 0                     // height of blockchain\n  },\n  pageInfo: {                     // user navigation information for controlling domain name\n    current: 1,\n    checkedDomain: false,         // current domain notification address was scanned\n    checkedWallet: false,         // current wallet address was scanned\n    checkedLightSearch: false     // if light search was done (no utxo / txhex scan)\n  },\n  choices: {                      // choices made by user via this app\n    action: [],                   // choices and data for action to take\n    feeRate: 1.1,                 // fee rate to use in sat/bByte,\n    txHex: '',                    // hex of raw transaction, ideally ready for broadcast\n    embedString: ''               // string to embed in op_return\n  },\n  lastTimeStamp: Date.now(),      // last change timestamp, to detect any changes to state or time out\n}\n\n// helper methods\nexport const getOwner = (st: I_State) => {\n  const ownerAddress = st.domain.currentOwner\n  return st.domain.users[ownerAddress]\n}\n\nexport const getUser = (st: I_State, address: string) => {\n  return st.domain.users[address]\n}\n\nexport const Store = React.createContext<any>(initialState)\n// returns object with .Provider and .Consumer\n// Provider makes state available to all child components no matter how deep\n\n\n\n// creates wrapping element for global state\nexport function StoreProvider ({ children }: JSX.ElementChildrenAttribute): JSX.Element {\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n\n  return (\n    <Store.Provider value={{ state, dispatch }}>\n      { children }\n    </Store.Provider>\n  )\n}\n","/**\r\n * Takes in a string of interest inputString\r\n * and Array of strings or string describing filter.\r\n * Returns the string of interst with only characters present in filters selected.\r\n */\r\nexport default function  sanitize (inputString, stringOrArray) {\r\n  // get choice input into same form of array of string(s) of choices\r\n  let choices; // :string | Array<string>\r\n  if (Array.isArray(stringOrArray)) {\r\n    choices = stringOrArray;\r\n  }\r\n  if (typeof stringOrArray === 'string') {\r\n    choices = [stringOrArray];\r\n  }\r\n\r\n  // add each choice to filter selection\r\n\r\n  // string mask\r\n  let filter = '';\r\n  // array of functions\r\n  const logicFilters = [];\r\n\r\n  choices.forEach(choice => {\r\n\r\n    // short masks\r\n    if (choice === 'numbers') {\r\n      filter += '0123456789';\r\n    }\r\n    if (choice === 'decimal_point') {\r\n      filter += '.';\r\n    }\r\n    if (choice === 'hex') {\r\n      filter += '0123456789abcdefABCDEF';\r\n    }\r\n    if (choice === 'lowcaps') {\r\n      filter += 'abcdefghijklmnopqrstuvwxyz';\r\n    }\r\n    if (choice === 'highcaps') {\r\n      filter += 'ABCDEFGHIJKLMNOPQRSTUVWYZ';\r\n    }\r\n    if (choice === 'spaces') {\r\n      filter += ' ';\r\n    }\r\n\r\n    // longer masks\r\n    if (choice === 'base58') {\r\n      // https://en.wikipedia.org/wiki/Base58#cite_note-3\r\n      filter += '12345689ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\r\n    }\r\n    if (choice === 'basic') {\r\n      filter += '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    }\r\n    if (choice === 'oneline') {\r\n      filter += '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,./-_!`~[]{}|@#%^&()-=?$';\r\n    }\r\n    if (choice === 'url') {\r\n      //  RFC 3986 (Section 2: Characters) 84 total\r\n      filter += `0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:/?#[]@!$&'()*+,;=-_.~`;\r\n    }\r\n\r\n    // ========================================================\r\n    // functions\r\n    // adds anon function to array of functions\r\n\r\n    if (choice === 'no_spaces') {\r\n      logicFilters.push(str =>\r\n        str.split('')\r\n          .filter(letter => letter !== ' ')\r\n          .join(''))\r\n    }\r\n\r\n    if (choice === 'single_space_width') {\r\n      logicFilters.push(str =>\r\n        // split by 2+ spaces and replace with single space\r\n        str.split(/  */).join(' ')\r\n      )\r\n    }\r\n\r\n    // keep only first decimal point\r\n    if (choice === 'decimal_point') {\r\n\r\n      logicFilters.push(str =>\r\n        (str\r\n          // splits to array between .\r\n          .split('.')\r\n          // join first 2 elements with ., others with empty string\r\n          // returns a string\r\n          .reduce((resultingString, numbers, index) => {\r\n            // real . goes b/w array's index 0 and 1, even if string had . first\r\n            const digits = (index === 0 && numbers === '') ? '0' : numbers\r\n            return (index === 1)\r\n              ? [ resultingString, digits ].join('.')\r\n              : [ resultingString, digits ].join('')\r\n          }, '')\r\n        )\r\n      )\r\n    }\r\n\r\n    if (choice === 'no_leading_zeros') {\r\n\r\n      logicFilters.push(str =>\r\n        (str\r\n          // splits to array between .\r\n          .split('.')\r\n          .map((numbers, index) => {\r\n            if (index === 0) {\r\n              return (parseInt(numbers, 10) || 0).toString()\r\n            } else {\r\n              return numbers\r\n            }\r\n          })\r\n          .join('.')\r\n        )\r\n      )\r\n    }\r\n\r\n  })\r\n\r\n  if (filter.length === 0 && logicFilters.length === 0) {\r\n    console.warning('sanitize used w/o any known filters', stringOrArray)\r\n  }\r\n\r\n  let outputString = '';\r\n\r\n  // apply string mask to only keep characters within filter string\r\n  outputString = inputString\r\n    .split('')\r\n    .filter(letter => filter.indexOf(letter) > -1)\r\n    .join('');\r\n\r\n  // use every selected logic function on the outputString\r\n  logicFilters.forEach(fn => outputString = fn(outputString))\r\n\r\n  return outputString;\r\n}\r\n\r\n\r\n// function sanitizeOld (inString, type) {\r\n//   let filter;\r\n//   if (type === 'base58') {\r\n//     // https://en.wikipedia.org/wiki/Base58#cite_note-3\r\n//     filter = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\r\n//   } else if (type === 'hex') {\r\n//     filter = '0123456789abcdef';\r\n//   } else if (type === 'basic') {\r\n//     filter = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n//   } else if (type === 'numbers') {\r\n//     filter = '0123456789';\r\n//   } else if (type === 'fractions') {\r\n//     filter = '0123456789.';\r\n//   } else if (type === 'oneline') {\r\n//     filter = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,./-_!`~[]{}|@#%^&()-=?$';\r\n//   } else if (type === 'url') {\r\n//     filter = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ./-_';\r\n//   } else {\r\n//     console.log('sanitize: valid type not provided');\r\n//     return undefined;\r\n//   }\r\n\r\n//   const res = inString\r\n//     .split('')\r\n//     .filter(letter => filter.indexOf(letter) > -1)\r\n//     .join('');\r\n\r\n//   return res;\r\n// }","import { I_State, Dispatch } from '../../interfaces'\nimport sanitize from '../../helpers/sanitize'\nimport { ActionTypes } from './../../interfaces'\nconst { TYPING } = ActionTypes;\n\n/**\n * Cleans up the entered string including removing next line characters\n */\nexport const changeAliasAction = async (state: I_State, dispatch: Dispatch, value: any) => {\n  // clean up the string\n  const newString = value\n  const sanitizedString = sanitize(newString, 'url')\n\n  return dispatch({\n    type: TYPING,\n    payload: sanitizedString\n  })\n}\n","import {\n  I_BnsState,\n  BNSActions,\n  I_BNS_Action,\n  I_BNS_Auto_Action,\n  I_Condition,\n  I_TX\n} from './../types/'\nimport { MIN_NOTIFY, MIN_BURN } from './../constants'\nimport {\n  existsCurrentOwner,\n  isOwnerExpired,\n  clearOwner,\n  getParsedHeight,\n  atLeastTwoOutputs,\n  isNotify,\n  isOpreturnOutput0,\n  didNotifyMin,\n  didBurnMin,\n  setOwner,\n  getOwner,\n  getUser,\n  getTxInput0SourceUserAddress,\n  getTxHeight,\n  getTxTimestamp,\n  getTxOutput0BurnValue,\n  isAddressTheCurrentOwner,\n  burnedPreviousRateMin,\n  readEmbeddedData,\n  getLastOwnerBurnedValue,\n  isSenderTheCurrentOwner,\n  updateUtxoFromTx,\n  noUnspentUserNotificationsUtxo,\n  getNotificationAddress,\n  isCommandCalled,\n  getCommandCalled,\n  existsUser,\n  createNewUser\n} from './../formathelpers'\nconst { RENEW, ONLY_FORWARDS, CLAIM_OWNERSHIP, SEND_OWNERSHIP, CHANGE_ADDRESS } = BNSActions\n\n// =========== CONDITIONS / PERMISSIONS ================\n// Called by the actions for conditions\n// Return object with \"info\": describing condition (accessible w/o tx),\n// \"status\" to check conditoin (accessible w/o tx),\n// and optional \"special\" to give transaction forming specifications (accessible w/o tx)\n\nconst OUTS_2 = ({ tx=undefined }: any): I_Condition => ({\n  info: 'Tx must have 2+ outputs',\n  status: () => atLeastTwoOutputs(tx)\n})\n\nconst OUT_0 = ({ tx=undefined }: any): I_Condition => ({\n  info: 'Tx must have OP_RETURN @ output[0]',\n  status: () => isOpreturnOutput0(tx)\n})\n\nconst OUT_1 = ({ st, tx=undefined }: any): I_Condition => ({\n  info: 'Tx must have notification address @ output[1]' ,\n  status: () => isNotify(st, tx)\n})\n\nconst NOTIFIED_MIN = ({ tx=undefined }: any): I_Condition => ({\n  info: `Tx must have minimum ${MIN_NOTIFY} @ output[1]`,\n  status: () => didNotifyMin(tx)\n})\n\nconst BURNED_MIN = ({ tx=undefined }: any): I_Condition => ({\n  info: `Tx must burn ${MIN_BURN} @ output[0]`,\n  status: () => didBurnMin(tx),\n  special: { output0value: MIN_BURN }\n})\n\nconst NO_OWNER = ({ st }: any): I_Condition => ({\n  info: 'There must not be an existing owner',\n  status: () => !existsCurrentOwner(st)\n})\n\nconst EXISTS_OWNER = ({ st }: any): I_Condition => ({\n  info: 'There must be existing owner',\n  status: () => existsCurrentOwner(st)\n})\n\nconst BURN_LAST_WIN = ({ st, tx=undefined }: any): I_Condition => ({\n  info: 'Tx must burn the last ownership winning burn amount',\n  status: () => burnedPreviousRateMin(st, tx),\n  special: { output0value: getLastOwnerBurnedValue(st) }\n})\n\n// calculated based on tx if available, otherwise address\nconst USER_IS_OWNER = ({ st, address, tx=undefined }: any): I_Condition => ({\n  info: `User's address must match owner's address`,\n  status: () => tx ? isSenderTheCurrentOwner(st, tx) : isAddressTheCurrentOwner(st, address)\n})\n\nconst IS_OWNER_EXPIRED = ({ st }: any): I_Condition => ({\n  info: 'Ownership must be expired at current parsed height',\n  status: () => isOwnerExpired(st)\n})\n\nconst NO_UNSPENT_USER_NOTIFICATIONS_UTXO = ({ st, tx=undefined }: any): I_Condition => ({\n  info: 'There must not be any remaining notification address utxo created by sender',\n  status: () => noUnspentUserNotificationsUtxo(st, tx),\n  special: { inputs: 'NO_USER_NOTIFICATION_UTXO' }\n})\n\nconst USER_ADDRESS_NOT_NOTIFICATION_ADDRESS = ({ st, tx=undefined }: any): I_Condition => ({\n  info: 'Do not accidentally send from notification address at input[0]',\n  status: () => (getNotificationAddress(st) !== getTxInput0SourceUserAddress(tx))\n})\n\nconst IS_COMMAND_CALLED = (\n  { st, tx=undefined }: { st: I_BnsState, tx: I_TX | undefined },\n  command: string\n): I_Condition => ({\n  info: 'Command must be present in forwards at this tx height from tx user',\n  status: () => (isCommandCalled(st, tx as I_TX, command))\n})\n\n\n\n\n// ============ USER ACTIONs ===============\n\n/**\n * Change address. (similar to send ownership, but keeps forwards)\n * network: '!ca'\n * address: 'newaddress'\n */\nexport const changeAddressAction = (st: I_BnsState, address: string = '', tx: any = undefined): I_BNS_Action => {\n  const args = { st, address, tx }\n  const commandSignal = '!ca'\n  return {\n\n    type: CHANGE_ADDRESS,\n    info: 'Update your ownership address',\n\n    permissions: [\n      USER_IS_OWNER(args)\n    ],\n\n    conditions: [\n      OUTS_2(args),\n      OUT_0(args),\n      OUT_1(args),\n      NOTIFIED_MIN(args),\n      NO_UNSPENT_USER_NOTIFICATIONS_UTXO(args),\n      USER_ADDRESS_NOT_NOTIFICATION_ADDRESS(args),\n\n      IS_COMMAND_CALLED(args, commandSignal)\n    ],\n\n    execute: () => {\n      const thisCommand = getCommandCalled(st, tx, commandSignal)\n      const newAddress = thisCommand?.address;\n      if (!newAddress) {\n        console.log('ownership transfer detected, but no address found')\n      } else {\n        // quite possible user doesn't exist so create blank one\n        if (!existsUser(st, newAddress)) createNewUser(st, newAddress)\n\n        // new owner is created and given old owner's ownership data\n\n        const oldOwner = getOwner(st)\n        setOwner(st, newAddress)\n        // one of conditions is USER_IS_OWNER so there is owner\n        getUser(st, newAddress).winHeight = oldOwner!.winHeight\n        getUser(st, newAddress).winTimestamp = oldOwner!.winTimestamp\n        getUser(st, newAddress).burnAmount = oldOwner!.burnAmount\n        // clone forwards\n        getUser(st, newAddress).forwards = JSON.parse(JSON.stringify(oldOwner!.forwards))\n        // for new user, no changes to updateHeight, nonce\n\n        // old owner loses ownership data\n        oldOwner!.winHeight = 0\n        oldOwner!.winTimestamp = 0\n        oldOwner!.burnAmount = 0\n        // nonce, forwards (not active now), update height are not touched\n      }\n    },\n\n    // change from tx for user could be sent to the new address\n    // so there's no need to fund new address or withdraw from old one\n    suggestions: 'GET_Your new address (change sent there)_' + commandSignal\n  }\n}\n\n/**\n * Send ownership to another address. Forwards are not kept.\n * network: '!sa'\n * address: 'newaddress'\n */\nexport const sendOwnershipAction = (st: I_BnsState, address: string = '', tx: any = undefined): I_BNS_Action => {\n  const args = { st, address, tx }\n  const commandSignal = '!so'\n  return {\n\n    type: SEND_OWNERSHIP,\n    info: 'Send ownership to another address',\n\n    permissions: [\n      USER_IS_OWNER(args)\n    ],\n\n    conditions: [\n      OUTS_2(args),\n      OUT_0(args),\n      OUT_1(args),\n      NOTIFIED_MIN(args),\n      NO_UNSPENT_USER_NOTIFICATIONS_UTXO(args),\n      USER_ADDRESS_NOT_NOTIFICATION_ADDRESS(args),\n\n      IS_COMMAND_CALLED(args, commandSignal)\n    ],\n\n    execute: () => {\n      const thisCommand = getCommandCalled(st, tx, commandSignal)\n      const newAddress = thisCommand?.address;\n      if (!newAddress) {\n        console.log('ownership transfer detected, but no address found')\n      } else {\n        // quite possible user doesn't exist so create blank one\n        if (!existsUser(st, newAddress)) createNewUser(st, newAddress)\n\n        // new owner is created and given old owner's ownership data\n\n        const oldOwner = getOwner(st)\n        setOwner(st, newAddress)\n        // one of conditions is USER_IS_OWNER so there is owner\n        getUser(st, newAddress).winHeight = oldOwner!.winHeight\n        getUser(st, newAddress).winTimestamp = oldOwner!.winTimestamp\n        getUser(st, newAddress).burnAmount = oldOwner!.burnAmount\n        // for new user, no changes to updateHeight, nonce, or forwards\n\n        // old owner loses ownership data\n        oldOwner!.winHeight = 0\n        oldOwner!.winTimestamp = 0\n        oldOwner!.burnAmount = 0\n        // nonce, forwards (not active now), update height are not touched\n      }\n    },\n    suggestions: 'GET_New owner address_' + commandSignal\n  }\n}\n\n\n// Describe: If no owner, sender can claim ownership\nexport const claimOwnershipAction = (st: I_BnsState, tx: any = undefined): I_BNS_Action => {\n  const args = { st, tx }\n  return {\n\n    type: CLAIM_OWNERSHIP,\n    info: 'Claim ownership of an available domain',\n\n    permissions: [\n      NO_OWNER(args)\n    ],\n\n    conditions: [\n      OUTS_2(args),\n      OUT_0(args),\n      OUT_1(args),\n      NOTIFIED_MIN(args),\n      NO_UNSPENT_USER_NOTIFICATIONS_UTXO(args),\n      USER_ADDRESS_NOT_NOTIFICATION_ADDRESS(args),\n\n      BURNED_MIN(args)\n    ],\n\n    execute: () => {\n      // ownership source was already created for sure via updateSourceUserFromTx\n      // only have to set owner address to tx address\n      const height = getTxHeight(tx)\n      const senderAddress =  getTxInput0SourceUserAddress(tx)\n      setOwner(st, senderAddress)\n      getUser(st, senderAddress).winHeight = height\n      getUser(st, senderAddress).winTimestamp = getTxTimestamp(tx)\n      getUser(st, senderAddress).burnAmount = getTxOutput0BurnValue(tx)\n      console.log(\n        `${ st.domain.domainName } : ${ getTxHeight(tx) } height: new owner is ${ getUser(st, senderAddress).address }`\n      )\n    }\n  }\n}\n\n\n// Describe: If from current owner & burned past winning minimum, extend ownership.\nexport const currentOwnerRenewAction = (\n  st: I_BnsState,\n  address: string = '',\n  tx: any = undefined\n): I_BNS_Action => {\n  const args = { st, address, tx }\n  return {\n\n    type: RENEW,\n    info: 'Extend ownership of this domain',\n\n    permissions: [\n      USER_IS_OWNER(args)\n    ],\n\n    conditions: [\n      OUTS_2(args),\n      OUT_0(args),\n      OUT_1(args),\n      NOTIFIED_MIN(args),\n      NO_UNSPENT_USER_NOTIFICATIONS_UTXO(args),\n      USER_ADDRESS_NOT_NOTIFICATION_ADDRESS(args),\n\n      BURNED_MIN(args),\n      BURN_LAST_WIN(args)\n    ],\n\n    execute: () => {\n      const owner = getOwner(st)\n      // set owner's win height to current tx height therefore updating ownership\n      owner && (owner.winHeight = getTxHeight(tx))\n      owner && (owner.winTimestamp = getTxTimestamp(tx))\n      console.log(\n        `${ st.domain.domainName } : ${ getTxHeight(tx) } height: owner extended ownership ${ owner?.address }`\n      )\n    }\n  }\n}\n\n// Describe: update forwarding information.\nexport const updateForwardingInfoAction = (\n  st: I_BnsState,\n  address: string = '',\n  tx: any = undefined\n): I_BNS_Action => {\n  const args = { st, address, tx }\n  return {\n\n    type: ONLY_FORWARDS,\n\n    info: 'Only update forwarding information',\n\n    permissions: [],\n\n    conditions: [\n      OUTS_2(args),\n      OUT_0(args),\n      OUT_1(args),\n      NOTIFIED_MIN(args),\n      NO_UNSPENT_USER_NOTIFICATIONS_UTXO(args),\n      USER_ADDRESS_NOT_NOTIFICATION_ADDRESS(args),\n    ],\n\n    execute: () => {\n      readEmbeddedData(st, tx)\n    },\n\n    // Change info to warning when attempting to update forwarding info\n    // for domain you do not control.\n    // Such a change would be wasted until it's owned.\n    suggestions:\n      !USER_IS_OWNER(args).status()\n        ? 'WARNING_USELESS_IF_NOT_OWNER'\n        : undefined\n  }\n}\n\n// =========== AUTOMATIC PARSED ACTIONS NOT BY USERS (e.g. TIME BASED) ===========\n\n// Describe: if OWNERSHIP_DURATION_BY_BLOCKS blocks since ownership update, no owner again\nexport const autoCheckForOwnerExpiredAction = (st: I_BnsState): I_BNS_Auto_Action => {\n  const args = { st }\n  return {\n    info: 'Existing ownerships that expire are removed',\n\n    conditions: [\n      EXISTS_OWNER(args),\n      IS_OWNER_EXPIRED(args)\n    ],\n\n    execute: () => {\n      clearOwner(st)\n      console.log(st.domain.domainName, getParsedHeight(st), 'ownership expired')\n    }\n  }\n}\n\n// Describe: always uses this tx to update derivedUtxoList of the domain notificatin address\nexport const updateUtxoFromTxAction = (st: I_BnsState, tx: I_TX): I_BNS_Auto_Action => {\n  return {\n    info: 'Update derivedUtxoList from new tx',\n\n    conditions: [],\n\n    execute: () => {\n      updateUtxoFromTx(st, tx)\n    }\n  }\n}","import {\n  currentOwnerRenewAction,\n  claimOwnershipAction,\n  autoCheckForOwnerExpiredAction,\n  updateForwardingInfoAction,\n  updateUtxoFromTxAction,\n  sendOwnershipAction,\n  changeAddressAction\n} from './actions'\nimport { I_BnsState, I_TX, I_Condition } from './../types/'\n\n/****************************************************************************************\n * Returns what actions are available for specific user address at current state\n */\nexport const runAllActionPermissionChecks = (st: I_BnsState, address: string) => {\n  console.log('currentOwnerRenewAction running:')\n\n  // Edit this list to include more actions for checks\n  // (address here, tx not necessary)\n  const allActions = [\n    updateForwardingInfoAction(st, address),\n    currentOwnerRenewAction(st, address),\n    claimOwnershipAction(st),\n\n    sendOwnershipAction(st, address),\n    changeAddressAction(st, address)\n  ]\n\n  // check which actions are doable\n  const checkedActions: any[] = []\n  allActions.forEach(action => {\n\n    // check each permission in each action\n    const checkedPermissions: any[] = []\n    action.permissions.forEach((permission: any) => {\n      const isAllowed = permission.status()\n\n      // add to list of permissions checked in this action & their display info\n      checkedPermissions.push({\n        isAllowed,\n        info: permission.info\n      })\n    })\n\n    // grab every special rule so can put together tx based on them\n    const specialTxDirections: any[] = []\n    action.permissions.forEach((permission: any) => {\n      if ('special' in permission) specialTxDirections.push({\n        info: permission.info,\n        rules: permission.special\n      })\n    })\n    action.conditions.forEach((condition: any) => {\n      if ('special' in condition) specialTxDirections.push({\n        info: condition.info,\n        rules: condition.special\n      })\n    })\n\n\n    // add to list of all actions with summary of all their permissions checks\n    checkedActions.push({\n      type: action.type,\n      info: action.info,\n      isUsable: checkedPermissions.every(permission => permission.isAllowed),\n      suggestions: action.suggestions,\n      permissionList: checkedPermissions,\n      special: specialTxDirections,\n      actionContent: '' // blank for now, fill in later\n    })\n  })\n\n  // return array of doable actions\n  return checkedActions\n}\n\n/****************************************************************************************\n * Executes all actions possible by user that sent tx.\n * Nothing returned.\n */\nexport const runAllUserActions = (st: I_BnsState, tx: I_TX): void => {\n\n  // edit this list (tx here, address not necessary)\n  const allUserActions = [\n    updateForwardingInfoAction(st, undefined, tx),  // reads embedded data\n    currentOwnerRenewAction(st, undefined, tx),     // renew ownership\n    claimOwnershipAction(st, tx),                   // new ownership\n\n    sendOwnershipAction(st, undefined, tx),         // give up ownership to another\n    changeAddressAction(st, undefined, tx)          // change your ownership address\n  ]\n\n  allUserActions.forEach((action: any) => {\n\n    // check that all conditions & permissions are true\n    const okConditions = action.conditions.reduce(\n      (areAllConditionsMet: boolean, eaCondition: any) => areAllConditionsMet && eaCondition.status()\n    , true)\n\n    const okPermissions = action.permissions.reduce(\n      (areAllPermissionsMet: boolean, eaPermission: any) => areAllPermissionsMet && eaPermission.status()\n    , true)\n\n    if (okConditions && okPermissions) action.execute()\n  })\n}\n\n/****************************************************************************************\n * Executes non-user actions like ownership expiration over time or deriving new UTXO.\n * Nothing returned.\n */\nexport const runAllAutomaticActions = (st: I_BnsState, tx: I_TX | undefined): void => {\n\n  // list of all automatic actions\n  const allAutoChecks = [\n    autoCheckForOwnerExpiredAction(st),\n    tx ? updateUtxoFromTxAction(st, tx) : undefined\n  ]\n\n  allAutoChecks.forEach(action => {\n    if (!!action) {\n      // check that all conditions are true\n      const ok = action.conditions.reduce(\n        (areAllConditionsMet: boolean, eaCondition: I_Condition ) => (\n          areAllConditionsMet && eaCondition.status()\n        ), true)\n      if (ok) action.execute()\n    }\n  })\n}\n\n\n","import { calcP2WSH } from './calcP2WSH'\nimport { newState } from './initialState'\nimport * as actions from './actions'\nimport { I_BnsState } from './types'\nimport {\n  setParsedHeight,\n  updateSourceUserFromTx,\n  getTxHeight,\n  updateOwnerHistory\n } from './formathelpers'\n\n/**\n * Returns ownership and notification information objects.\n * @param   {Array<any>}  notificationsHistory  - Array of any tx with notificationsAddress.\n * @param   {string}      domainName            - Full domainName to use (e.g. 'satoshi.btc').\n * @param   {number}      currentHeight         - Current blockheight of the network chain selected.\n * @param   {string}      networkChoice         - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @returns {I_BnsState}                         - BNS state describing object.\n */\nexport const calcBnsState = (\n  notificationsHistory: Array<any>,\n  domainName: string,\n  currentHeight: number,\n  networkChoice: string\n): I_BnsState => {\n\n  // initialize temporary derivation state\n  const st = JSON.parse(JSON.stringify(newState)); // deep object clone\n  st.domain.domainName = domainName\n  st.chain && (st.chain.currentHeight = currentHeight)\n  st.domain.notificationAddress = calcP2WSH(domainName, networkChoice)?.notificationsAddress || ''\n\n  // Sorting history from earliest to latest\n  // reversing should speed it up if not complete it\n  st.domain.txHistory = (notificationsHistory\n    .slice().reverse()\n    .sort((prev, next) => {\n      const prevBlockHeight = prev.status.block_height\n      const nextBlockHeight = next.status.block_height\n      return prevBlockHeight - nextBlockHeight\n    })\n  )\n\n  // iterate with blockheights of relevant tx to derive st state\n  // Each tx blockheight serves as reference time\n  st.domain.txHistory.forEach((tx: any) => {\n\n    // update current chain's parsed height based on tx confirmed height\n    setParsedHeight(st, getTxHeight(tx))\n\n    // update or create new basic user info based on source address @ input0\n    // this includes user's NONCE set to height of the user's tx prior to this one\n    updateSourceUserFromTx(st, tx)\n\n    // check if owner expired & update derivedUtxo\n    actions.runAllAutomaticActions(st, tx)\n\n    // run all possible actions\n    // starting with reading embedded data\n    actions.runAllUserActions(st, tx)\n\n    // update nonce\n    // after this tx, this tx height is the last tx height, so the new nonce\n    updateSourceUserFromTx(st, tx)\n\n    // update ownership history each tx even if not owner\n    updateOwnerHistory(st)\n  })\n\n  // final check for current block height\n  setParsedHeight(st, currentHeight)\n\n  // check if owner expired\n  actions.runAllAutomaticActions(st, undefined)\n\n  return st\n}\n\n","import { I_Forward } from '../types'\n/**\n * Returns array with only latest forwards from array of all forwards.\n * Removes actions, ones that start with \"!\" and ones that are blank addresses.\n */\nexport const findLatestForwards = (forwards: Array<I_Forward>): Array<I_Forward> => {\n  // simplest would be to go through object where keys of cloned network would overwrite\n  // sort first for simplicity\n  const sortedForwards = [...forwards].sort((prev, next) => {\n    // sorts by index proportional to block height and time\n    const prevHeight = prev.updateHeight\n    const nextHeight = next.updateHeight\n    return prevHeight - nextHeight\n  })\n  // now just overwrite values for same networks in order of sorted array\n  const currentNetworks: {[key: string]: I_Forward} = {}\n  sortedForwards.forEach(eaForward => {\n    // add all networks that are not commands\n    const isNotCommand = !eaForward.network.startsWith('!')\n    if (isNotCommand) {\n      currentNetworks[eaForward.network] = eaForward\n    }\n    // if the final address is blank, delete it from object\n    const isDeleted = eaForward.address === ''\n    if (isDeleted) {\n      delete currentNetworks[eaForward.network]\n    }\n  })\n\n  // return just array of values, networks still part of values as well\n  return [...Object.values(currentNetworks)]\n}\n","import { encrypt } from './cryptography'\n\n/**\n * Returns number of bytes the string has after encryption.\n * Encryption is used directly to measure result accurately\n * even if cryption method changes in the future.\n */\nexport const stringByteCount = (data: string): number => {\n  const cipher: Buffer = encrypt(data, 'arbitrary key and iv seeding string')\n  // returns buffer, so length should be bytesize\n  return cipher.length;\n}","import axios from 'axios'\n\n// Documentation\n// https://github.com/Blockstream/esplora/blob/esplora_v2.00/API.md\n// https://github.com/Blockstream/esplora/blob/master/API.md#post-tx\n\nconst API_PATH_TESTNET = 'https://blockstream.info/testnet/api/'\nconst API_PATH_BITCOIN = 'https://blockstream.info/api/'\nconst API_RATE_LIMIT = 0.6    // guessing calls per second cap\n\n// (TODO) a single instance of async task executing loop per API to ensure rate limit holds per API\n// Meanwhile calling function can use its own busy flag to ensure promises are resolved before repeats.\n// RawTx requests and multipage history (length > 25) are main risks.\n\nexport async function getFeeEstimates (strNetwork: string) {\n  const API_PATH = (\n    (strNetwork === 'testnet')\n    ? API_PATH_BITCOIN // only main chain fee estimate for better testing\n    : API_PATH_BITCOIN\n  ) + 'fee-estimates'\n\n  try {\n\n    const res = await axios.get(API_PATH)\n    console.log('getFeeEstimates', res.data)\n\n    // await rateLimit()\n\n    return res.data\n\n  } catch (e) {\n\n    console.log(e)\n    await rateLimit()\n    throw new Error('Blockstream.info API getFeeEstimates failed')\n  }\n\n}\n\n\nexport async function getHeight (strNetwork: string) {\n  const API_PATH = (\n    (strNetwork === 'testnet')\n    ? API_PATH_TESTNET\n    : API_PATH_BITCOIN\n  ) + 'blocks/tip/height'\n  console.log(API_PATH)\n\n  try {\n\n    const res = await axios.get(API_PATH)\n    console.log('getHeight', res.data)\n\n    // await rateLimit()\n\n    return res.data\n\n  } catch (e) {\n\n    console.log(e)\n    await rateLimit()\n    throw new Error('Blockstream.info API height get failed')\n  }\n\n}\n\n/**\n * API request for each UTXO in array to get the raw tx necessary for psbt.\n * @param     {Array}     arrayUtxo       Array of UTXO.\n * @param     {string}    strNetwork      Network type: 'bitcoin' or 'testnet'.\n * @returns   {object}                    { arrayTx: arrayTx w/ .hex, error: string, fails: number }\n */\nexport async function addRawTxToArray (utxoList: Array<any>, strNetwork: string) {\n  // to track failures indecies\n  let erroredOutputs = ''\n\n  // abort if empty array\n  if (utxoList?.length === 0) {\n    return { utxoList, error: 'no utxo' }\n  }\n\n  // iterate through original utxo and add hex onto clone, 2 tries max each\n  for (const [indexString, utxo] of Object.entries(utxoList)) {\n    // indexString is a string so convert for array index use\n    const index = parseInt(indexString, 10)\n\n    let tries = 2\n    while (tries-- > 0) {\n      try {\n        const { txid } = utxo\n\n        // raw tx hex path on API\n        const API_PATH = (\n          (strNetwork === 'testnet')\n            ? API_PATH_TESTNET\n            : API_PATH_BITCOIN\n        ) + 'tx/' + txid + '/hex'\n        console.log(API_PATH)\n\n        const res = await axios.get(API_PATH)\n\n        console.log(index, 'index utxo has raw hex of', res.data)\n\n        // add hex data into cloned utxo array\n        utxoList[index].hex = res.data\n\n        // break while loop if got data, don't need more tries\n        break\n\n      } catch(e) {\n        // keeping track of failures\n        console.log('fail detected', indexString, utxo, tries, erroredOutputs, e)\n        // keep track of indecies missing hex\n        erroredOutputs += indexString + ' '\n      }\n\n      await rateLimit()\n    }\n  }\n\n  // return summary object\n  return { utxoList, erroredOutputs }\n}\n\n/**\n * API request for all utxo for this address.\n * Blockstream utxo do not have addresses that created them!\n * @param     {string}    address       Bitcoin address.\n * @param     {string}    strNetwork    Network type: 'bitcoin' or 'testnet'.\n * @returns   {Array}                   Array of UTXO.\n */\nexport async function getUTXOList (address: string, strNetwork: string) {\n  const API_PATH = (\n    (strNetwork === 'testnet')\n    ? API_PATH_TESTNET\n    : API_PATH_BITCOIN\n  ) + 'address/' + address + '/utxo'\n  console.log(API_PATH)\n\n  try {\n    const res = await axios.get(API_PATH)\n\n    console.log('getUTXOList', res.data)\n\n    await rateLimit()\n\n    return res.data\n\n  } catch (e) {\n\n    console.log(e)\n    await rateLimit()\n    throw new Error('Blockstream.info API access failed')\n\n  }\n}\n\n/**\n * API request all transactions for a specific address.\n * parameters: (address, network).\n * @param   {string} address    - address on network.\n * @param   {string} network    - 'testnet' or 'bitcoin' to match bitcoinjs-lib.\n * @returns {Array<object>}     -  Array of tx objects.\n */\nexport async function getAddressHistory (address: string, network: string) {\n  // https://blockstream.info/testnet/api/address/tb1qprkzdaqt5jkxrhy57ngvra8k0rvq63ulksz8cx85qwke3myhjrtq9s6nj3/txs/chain\n  // GET /address/:address/txs/chain[/:last_seen_txid]\n  // Get confirmed transaction history for the specified address/scripthash, sorted with newest first.\n  // Returns 25 transactions per page. More can be requested by specifying the last txid seen by the previous query.\n\n  const CONFIRMED_PAGES_ADDON = '/txs/chain'\n\n  const API_PATH = (\n    (network === 'testnet')\n    ? API_PATH_TESTNET\n    : API_PATH_BITCOIN\n  ) + 'address/' + address + CONFIRMED_PAGES_ADDON\n\n  try {\n    const res = await axios.get(API_PATH)\n\n    console.log('blockstream.info API address history request', res)\n    return res.data\n\n  } catch (e) {\n    console.log(e)\n    throw new Error('Blockstream.info API access failed')\n  }\n}\n\n/**\n * Broadcasts content onto the blockchain.\n * parameters: (content, network).\n * @param   {string}  content  - raw hex content of transaction.\n * @param   {string}  network  - 'testnet' or 'bitcoin' to match bitcoinjs-lib.\n * @returns {string}           - Successful broadcast returns txid, otherwise error reason.\n */\nexport async function txPush (content: string, network: string) {\n\n  const API_PATH =\n    (network === 'testnet')\n    ? API_PATH_TESTNET + 'broadcast'\n    : API_PATH_BITCOIN + 'broadcast'\n\n  try {\n    const res = await axios.get(API_PATH, {\n      params: {\n        tx: content\n      }\n    })\n\n    // console.log(res)\n    console.log('Broadcasted on', network)\n\n    // returns txid on success\n    return { txid: res.data }\n\n  } catch (e) {\n    console.log('Failed pushtx', network, e.response.data )\n\n    throw new Error('Blockstream.info API access failed\\n' + e.response.data)\n  }\n}\n\n// Slow down based on rate limit.\n// Convert hz to time in milliseconds.\nasync function rateLimit () {\n  return new Promise(r => setTimeout(r, 1000.0 / API_RATE_LIMIT))\n}\n","import { I_State, Dispatch, ActionTypes } from '../../interfaces'\nimport { calcP2WSH, calcBnsState } from '../../helpers/bns'\nimport { getAddressHistory, getHeight } from './../../api/blockstream'\nconst { STORE_SEARCH_RESULTS_FAIL, STORE_SEARCH_RESULTS } = ActionTypes;\n\n/**\n * Get address,\n * tx with notification address,\n * calculate owner,\n * find current owner's forwarding info,\n * send/dispatch to reducer to store important data found\n * (No UTXO nor raw TX scan for speed in front page search)\n */\nexport const searchAction = async (state: I_State, dispatch: Dispatch, router: any = undefined) => {\n  const domainName = state.alias + state.extension\n  // stop if no alias submitted, nothing to save to state\n  if (!state.alias) { return undefined }\n\n  // find address for this alias\n  const { notificationsAddress } = calcP2WSH(domainName, state.network)\n\n  // (TODO) should check if max length for API reached to know if to use pages & append value (25?)\n\n  try {\n\n    // 1. Get current blockheight from API so ownership is using latest possible info\n\n    const currentHeight = await getHeight(state.network)\n\n    // 2. Get API response for all tx history of this address\n    // This will grab all tx that \"notified\" this address by sending to it\n    // Upon failure error should be caught in this function\n    const notificationsTxHistory = await getAddressHistory(notificationsAddress, state.network)\n\n    // calculate bns data from this history via helper functions\n    const { domain } = calcBnsState(\n      notificationsTxHistory,\n      domainName,\n      currentHeight,\n      state.network\n    )\n\n    // 3. if navigated via id, use router to navigate home w/o id in url\n    if (router) { router?.push('/') }\n\n    // store data\n    return dispatch({\n      type: STORE_SEARCH_RESULTS,\n      payload: {\n        alias: state.alias,\n        domain,\n        chain: {\n          height: currentHeight\n        }\n      }\n    })\n\n  } catch (e) {\n    console.log(e)\n    // still updating the notification address\n    return dispatch({\n      type: STORE_SEARCH_RESULTS_FAIL,\n      payload: {\n        alias: state.alias,               // can save alias\n        domainName,\n        notificationsAddress              // can save this easy derivation\n      }\n    });\n  }\n}\n\n// test address tb1qprkzdaqt5jkxrhy57ngvra8k0rvq63ulksz8cx85qwke3myhjrtq9s6nj3\n// has mixture of tx sent to it on testnet\n// https://blockstream.info/testnet/address/tb1qprkzdaqt5jkxrhy57ngvra8k0rvq63ulksz8cx85qwke3myhjrtq9s6nj3","import { I_State, Dispatch } from '../../interfaces'\nimport { ActionTypes } from './../../interfaces'\n\nimport { createNewWallet, loadWallet } from '../../helpers/bns/bitcoin'\n\nconst { NEW_WALLET } = ActionTypes;\n\n/**\n * Create new wallet address & backup.\n * If mnemonic is provided, wallet is generated from that.\n */\nexport const createNewWalletAction = async (\n  state: I_State, dispatch: Dispatch, strMnemonic: string = ''\n) => {\n\n  // load all the wallet info from mnemonic or generate new random mnemonic to do it\n  const { mnemonic, WIF, address } = (\n    (strMnemonic === '')\n      ? createNewWallet(state.network)\n      : loadWallet(strMnemonic, state.network)\n  )\n\n  return dispatch({\n    type: NEW_WALLET,\n    payload: { mnemonic, WIF, address }\n  })\n}","import { I_State, Dispatch, ActionTypes } from '../../interfaces'\nconst { CHANGE_PAGE_INFO } = ActionTypes;\n\n\n/**\n * Request to change page info that's checked for validity here\n */\nexport const changePageInfoAction = async (state: I_State, dispatch: Dispatch, page: number) => {\n  // for now no checks\n\n  return dispatch({\n    type: CHANGE_PAGE_INFO,\n    payload: page\n  })\n}","import { I_State, Dispatch, ActionTypes } from '../../interfaces'\nimport { calcP2WSH, calcBnsState } from '../../helpers/bns'\nimport { getAddressHistory, getUTXOList, addRawTxToArray, getHeight } from '../../api/blockstream'\nconst { UPDATE_WALLET, UPDATE_DOMAIN, ACTION_FAIL } = ActionTypes\n\n/**\n * Scans the address for utxo on a given network (w/ API).\n * Add hex of each tx that created utxo (for psbt).\n * addressType is one of enums ActionTypes that's either UPDATE_WALLET or UPDATE_NOTIFICATION.\n * If scanning wallet, then update wallet state.\n * If scanning notification address, then update notification state.\n * Notification scan will reproduce address scan first before getting details.\n */\nexport const scanAddressFullyAction = async (\n  state: I_State,\n  dispatch: Dispatch,\n  addressType: ActionTypes\n) => {\n  const domainName = state.alias + state.extension\n\n  // wallet address scan\n  if (addressType === UPDATE_WALLET) {\n    // wallet address\n\n    try {\n\n      // 1. get address TX history\n\n      const walletAddress = state.wallet.address\n      const walletTxHistory = await getAddressHistory(walletAddress, state.network)\n\n      // 2. get address UTXO list (could also calculate from tx history or API)\n\n      const utxoListWalletAddress = await getUTXOList(walletAddress, state.network)\n\n      // 3. get raw tx for each UTXO (psbt requirement for creating new tx later)\n\n      const { utxoList, erroredOutputs } = await addRawTxToArray(utxoListWalletAddress, state.network)\n\n      !!erroredOutputs && console.log('API had issues during hex utxo scan:', erroredOutputs)\n\n      return dispatch({\n        type: UPDATE_WALLET,\n        payload: {\n          wallet: {\n            txHistory: walletTxHistory,\n            utxoList: utxoList\n          }\n        }\n      })\n\n    } catch (e) {\n      console.log('Wallet address scan failed')\n      console.log(e)\n      // abort\n      return dispatch({\n        type: ACTION_FAIL,\n        payload: {}\n      });\n    }\n  }\n\n  // notification address scan\n  if (addressType === UPDATE_DOMAIN) {\n\n\n    try {\n\n      // 1. get current blockheight from API so ownership is using latest possible info\n\n      const currentHeight = await getHeight(state.network)\n\n      // 2. get address TX history\n\n      const { notificationsAddress } = calcP2WSH(domainName, state.network)\n      const notificationsTxHistory = await getAddressHistory(notificationsAddress, state.network)\n\n\n      // 3. derive new BNS domain state & utxo\n      const { domain: newDomain } = calcBnsState(\n        notificationsTxHistory,\n        domainName,\n        currentHeight,\n        state.network\n      )\n\n\n      // 4. get raw tx for each UTXO (psbt requirement for creating new tx later)\n\n      const { erroredOutputs } = await addRawTxToArray(\n        newDomain.derivedUtxoList,\n        state.network\n      )\n\n      !!erroredOutputs && console.log('API had issues during hex utxo scan:', erroredOutputs)\n\n      return dispatch({\n        type: UPDATE_DOMAIN,\n        payload: {\n          domain: newDomain,\n          chain: {\n            height: currentHeight\n          }\n        }\n      })\n\n    } catch (e) {\n      console.log('Notification address scan failed')\n      console.log(e)\n      // abort\n      return dispatch({\n        type: ACTION_FAIL,\n        payload: {}\n      });\n    }\n\n  }\n\n  throw new Error('unexpected address type')\n}","import { I_State, Dispatch, ActionTypes } from '../../interfaces'\nconst { CHOICES_BNS_ACTION } = ActionTypes;\n\n/**\n * Cleans up the entered string including removing next line characters\n */\nexport const changeChoicesBNSAction = async (\n  state: I_State,\n  dispatch: Dispatch,\n  choices: any\n) => {\n\n  return dispatch({\n    type: CHOICES_BNS_ACTION,\n    payload: choices\n  })\n}\n\n","\n/**\n * Difference between timestampMsec timestamp relative to current time or another reference referenceTimestampMsec timestamp.\n * Returns days-hours-minutes string, days-hours string, if expired, and ms of difference.\n * @param   {number}  timestampMsec               Timestamp of interest (milliseconds).\n * @param   {number}  [referenceTimestampMsec=]   Reference timestamp (milliseconds).\n * @returns {object}                              { dhm, dh, isExpired, msDiff, ... }.\n */\nexport default function timeDiff(\n  timestampMsec: number, referenceTimestampMsec: number = Date.now()\n): {\n  dhm: string\n  dh: string\n  isExpired: boolean\n  msDiff: number\n  timestampMsec: number\n  referenceTimestampMsec: number\n} {\n  let diff = timestampMsec - referenceTimestampMsec\n  // note sign\n  const isExpired = (diff <= 0)\n  // mod away higher time frames\n  diff = Math.abs(diff)\n  const d = Math.floor(diff / (1000 * 60 * 60 * 24))\n  // remove days\n  diff -= d * (1000 * 60 * 60 * 24)\n  const h = Math.floor(diff / (1000 * 60 * 60)) % 24\n  // remove hours\n  diff -= h * (1000 * 60 * 60)\n  const m = Math.floor(diff / (1000 * 60)) % 60\n  return {\n    dhm: `${d} days ${h} hours ${m} min`,\n    dh: `${d} days ${h} hours`,\n    isExpired,        // time difference is to the past of now? (boolean)\n    msDiff: diff,\n    timestampMsec,\n    referenceTimestampMsec\n  };\n}","import React from 'react'\nimport styles from './Details.module.css'\n\n/**\n * Create details expanding/collapsing button.\n * Optional props:\n * title={ 'random text' } to change text shown on the hide/show toggle button\n * show={ 'true } to show initially *\n * Background is automatically styled if <p></p> is used directly inside.\n * If so, <span></span> can be used inside <p></p> to separate\n * paragraphs and indent the wrap as well.\n */\nexport const Details = (props: any) => {\n  // local state for showing or hiding details\n  const [ showDetails, setShowDetails ] = React.useState(props?.show === 'true' || false)\n\n  return (\n    <div className={ styles.wrapper }>\n      {/* button that toggles whether details are shown or not */}\n      <div\n        className={ styles.toggleDetails }\n        onClick={ () => {\n          setShowDetails(!showDetails)\n        } }\n      >\n        {/* the text on button coems from title prop */}\n        { props.title || props.description || 'Show details' }\n        {/* the arrow that rotates on click */}\n        <div\n          className={ [styles.arrow, showDetails ? styles.down : '' ].join(' ') }\n        />\n      </div>\n      {/* the details that is rendered when showDetails = true */}\n      <div\n        className={ styles.details }\n        style={ {\n          display: (\n            showDetails ? 'block' : 'none'\n          )\n        } }\n      >\n        {/* any arbitrary content surrounded by this component brackets */}\n        {/* if <p></p> tags are used, they will be formated */}\n        { props.children }\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Store, getOwner } from './../../store'\nimport { Link } from 'react-router-dom'\n\nimport styles from './SearchResults.module.css'\nimport timeDiff from './../../helpers/timediff'\nimport { OWNERSHIP_DURATION_BY_BLOCKS, interpretFw, findLatestForwards } from '../../helpers/bns/'\nimport { Details } from './../general/Details'\n\nexport const SearchResults = () => {\n  // global state\n  const { state } = React.useContext(Store)\n\n  // calc time left in ownership via block heights\n  // temp object to keep track of timers\n  let diff = { isExpired: true, dh: '', msDiff: 0 }\n  const owner = getOwner(state)\n  if (owner) {\n    const heightOfExpiration = owner.winHeight + OWNERSHIP_DURATION_BY_BLOCKS\n    const blocksUntilExpires = (heightOfExpiration - state.chain.height)\n    const msUntilExpires = blocksUntilExpires * 10.0 * 60.0 * 1000.0\n    diff = timeDiff(msUntilExpires, 0)\n  }\n\n  // ownership information\n  const ownershipInformation = () => {\n    // abort if no known ownership history\n    if (!owner) return ('')\n    return (\n      <>\n        <table><tbody>\n          <tr>\n            <td>Owner</td>\n            <td>\n              <p>\n                <span className={ styles.breakable }>{ owner.address }</span>\n              </p>\n            </td>\n          </tr>\n          <tr>\n            <td>Notifications</td>\n            <td>\n              <p>\n                <span className={ styles.breakable }>{ state.domain.notificationAddress }</span>\n              </p>\n            </td>\n          </tr>\n          <tr>\n            <td>Ownership extended</td>\n            <td>\n              <p>{ owner.winHeight } block height</p>\n              <p>{ new Date(owner.winTimestamp * 1000).toUTCString() }</p>\n              <p>{ timeDiff(owner.winTimestamp * 1000).dh } ago</p>\n            </td>\n          </tr>\n          <tr>\n            <td>Expires</td>\n            <td>\n              <p>{ owner.winHeight + OWNERSHIP_DURATION_BY_BLOCKS } block height</p>\n              <p>\n                ≈ { new Date(\n                  (OWNERSHIP_DURATION_BY_BLOCKS * 10.0 * 60.0 + owner.winTimestamp) * 1000\n                ).toUTCString() }\n              </p>\n              <p>in ≈ { diff.dh }</p>\n            </td>\n          </tr>\n        </tbody></table>\n      </>\n    )\n  }\n\n  // calculate latest forwards\n  const latestForwards = owner ? findLatestForwards(owner.forwards) : []\n\n  return (\n    <>\n      <div className={ styles.wrapper }>\n\n        {/* scrollable search results */}\n        <div className={ styles.listContainer } >\n\n          <div\n            className={ styles.describe }\n          >\n            { latestForwards.length } matches on { state.network } {'  '}\n          </div>\n\n          {/* show if domain is available */}\n          {(diff.isExpired) && (\n            <Link\n              to='/create'\n              className={ styles.createLink }\n            >\n              Domain available!\n            </Link>\n          )}\n\n          {/* ownership details */}\n          {(!diff.isExpired) && (\n            <div className={ styles.ownershipDetails }>\n              <Details\n                description={ 'Ownership details' }\n              >\n\n                { ownershipInformation() }\n\n              </Details>\n            </div>\n          )}\n\n          {/* general search results */}\n          {\n            latestForwards.map((fw: any) => {\n              const ifw = interpretFw(fw)\n              if (ifw.render) {\n                return (\n                  <a\n                    key={ fw.network }\n                    className={ styles.listItem }\n                    href={ encodeURI(ifw?.link || '') || undefined }\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <span className={ styles.key }>{ ifw.where }</span>\n                    { ifw.what }\n                  </a>\n                )\n              } else {\n                return ('')\n              }\n            })\n          }\n\n        </div>\n      </div>\n    </>\n  )\n}\n","import { I_Forward } from '../types'\n/**\n * Reads a single forward info object to interpret its values\n * as where the forwarding address should be used, what it is, and what link to use.\n * Returns {what: string, where: string, link: string, render: boolean}.\n */\nexport function interpretFw (fw: I_Forward) {\n  // blank address means it was removed\n  // ! at start means it's a command, not a network\n  if (fw.address === '' || fw.network.startsWith('!')) {\n    return {\n      render: false\n    }\n  }\n\n  // remove version modifier (anything after ! after network)\n  const onNetwork = fw.network.split('!')[0]\n\n  if (\n    onNetwork === 'p2wsh' ||\n    onNetwork === 'btc' ||\n    onNetwork === 'p2pkh' ||\n    onNetwork === 'p2wpkh' ||\n    onNetwork === 'p2sh'\n  ) {\n    return {\n      where: 'btc:',\n      what: (\n        fw.address\n      ),\n      link: (\n        'https://blockstream.info/address/' + fw.address\n      ),\n      render: true\n    }\n  }\n\n  if (\n    onNetwork === 'http' ||\n    onNetwork === 'https' ||\n    onNetwork === 'url' ||\n    onNetwork === 'web'\n  ) {\n    return {\n      where: 'https://',\n      what: fw.address,\n      link: 'https://' + fw.address,\n      render: true\n    }\n  }\n\n  if (onNetwork === 'twitter') {\n    return {\n      where: 'twitter.com/',\n      what: fw.address,\n      link: 'https://twitter.com/' + fw.address,\n      render: true\n    }\n  }\n\n  if (onNetwork === 'github') {\n    return {\n      where: 'github.com/',\n      what: fw.address,\n      link: 'https://github.com/' + fw.address,\n      render: true\n    }\n  }\n\n  if (onNetwork === 'youtube') {\n    return {\n      where: 'youtu.be/',\n      what: fw.address,\n      link: 'https://www.youtube.com/watch?v=' + fw.address,\n      render: true\n    }\n  }\n\n  // if unknown forward network, no link, and the rest is shown as is\n  return {\n    where: onNetwork,\n    what: fw.address,\n    link: undefined,\n    render: true\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport { RoundButton } from './../general/RoundButton'\nimport { Store } from './../../store/'\nimport { searchAction, changeAliasAction } from './../../store/actions/'\nimport { SearchResults } from './../SearchResults'\nimport styles from './HomeContent.module.css'\n\nexport const HomeContent = (props: any): JSX.Element => {\n  const { state, dispatch } = React.useContext(Store)\n\n  // if page is loaded with #/id/:alias format\n  // this will change alias to that one\n  // then it will navigate to '/'\n  // and then it will do search with new alias\n  // http://localhost:3000/#/id/satoshi\n  const alias = props?.match?.params?.alias\n  if (alias) {\n    searchAction({...state, alias}, dispatch, props.history)\n  }\n\n  // is serach done\n  const isSearchDone = () => state.pageInfo.checkedLightSearch\n\n  // put the textarea (by ref) into focus on mount and move caret to end\n  const inputEl = useRef<HTMLTextAreaElement>(null)\n  useEffect(() => {\n    if (inputEl && inputEl.current) {\n      inputEl.current.selectionEnd = inputEl.current.value.length\n      inputEl.current.selectionStart = inputEl.current.value.length\n      inputEl.current.focus()\n    }\n  }, [])\n\n  return (\n    <>\n      <div className={\n        !isSearchDone()\n          ? [styles.lblMainTitle].join(' ')\n          : [styles.lblMainTitle, styles.lblMainTitleAfter].join(' ')\n      }>\n        <span>Bitcoin</span> Name System\n      </div>\n      <div className={\n        !isSearchDone()\n          ? styles.divSearch\n          : [styles.divSearch, styles.divSearchAfter].join(' ')\n      }>\n        <textarea\n          id=\"txtSearch\"\n          className={ styles.txtSearch }\n          cols={ 30 }\n          rows={ 1 }\n          spellCheck={ false }\n          value={ state.alias }\n          placeholder={ 'e.g. satoshi' }\n          ref={ inputEl }\n          onChange={ e => changeAliasAction(state, dispatch, e?.target?.value) }\n          onKeyPress={ e => { e.key === 'Enter' && searchAction(state, dispatch) } }\n        ></textarea>\n        <RoundButton\n          sizebutton='2.6'\n          onClick={ () => searchAction(state, dispatch) }\n        >\n          .btc\n        </RoundButton>\n      </div>\n      <div style={{ display: isSearchDone() ? 'block' : 'none' }}>\n        <SearchResults />\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { HomeContent } from './../components/HomeContent'\n\nconst Home = (props: any): JSX.Element => {\n  return (\n    <>\n      <HomeContent { ...props } />\n    </>\n  )\n}\nexport default Home","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"defs\", null, React.createElement(\"clipPath\", {\n  id: \"clip0\"\n}, React.createElement(\"path\", {\n  d: \"M0 0 1280 0 1280 720 0 720Z\",\n  fillRule: \"evenodd\",\n  clipRule: \"evenodd\"\n})));\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  clipPath: \"url(#clip0)\"\n}, React.createElement(\"text\", {\n  fill: \"#111133\",\n  fontFamily: \"Arial,Arial_MSFontService,sans-serif\",\n  fontWeight: 900,\n  fontSize: 48,\n  transform: \"translate(80 329)\"\n}, \"s\", React.createElement(\"tspan\", {\n  x: 29.3333,\n  y: 0\n}, \"atoshi\"), React.createElement(\"tspan\", {\n  fill: \"#FF9500\",\n  x: 191.18,\n  y: 0\n}, \".btc\")), React.createElement(\"path\", {\n  d: \"M2.27397e-06-3 111.507-2.99992 111.507 3.00008-2.27397e-06 3ZM108.507-14.9999 138.507 0.000104987 108.507 15.0001Z\",\n  fill: \"#111133\",\n  transform: \"matrix(1 0 0 -1 396 313)\"\n}), React.createElement(\"text\", {\n  fill: \"#FF9500\",\n  fontFamily: \"Arial,Arial_MSFontService,sans-serif\",\n  fontWeight: 900,\n  fontSize: 48,\n  transform: \"translate(605.829 174)\"\n}, \"bitcoin\", React.createElement(\"tspan\", {\n  x: 197.333,\n  y: 0\n}, \"address\"), React.createElement(\"tspan\", {\n  fill: \"#111133\",\n  fontSize: 27,\n  x: 0,\n  y: 38\n}, \"bc1qwqdg6squ\"), React.createElement(\"tspan\", {\n  fill: \"#111133\",\n  fontSize: 27,\n  x: 219.38,\n  y: 38\n}, \"sqdg6s795at9\\u2026kxsw\"), React.createElement(\"tspan\", {\n  fill: \"#111133\",\n  fontSize: 27,\n  x: 527.067,\n  y: 38\n}, \"vvzej\"), React.createElement(\"tspan\", {\n  x: 0,\n  y: 119\n}, \"email\"), React.createElement(\"tspan\", {\n  fill: \"#111133\",\n  fontSize: 27,\n  x: 0,\n  y: 158\n}, \"satoshin@gmx.com\"), React.createElement(\"tspan\", {\n  x: 0,\n  y: 238\n}, \"website\"), React.createElement(\"tspan\", {\n  fill: \"#111133\",\n  fontSize: 27,\n  x: 0,\n  y: 276\n}, \"https://bitcoin.org/\"), React.createElement(\"tspan\", {\n  fill: \"#111133\",\n  fontSize: 27,\n  x: 0.00012207,\n  y: 374\n}, \".\"), React.createElement(\"tspan\", {\n  fill: \"#111133\",\n  fontSize: 27,\n  x: 0,\n  y: 333\n}, \".\"), React.createElement(\"tspan\", {\n  fill: \"#111133\",\n  fontSize: 27,\n  x: 0.00012207,\n  y: 417\n}, \".\")), React.createElement(\"path\", {\n  d: \"M589 612C577.678 612 568.5 602.939 568.5 591.762L568.5 334.208C568.5 323.031 559.322 313.97 548 313.97 559.322 313.97 568.5 304.909 568.5 293.732L568.5 149.238C568.5 138.061 577.679 129 589.001 129\",\n  stroke: \"#111133\",\n  strokeWidth: 2,\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"bevel\",\n  strokeMiterlimit: 10,\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}));\n\nvar SvgGraphic = function SvgGraphic(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    overflow: \"hidden\",\n    preserveAspectRatio: \"none\",\n    viewBox: \"0 100 1280 550\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2, _ref3);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgGraphic, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/graphic.1833519c.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react'\n// import { Store } from './../../store/'\nimport styles from './AboutContent.module.css'\nimport { ReactComponent as Drawing } from './graphic.svg'\n\n\nexport const AboutContent = () => {\n  // const { state } = React.useContext(Store)\n\n  return (\n    <>\n      <div className={ [styles.wrapper, 'scrollbar'].join(' ') }>\n        <div className={ styles.title }>\n          <div>\n            Your <span>Bitcoin</span> domain\n            &nbsp;=&nbsp;\n          </div>\n          <div>\n            &nbsp;infinite forwarding addresses\n          </div>\n        </div>\n\n        <div className={ styles.contentWrapper }>\n\n\n          <Drawing\n            className={ styles.drawing }\n          />\n\n          <p>\n            <span>Bitcoin</span> Domain System (<span>BNS</span>): easy to read custom domain names (i.e. aliases) that can store unlimited forwarding information to long alphanumeric btc addresses or any other types of addreses (e.g. ipfs, https, twitter, ...).\n          </p>\n\n          <p>\n            All <span>BNS</span> data is stored inside transactions on the <span>Bitcoin</span> blockchain. This means that <span>BNS</span> is protected by the most secure, decentralized, permissionless, and censorship resistant public network ever created.\n          </p>\n\n          <a\n            href=\"https://github.com/ildarmgt/BitcoinNameSystem/blob/master/README.md\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            README on github\n          </a>\n\n        </div>\n\n\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { AboutContent } from './../components/AboutContent'\n\nexport default function About(): JSX.Element {\n  return (\n    <>\n      <AboutContent />\n    </>\n  )\n}\n\n// for lazy loading:\n// const RoundButton = React.lazy<any>(() => import('../components/RoundButton')\n// <React.Suspense\n//   fallback={\n//     <div>loading...</div>\n//   }\n// >\n// </React.Suspense>\n","import React, { useState } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P1RestoreOrBackup.module.css'\nimport { createNewWalletAction, changePageInfoAction } from '../../../store/actions/'\nimport sanitize from './../../../helpers/sanitize'\nimport { Store } from './../../../store/'\nimport { Details } from './../../general/Details'\n\nenum pages {\n  ROOT,\n  NEW_WALLET,\n  LOAD_BACKUP\n}\n\n// restore backup or create new\nexport const P1RestoreOrBackup = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n  const [ page, setPage ] = useState(pages.ROOT) // local state\n  const [ backup, setBackup ] = useState('') // local state\n\n  // count non empty string strings separated by spaces\n  const wordCount = backup.split(' ').filter(v => v !== '').length\n\n  return (\n    <div className={ styles.wrapper }>\n\n      {/* ROOT PAGE */}\n      <div\n        style={{ display: page === pages.ROOT ? 'block' : 'none' }}\n      >\n        <div\n          className={ styles.title }\n        >\n          { state.wallet.address ? (<>\n            Your <span className={ styles.Orange }>BTC</span> wallet for interacting<br />\n            with the domains\n          </>) : (<>\n            Need a <span className={ styles.Orange }>BTC</span> wallet for interacting<br />\n            with the domains\n          </>) }\n        </div>\n        <div>\n          <Details\n            description={ 'Explanation' }\n          >\n            <p>\n              <span>This wallet has the built-in unique functionality to create transactions with custom scripts, inputs, and outputs necessary for this application.</span>\n\n              <span>The wallet's address is how users and owners of the domains are identified and should only be used for this purpose.</span>\n\n              <span>1. BIP39 mnemonic is used from backup or generated</span>\n              <span>2. BIP32 master seed is derived from the mnemonic</span>\n              <span>3. Key pair is derived at the m/44'/0'/0'/0/0 path from master seed</span>\n              <span>4. The p2wpkh (pay-to-witness-public-key-hash) address is derived from key pair</span>\n            </p>\n          </Details>\n        </div>\n        <div\n          className={ styles.buttonWrapper }\n        >\n          <RoundButton\n            show={ (state.wallet.mnemonic.length > 0) ? 'false' : 'true' }\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n              createNewWalletAction(state, dispatch)\n            }}\n          >\n            I need a new wallet\n          </RoundButton>\n          <RoundButton\n            show={ (state.wallet.mnemonic.length > 0) ? 'true' : 'false' }\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n            }}\n          >\n            Current backup\n          </RoundButton>\n          <RoundButton\n            onClick={() => {\n              setPage(pages.LOAD_BACKUP)\n            }}\n          >\n            Restore from backup\n          </RoundButton>\n          <RoundButton\n            show={ (!!state.wallet?.address).toString() }\n            onClick={() => {\n              changePageInfoAction(state, dispatch, 2)\n            }}\n            next='true'\n          >\n            Don't change wallet\n          </RoundButton>\n        </div>\n      </div>\n\n      {/* NEW_WALLET PAGE */ }\n\n      <div\n        className={ styles.contentWrapper }\n        style={{ display: page === pages.NEW_WALLET ? 'flex' : 'none' }}\n      >\n        <div className={ styles.describe }>\n          Randomly generated for domain control\n          <br /><br />\n          Backup this private phrase\n          or you will lose access\n        </div>\n        <div\n          id='divBackup'\n          spellCheck={ false }\n          className={ [styles.backup, 'selectable'].join(' ') }\n          onClick={ () => {\n            // select div entire contents\n            // const thisDiv = document?.getElementById('divBackup')\n            // if (thisDiv) {\n            //   window.getSelection()?.selectAllChildren(thisDiv)\n            // }\n          }}\n        >\n          { state.wallet.mnemonic }\n        </div>\n        <div className={ styles.buttonWrapper } >\n          <RoundButton\n            onClick={() => {\n              setPage(pages.ROOT)\n            }}\n            back='true'\n          >\n            Back\n          </RoundButton>\n          <RoundButton\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n              createNewWalletAction(state, dispatch)\n            }}\n          >\n            New\n          </RoundButton>\n          <RoundButton\n            next='true'\n            onClick={() => {\n              changePageInfoAction(state, dispatch, 2)\n            }}\n          >\n            I'm done with backup\n          </RoundButton>\n        </div>\n      </div>\n\n      {/* LOAD_BACKUP PAGE */ }\n\n      <div\n        style={{ display: page === pages.LOAD_BACKUP ? 'block' : 'none' }}\n      >\n        <div className={ styles.title }>\n          Type or paste your backup here\n        </div>\n        <br></br>\n        <div>\n          { (wordCount).toString() + ' words now. 12 minimum.' }\n        </div>\n        <br></br>\n        <textarea\n          className={ styles.restoreBackup }\n          cols={ 30 }\n          rows={ 3 }\n          spellCheck={ false }\n          placeholder={ 'mnemonic backup' }\n          onChange={ e => {\n            // lowcaps, spaces, single space max, only one space on left while typing\n            const cleanString = sanitize(\n              e.target.value.toLowerCase(),\n              'lowcaps spaces single_space_width'.split(' ')\n            ).trimLeft()\n            setBackup(cleanString.trim()) // store without trailing space\n            e.target.value = cleanString // quick update\n          } }\n        ></textarea>\n        <div className={ styles.buttonWrapper } >\n          <RoundButton\n            onClick={() => {\n              setPage(pages.ROOT)\n            }}\n            back='true'\n          >\n            Back\n          </RoundButton>\n          <RoundButton\n            // 12 words minimum separated by spaces (TODO): proper checks\n            show={ (wordCount >= 12) ? 'true' : 'false' }\n            next='true'\n            onClick={() => {\n              createNewWalletAction(state, dispatch, backup)\n              changePageInfoAction(state, dispatch, 2)\n            }}\n          >\n            Done\n          </RoundButton>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","import React, { useEffect, useState } from 'react'\nimport styles from './CreateHeader.module.css'\nimport { Store } from './../../../store/'\nimport { useHistory } from 'react-router-dom'\n\n// restore backup or create new\nexport const CreateHeader = () => {\n  // global state\n  const { state } = React.useContext(Store)\n\n  // navigation object\n  const history = useHistory()\n\n\n  // Make sure entire alias is always visible on top through\n  // resizing based on letter count.\n  //\n  // get window width in component instance state 'width'\n  // so can resize alias based on char count\n  const [ width, setWidth ] = useState(window.innerWidth)\n  useEffect(() => {\n    const resize = () => { setWidth(window.innerWidth) }\n    window.addEventListener('resize', resize);\n    return () => window.removeEventListener('resize', resize);\n  }, [])\n  const domainName = state.alias + state.extension\n  // enforces max size to font size so 1 letter alias has same font as 19 letter alias\n  const fontScale = Math.min(\n      Math.floor(1.1 * width / domainName.length),\n      Math.floor(1.1 * width / 15)\n  )\n\n  const barHeight = { height: (0.12 * width + 0.4 * fontScale).toString() + 'px' }\n  const aliasMarginTop = { marginTop: (0.02 * width - 0.1 * fontScale).toString() + 'px' }\n  const aliasFontSize = { fontSize: fontScale.toString() + 'px' }\n\n  return (\n    <>\n      <div\n        className={ styles.cutOverflow }\n        style={ barHeight }\n      >\n        <div\n          className={ styles.bar }\n          style={ barHeight }\n        />\n      </div>\n      <div\n        className={ styles.domain }\n        style={ aliasMarginTop }\n        onClick={ () => {\n          history.push('/')\n        } }\n      >\n        <span\n          className={ styles.alias }\n          style={ aliasFontSize }\n        >{ state.alias }</span>\n        <span\n          className={ styles.ext }\n          style={ aliasFontSize }\n        >{ state.extension }</span>\n      </div>\n      <div className={ styles.spacer } />\n    </>\n  )\n}\n\n","import React, { useState, useEffect } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P2LoadWallet.module.css'\nimport { Store } from '../../../store'\nimport { changePageInfoAction } from '../../../store/actions'\nimport qr from 'qrcode'\nimport { useHistory } from 'react-router-dom'\n\n\n/**\n * Load wallet page, including faucet link for testnet users\n */\nexport const P2LoadWallet = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n\n  // load QR code into local state\n  const [ qrCode, setQrCode] = useState()\n  useEffect(() => {\n    qr.toDataURL(state.wallet.address, { type: 'image/jpeg' }, (err: any, url: any) => {\n      if (!err) { setQrCode(url) }\n    })\n  }, [state.wallet.address])\n\n  // url changer\n  const history = useHistory()\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.contentWrapper }>\n        <div\n          className={ styles.imgQr }\n        >\n          {/* downloadable */}\n          <img src={qrCode} alt={'QR Code'} />\n        </div>\n        <div>\n          Fund your wallet to interact with domains.\n        </div>\n        <div className={ [styles.address, 'selectable'].join(' ') }>\n          { state.wallet.address }\n        </div>\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 1)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          next='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 3)\n          }}\n        >\n          Ready\n        </RoundButton>\n        <RoundButton\n          colorbutton={'var(--colorHighlight)'}\n          show={ (state.network === 'testnet').toString() }\n          onClick={ () => {\n            // open faucet page in new window\n            // segwit compatible:\n            // 1) https://testnet-faucet.mempool.co/\n            // 2) https://bitcoinfaucet.uo1.net/\n            window.open('https://bitcoinfaucet.uo1.net/', '_blank')\n            // window.open('https://testnet-faucet.mempool.co/', '_blank')\n          }}\n        >\n          Testnet: tBTC faucet\n        </RoundButton>\n        <RoundButton\n            show={ (!!state.wallet?.address).toString() }\n            onClick={() => {\n              history.push('/wallet')\n            }}\n            colorbutton={'var(--colorHighlight)'}\n          >\n            Withdraw from wallet\n          </RoundButton>\n        <RoundButton\n          onClick={ () => {\n            // open blockstream explorer for address in new window/tab\n            const pathEdit = (state.network === 'testnet') ? 'testnet/' : ''\n            window.open(\n              `https://blockstream.info/${pathEdit}address/${state.wallet.address}`\n            , '_blank')\n          }}\n        >\n          Open explorer\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P3DomainAndWallet.module.css'\nimport { Store } from '../../../store'\nimport { changePageInfoAction } from '../../../store/actions'\nimport { scanAddressFullyAction } from './../../../store/actions'\nimport { ActionTypes } from './../../../interfaces'\nimport { getUnspentSum } from '../../../helpers/bns/bitcoin'\n\n/**\n * Bid on network\n */\nexport const P3DomainAndWallet = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  // Local state: keep track if API is busy\n  const [ apiStatus, setApiStatus ] = React.useState('ok')\n\n  // on state update detected by timestamp, reset api status\n  React.useEffect(() => { setApiStatus('ok') }, [ state.lastTimeStamp ])\n\n  // most important for domain notificaiton address is the transaction history to know ownership\n  // but also the current utxo in case we want to control the domain\n  const domainInfo = () => {\n    if (state.pageInfo.checkedDomain) {\n      return ('✓')\n    } else {\n      return ('needs scan')\n    }\n  }\n\n  // wallet needs utxo info including raw tx & tx history for nonce\n  const walletInfo = () => {\n    if (state.pageInfo.checkedWallet) {\n      return ( '✓' )\n    } else {\n      return ('needs scan')\n    }\n  }\n\n  // Conditions to enable next pages.\n  const readyStatus = () => {\n    if (!state.pageInfo.checkedDomain && !state.pageInfo.checkedWallet) {\n      return { isReady: false,    info: 'Scan both to move on' }\n    }\n    if (!state.pageInfo.checkedDomain && state.pageInfo.checkedWallet) {\n      return { isReady: false,    info: 'Scan domain to move on' }\n    }\n    if (state.pageInfo.checkedDomain && !state.pageInfo.checkedWallet) {\n      return { isReady: false,    info: 'Scan wallet to move on' }\n    }\n    if (state.pageInfo.checkedDomain && state.pageInfo.checkedWallet) {\n      return { isReady: true,     info: '' }\n    }\n    return { isReady: false,      info: 'Unknown status' }\n  }\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Wallet and domain history needed. <br />\n        (No offline method yet)\n      </div>\n      <div className={ styles.domainInfo }>\n        { (apiStatus !== 'domain')  && 'Domain ' + domainInfo() }\n        { (apiStatus === 'domain')  && 'Domain scanning...' }\n      </div>\n      <div className={ styles.domainButton }>\n        <RoundButton\n          onClick={ () => {\n            if (apiStatus === 'ok') {\n              setApiStatus('domain')\n              scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_DOMAIN)\n            }\n          }}\n        >\n          API Scan\n        </RoundButton>\n      </div>\n      <div className={ styles.walletInfo }>\n        { (apiStatus !== 'wallet')  && 'Wallet ' + walletInfo() }\n        { (apiStatus === 'wallet') && 'Wallet scanning...' }\n      </div>\n      <div className={ styles.walletButton }>\n        <RoundButton\n          onClick={ () => {\n            if (apiStatus === 'ok') {\n              setApiStatus('wallet')\n              scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_WALLET)\n            }\n          }}\n        >\n          API Scan\n        </RoundButton>\n      </div>\n      <div className={ styles.unspent }>\n        <div className={ styles.balance }>\n          { state.pageInfo.checkedWallet? (getUnspentSum(state.wallet.utxoList) / 1e8).toFixed(8) : 'n/a' }\n        </div>\n        { (state.network === 'testnet') ? ' tBTC' : ' BTC' }\n      </div>\n      <div className={ styles.ownership }>\n        { readyStatus().info }\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 2)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          show={ readyStatus().isReady ? 'true' : 'false' }\n          next='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 4)\n          }}\n        >\n          Ready\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport styles from './InputForm.module.css'\nimport { RoundButton } from './../../general/RoundButton'\n\n/**\n * Reusable and styled form, label, textarea.\n */\nexport const InputForm = (props: any) => {\n  // const [showThis, setShowThis] = React.useState(false)\n\n  return (\n    <div\n      className={ [styles.wrapper, props.className].join(' ') }\n      style={ props.style }\n    >\n      <div className={ styles.shiftRight }>\n        <aside className={ styles.label }>\n          { props.thisInputLabel || '' }\n        </aside>\n        <textarea\n          className={ styles.textarea }\n          spellCheck={ false }\n          value={ props.thisInputValue || '' }\n          placeholder={ props.thisInputPlaceholder || '' }\n          onChange={ (e?: any) => {\n            props.thisInputOnChange ? props.thisInputOnChange(e) : (()=>{})()\n          } }\n        ></textarea>\n        <RoundButton\n          className={ styles.button }\n          next={ 'true' }\n          onClick={ (e?: any) => {\n            props.thisSubmitButtonOnClick ? props.thisSubmitButtonOnClick(e) : (()=>{})()\n          } }\n        >\n          OK\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P4ActionChoice.module.css'\nimport { Store } from '../../../store'\nimport { changePageInfoAction, changeChoicesBNSAction } from '../../../store/actions'\nimport { Details } from './../../general/Details'\nimport { runAllActionPermissionChecks, calcBnsState } from './../../../helpers/bns/'\nimport { InputForm } from './../../general/InputForm'\n\n/**\n * Bid on network\n */\nexport const P4ActionChoice = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  // simulate bns state once again just in case\n  // up to current block height\n  const bns = calcBnsState(\n    state.domain.txHistory,\n    state.domain.domainName,\n    state.chain.height,\n    state.network\n  )\n  // and get all permissions\n  const checkActions = runAllActionPermissionChecks(bns, state.wallet.address)\n  console.log('results of permission scan for all actions', checkActions)\n\n  // local state for special cases where form needs to be shown for extra data\n  const [dataExtraForm, setDataExtraForm] = React.useState()\n  // only runs when available actions change\n  React.useEffect(() => {\n    // only do if undefined local state (once)\n    if (!dataExtraForm) {\n      // go through each action, set key to .info and set show status to false\n      let showStatus: { [key: string]: {show: boolean, value: string} } = {}\n      checkActions.forEach(action => {\n        showStatus[action.info] = { show: false, value: '' }\n      })\n      setDataExtraForm(showStatus)\n    }\n  }, [checkActions, dataExtraForm])\n\n  // list available actions for render\n  const listAvailableActions = () => (\n    checkActions.map(action => {\n      // usable actions only + not displaying actions with warnings\n      if (action.isUsable && !action.suggestions?.startsWith('WARNING')) {\n        console.log(action.info, 'special tx instructions:', action.special)\n        return (\n          <div key={ action.info }>\n            <RoundButton\n              next={ !action.suggestions?.startsWith('GET') ? 'true' : undefined }\n              onClick={ () => {\n                if (!action.suggestions?.startsWith('GET')) {\n                  // if regular action without extra data needed\n\n                  // set this action as the chosen action\n                  changeChoicesBNSAction(state, dispatch, {\n                    action: JSON.parse(JSON.stringify(action))\n                  })\n                  // change page\n                  changePageInfoAction(state, dispatch, 5)\n                } else {\n                  // if special action with extra data needed, toggle showing form instead\n                  if (dataExtraForm) {\n                    const { show, value } = dataExtraForm[action.info]\n                    setDataExtraForm({ ...dataExtraForm, [action.info]: { show: !show, value } })\n                  }\n                }\n              }}\n            >\n              { action.info }\n            </RoundButton>\n            { (dataExtraForm && dataExtraForm[action.info].show) && (\n              <InputForm\n                // style={ { width: '50%' } }\n                className={ styles.inputForms }\n                // label title comes from 3rd substring separarted by _\n                thisInputLabel={ action.suggestions.split('_')[1] }\n                // parameter name comes from 2nd word separated by _\n                thisInputValue={ dataExtraForm[action.info].value }\n                thisInputOnChange={ (e: any) => {\n                  // add changed value to extra form state\n                  setDataExtraForm({\n                    ...dataExtraForm,\n                    [action.info]: {\n                      ...dataExtraForm[action.info],\n                      value: e.target.value\n                    }\n                  })\n                } }\n                thisSubmitButtonOnClick={ () => {\n\n                  if (dataExtraForm[action.info].value !== '') {\n                    const actionCommandText = action.suggestions.split('_')[2]\n\n                    // set this action as the chosen action in global state\n                    // add onto it the command (e.g. '!ca'), space, and then form value\n                    changeChoicesBNSAction(state, dispatch, {\n                      action: {\n                        ...action,\n                        actionContent: actionCommandText + ' ' + dataExtraForm[action.info].value\n                      }\n                    })\n                    // change page\n                    changePageInfoAction(state, dispatch, 5)\n                  }\n                } }\n              />\n            ) }\n          </div>\n        )\n      } else {\n        return ''\n      }\n    })\n  )\n\n  // list unavailable actions for render\n  const listUnavailableActions = () => (\n    checkActions.map(action => {\n      if (!action.isUsable) {\n        return (\n          <div\n            className={\n              styles.unavailableActions__actionList__action\n            }\n            key={ action.info }\n          >\n            <div\n              className={\n                styles.unavailableActions__actionList__action__title\n              }\n            >\n              { action.info }\n            </div>\n            <div\n              className={\n                styles.unavailableActions__actionList__action__permissionList\n              }\n            >\n              { action.permissionList.map((permission: any) => {\n                return (\n                  <div\n                    className={\n                      styles.unavailableActions__actionList__action__permissionList__permission\n                    }\n                    key={permission.info}\n                  >\n                    - { permission.info }\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        )\n      } else {\n        return ('')\n      }\n    })\n  )\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Available actions\n      </div>\n      <div className={ styles.availableActions }>\n        {\n          listAvailableActions()\n        }\n      </div>\n      <div className={ styles.unavailableActions }>\n        <Details\n          description={ 'Show unavailable actions' }\n          className= { styles.unavailableActions__title }\n        >\n          <div className={ styles.unavailableActions__actionList }>\n            {\n              listUnavailableActions()\n            }\n          </div>\n        </Details>\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 3)\n          }}\n        >\n          Back\n        </RoundButton>\n      </div>\n    </div>\n  )\n}","import React, { useEffect } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport { Details } from './../../general/Details'\nimport styles from './P5CustomForwards.module.css'\nimport { Store, getOwner } from '../../../store'\nimport { changePageInfoAction, changeChoicesBNSAction } from '../../../store/actions'\nimport { stringByteCount, BYTES_MAX, findLatestForwards } from '../../../helpers/bns'\nimport sanitize from '../../../helpers/sanitize'\n\ntype Planned_Changes = { [key: string]: string }\n\n/**\n * Edit custom forwards information.\n * state - global state.\n * textboxContent - text content inside the network and address textareas.\n */\nexport const P5CustomForwards = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  // object of planned changes derived from chosen string to embed\n  const plannedChanges = (\n    state.choices.embedString.split(' ').reduce((\n      plannedChangesSoFar: Planned_Changes,\n      word: string,\n      index: number,\n      words: Array<string>\n    ): Planned_Changes => {\n        if (index % 2 === 1) {\n          return { ...plannedChangesSoFar, [words[index - 1]]: word }\n        } else {\n          return plannedChangesSoFar\n        }\n      }\n    , {})\n  )\n\n  // change string to embed from an object of planned changes\n  const setPlannedChanges = (objForwards: Planned_Changes) => {\n    let forwardsString = ''\n    Object.keys(objForwards).forEach(fwNetwork => {\n      forwardsString += fwNetwork + ' ' + objForwards[fwNetwork] + ' '\n    })\n    if (forwardsString.length > 0) { forwardsString = forwardsString.slice(0, -1) }\n    console.log('string to embed:', '\"' + forwardsString + '\"')\n    changeChoicesBNSAction(state, dispatch, {\n      embedString: forwardsString\n    })\n  }\n\n  // array of past network:forwardingAddress objects\n  // display only active ones with latest higher\n  const pastForwards = findLatestForwards(getOwner(state)?.forwards || []).reverse()\n\n  // local state for content in textboxes for new network address changes\n  const [textboxContent, setTextboxContent] = React.useState({network: '', address: '' })\n\n  // combine forwards into a string to embed\n  const combineForwards = (objForwards: any) => {\n    let forwardsString = ''\n    Object.keys(objForwards).forEach(fwNetwork => {\n      forwardsString += fwNetwork + ' ' + objForwards[fwNetwork] + ' '\n    })\n    if (forwardsString.length > 0) { forwardsString = forwardsString.slice(0, -1) }\n    console.log('string to embed:', '\"' + forwardsString + '\"')\n\n    // combine the forwards added here with the required action content\n    // that is also using the embedded text\n    return state.choices.action.actionContent !== ''\n      ? [state.choices.action.actionContent, forwardsString].join(' ')\n      : forwardsString\n  }\n\n\n  useEffect(() => {\n\n  }, [])\n\n  const bytesOfChanges = stringByteCount(combineForwards(plannedChanges))\n  console.log(bytesOfChanges)\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Update forwarding information\n        <div\n          className={ styles.subtitle }\n        >\n          Main action: { state.choices.action.info }\n        </div>\n      </div>\n      <div className={ styles.changes }>\n        {/* bytes info */ }\n        { (Object.keys(plannedChanges).length === 0) && 'No forwarding updates' }\n        { (bytesOfChanges <= BYTES_MAX) &&\n          <div className={ styles.bytesLeft }>\n            { BYTES_MAX - bytesOfChanges } Bytes left\n          </div>\n        }\n        { (bytesOfChanges > BYTES_MAX) &&\n          <div className={ styles.bytesOver }>\n            Too much by { bytesOfChanges - BYTES_MAX } Bytes\n          </div>\n        }\n        { Object.keys(plannedChanges).map((fwNetwork) => {\n          return (\n            <div\n              className={ styles.updateItem }\n              key={ fwNetwork }\n              onClick={ () => {\n                setTextboxContent({ network: fwNetwork, address: plannedChanges[fwNetwork] })\n              } }\n            >\n              <div\n                className={ styles.updateInfo }\n              >\n                {\n                  (plannedChanges[fwNetwork] !== '')\n                    ? (<>\n                      Updating forwarding on <span>{ ' ' + fwNetwork + ' ' }</span>\n                      network to address of <span>{ ' ' + plannedChanges[fwNetwork] + ' ' }</span>\n                      <i>{' '}(+{ stringByteCount(fwNetwork + ' ' + plannedChanges[fwNetwork]) }B)</i>\n                    </>)\n                    : (<>\n                      Deleting previously set forwarding information for\n                      <span>{ ' ' + fwNetwork + ' '}</span> network\n                      <i>{' '}(+{ stringByteCount(fwNetwork + ' ' + plannedChanges[fwNetwork]) }B)</i>\n                    </>)\n                }\n              </div>\n              <div\n                className={ ['btnCircle', styles.updateCancel, 'addTooltipRight'].join(' ') }\n                onClick={ (e) => {\n                  const newData = { ...plannedChanges }\n                  delete newData[fwNetwork]\n                  setPlannedChanges(newData)\n                  e.stopPropagation()\n                } }\n              >\n                <span>×</span>\n                <aside>Remove from planned changes</aside>\n              </div>\n            </div>\n          )\n        }) }\n      </div>\n      <div className={ styles.editor } >\n        { (textboxContent.network.length > 0) &&\n          <div\n            className={ [styles.btnDelete, 'canPress'].join(' ') }\n            onClick={ () => {\n              setPlannedChanges({\n                ...plannedChanges,\n                [textboxContent.network]: ''\n              })\n              setTextboxContent({ network: '', address: '' })\n            } }\n          >\n            No address\n          </div>\n        }\n        <div\n          className={ styles.editorNetwork }\n        >\n          <aside>Network</aside>\n          <textarea\n            spellCheck={ false }\n            value={ textboxContent.network }\n            placeholder={ 'e.g. btc' }\n            onChange={ (e) => {\n              const cleanText = sanitize(e.target.value, 'oneline')\n              setTextboxContent({ ...textboxContent, network: cleanText })\n              e.target.value = cleanText\n            } }\n          ></textarea>\n        </div>\n        <div\n          className={ styles.editorAddress }\n        >\n          <aside>Forwarding address</aside>\n          <textarea\n            spellCheck={ false }\n            value={ textboxContent.address }\n            placeholder={ 'e.g. your btc address' }\n            onChange={ (e) => {\n              const cleanText = sanitize(e.target.value, 'oneline')\n              setTextboxContent({ ...textboxContent, address: e.target.value })\n              e.target.value = cleanText\n            } }\n          ></textarea>\n        </div>\n        <div\n          className={ ['btnCircle', styles.btnAdd, 'canPress', 'addTooltip'].join(' ') }\n          onClick={ () => {\n            if (textboxContent.network !== '') {\n              setPlannedChanges({\n                ...plannedChanges,\n                [textboxContent.network]: textboxContent.address\n              })\n              setTextboxContent({ network: '', address: '' })\n            }\n          } }\n        >\n          <span>+</span>\n          <aside>Add to planned changes</aside>\n        </div>\n      </div>\n      <div className={ styles.pastList } >\n        <Details\n          description={ 'What\\'s this?' }\n        >\n          <p>\n            Enter the forwarding addresses you want to use (e.g. long bitcoin address) and specify on which network that address should be used (e.g. btc) when someone wants to reach you after looking up your domain alias.<br />\n            <br />\n            Submit new updates by hitting [+] button. Remove updates by hitting [x] buttons.<br />\n            <br />\n            Below, the currently active forwarding addresses are shown, if any.<br />\n            <br />\n            Edit them by reusing the exact same network or remove by setting forwarding address to nothing or hitting [no address] button under network name text.\n          </p>\n        </Details>\n        { pastForwards.map((fw: any, i: number) => {\n          return (\n            <div\n              className={ styles.pastPair }\n              key={ i }\n              onClick={ () => {\n                setTextboxContent({ network: fw.network, address: fw.address })\n              } }\n            >\n              <div className={ styles.pastNetwork } >\n                { fw.network }\n              </div>\n              <div className={ styles.pastAddress } >\n                { fw.address }\n              </div>\n            </div>\n          )\n        }) }\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 4)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          next='true'\n          show={ bytesOfChanges > BYTES_MAX ? 'false' : 'true' }\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 6)\n          }}\n        >\n          Ready\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport { Store } from '../../../store'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P6Broadcast.module.css'\nimport { changeChoicesBNSAction, changePageInfoAction } from '../../../store/actions'\nimport { calcTx } from './../../../helpers/bns/'\nimport { txPush } from './../../../api/blockstream'\nimport sanitize from './../../../helpers/sanitize'\nimport { getFeeEstimates } from './../../../api/blockstream'\nimport { getUnspentSum } from '../../../helpers/bns/bitcoin'\nimport { Details } from './../../general/Details'\n\n/**\n * Broadcast tx page.\n * Fee selection.\n * Transaction summary/status. *\n */\nexport const P6Broadcast = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  // local state for fee rate text that can end on decimal\n  const [ feeText, setFeeText ] = React.useState(state.choices.feeRate)\n  const [ feeSuggestions, setFeeSuggestions ] = React.useState({\n    showSuggestions: false,\n    apiSuccess: false,\n    min20: 1,\n    min40: 1,\n    min60: 1,\n  })\n\n  // tx calculation\n  let tx: any;\n  let txIssue: string = ''\n  try {\n    tx = calcTx(\n      state.wallet,\n      state.domain,\n      state.choices,\n      state.network\n    )\n  } catch (e) {\n    txIssue = String(e.message)\n    if (txIssue.endsWith('has no matching Script')) {\n      txIssue += ' \\n(address provided seems invalid)'\n      console.log(txIssue)\n    }\n  }\n\n  // summarize number of updates in the embeded string\n  const numberOfUpdates = (state\n    .choices\n    .embedString\n    .split(' ')\n    .reduce((countSoFar: number, word: string, index: number, words: Array<string>) =>\n      (index % 2 === 1) ? countSoFar + 1 : countSoFar\n    , 0)\n  )\n\n  // keep track of broadcast\n  const [ broadcastStatus, setBroadcastStatus ] = React.useState({\n    ok: false,\n    txid: '123',\n    reason: ''\n  })\n\n  // show BTC balance with styling and proper units based on network\n  const unitBTC = (state.network === 'testnet') ? ' tBTC ' : ' BTC '\n  const showBTC = (sats: number = 0): JSX.Element => (\n    <>\n      <span className={ styles.balance }>\n        { (sats / 1e8).toFixed(8) }\n      </span>\n      { unitBTC }\n    </>\n  )\n\n  // get new suggestions if never got them through api\n  // otherwise show previous\n  const tryFees = async () => {\n    if (!feeSuggestions.apiSuccess) {\n      try {\n        const apiSuggest = await getFeeEstimates(state.network)\n        setFeeSuggestions({\n          min20: apiSuggest['2'],\n          min40: apiSuggest['4'],\n          min60: apiSuggest['6'],\n          apiSuccess: true,\n          showSuggestions: true\n        })\n\n      } catch (e) {}\n    } else {\n      setFeeSuggestions({\n        ...feeSuggestions,\n        showSuggestions: true\n      })\n    }\n  }\n\n  const finalCost = tx ? (\n    // No point confusing user if the cost is negative.\n    // Possible with enough anyone-can-spend utxo found.\n    Math.max(tx.gatheredFromWallet - tx.change, 0)\n  ) : undefined\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Finalize transaction details\n      </div>\n      <div className={ styles.fees }>\n        <div className={ styles.fees__rate }>\n          <aside>Fee rate (sat / vByte):</aside>\n          <textarea\n            spellCheck={ false }\n            value={ feeText }\n            placeholder={ 'e.g. 1.2' }\n            onChange={ (e) => {\n              const cleanText = sanitize(e.target.value, [\n                'numbers', 'decimal_point', 'no_leading_zeros'\n              ])\n              setFeeText(cleanText)\n              // 123. works in parseFloat and outputs 123 so safe\n              const cleanNumber = parseFloat(cleanText)\n              changeChoicesBNSAction(state, dispatch, { feeRate: cleanNumber })\n            } }\n          ></textarea>\n        </div>\n        <div className= { styles.fees__apicall }>\n          <RoundButton\n            onClick={ () => {\n              tryFees()\n            } }\n          >\n            Check online\n          </RoundButton>\n          { (feeSuggestions.showSuggestions) && (\n            <div className={ styles.fees__feeSelection }>\n              <div\n                className= { styles.fees__feeSelection__choice }\n                onClick={ () => {\n                  setFeeText(feeSuggestions.min20)\n                  changeChoicesBNSAction(state, dispatch, {\n                    feeRate: feeSuggestions.min20\n                  })\n                  setFeeSuggestions({...feeSuggestions, showSuggestions: false})\n                } }\n              >\n                { '< ' }20 min ( { feeSuggestions.min20.toFixed(3) } sat / vByte )\n              </div>\n              <div\n                className= { styles.fees__feeSelection__choice }\n                onClick={ () => {\n                  setFeeText(feeSuggestions.min40)\n                  changeChoicesBNSAction(state, dispatch, {\n                    feeRate: feeSuggestions.min40\n                  })\n                  setFeeSuggestions({...feeSuggestions, showSuggestions: false})\n                } }\n              >\n                { '< ' }40 min ( { feeSuggestions.min40.toFixed(3) } sat / vByte )\n              </div>\n              <div\n                className= { styles.fees__feeSelection__choice }\n                onClick={ () => {\n                  setFeeText(feeSuggestions.min60)\n                  changeChoicesBNSAction(state, dispatch, {\n                    feeRate: feeSuggestions.min60\n                  })\n                  setFeeSuggestions({...feeSuggestions, showSuggestions: false})\n                } }\n              >\n                { '< ' }60 min ( { feeSuggestions.min60.toFixed(3) } sat / vByte )\n              </div>\n            </div>\n          ) }\n        </div>\n      </div>\n      <div className={ styles.totalCost }>\n        { (!!tx) ? <>Your final cost: { showBTC(finalCost) }</> : ' ' }\n      </div>\n      <div className={ styles.txSummary }>\n        { (!!tx) && (\n          <>\n            <Details>\n              <table><tbody>\n                <tr>\n                  <td>Action:</td>\n                  <td>{ state.choices.action.info }</td>\n                </tr>\n                <tr>\n                  <td>Updates:</td>\n                  <td>{ numberOfUpdates }</td>\n                </tr>\n                <tr>\n                  <td>Wallet:</td>\n                  <td>\n                    <p>{ showBTC(getUnspentSum(state.wallet.utxoList)) } total\n                    across { state.wallet.utxoList.length } utxo</p>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Inputs:</td>\n                  <td>\n                    <p>{ showBTC(tx.gatheredFromWallet) } from\n                    {' '}{ tx.nInputsFromWallet } wallet utxo</p>\n                    <p>{ showBTC(tx.gatheredFromOther) } from\n                    {' '}{ tx.nInputsFromOther } notification utxo</p>\n                    <p>{ showBTC(tx.totalGathered) } total</p>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Outputs:</td>\n                  <td>\n                    <p>Burning { showBTC(tx.burnAmount) } at #0</p>\n                    <p>Sending { showBTC(tx.notifyAmount) } at #1</p>\n                    <p>Change of { showBTC(tx.change) } sent back at #2</p>\n                    <p>{ tx.nOutputs } total outputs</p>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Miner fee:</td>\n                  <td>\n                    <p>{ showBTC(tx.fee) }{' '}\n                    ({(tx.fee / tx.valueNeeded * 100.0).toFixed(1)}%)</p>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Size:</td>\n                  <td>{ tx.thisVirtualSize } vBytes</td>\n                </tr>\n                <tr>\n                  <td>Cost:</td>\n                  <td>\n                    <p>+ Transaction requires { showBTC(tx.valueNeeded) }</p>\n                    <p>- Using { showBTC(tx.gatheredFromOther) } from anyone-can-spend utxo</p>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Net cost:</td>\n                  <td>{ showBTC(tx.gatheredFromWallet - tx.change) }</td>\n                </tr>\n              </tbody></table>\n            </Details>\n          </>\n        )}\n        { (!tx) && (\n          <div className={ styles.txSummary }>\n            calculation failed <br />\n            { txIssue }\n          </div>\n        ) }\n      </div>\n      <div className={ styles.status }>\n        {/* hex here later, only in console now */}\n        { (broadcastStatus.ok) ? (\n          <>\n            <div\n              className={ [styles.status__button, 'canPress'].join(' ') }\n              onClick={ () => {\n                const PATH = `https://blockstream.info/` +\n                `${ state.network === 'testnet' ? 'testnet/' : '' }tx/` +\n                `${ broadcastStatus.txid }`\n                window.open(PATH, '_blank')\n              } }\n            >\n              Success! Open in explorer\n            </div>\n          </>\n        ) : (broadcastStatus.reason.length > 0) ? (\n          <div className={ styles.status__failed }>\n            { broadcastStatus.reason }\n          </div>\n        ) : ''\n      }\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back={ 'true' }\n          onClick={ () => { changePageInfoAction(state, dispatch, 5) } }\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          show={ tx?.hex !== '' ? 'true' : 'false' }\n          onClick={ async () => {\n            try {\n              const res = await txPush(tx.hex, state.network)\n              setBroadcastStatus({ok: true, txid: res.txid, reason: '' })\n            } catch (e) {\n              setBroadcastStatus({ok: false, txid: '', reason: e.message })\n            }\n          } }\n        >\n          Broadcast\n        </RoundButton>\n      </div>\n\n    </div>\n  )\n}","import React from 'react'\nimport { Store } from './../../store/'\nimport { CreateHeader } from './../CreateSteps/CreateHeader'\nimport { P1RestoreOrBackup } from '../CreateSteps/P1RestoreOrBackup'\nimport { P2LoadWallet } from '../CreateSteps/P2LoadWallet'\nimport { P3DomainAndWallet } from '../CreateSteps/P3DomainAndWallet'\nimport { P4ActionChoice } from '../CreateSteps/P4ActionChoice'\nimport { P5CustomForwards } from '../CreateSteps/P5CustomForwards'\nimport { P6Broadcast } from './../CreateSteps/P6Broadcast'\nimport styles from './CreateNavigator.module.css'\n\n/**\n * Handle navigation of alias manipulation\n */\nexport const CreateNavigator = () => {\n  // global state\n  const { state } = React.useContext(Store)\n\n  const page = state.pageInfo?.current\n\n  !page && console.log('Unknown Page')\n\n  return (\n    <>\n      <CreateHeader />\n      <div className={ [styles.wrapper, 'scrollbar'].join(' ') }>\n        <div className={ styles.horizontalScaler } >\n          { (page === 1) && <P1RestoreOrBackup /> }\n          { (page === 2) && <P2LoadWallet /> }\n          { (page === 3) && <P3DomainAndWallet /> }\n          { (page === 4) && <P4ActionChoice /> }\n          { (page === 5) && <P5CustomForwards /> }\n          { (page === 6) && <P6Broadcast /> }\n        </div>\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { CreateNavigator } from './../components/CreateNavigator'\n\nexport default function Create () {\n  return (\n    <>\n      <CreateNavigator />\n    </>\n  )\n}\n","import React from 'react'\nimport { Store } from './../../store'\nimport { Link, useHistory } from 'react-router-dom'\nimport styles from './Navbar.module.css'\n\nexport const Navbar = (): JSX.Element => {\n  // global state\n  const { state } = React.useContext(Store)\n\n  const isCreatePage = useHistory().location.pathname === '/create'\n  const isHomePage = useHistory().location.pathname === '/'\n  const isAboutPage = useHistory().location.pathname === '/about'\n\n  return (\n    <>\n      <div\n        className={ styles.warning }\n      >\n        FOR TESTING, DO NOT USE\n      </div>\n      <div\n        className={ styles.root }\n      >\n        {/* only show page number in create path */}\n        { isCreatePage && (\n          <div className={ styles.pageNum }>\n            { state.pageInfo.current }/6\n          </div>\n        ) }\n        <a\n          href=\"https://github.com/ildarmgt/BitcoinNameSystem\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          { 'source' }\n        </a>\n        <Link\n          className={ isAboutPage ? styles.selected : '' }\n          to='/about'\n        >about</Link>\n        <Link\n          className={ isCreatePage ? styles.selected : '' }\n          to='/create'\n        >owners</Link>\n        <Link\n          className={ isHomePage ? styles.selected : '' }\n          to='/'\n        >search</Link>\n      </div>\n    </>\n  )\n}\n\n// Hash history cannot PUSH the same path; a new entry will not be added to the history stack\n// Only issue is the warning in console, but that only exists in development mode so can be ignored.","import React from 'react'\nimport styles from './FeesSelection.module.css'\nimport { Store } from './../../../store/'\nimport { RoundButton } from './../../general/RoundButton'\nimport sanitize from './../../../helpers/sanitize'\nimport {\n  changeChoicesBNSAction\n} from './../../../store/actions'\nimport { getFeeEstimates } from './../../../api/blockstream'\n\nexport const FeesSelection = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  // local states to track fees and suggestions\n  const [ feeText, setFeeText ] = React.useState(state.choices.feeRate)\n  const [ feeSuggestions, setFeeSuggestions ] = React.useState({\n    showSuggestions: false,\n    apiSuccess: false,\n    min20: 1,\n    min40: 1,\n    min60: 1,\n  })\n\n\n  // get new suggestions if never got them through api\n  // otherwise show previous\n  const tryFees = async () => {\n    if (!feeSuggestions.apiSuccess) {\n      try {\n        const apiSuggest = await getFeeEstimates(state.network)\n        setFeeSuggestions({\n          min20: apiSuggest['2'],\n          min40: apiSuggest['4'],\n          min60: apiSuggest['6'],\n          apiSuccess: true,\n          showSuggestions: true\n        })\n\n      } catch (e) {}\n    } else {\n      setFeeSuggestions({\n        ...feeSuggestions,\n        showSuggestions: true\n      })\n    }\n  }\n\n\n  return (\n    <div className={ styles.fees }>\n      <div className={ styles.fees__rate }>\n        <aside>Fee rate (sat / vByte):</aside>\n        <textarea\n          spellCheck={ false }\n          value={ feeText }\n          placeholder={ 'e.g. 1.2' }\n          onChange={ (e) => {\n            const cleanText = sanitize(e.target.value, [\n              'numbers', 'decimal_point', 'no_leading_zeros'\n            ])\n            setFeeText(cleanText)\n            // 123. works in parseFloat and outputs 123 so safe\n            const cleanNumber = parseFloat(cleanText)\n            changeChoicesBNSAction(state, dispatch, { feeRate: cleanNumber })\n          } }\n        ></textarea>\n      </div>\n      <div className= { styles.fees__apicall }>\n        <RoundButton\n          onClick={ () => {\n            tryFees()\n          } }\n        >\n          Check online\n        </RoundButton>\n        { (feeSuggestions.showSuggestions) && (\n          <div className={ styles.fees__feeSelection }>\n            <div\n              className= { styles.fees__feeSelection__choice }\n              onClick={ () => {\n                setFeeText(feeSuggestions.min20)\n                changeChoicesBNSAction(state, dispatch, {\n                  feeRate: feeSuggestions.min20\n                })\n                setFeeSuggestions({...feeSuggestions, showSuggestions: false})\n              } }\n            >\n              { '< ' }20 min ( { feeSuggestions.min20.toFixed(3) } sat / vByte )\n            </div>\n            <div\n              className= { styles.fees__feeSelection__choice }\n              onClick={ () => {\n                setFeeText(feeSuggestions.min40)\n                changeChoicesBNSAction(state, dispatch, {\n                  feeRate: feeSuggestions.min40\n                })\n                setFeeSuggestions({...feeSuggestions, showSuggestions: false})\n              } }\n            >\n              { '< ' }40 min ( { feeSuggestions.min40.toFixed(3) } sat / vByte )\n            </div>\n            <div\n              className= { styles.fees__feeSelection__choice }\n              onClick={ () => {\n                setFeeText(feeSuggestions.min60)\n                changeChoicesBNSAction(state, dispatch, {\n                  feeRate: feeSuggestions.min60\n                })\n                setFeeSuggestions({...feeSuggestions, showSuggestions: false})\n              } }\n            >\n              { '< ' }60 min ( { feeSuggestions.min60.toFixed(3) } sat / vByte )\n            </div>\n          </div>\n        ) }\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Store } from './../../../store/'\nimport styles from './Withdraw.module.css'\nimport { RoundButton } from './../../general/RoundButton'\nimport { ActionTypes } from './../../../interfaces'\nimport {\n  scanAddressFullyAction,\n  changePageInfoAction\n} from './../../../store/actions'\nimport { useHistory } from 'react-router-dom'\nimport { getUnspentSum } from '../../../helpers/bns/bitcoin'\nimport { FeesSelection } from './../FeesSelection'\n\nexport const Withdraw = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n\n  // Local state: keep track if API is busy\n  const [ apiStatus, setApiStatus ] = React.useState('ok')\n\n  // show BTC balance with styling and proper units based on network\n  const unitBTC = (state.network === 'testnet') ? ' tBTC ' : ' BTC '\n  const showBTC = (sats: number = 0): JSX.Element => (\n    <>\n      <span className={ styles.balance }>\n        { (sats / 1e8).toFixed(8) }\n      </span>\n      { unitBTC }\n    </>\n  )\n\n  const history = useHistory()\n\n  // if wallet is not loaded, send to create page 1\n  if (!state.wallet.mnemonic) {\n    changePageInfoAction(state, dispatch, 1)\n    history.push('/create')\n  }\n\n  return (\n    <div className={ styles.wrapper }>\n\n      <div className={ styles.title }>\n        Withdraw from wallet\n      </div>\n\n      <div className={ styles.request }>\n        { !state.pageInfo.checkedWallet && (\n          <>\n            <RoundButton\n              onClick={ () => {\n                if (apiStatus === 'ok') {\n                  setApiStatus('wallet')\n                  scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_WALLET)\n                }\n              }}\n            >\n              Scan wallet\n            </RoundButton>\n          </>\n        ) }\n      </div>\n\n      { state.pageInfo.checkedWallet && (\n        <div className={ styles.fees }>\n          <FeesSelection />\n        </div>\n      ) }\n\n      { state.pageInfo.checkedWallet && (\n        <div className={ styles.total }>\n          { showBTC(\n            getUnspentSum(state.wallet.utxoList)\n          ) }\n        </div>\n      ) }\n      <div>\n        to address\n      </div>\n      <div>\n        to amount\n      </div>\n      <div>\n        returned amount\n      </div>\n      <div>\n        broadcast button\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Withdraw } from './../components/wallet/Withdraw'\n\nconst Home = (props: any): JSX.Element => {\n  return (\n    <>\n      <Withdraw { ...props } />\n    </>\n  )\n}\nexport default Home","import React from 'react';\nimport { Route, Switch } from 'react-router-dom'\nimport Home from './pages/Home'\nimport About from './pages/About'\nimport Create from './pages/Create'\nimport { Navbar } from './components/Navbar'\nimport Wallet from './pages/Wallet'\n\n// using for routing\nconst App = (): JSX.Element => {\n  // onbtc.me?satoshi can now forward to onbtc.me/#/id/satoshi which resets to onbtc.me after search\n  // redirect to auto searching path routed in return and remove query from url\n  const searchParam = (new URLSearchParams(window.location.search)).keys().next().value\n  searchParam && console.log('search param detected after ?', searchParam)\n  // no forward slash before # in string is vital\n  searchParam && window.history.pushState({}, '', window.location.pathname + '#/id/' + searchParam)\n\n  return (\n    <>\n      {/* switch only renders first match instead of all matches */}\n      <Switch>\n        <Route path='/id/:alias' component={Home} />\n        <Route exact path='/id/' component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/create\" component={Create} />\n        <Route path=\"/wallet\" component={Wallet} />\n        <Route path='/:noise' component={Home} />\n        <Route exact path='/' component={Home} />\n      </Switch>\n      <Navbar />\n      {/* <Route exact path=\"/\" render={() => <Home />} /> */}\n    </>\n  );\n}\nexport default App;\n","import React, { useState, useEffect } from 'react'\nimport styles from './DevPanel.module.css'\nimport { Store } from '../../store/'\nimport { ActionTypes } from './../../interfaces/'\nconst json = require('./../../utils/test.json');\n\ninterface I_State {\n  blShow: boolean\n  setShow: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nexport const DevPanel = (props: any): JSX.Element => {\n  const { state, dispatch } = React.useContext(Store) // global state\n\n  // store if DevPanel is hidden\n  const [hidden, setHidden] = useState<boolean>(false);\n\n  // reruns to reattach keyup event to toggle hidden class\n  useEffect(() => {\n    const onDevKey = (e: any) => {\n      if (e.key === '`') {\n        setHidden(!hidden)\n      } else {\n        // give focus back to the input bar\n        if (document.activeElement?.id !== 'txtSearch') {\n          const txtSearch = document.getElementById('txtSearch') as HTMLTextAreaElement\n          txtSearch?.focus()\n        }\n      }\n    }\n    document.addEventListener('keyup', onDevKey)\n    return () => {\n      document.removeEventListener('keyup', onDevKey)\n    }\n  }, [hidden])\n\n  const onOutlineClick = () => {\n    const id: string = 'outliner';\n    const sheet: HTMLElement | null = document.getElementById(id);\n    if (!sheet) {\n      const outlineCss = '* {box-shadow: 0 0 0 1px red;}'\n      const style = document.createElement('style')\n      style.type = 'text/css'\n      style.id = id\n      style.appendChild(document.createTextNode(outlineCss))\n      document.head.appendChild(style)\n    } else {\n      sheet.parentNode?.removeChild(sheet)\n    }\n  }\n\n  const dlState = () => {\n    let data = \"text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(state))\n    let a = document.createElement('a')\n    a.href = 'data:' + data\n    a.download = 'test.json'\n    a.innerHTML = 'download JSON'\n    let container = document.getElementById('container')\n    container?.appendChild(a)\n    a.click()\n    a.remove()\n  }\n\n  return (\n    <div\n      className={[\n        styles.divDev,\n        !hidden ? styles.hidden : ''\n      ].join(' ')}\n      { ...props }\n    >\n      <div><b>DevPanel</b></div>\n      <div\n        className={ styles.button }\n        onClick={ () => {\n          dlState()\n        } }\n      >\n        Save State\n      </div>\n      <div\n        className={ [styles.btnOutline, styles.button].join(' ') }\n        onClick={ onOutlineClick }\n      >\n        Outline\n      </div>\n      <div\n        className={ styles.button }\n        onClick={ () => {\n          console.log(json);\n          dispatch({ type: ActionTypes.LOAD_STATE, payload: json });\n        } }\n      >\n        Load State\n      </div>\n      <div\n        className={ styles.button }\n        onClick={ () => {\n          console.log(state);\n        } }\n      >\n        Console State\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './css/global.css';\nimport App from './App';\nimport { StoreProvider } from './store'\nimport { DevPanel } from './components/DevPanel'\n\n// Using for store access and hash router base\nReactDOM.render(\n  <StoreProvider>\n    <HashRouter>\n      <App />\n    </HashRouter>\n    <DevPanel />\n  </StoreProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\n// import * as serviceWorker from './serviceWorker';","import crypto from 'crypto'\n\n/**\n * Encrypt - symmetric - aes-256-crt\n * @param   {string}  stringText      To be encrypted (up to 80 bytes)\n * @param   {string}  stringForKey    Derive Key from (not final Key).\n * @param   {string}  stringForIV     Derive IV from (not final IV). Defaults as stringForKey.\n * @returns {Buffer}                  Buffer to embed in tx.\n */\nexport const encrypt = (\n  stringText: string, stringForKey: string, stringForIV: string = stringForKey\n) => {\n  // aes-NUMBER-TYPE\n  // Must have key size matching NUMBER (in aes name) of bits (NUMBER/8 bytes)\n  // Must have IV matching encryption block size, 16 bytes for AES128-to-256-range in cbc mode\n  // sha256 can make 32 byte buffer out of anything and then .slice(0, N) can cut it to N bytes\n\n  const key = crypto.createHash('sha256').update(stringForKey).digest()             // 32 bytes\n  const iv = crypto.createHash('sha256').update(stringForIV).digest().slice(0, 16)  // 16 bytes\n\n  let cipher = crypto.createCipheriv('aes-256-ctr', key, iv)\n  let encrypted = cipher.update(Buffer.from(stringText))\n\n  encrypted = Buffer.concat([encrypted, cipher.final()])\n\n  return encrypted\n}\n\n /**\n * Decrypt - symmetric - aes-256-crt\n * @param   {Buffer}  stringText      Buffer to be decrypted.\n * @param   {string}  stringForKey    Derive Key from (not final Key).\n * @param   {string}  stringForIV     Derive IV from (not final IV). Defaults as stringForKey.\n * @returns {Buffer}                  Buffer to utf8 embeded in tx.\n */\nexport const decrypt = (\n  bufferCypher: Buffer, stringForKey: string, stringForIV: string = stringForKey\n) => {\n\n  const key = crypto.createHash('sha256').update(stringForKey).digest()             // 32 bytes\n  const iv = crypto.createHash('sha256').update(stringForIV).digest().slice(0, 16)  // 16 bytes\n\n  let decipher = crypto.createDecipheriv('aes-256-ctr', key, iv)\n\n  // first part\n  let decrypted = decipher.update(bufferCypher)\n\n  // the rest\n  decrypted = Buffer.concat([decrypted, decipher.final()])\n\n  return decrypted.toString('utf8')\n}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lblMainTitle\":\"HomeContent_lblMainTitle__1LqCG\",\"lblMainTitleAfter\":\"HomeContent_lblMainTitleAfter__J9CsB\",\"divSearch\":\"HomeContent_divSearch__3dKw5\",\"divSearchAfter\":\"HomeContent_divSearchAfter__2MAMf\",\"txtSearch\":\"HomeContent_txtSearch__3HpSp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fees\":\"FeesSelection_fees__aYPBm\",\"fees__rate\":\"FeesSelection_fees__rate__ho27f\",\"fees__apicall\":\"FeesSelection_fees__apicall__14yZr\",\"fees__feeSelection\":\"FeesSelection_fees__feeSelection__26meY\",\"fees__feeSelection__choice\":\"FeesSelection_fees__feeSelection__choice__1Ba9j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"divDev\":\"DevPanel_divDev__2q66m\",\"hidden\":\"DevPanel_hidden__Wlj3v\",\"btnOutline\":\"DevPanel_btnOutline__2FJLx\",\"button\":\"DevPanel_button__1DKHt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"roundButtonWrap\":\"RoundButton_roundButtonWrap__2X50a\",\"roundButton\":\"RoundButton_roundButton__tfjmf\",\"overhead\":\"RoundButton_overhead__As9JW\",\"nextArrow\":\"RoundButton_nextArrow__SS6Nl\",\"backArrow\":\"RoundButton_backArrow__2MJJm\",\"back\":\"RoundButton_back__3z3jD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cutOverflow\":\"CreateHeader_cutOverflow__3s_72\",\"bar\":\"CreateHeader_bar__27ge1\",\"domain\":\"CreateHeader_domain__1TQ7L\",\"alias\":\"CreateHeader_alias__1dNdj\",\"ext\":\"CreateHeader_ext__17sc6\",\"spacer\":\"CreateHeader_spacer__3tstm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Navbar_root__2XES1\",\"warning\":\"Navbar_warning__1HOBZ\",\"pageNum\":\"Navbar_pageNum__1amUi\",\"selected\":\"Navbar_selected__10Mm9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Withdraw_wrapper__3h_E8\",\"title\":\"Withdraw_title__1DTCX\",\"request\":\"Withdraw_request__2EjrZ\",\"request__total\":\"Withdraw_request__total__6UrOm\",\"balance\":\"Withdraw_balance__2xjDM\",\"fees\":\"Withdraw_fees__1uZhm\"};","import * as bitcoin from 'bitcoinjs-lib'\nconst op = bitcoin.opcodes;\nconst hash160 = bitcoin.crypto.hash160;\n\n\n/**\n * Get p2wsh notificaiton address from domainName and network.\n * @param   {string} domainName         - full domainName to use (e.g. 'satoshi.btc').\n * @param   {string} networkChoice      - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @returns {object}                    - { notificationsAddress - p2wsh address derived from domainName }.\n */\nexport const calcP2WSH = (domainName: string, networkChoice: string) => {\n  const network = bitcoin.networks[networkChoice];\n\n  // convert domainName into buffer so it can be put into script\n  const bufferData = Buffer.from(domainName, 'utf8');\n\n  // easily spendable script for ACS notification output\n  // specific to this domainName\n  const witnessScript = bitcoin.script.compile([\n    hash160(bufferData),\n    op.OP_DROP\n  ]);\n\n  // calculate p2wsh address for this witnessScript & network\n  const p2wsh = bitcoin.payments.p2wsh({\n    redeem: {\n      output: witnessScript,\n      network\n    },\n    network\n  })\n  const notificationsAddress = p2wsh.address;\n\n  return {\n    notificationsAddress\n  };\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Details_wrapper__32nmX\",\"toggleDetails\":\"Details_toggleDetails__2jgtb\",\"arrow\":\"Details_arrow__2N1IF\",\"down\":\"Details_down__2irBp\",\"details\":\"Details_details__1lwEd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P2LoadWallet_wrapper__vI_bb\",\"contentWrapper\":\"P2LoadWallet_contentWrapper__UNLo4\",\"buttonWrapper\":\"P2LoadWallet_buttonWrapper__1rrct\",\"address\":\"P2LoadWallet_address__37xx2\",\"imgQr\":\"P2LoadWallet_imgQr__3Avh3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"InputForm_wrapper__3RO9S\",\"shiftRight\":\"InputForm_shiftRight__16j42\",\"label\":\"InputForm_label__2VQbz\",\"textarea\":\"InputForm_textarea__3jY9y\",\"button\":\"InputForm_button__1gilQ\"};","import { I_User, I_BnsState } from './types/'\n\n// Initializing values\n\nexport const newState: I_BnsState = {\n  domain: {                                     // notification info for this domain name\n    domainName:                   '',           // domain name\n    notificationAddress:          '',           // p2wsh address for this domain name (alias + extension)\n    txHistory:                    [],           // array of all tx for this address (old addressHistory)\n    derivedUtxoList:              [],           // derived utxo set from tx history parse\n    utxoList:                     [],           // array of all real time utxo at address\n    users:                        {},           // keeps track of interacting users / source addresses with addresses as keys\n    currentOwner:                 '',           // points to a source address or blank string\n    bidding:                      {},           // bidding\n    ownersHistory:                []            // owner history log\n  },\n  chain: {\n    parsedHeight:                 0,            // parsed height for derivation\n    currentHeight:                0             // real world block height\n  }\n}\n\n// values to initialize users with\nexport const newUser: I_User = {\n  address:        '',           // address in control\n  forwards:       [],           // for forwards later\n  burnAmount:     0,            // burned to get ownership\n  winHeight:      0,            // blockheight winning bid\n  winTimestamp:   0,            // winHeight in block's timestamp\n  nonce:          0,            // for counting previous notification height from this address, no matter good/bad/type\n  updateHeight:   0             // the height of most current parsed update, created after nonce height & therefore using it\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AboutContent_wrapper__1kfnm\",\"title\":\"AboutContent_title__16tUj\",\"contentWrapper\":\"AboutContent_contentWrapper__2XHS2\",\"drawing\":\"AboutContent_drawing__1qDTH\"};"],"sourceRoot":""}