{"version":3,"sources":["components/Navbar/Navbar.module.css","helpers/bns/calcBidDomainTx.tsx","components/CreateSteps/P4ClaimDomain/P4ClaimDomain.module.css","helpers/bns/constants.tsx","helpers/bns/calcOwnership.tsx","components/AboutContent/AboutContent.module.css","components/CreateNavigator/CreateNavigator.module.css","components/CreateSteps/P1RestoreOrBackup/P1RestoreOrBackup.module.css","components/CreateSteps/P3DomainAndWallet/P3DomainAndWallet.module.css","components/SearchResults/SearchResults.module.css","interfaces/index.tsx","components/general/RoundButton/RoundButton.tsx","store/reducers/Reducer.tsx","store/index.tsx","helpers/sanitize.js","store/actions/changeAliasAction.tsx","api/blockstream.tsx","store/actions/searchAction.tsx","helpers/bitcoin.tsx","store/actions/createNewWalletAction.tsx","store/actions/changePageInfoAction.tsx","store/actions/scanAddressFullyAction.tsx","components/SearchResults/SearchResults.tsx","helpers/timediff.tsx","helpers/bns/findLatestForwards.tsx","helpers/bns/interpretFw.tsx","components/HomeContent/HomeContent.tsx","pages/Home.tsx","components/AboutContent/AboutContent.tsx","pages/About.tsx","components/CreateSteps/P1RestoreOrBackup/P1RestoreOrBackup.tsx","components/CreateSteps/CreateHeader/CreateHeader.tsx","components/CreateSteps/P2LoadWallet/P2LoadWallet.tsx","components/CreateSteps/P3DomainAndWallet/P3DomainAndWallet.tsx","components/CreateSteps/P4ClaimDomain/P4ClaimDomain.tsx","components/CreateNavigator/CreateNavigator.tsx","pages/Create.tsx","components/Navbar/Navbar.tsx","App.tsx","components/DevPanel/DevPanel.tsx","index.tsx","components/DevPanel/DevPanel.module.css","helpers/bns/calcP2WSH.tsx","helpers/bns/cryptography.tsx","components/CreateSteps/CreateHeader/CreateHeader.module.css","components/CreateSteps/P2LoadWallet/P2LoadWallet.module.css","components/general/RoundButton/RoundButton.module.css","components/HomeContent/HomeContent.module.css","helpers/bns/getLastMessageHeight.tsx"],"names":["module","exports","calcBidDomainTx","stringToEmbed","wallet","domainName","feeRate","notificationTxHistory","networkChoice","vBytes","network","bitcoin","calcP2WSH","notificationsAddress","fee","Math","ceil","valueNeeded","MIN_BURN","MIN_NOTIFY","usedUtxoOfPayer","totalGathered","utxoList","forEach","utxo","push","value","Error","change","keyPair","fromWIF","WIF","psbt","setVersion","setLocktime","addInput","hash","txid","index","vout","sequence","nonWitnessUtxo","Buffer","from","hex","nonce","getLastMessageHeight","address","encryptionKey","toString","data","encrypt","embed","addOutput","script","output","signInput","validateSignaturesOfInput","finalizeAllInputs","tx","extractTransaction","thisVirtualSize","virtualSize","getId","toHex","console","log","byteLength","warn","OWNERSHIP_DURATION_BY_BLOCKS","calcOwnership","notificationsHistory","currentHeight","sortedNotificationsHistory","slice","reverse","sort","prev","next","status","block_height","resetOwner","forwards","burnAmount","winHeight","winTimestamp","lastUpdate","ownersHistory","currentOwner","txBlockHeight","isExpired","length","scriptpubkey_asm","split","txBurnAmount","scriptpubkey_address","vin","prevout","block_time","e","message","collectedForwardsInHistory","reduce","foundForwardsInHistory","embeddedDataHex","join","embeddedDataBuffer","decryptionKey","embeddedDataUtf8","decrypt","collectedForwardsInThisTx","foundForwardsInThisTx","networkPiece","embeddedTxDataArray","lastIndex","forwardingAddressPiece","thisForward","updateHeight","updateTimestamp","notifications","txHistory","ownership","current","topBidder","history","ActionTypes","RoundButton","props","style","display","show","colorbutton","colorbuttontext","sizebutton","className","styles","roundButtonWrap","roundButton","back","backArrow","undefined","nextArrow","children","STORE_SEARCH_RESULTS_FAIL","STORE_SEARCH_RESULTS","TYPING","NEW_WALLET","CHANGE_PAGE_INFO","UPDATE_WALLET","UPDATE_NOTIFICATION_ADDRESS","ACTION_FAIL","LOAD_STATE","reducer","state","action","payload","type","checkedHistory","checkedUtxo","lastTimeStamp","Date","now","checked","chain","height","pageInfo","initialState","mnemonic","alias","notificationAddress","extension","settings","Store","React","createContext","sanitize","inString","filter","letter","indexOf","API_PATH_TESTNET","API_PATH_BITCOIN","getHeight","strNetwork","a","async","API_PATH","axios","get","res","rateLimit","addRawTxToArray","arrayUtxo","erroredOutputs","error","arrayUtxoWithHex","Object","entries","indexString","parseInt","tries","getUTXOList","getAddressHistory","Promise","r","setTimeout","searchAction","dispatch","router","notificationsTxHistory","createNewWallet","bip39","generateMnemonic","seedBuffer","mnemonicToSeed","fromSeed","derivePath","toWIF","p2wpkh","pubkey","publicKey","loadWallet","strMnemonic","createNewWalletAction","changePageInfoAction","page","scanAddressFullyAction","addressType","walletAddress","walletTxHistory","utxoListWalletAddress","utxoListNotificationAddress","SearchResults","useContext","diff","inTimeStampS","blocksDuration","msDifference","expired","abs","d","floor","h","m","dhm","dh","timeDiff","latestForwards","sortedForwards","currentNetworks","eaForward","values","findLatestForwards","wrapper","describe","notExpired","listContainer","to","createLink","map","fw","ifw","render","where","what","link","interpretFw","key","listItem","href","target","rel","HomeContent","match","params","inputEl","useRef","useEffect","selectionEnd","selectionStart","focus","lblMainTitle","noselect","divSearch","id","txtSearch","cols","rows","spellCheck","placeholder","ref","onChange","sanitizedString","changeAliasAction","onKeyPress","onClick","Home","AboutContent","JSON","stringify","About","pages","CreateHeader","useState","window","innerWidth","width","setWidth","resize","addEventListener","removeEventListener","fontScale","min","bar","top","marginTop","fontSize","ext","spacer","P1RestoreOrBackup","ROOT","setPage","backup","setBackup","title","Orange","buttonWrapper","LOAD_BACKUP","contentWrapper","thisDiv","document","getElementById","getSelection","selectAllChildren","restoreBackup","P2LoadWallet","qrCode","setQrCode","qr","toDataURL","err","url","imgQr","src","alt","open","pathEdit","P3DomainAndWallet","apiStatus","setApiStatus","utxoArray","readyStatus","isReady","info","ownerAddress","isWalletAddress","isDomainAvailable","isWalletTheOwner","domainInfo","domainButton","walletInfo","walletButton","unspent","balance","sum","toFixed","P4ClaimDomain","customAdd","setCustomAdd","setData","setTx","objForwards","forwardsString","keys","fwNetwork","combineForwards","changes","updateItem","updateInfo","updateCancel","newData","stopPropagation","editor","btnDelete","editorNetwork","editorAddress","btnAdd","pastList","i","pastPair","pastNetwork","pastAddress","CreateNavigator","Create","Navbar","warning","root","App","searchParam","URLSearchParams","location","search","pushState","pathname","path","component","exact","json","require","ReactDOM","useReducer","Provider","hidden","setHidden","onDevKey","activeElement","divDev","button","encodeURIComponent","createElement","download","innerHTML","container","appendChild","click","remove","dlState","btnOutline","sheet","parentNode","removeChild","createTextNode","head","op","hash160","bufferData","witnessScript","compile","OP_DROP","p2wsh","redeem","stringText","stringForKey","stringForIV","crypto","createHash","update","digest","iv","cipher","createCipheriv","encrypted","concat","final","bufferCypher","decipher","createDecipheriv","decrypted","fromAddress","highestFound","max"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,KAAO,qBAAqB,QAAU,0B,kCCDxD,yFAmBaC,EAAkB,SAAlBA,EACXC,EACAC,EACAC,EACAC,EACAC,EACAC,GAES,IADTC,EACQ,uDADS,EAGXC,EAAUC,WAAiBH,GAFzB,EAGyBI,YAAUP,EAAYG,GAA/CK,EAHA,EAGAA,qBAGFC,EAAMC,KAAKC,KAAKP,EAASH,GACzBW,EAAcC,IAAWC,IAAaL,EAExCM,EAA8B,GAC9BC,EAAgB,EASpB,GARAjB,EAAOkB,SAASC,SAAQ,SAACC,GAEnBH,EAAgBJ,IAClBG,EAAgBK,KAAKD,GACrBH,GAAiBG,EAAKE,UAItBL,EAAgBJ,EAClB,MAAM,IAAIU,MAAM,oCAElB,IAAMC,EAASP,EAAgBJ,EAGzBY,EAAUlB,SAAemB,QAAQ1B,EAAO2B,IAAKrB,GAE7CsB,EAAO,IAAIrB,OAAa,CAAED,YAChCsB,EAAKC,WAAW,GAChBD,EAAKE,YAAY,GAGjBd,EAAgBG,SAAQ,SAAAC,GACtBQ,EAAKG,SAAS,CACZC,KAAMZ,EAAKa,KACXC,MAAOd,EAAKe,KACZC,SAAU,WACVC,eAAgBC,EAAOC,KAAKnB,EAAKoB,IAAK,YAW1C,IAAMC,EAAQC,YAAqB1C,EAAO2C,QAASlC,EAAsBN,GACnEyC,EAAiB3C,EAAaD,EAAO2C,QAAUF,EAAMI,WACrDC,EAAOC,YAAQhD,EAAc6C,GAC7BI,EAAQzC,WAAiByC,MAAM,CAAEF,KAAM,CAACA,KAC9ClB,EAAKqB,UAAU,CACbC,OAAQF,EAAMG,OACd7B,MAAOR,MAITc,EAAKqB,UAAU,CACbN,QAASlC,EACTa,MAAOP,MAITa,EAAKqB,UAAU,CACbN,QAAS3C,EAAO2C,QAChBrB,MAAOE,IAKTR,EAAgBG,SAAQ,SAACC,EAAMc,GAK7B,GAHAN,EAAKwB,UAAUlB,EAAOT,IAGjBG,EAAKyB,0BAA0BnB,GAClC,MAAM,IAAIX,MAAM,+CAAiDW,EAAMW,eAI3EjB,EAAK0B,oBAEL,IAAMC,EAAK3B,EAAK4B,qBACVC,EAAkBF,EAAGG,cACrBzB,EAAOsB,EAAGI,QACVnB,EAAMe,EAAGK,QAEf,OAAIvD,GAAUoD,GAIZI,QAAQC,IAAI,cAAeP,EAAGG,eAC9BG,QAAQC,IAAI,aAAcP,EAAGQ,cAC7BF,QAAQC,IAAI,QAASP,EAAGI,SACxBE,QAAQC,IAAI,MAAOP,EAAGK,SACtBC,QAAQC,IAAI,IACL,CAAEL,kBAAiBxB,OAAMO,MAAK3B,cAAaH,MAAKc,WAGhD1B,EAAgBC,EAAeC,EAAQC,EAAYC,EAASC,EAAuBC,EAAeqD,M,2CC9H7G7D,EAAOC,QAAU,CAAC,QAAU,+BAA+B,MAAQ,6BAA6B,QAAU,+BAA+B,SAAW,gCAAgC,cAAgB,qCAAqC,OAAS,8BAA8B,WAAa,kCAAkC,aAAe,oCAAoC,WAAa,kCAAkC,cAAgB,qCAAqC,cAAgB,qCAAqC,OAAS,8BAA8B,UAAY,iCAAiC,SAAW,gCAAgC,YAAc,mCAAmC,YAAc,qC,gCCDzsB,sGAKWgE,QAAQG,KAAK,mBAExB,IAAMlD,EAAW,IACXC,EAAc,IAEdkD,EAAkD,K,2HCE3CC,EAAgB,SAC3BC,EACAlE,EACAmE,EACAhE,GACG,IAGKK,EAAyBD,YAAUP,EAAYG,GAA/CK,qBAIF4D,EAA6BF,EAAqBG,QAAQC,UAAUC,MAAK,SAACC,EAAMC,GAGpF,OAFqBD,EAAKE,OAAOC,aACZF,EAAKC,OAAOC,gBAa7BC,EAAqB,CACzBlC,QAAS,GACTmC,SAAU,GACVC,WAAY,EACZC,UAAW,EACXC,aAAc,EACdC,WAAY,GAERC,EAA+B,GACjCC,EAAoB,eAAQP,GAOhCR,EAA2BlD,SAAQ,SAAAoC,GACjC4B,EAAc9D,KAAK+D,GACnB,IAEE,IAAMC,EAAgB9B,EAAGoB,OAAOC,aAE1BU,EADoBD,EAAgBD,EAAaJ,UACjBf,IAOtC,GANMmB,EAAazC,SAAW2C,IAC5BF,EAAY,eAAQP,GACpBhB,QAAQC,IAAI7D,EAAYoF,EAAe,wBAInC9B,EAAGpB,KAAKoD,QAAU,GAAM,MAAM,IAAIhE,MAAM,sBAG9C,KADkE,cAA9CgC,EAAGpB,KAAK,GAAGqD,iBAAiBC,MAAM,KAAK,IACxC,MAAM,IAAIlE,MAAM,yCAEnC,IAAMmE,EAAenC,EAAGpB,KAAK,GAAGb,MAEhC,KADoBoE,GAAgB5E,KACjB,MAAM,IAAIS,MAAM,+BAAiCT,KAGpE,KADsByC,EAAGpB,KAAK,GAAGb,OAASP,KACrB,MAAM,IAAIQ,MAAM,kCAAoCT,KAGzE,KADkByC,EAAGpB,KAAK,GAAGwD,uBAAyBlF,GACrC,MAAM,IAAIc,MAAM,mDAG5B6D,EAAazC,UAChByC,EAAe,CACbzC,QAASY,EAAGqC,IAAI,GAAGC,QAAQF,qBAC3Bb,SAAS,YAAKD,EAAWC,UACzBC,WAAYW,EACZV,UAAWK,EACXJ,aAAc1B,EAAGoB,OAAOmB,WACxBZ,WAAY,GAEdrB,QAAQC,IAAI7D,EAAYoF,EAAe,mBAAoBD,EAAazC,UAE1E,MAAOoD,GACPlC,QAAQC,IAAIiC,EAAEC,QAAS,KAAMzC,OAkBjC,IAAM0C,EAAsD5B,EACzD6B,QAAQ,SAACC,EAAwB5C,GAIhC,KAFgBA,EAAGqC,IAAI,GAAGC,QAAQF,uBACHP,EAAazC,SAC1B,OAAOwD,EAIzB,IAAM1D,EAAQ2C,EAAaF,WAAWrC,WAChCwC,EAAgB9B,EAAGoB,OAAOC,aAIhC,GAHAQ,EAAaF,WAAaG,IAEwC,cAA9C9B,EAAGpB,KAAK,GAAGqD,iBAAiBC,MAAM,KAAK,IACxC,OAAOU,EAG1B,IAAMC,EAAkB7C,EAAGpB,KAAK,GAAGqD,iBAAiBC,MAAM,KAAKnB,MAAM,GAAG+B,KAAK,IACvEC,EAAqBhE,EAAOC,KAAK6D,EAAiB,OAElDG,EAAgBtG,EAAamF,EAAazC,QAAUF,EACpD+D,EAAmBC,YAAQH,EAAoBC,GAGrD1C,QAAQC,IAAI,uBAAwB0C,GAIpC,IAAME,EAA6BF,EAEhCf,MAAM,KACNS,QAAO,SAACS,EAA+CC,EAAc1E,EAAO2E,GAG3E,IAAMC,EAAYD,EAAoBtB,OAAS,EAC/C,GAAKrD,EAAQ,IAAM,GAAOA,EAAQ4E,EAAY,CAE5C,IAAMC,EAAyBF,EAAoB3E,EAAQ,GAC3D2B,QAAQC,IAAI,QAAS8C,EAAc,IAAKG,GACxC,IAAMC,EAAc,CAClB1G,QAASsG,EACTjE,QAASoE,EACTE,aAAc5B,EACd6B,gBAAiB3D,EAAGoB,OAAOmB,YAE7B,MAAM,GAAN,mBACKa,GADL,CAEEK,IAGF,OAAOL,IAER,IAGL,MAAM,GAAN,mBACKR,GADL,YAEKO,MAEJ,IAILtB,EAAaN,SAAWmB,EAGxB,IACMX,EADoBlB,EAAgBgB,EAAaJ,UACjBf,IAQtC,OAPMmB,EAAazC,SAAW2C,IAC5BH,EAAc9D,KAAK+D,GACnBA,EAAY,eAAQP,GACpBhB,QAAQC,IAAI7D,EAAYmE,EAAe,gCAIlC,CACL+C,cAAe,CACbxE,QAASlC,EACT2G,UAAW/C,EACXnD,SAAU,IAEZmG,UAAW,CACTC,QAASlC,EACTmC,UAAW,GACXC,QAASrC,O,4CCrMfvF,EAAOC,QAAU,CAAC,QAAU,gC,oBCA5BD,EAAOC,QAAU,CAAC,QAAU,mC,2ICA5BD,EAAOC,QAAU,CAAC,QAAU,mCAAmC,MAAQ,iCAAiC,eAAiB,0CAA0C,cAAgB,yCAAyC,SAAW,oCAAoC,OAAS,kCAAkC,OAAS,kCAAkC,OAAS,kCAAkC,cAAgB,2C,uCCA5ZD,EAAOC,QAAU,CAAC,QAAU,mCAAmC,eAAiB,0CAA0C,MAAQ,iCAAiC,WAAa,sCAAsC,aAAe,wCAAwC,WAAa,sCAAsC,aAAe,wCAAwC,QAAU,mCAAmC,cAAgB,yCAAyC,UAAY,qCAAqC,QAAU,qC,mBCAxhBD,EAAOC,QAAU,CAAC,QAAU,+BAA+B,cAAgB,qCAAqC,SAAW,gCAAgC,IAAM,2BAA2B,SAAW,gCAAgC,QAAU,+BAA+B,WAAa,kCAAkC,WAAa,oC,yj/BCGhU4H,E,mFCwBCC,EAAc,SAACC,GAC1B,OACE,uCAEEC,MAAO,CACLC,QACmB,WAAX,OAALF,QAAK,IAALA,OAAA,EAAAA,EAAOG,MAAoB,OAAS,eAEvC,oBACEH,EAAMI,YAAcJ,EAAMI,YAA1B,4BAEF,wBACEJ,EAAMK,gBAAkBL,EAAMK,gBAA9B,yBAEF,eACEL,EAAMM,WAAN,eAGYN,EAAMM,WAHlB,gDAOJC,UAAYC,IAAOC,iBACfT,GAEJ,yBACEO,UAAY,CACVC,IAAOE,YACPV,EAAMW,KAAOH,IAAOI,eAAYC,EAChCb,EAAMjD,KAAOyD,IAAOM,eAAYD,GAChCnC,KAAK,MAELsB,EAAMe,Y,iBDxDJjB,K,4CAAAA,E,sDAAAA,E,gBAAAA,E,wBAAAA,E,oCAAAA,E,8BAAAA,E,0DAAAA,E,0BAAAA,E,yBAAAA,M,SEDVkB,EASElB,EATFkB,0BACAC,EAQEnB,EARFmB,qBACAC,EAOEpB,EAPFoB,OACAC,EAMErB,EANFqB,WACAC,EAKEtB,EALFsB,iBACAC,EAIEvB,EAJFuB,cACAC,EAGExB,EAHFwB,4BACAC,EAEEzB,EAFFyB,YACAC,EACE1B,EADF0B,WASa,SAASC,EAASC,EAAeC,GAA0B,IAChEC,EAAYD,EAAZC,QAER,OAAQD,EAAOE,MAEb,KAAKR,EAEH,OAAO,eACFK,EADL,CAEErJ,OAAO,eACFqJ,EAAMrJ,OADL,CAEJoH,UAAWmC,EAAQvJ,OAAOoH,UAC1BlG,SAAUqI,EAAQvJ,OAAOkB,SACzBuI,gBAAgB,EAChBC,aAAa,IAEfC,cAAeC,KAAKC,QAIxB,KAAKZ,EACH,OAAO,eACFI,EADL,CAEElC,cAAe,CACbxE,QAAS4G,EAAQpC,cAAcxE,QAC/ByE,UAAWmC,EAAQpC,cAAcC,UACjClG,SAAUqI,EAAQpC,cAAcjG,SAChCuI,gBAAgB,EAChBC,aAAa,GAEfrC,UAAU,eACLkC,EAAQlC,UADJ,CAEPyC,SAAS,IAEXC,MAAO,CACLC,OAAQT,EAAQQ,MAAMC,QAExBL,cAAeC,KAAKC,QAIxB,KAAKd,EAEH,OAAO,eACFM,EADL,CAEEY,SAAUV,IAGd,KAAKT,EAEH,OAAO,eACFO,EADL,CAEErJ,OAAO,eACFkK,EAAalK,OADZ,CAEJ2C,QAAS4G,EAAQ5G,QACjBwH,SAAUZ,EAAQY,SAClBxI,IAAK4H,EAAQ5H,MAEfgI,cAAeC,KAAKC,QAIxB,KAAKjB,EAGH,OAAO,eACFS,EADL,CAEEe,MAAOb,EAAQa,MACfjD,cAAc,eACT+C,EAAa/C,cADL,GAERoC,EAAQpC,cAFA,CAGXsC,gBAAgB,IAElBpC,UAAU,eACL6C,EAAa7C,UADT,GAEJkC,EAAQlC,UAFJ,CAGPyC,SAAS,IAEXC,MAAO,CACLC,OAAQT,EAAQQ,MAAMC,QAExBL,cAAeC,KAAKC,QAIxB,KAAKlB,EAGH,OAAO,eACFU,EADL,CAEEe,MAAOb,EAAQa,MACfjD,cAAc,eACT+C,EAAa/C,cADL,CAEXxE,QAAS4G,EAAQc,sBAEnBhD,UAAU,eACL6C,EAAa7C,WAElBsC,cAAeC,KAAKC,QAIxB,KAAKhB,EAGH,OAAO,eACFQ,EADL,CAEEe,MAAOb,EACPpC,cAAe+C,EAAa/C,cAC5BE,UAAW6C,EAAa7C,UACxBsC,cAAeC,KAAKC,QAIxB,KAAKX,EACH,OAAO,eACFG,EADL,CAEEM,cAAeC,KAAKC,QAIxB,KAAKV,EACH,OAAO,eACFI,EADL,CAEEI,cAAeC,KAAKC,QAIxB,QAEE,OADAhG,QAAQG,KAAK,uBACNqF,GC3IN,IAAMa,EAAuB,CAClC5J,QAAS,UACT8J,MAAO,UACPE,UAAW,OACXnD,cAAe,CACbxE,QAAS,GACTyE,UAAW,GACXlG,SAAU,GACVuI,gBAAgB,EAChBC,aAAa,GAEf1J,OAAQ,CACN2C,QAAS,GACTwH,SAAU,GACVxI,IAAK,GACLyF,UAAW,GACXlG,SAAU,GACVuI,gBAAgB,EAChBC,aAAa,GAEfrC,UAAW,CACTC,QAAS,CACP3E,QAAS,GACTmC,SAAU,GACVC,WAAY,EACZE,aAAc,EACdD,UAAW,GAEbuC,UAAW,GACXC,QAAS,GACTsC,SAAS,GAEXC,MAAO,CACLC,OAAQ,GAEVC,SAAU,CACR3C,QAAS,GAEXiD,SAAU,CACRrK,QAAS,KAEXyJ,cAAeC,KAAKC,OAGTW,EAAQC,IAAMC,cAAmBR,G,oBCvD/B,SAASS,EAAUC,EAAUpB,GAC1C,IAAIqB,EACJ,GAAa,WAATrB,EAEFqB,EAAS,kEACJ,GAAa,QAATrB,EACTqB,EAAS,wBACJ,GAAa,UAATrB,EACTqB,EAAS,sEACJ,GAAa,YAATrB,EACTqB,EAAS,kBACJ,GAAa,cAATrB,EACTqB,EAAS,mBACJ,GAAa,YAATrB,EACTqB,EAAS,sEACJ,IAAa,QAATrB,EAIT,YADA3F,QAAQC,IAAI,qCAFZ+G,EAAS,qEAWX,OALYD,EACTnF,MAAM,IACNoF,QAAO,SAAAC,GAAM,OAAID,EAAOE,QAAQD,IAAW,KAC3CzE,KAAK,I,ICtBFwC,EAAWpB,EAAXoB,O,+ECGFmC,EAAmB,wCACnBC,EAAmB,gCAQlB,SAAeC,EAAWC,GAA1B,iBAAAC,EAAAC,OAAA,uDACCC,GACY,YAAfH,EACCH,EACAC,GACA,oBACJpH,QAAQC,IAAIwH,GANP,oBAAAF,EAAA,MAUeG,IAAMC,IAAIF,IAVzB,cAUGG,EAVH,OAWH5H,QAAQC,IAAI,YAAa2H,EAAI3I,MAX1B,kBAYI2I,EAAI3I,MAZR,yCAgBHe,QAAQC,IAAR,MAhBG,YAAAsH,EAAA,MAiBGM,KAjBH,cAkBG,IAAInK,MAAM,0CAlBb,yDA6BA,SAAeoK,EAAiBC,EAAuBT,GAAvD,uCAAAC,EAAAC,OAAA,mDAEDQ,EAAiB,GAGK,KAAb,OAATD,QAAS,IAATA,OAAA,EAAAA,EAAWrG,QALV,yCAKiC,CAAEqG,YAAWE,MAAO,YALrD,OAQCC,EARD,YAQwBH,GARxB,MAW6BI,OAAOC,QAAQL,GAX5C,mEAWOM,EAXP,KAWoB9K,EAXpB,KAaGc,EAAQiK,SAASD,EAAa,IAEhCE,EAAQ,EAfT,aAgBIA,KAAU,GAhBd,kCAkBSnK,EAASb,EAATa,KAGFqJ,GACY,YAAfH,EACGH,EACAC,GACF,MAAQhJ,EAAO,OACnB4B,QAAQC,IAAIwH,GA1Bb,YAAAF,EAAA,MA4BmBG,IAAMC,IAAIF,IA5B7B,eA4BOG,EA5BP,OA8BC5H,QAAQC,IAAI5B,EAAO,4BAA6BuJ,EAAI3I,MAGpDiJ,EAAiB7J,GAAOM,IAAMiJ,EAAI3I,KAjCnC,wDAwCCe,QAAQC,IAAI,gBAAiBoI,EAAa9K,EAAMgL,EAAOP,EAAvD,MAEAA,GAAkBK,EAAc,IA1CjC,2BAAAd,EAAA,MA6CKM,KA7CL,oFAkDE,CAAEK,mBAAkBF,mBAlDtB,0DA2DA,SAAeQ,EAAa1J,EAAiBwI,GAA7C,iBAAAC,EAAAC,OAAA,uDACCC,GACY,YAAfH,EACCH,EACAC,GACA,WAAatI,EAAU,QAC3BkB,QAAQC,IAAIwH,GANP,oBAAAF,EAAA,MASeG,IAAMC,IAAIF,IATzB,cASGG,EATH,OAWH5H,QAAQC,IAAI,cAAe2H,EAAI3I,MAX5B,WAAAsI,EAAA,MAaGM,KAbH,gCAeID,EAAI3I,MAfR,yCAmBHe,QAAQC,IAAR,MAnBG,YAAAsH,EAAA,MAoBGM,KApBH,cAqBG,IAAInK,MAAM,sCArBb,yDAiCA,SAAe+K,EAAmB3J,EAAiBrC,GAAnD,iBAAA8K,EAAAC,OAAA,sDAQyB,aAExBC,GACS,YAAZhL,EACC0K,EACAC,GACA,WAAatI,EANa,aARzB,oBAAAyI,EAAA,MAiBeG,IAAMC,IAAIF,IAjBzB,cAiBGG,EAjBH,OAmBH5H,QAAQC,IAAI,+CAAgD2H,GAnBzD,kBAoBIA,EAAI3I,MApBR,wCAuBHe,QAAQC,IAAR,MACM,IAAIvC,MAAM,sCAxBb,yDAuEP,SAAemK,IAAf,SAAAN,EAAAC,OAAA,yEACS,IAAIkB,SAAQ,SAAAC,GAAC,OAAIC,WAAWD,EAAG,IAxMjB,QAuMvB,qC,IC5MQ7D,EAAoDlB,EAApDkB,0BAA2BC,EAAyBnB,EAAzBmB,qBAStB8D,EAAe,SAAOrD,EAAesD,GAAtB,2CAAAvB,EAAAC,OAAA,mDAA0CuB,EAA1C,oCAAwDpE,EAC5EvI,EAAaoJ,EAAMe,MAAQf,EAAMiB,UAElCjB,EAAMe,MAHe,8CAGC5B,GAHD,gBAMOhI,YAAUP,EAAYoJ,EAAM/I,SAArDG,EANkB,EAMlBA,qBANkB,oBAAA2K,EAAA,MAcIF,EAAU7B,EAAM/I,UAdpB,cAclB8D,EAdkB,mBAAAgH,EAAA,MAmBakB,EAAkB7L,EAAsB4I,EAAM/I,UAnB3D,eAmBlBuM,EAnBkB,SAsBa3I,YACnC2I,EACA5M,EACAmE,EACAiF,EAAM/I,SAJA6G,EAtBgB,EAsBhBA,cAAeE,EAtBC,EAsBDA,UAQnBuF,IAAgB,OAANA,QAAM,IAANA,KAAQvL,KAAK,MA9BH,kBAiCjBsL,EAAS,CACdnD,KAAMZ,EACNW,QAAS,CACPa,MAAOf,EAAMe,MACbjD,gBACAE,YACA0C,MAAO,CACLC,OAAQ5F,OAxCU,yCA8CxBP,QAAQC,IAAR,MA9CwB,kBAgDjB6I,EAAS,CACdnD,KAAMb,EACNY,QAAS,CACPa,MAAOf,EAAMe,MACb3J,2BApDoB,0D,wBCQfqM,EAAkB,SAAC3B,GAE9B,IAAM7K,EAAUC,WAAiB4K,GAE3BhB,EAAW4C,IAAMC,mBACjBC,EAAaF,IAAMG,eAAe/C,GAMlCxI,EAJapB,QAAc4M,SAASF,EAAY3M,GAExB8M,WAAW,eAAeA,WAAW,OAE5CC,QAEjB5L,EAAUlB,SAAemB,QAAQC,EAAKrB,GAG5C,MAAO,CAAE6J,WAAUxI,MAAKgB,QAFRpC,WAAiB+M,OAAO,CAAEC,OAAQ9L,EAAQ+L,UAAWlN,YAAWqC,UAWrE8K,EAAa,SAACC,EAAqBvC,GAE9C,IAAM7K,EAAUC,WAAiB4K,GAC3B8B,EAAaF,IAAMG,eAAeQ,GAMlC/L,EAJapB,QAAc4M,SAASF,EAAY3M,GAExB8M,WAAW,eAAeA,WAAW,OAE5CC,QAEjB5L,EAAUlB,SAAemB,QAAQC,EAAKrB,GAG5C,MAAO,CAAE6J,SAAUuD,EAAa/L,MAAKgB,QAFrBpC,WAAiB+M,OAAO,CAAEC,OAAQ9L,EAAQ+L,UAAWlN,YAAWqC,U,ICpD1EmG,EAAerB,EAAfqB,WAMK6E,GAAwB,SACnCtE,EAAesD,GADoB,mCAAAvB,EAAAC,OAAA,uDACAqC,EADA,+BACsB,GADtB,EAMhB,KAAhBA,EACGZ,EAAgBzD,EAAM/I,SACtBmN,EAAWC,EAAarE,EAAM/I,SAH5B6J,EAL2B,EAK3BA,SAAUxI,EALiB,EAKjBA,IAAKgB,EALY,EAKZA,QALY,kBAW5BgK,EAAS,CACdnD,KAAMV,EACNS,QAAS,CAAEY,WAAUxI,MAAKgB,cAbO,sCCV7BoG,GAAqBtB,EAArBsB,iBAMK6E,GAAuB,SAAOvE,EAAesD,EAAoBkB,GAA1C,eAAAzC,EAAAC,OAAA,uDAG1BpB,EAAaZ,EAAbY,UACC3C,QAAUuG,EAJe,kBAM3BlB,EAAS,CACdnD,KAAMT,GACNQ,QAASU,KARuB,sCCJ5BjB,GAA4DvB,EAA5DuB,cAAeC,GAA6CxB,EAA7CwB,4BAA6BC,GAAgBzB,EAAhByB,YAUvC4E,GAAyB,SACpCzE,EACAsD,EACAoB,GAHoC,iDAAA3C,EAAAC,OAAA,mDAK9BpL,EAAaoJ,EAAMe,MAAQf,EAAMiB,UAGnCyD,IAAgB/E,GARgB,iCAe1BgF,EAAgB3E,EAAMrJ,OAAO2C,QAfH,WAAAyI,EAAA,MAgBFkB,EAAkB0B,EAAe3E,EAAM/I,UAhBrC,cAgB1B2N,EAhB0B,kBAAA7C,EAAA,MAoBIiB,EAAY2B,EAAe3E,EAAM/I,UApBrC,cAoB1B4N,EApB0B,mBAAA9C,EAAA,MAwBmBO,EAAgBuC,EAAuB7E,EAAM/I,UAxBhE,wBAwBxByL,EAxBwB,EAwBxBA,iBAAkBF,EAxBM,EAwBNA,eAE1BhI,QAAQC,IAAI,CAAEkK,gBAAeC,kBAAiBC,wBAAuBnC,mBAAkBF,mBA1BvD,kBA4BzBc,EAAS,CACdnD,KAAMuE,EACNxE,QAAS,CACPvJ,OAAQ,CACNoH,UAAW6G,EACX/M,SAAU6K,OAjCgB,yCAuChClI,QAAQC,IAAI,8BACZD,QAAQC,IAAR,MAxCgC,kBA0CzB6I,EAAS,CACdnD,KAAMN,GACNK,QAAS,MA5CqB,WAkDhCwE,IAAgB9E,GAlDgB,8CAAAmC,EAAA,MAyDJF,EAAU7B,EAAM/I,UAzDZ,eAyD1B8D,EAzD0B,SA6DC5D,YAAUP,EAAYoJ,EAAM/I,SAArDG,EA7DwB,EA6DxBA,qBA7DwB,YAAA2K,EAAA,MA8DKkB,EAAkB7L,EAAsB4I,EAAM/I,UA9DnD,eA8D1BuM,EA9D0B,SA+DK3I,YACnC2I,EACA5M,EACAmE,EACAiF,EAAM/I,SAJA6G,EA/DwB,EA+DxBA,cAAeE,EA/DS,EA+DTA,UA/DS,YAAA+D,EAAA,MAwEUiB,EAAY5L,EAAsB4I,EAAM/I,UAxElD,eAwE1B6N,EAxE0B,mBAAA/C,EAAA,MA4EmBO,EAAgBwC,EAA6B9E,EAAM/I,UA5EtE,wBA4ExByL,EA5EwB,EA4ExBA,iBAAkBF,EA5EM,EA4ENA,eAE1BhI,QAAQC,IAAI,CAAEqD,gBAAeE,YAAW8G,8BAA6BpC,mBAAkBF,mBA9EvD,kBAgFzBc,EAAS,CACdnD,KAAMuE,EACNxE,QAAS,CACPpC,cAAe,CACbxE,QAASlC,EACT2G,UAAWD,EAAcC,UACzBlG,SAAU6K,GAEZ1E,UAAU,eACLA,GAEL0C,MAAO,CACLC,OAAQ5F,OA5FkB,0CAkGhCP,QAAQC,IAAI,oCACZD,QAAQC,IAAR,MAnGgC,kBAqGzB6I,EAAS,CACdnD,KAAMN,GACNK,QAAS,MAvGqB,cA6G9B,IAAIhI,MAAM,2BA7GoB,kE,oBCJ/B,IAAM6M,GAAgB,WAAO,IAC1B/E,EAAUoB,IAAM4D,WAAW7D,GAA3BnB,MAGFiF,ECTO,SAAmBC,EAAsBC,GAEtD,IAEIF,EAAuB,IAAfC,EAFwB,GAAjBC,EAAsB,GAAK,IAEE5E,KAAKC,MAE/C4E,EAAeH,EAEfI,EAAWJ,GAAQ,EAEzBA,EAAO3N,KAAKgO,IAAIL,GAChB,IAAMM,EAAIjO,KAAKkO,MAAMP,EAAI,OACzBA,GAAS,MAADM,EACR,IAAME,EAAInO,KAAKkO,MAAMP,EAAI,MAAuB,GAChDA,GAAS,KAADQ,EACR,IAAMC,EAAIpO,KAAKkO,MAAMP,EAAI,KAAkB,GAC3C,MAAO,CACLU,IAAI,GAAD,OAAKJ,EAAL,iBAAeE,EAAf,kBAA0BC,EAA1B,QACHE,GAAG,GAAD,OAAKL,EAAL,iBAAeE,EAAf,UACFJ,UACAD,gBDXWS,CACX7F,EAAMhC,UAAUC,QAAQrC,aACxBhB,KAoBIkL,EElC0B,SAACrK,GAGjC,IAAMsK,EAAiB,YAAItK,GAAUN,MAAK,SAACC,EAAMC,GAI/C,OAFmBD,EAAKwC,aACLvC,EAAKuC,gBAIpBoI,EAAwC,GAK9C,OAJAD,EAAejO,SAAQ,SAAAmO,GACrBD,EAAgBC,EAAUhP,SAAWgP,KAGhCtD,OAAOuD,OAAOF,GFmBEG,CAAmBnG,EAAMhC,UAAUC,QAAQxC,UAElE,OACE,oCACE,yBAAKoD,UAAYC,KAAOsH,SACtB,yBACEvH,UAAYC,KAAOuH,UAEjBP,EAAe5J,OAHnB,eAGyC8D,EAAM/I,QAH/C,IAG0D,KAtBjB,IAAzC+I,EAAMhC,UAAUC,QAAQrC,aAA8B,GAExD,yBACEiD,UAAYoG,EAAKI,QAAUvG,KAAOuG,QAAUvG,KAAOwH,YAEjDrB,EAAKI,QACH,WAAaJ,EAAKW,GAAK,OACvB,cAAgBX,EAAKW,KAkBzB,yBAAK/G,UAAYC,KAAOyH,eACpBtB,EAAKI,SACL,kBAAC,IAAD,CACEmB,GAAG,UACH3H,UAAYC,KAAO2H,YAFrB,sBAQJ,yBAAK5H,UAAYC,KAAOyH,eAEpBT,EAAeY,KAAI,SAAAC,GACjB,IAAMC,EGtDb,SACLD,GAGA,MAAmB,KAAfA,EAAGrN,QACE,CACLuN,QAAQ,GAIO,UAAfF,EAAG1P,SAAsC,QAAf0P,EAAG1P,QACxB,CACL6P,MAAO,OACPC,KACEJ,EAAGrN,QAEL0N,KACE,oCAAsCL,EAAGrN,QAE3CuN,QAAQ,GAIO,SAAfF,EAAG1P,SAAqC,UAAf0P,EAAG1P,SAAsC,QAAf0P,EAAG1P,SAAoC,QAAf0P,EAAG1P,QACzE,CACL6P,MAAO,WACPC,KAAMJ,EAAGrN,QACT0N,KAAM,WAAaL,EAAGrN,QACtBuN,QAAQ,GAIO,YAAfF,EAAG1P,QACE,CACL6P,MAAO,eACPC,KAAMJ,EAAGrN,QACT0N,KAAM,uBAAyBL,EAAGrN,QAClCuN,QAAQ,GAIO,WAAfF,EAAG1P,QACE,CACL6P,MAAO,cACPC,KAAMJ,EAAGrN,QACT0N,KAAM,sBAAwBL,EAAGrN,QACjCuN,QAAQ,GAIO,YAAfF,EAAG1P,QACE,CACL6P,MAAO,YACPC,KAAMJ,EAAGrN,QACT0N,KAAM,mCAAqCL,EAAGrN,QAC9CuN,QAAQ,GAKL,CACLC,MAAOH,EAAG1P,QACV8P,KAAMJ,EAAGrN,QACT0N,UAAM7H,EACN0H,QAAQ,GHVcI,CAAYN,GACxB,OAAIC,EAAIC,OAEJ,uBACEK,IAAMP,EAAG1P,QACT4H,UAAYC,KAAOqI,SACnBC,KAAI,OAAGR,QAAH,IAAGA,OAAH,EAAGA,EAAKI,KACZK,OAAO,SACPC,IAAI,uBAEJ,0BAAMzI,UAAYC,KAAOoI,KAAQN,EAAIE,OACnCF,EAAIG,MAIF,U,oBInEXQ,GAAc,SAACjJ,GAA6B,IAAD,MAC1B8C,IAAM4D,WAAW7D,GAArCnB,EAD8C,EAC9CA,MAAOsD,EADuC,EACvCA,SAOTvC,EAAK,OAAGzC,QAAH,IAAGA,OAAH,YAAGA,EAAOkJ,aAAV,uBAAG,EAAcC,cAAjB,aAAG,EAAsB1G,MAChCA,GACFsC,EAAa,eAAIrD,EAAL,CAAYe,UAAQuC,EAAUhF,EAAMH,SAIlD,IAAMuJ,EAAUC,iBAA4B,MAC5CC,qBAAU,WACJF,GAAWA,EAAQzJ,UACrByJ,EAAQzJ,QAAQ4J,aAAeH,EAAQzJ,QAAQhG,MAAMiE,OACrDwL,EAAQzJ,QAAQ6J,eAAiBJ,EAAQzJ,QAAQhG,MAAMiE,OACvDwL,EAAQzJ,QAAQ8J,WAEjB,IAGH,OACE,oCACE,yBAAKlJ,UAAY,CAACC,KAAOkJ,aAAclJ,KAAOmJ,UAAUjL,KAAK,MAC3D,yCADF,gBAGA,yBAAK6B,UAAYC,KAAOoJ,WACtB,8BACEC,GAAG,YACHtJ,UAAYC,KAAOsJ,UACnBC,KAAO,GACPC,KAAO,EACPC,YAAa,EACbtQ,MAAQ+H,EAAMe,MACdyH,YAdY,UAeZC,IAAMf,EACNgB,SAAU,SAAAhM,GAAC,aXtCY,SAAOsD,EAAesD,EAAoBrL,GAA1C,eAAA8J,EAAAC,OAAA,uDAGzB2G,EAAkBrH,EADNrJ,EAC0B,OAHb,kBAKxBqL,EAAS,CACdnD,KAAMX,EACNU,QAASyI,KAPoB,qCWsCRC,CAAkB5I,EAAOsD,EAAR,OAAkB5G,QAAlB,IAAkBA,OAAlB,YAAkBA,EAAG2K,cAArB,aAAkB,EAAWpP,QAC7D4Q,WAAY,SAAAnM,GAAiB,UAAVA,EAAEwK,KAAmB7D,EAAarD,EAAOsD,MAE9D,kBAAC,EAAD,CACE1E,WAAW,MACXkK,QAAU,kBAAMzF,EAAarD,EAAOsD,KAFtC,SAOF,yBAAK/E,MAAO,CAAEC,QAASwB,EAAMlC,cAAcxE,QAAU,QAAU,SAC7D,kBAAC,GAAD,SC/COyP,GAPF,SAACzK,GACZ,OACE,oCACE,kBAAC,GAAiBA,K,qBCFX0K,GAAe,WAAO,IACzBhJ,EAAUoB,IAAM4D,WAAW7D,GAA3BnB,MAER,OACE,oCACE,2CAGA,yBAAKnB,UAAYC,KAAOsH,SACtB,6BACI6C,KAAKC,UAAL,eAAoBlJ,GAAS,KAAM,OCXhC,SAASmJ,KACtB,OACE,oCACE,kBAAC,GAAD,O,ICCDC,G,oBCAQC,GAAe,WAAO,IACzBrJ,EAAUoB,IAAM4D,WAAW7D,GAA3BnB,MADwB,EAKJsJ,mBAASC,OAAOC,YALZ,mBAKxBC,EALwB,KAKjBC,EALiB,KAMhC9B,qBAAU,WACR,IAAM+B,EAAS,WAAQD,EAASH,OAAOC,aAEvC,OADAD,OAAOK,iBAAiB,SAAUD,GAC3B,kBAAMJ,OAAOM,oBAAoB,SAAUF,MACjD,IACH,IAAM/S,EAAaoJ,EAAMe,MAAQf,EAAMiB,UACjC6I,EAAYxS,KAAKyS,IACnBzS,KAAKkO,MAAM,IAAMiE,EAAQ7S,EAAWsF,QACpC5E,KAAKkO,MAAM,IAAMiE,EAAQ,KAG7B,OACE,oCACE,yBACE5K,UAAYC,KAAOkL,IACnBzL,MAAO,CAAE0L,MAAO,GAAOR,EAAQ,GAAMK,GAAWtQ,WAAa,QAE/D,yBACEqF,UAAYC,KAAOsH,QACnB7H,MAAO,CAAE2L,WAAY,IAAOT,EAAQ,GAAMK,GAAWtQ,WAAa,OAElE,0BACEqF,UAAYC,KAAOiC,MACnBxC,MAAO,CAAE4L,SAAUL,EAAUtQ,WAAa,OACzCwG,EAAMe,OACT,0BACElC,UAAYC,KAAOsL,IACnB7L,MAAO,CAAE4L,SAAUL,EAAUtQ,WAAa,OACzCwG,EAAMiB,YAEX,yBAAKpC,UAAYC,KAAOuL,W,8BDpCzBjB,O,eAAAA,I,2BAAAA,I,8BAAAA,Q,KAOE,IAAMkB,GAAoB,WAAO,IAAD,IACTlJ,IAAM4D,WAAW7D,GAArCnB,EAD6B,EAC7BA,MAAOsD,EADsB,EACtBA,SADsB,EAEXgG,mBAASF,GAAMmB,MAFJ,mBAE7B/F,EAF6B,KAEvBgG,EAFuB,OAGPlB,mBAAS,IAHF,mBAG7BmB,EAH6B,KAGrBC,EAHqB,KAKrC,OACE,yBAAK7L,UAAYC,KAAOsH,SAEtB,yBACE7H,MAAO,CAAEC,QAASgG,IAAS4E,GAAMmB,KAAO,QAAU,SAElD,yBACE1L,UAAYC,KAAO6L,OADrB,QAGO,0BAAM9L,UAAWC,KAAO8L,QAAxB,OAHP,sBAGoE,6BAHpE,mBAMA,yBACE/L,UAAYC,KAAO+L,eAEnB,kBAAC,EAAD,CACEpM,KAAQuB,EAAMrJ,OAAOmK,SAAS5E,OAAS,EAAK,QAAU,OACtD4M,QAAS,WACP0B,EAAQpB,GAAM3J,YACd6E,GAAsBtE,EAAOsD,KAJjC,uBASA,kBAAC,EAAD,CACE7E,KAAQuB,EAAMrJ,OAAOmK,SAAS5E,OAAS,EAAK,OAAS,QACrD4M,QAAS,WACP0B,EAAQpB,GAAM3J,cAHlB,kBAQA,kBAAC,EAAD,CACEqJ,QAAS,WACP0B,EAAQpB,GAAM0B,eAFlB,uBAOA,kBAAC,EAAD,CACErM,SAAS,UAACuB,EAAMrJ,cAAP,aAAC,EAAc2C,UAASE,WACjCsP,QAAS,WACPvE,GAAqBvE,EAAOsD,EAAU,IAExCjI,KAAK,OACLqD,YAAa,yBANf,yBAaJ,yBACEG,UAAYC,KAAOiM,eACnBxM,MAAO,CAAEC,QAASgG,IAAS4E,GAAM3J,WAAa,OAAS,SAEvD,yBAAKZ,UAAYC,KAAOuH,UAAxB,wCAEE,6BAAM,6BAFR,sDAMA,yBACE8B,GAAG,YACHI,YAAa,EACb1J,UAAYC,KAAO2L,OACnB3B,QAAU,WAAO,IAAD,EAGD,EADPkC,EAAO,UAAGC,gBAAH,aAAG,EAAUC,eAAe,aACrCF,IACF,UAAAzB,OAAO4B,sBAAP,SAAuBC,kBAAkBJ,MAI3ChL,EAAMrJ,OAAOmK,UAEjB,yBAAKjC,UAAYC,KAAO+L,eACtB,kBAAC,EAAD,CACE/B,QAAS,WACP0B,EAAQpB,GAAMmB,OAEhBtL,KAAK,QAJP,QAQA,kBAAC,EAAD,CACE6J,QAAS,WACP0B,EAAQpB,GAAM3J,YACd6E,GAAsBtE,EAAOsD,KAHjC,OAQA,kBAAC,EAAD,CACEjI,KAAK,OACLyN,QAAS,WACPvE,GAAqBvE,EAAOsD,EAAU,KAH1C,0BAWJ,yBACE/E,MAAO,CAAEC,QAASgG,IAAS4E,GAAM0B,YAAc,QAAU,SAEzD,yBAAKjM,UAAYC,KAAOuH,UAAxB,oDAGA,8BACExH,UAAYC,KAAOuM,cACnBhD,KAAO,GACPC,KAAO,EACPC,YAAa,EACbC,YAAc,WACdE,SAAU,SAAAhM,GAAC,OAAIgO,EAAUhO,EAAE2K,OAAOpP,UAEpC,yBAAK4G,UAAYC,KAAO+L,eACtB,kBAAC,EAAD,CACE/B,QAAS,WACP0B,EAAQpB,GAAMmB,OAEhBtL,KAAK,QAJP,QAQA,kBAAC,EAAD,CAEER,KAAQgM,EAAOrO,MAAM,KAAKF,QAAU,GAAM,OAAS,QACnDb,KAAK,OACLyN,QAAS,WACPxE,GAAsBtE,EAAOsD,EAAUmH,GACvClG,GAAqBvE,EAAOsD,EAAU,KAN1C,Y,yCExIGgI,GAAe,WAAO,IAAD,EACJlK,IAAM4D,WAAW7D,GAArCnB,EADwB,EACxBA,MAAOsD,EADiB,EACjBA,SADiB,EAIHgG,qBAJG,mBAIxBiC,EAJwB,KAIhBC,EAJgB,KAWhC,OANA5D,qBAAU,WACR6D,KAAGC,UAAU1L,EAAMrJ,OAAO2C,QAAS,CAAE6G,KAAM,eAAgB,SAACwL,EAAUC,GAC/DD,GAAOH,EAAUI,QAEvB,CAAC5L,EAAMrJ,OAAO2C,UAGf,yBAAKuF,UAAYC,KAAOsH,SACtB,yBAAKvH,UAAYC,KAAOiM,gBACtB,yBACElM,UAAYC,KAAO+M,OAGnB,yBAAKC,IAAKP,EAAQQ,IAAK,aAEzB,oEAGA,yBAAKlN,UAAYC,KAAOxF,SACpB0G,EAAMrJ,OAAO2C,UAGnB,yBAAKuF,UAAYC,KAAO+L,eACtB,kBAAC,EAAD,CACE5L,KAAK,OACL6J,QAAU,WACRvE,GAAqBvE,EAAOsD,EAAU,KAH1C,QAQA,kBAAC,EAAD,CACE5E,YAAa,wBACbD,MAA0B,YAAlBuB,EAAM/I,SAAuBuC,WACrCsP,QAAU,WAKRS,OAAOyC,KAAK,iCAAkC,YARlD,wBAcA,kBAAC,EAAD,CACElD,QAAU,WAER,IAAMmD,EAA8B,YAAlBjM,EAAM/I,QAAyB,WAAa,GAC9DsS,OAAOyC,KAAP,mCAC8BC,EAD9B,mBACiDjM,EAAMrJ,OAAO2C,SAC5D,YANN,iBAWA,kBAAC,EAAD,CACE+B,KAAK,OACLyN,QAAU,WACRvE,GAAqBvE,EAAOsD,EAAU,KAH1C,Y,oBC3DK4I,GAAoB,WAAO,IAAD,EACT9K,IAAM4D,WAAW7D,GAArCnB,EAD6B,EAC7BA,MAAOsD,EADsB,EACtBA,SADsB,EAIDlC,IAAMkI,SAAS,MAJd,mBAI7B6C,EAJ6B,KAIlBC,EAJkB,KAOrChL,IAAMwG,WAAU,WAAQwE,EAAa,QAAS,CAAEpM,EAAMM,gBAItD,If8C4B+L,EedtBC,EAAc,WAClB,KAbEtM,EAAMrJ,OAAO0J,aACbL,EAAMrJ,OAAOyJ,gBACbJ,EAAMlC,cAAcuC,aACpBL,EAAMlC,cAAcsC,gBAYpB,MAAO,CAAEmM,SAAS,EAAQpM,KAAM,UAAWqM,KAAM,wBAEnD,IAAMC,EAAezM,EAAMhC,UAAUC,QAAQ3E,QACvCqL,EAAgB3E,EAAMrJ,OAAO2C,QAC7BoT,EAAqC,KAAlB/H,EACnBgI,EAAsC,KAAjBF,EACrBG,EAAoBjI,IAAkB8H,EAC5C,OAAKC,EAGDE,IAAqBD,EAChB,CAAEJ,SAAS,EAAQpM,KAAM,QAAYqM,KAAM,sBAE/CI,GAAoBD,EAChB,CAAEJ,SAAS,EAAQpM,KAAM,OAAYqM,KAAM,uBAE/CI,GAAqBD,GAG1BnS,QAAQC,IAAI,8BAA+BgS,EAAc9H,EAAe+H,EAAiBC,EAAmBC,GACrG,CAAEL,SAAS,EAAUpM,KAAM,UAAYqM,KAAM,KAH3C,CAAED,SAAS,EAAQpM,KAAM,QAAYqM,KAAM,mBAT3C,CAAED,SAAS,EAAQpM,KAAM,WAAYqM,KAAM,qBAetD,OACE,yBAAK3N,UAAYC,KAAOsH,SACtB,yBAAKvH,UAAYC,KAAO6L,OAAxB,qCACoC,6BADpC,2BAIA,yBAAK9L,UAAYC,KAAO+N,YACL,WAAdV,GAA4B,WAhE/BnM,EAAMlC,cAAcsC,gBAAkBJ,EAAMlC,cAAcuC,YACpD,SAEA,cA8DW,WAAd8L,GAA4B,sBAEjC,yBAAKtN,UAAYC,KAAOgO,cACtB,kBAAC,EAAD,CACEhE,QAAU,WACU,OAAdqD,IACFC,EAAa,UACb3H,GAAuBzE,EAAOsD,EAAUlF,EAAYwB,gCAJ1D,aAWF,yBAAKf,UAAYC,KAAOiO,YACL,WAAdZ,GAA4B,WAvE/BnM,EAAMrJ,OAAOyJ,gBAAkBJ,EAAMrJ,OAAO0J,YACrC,SAED,cAqEW,WAAd8L,GAA2B,sBAEhC,yBAAKtN,UAAYC,KAAOkO,cACtB,kBAAC,EAAD,CACElE,QAAU,WACU,OAAdqD,IACFC,EAAa,UACb3H,GAAuBzE,EAAOsD,EAAUlF,EAAYuB,kBAJ1D,aAWF,yBAAKd,UAAYC,KAAOmO,SACtB,yBAAKpO,UAAYC,KAAOoO,SACpBlN,EAAMrJ,OAAO0J,afpDKgM,EeoDuBrM,EAAMrJ,OAAOkB,WflDvC,OAATwU,QAAS,IAATA,OAAA,EAAAA,EAAWxP,QACzB,SAACsQ,EAAapV,GAAd,OAA4BoV,EAAMpV,EAAKE,QACrC,KAAM,GegDkE,KAAKmV,QAAQ,GAAK,OAEnE,YAAlBpN,EAAM/I,QAAyB,QAAU,QAE9C,yBAAK4H,UAAYC,KAAOd,WACpBsO,IAAcE,MAElB,yBAAK3N,UAAYC,KAAO+L,eACtB,kBAAC,EAAD,CACE5L,KAAK,OACL6J,QAAU,WACRvE,GAAqBvE,EAAOsD,EAAU,KAH1C,QAQA,kBAAC,EAAD,CACE7E,KAAO6N,IAAcC,QAAU,OAAS,QACxClR,KAAK,OACLyN,QAAU,WACRvE,GAAqBvE,EAAOsD,EAAU,KAJ1C,Y,6BC9HK+J,GAAgB,WAAO,IAAD,EACLjM,IAAM4D,WAAW7D,GAArCnB,EADyB,EACzBA,MAAOsD,EADkB,EAClBA,SAGT7H,EAAWuE,EAAMhC,UAAUC,QAAQxC,SAASR,QAAQC,UAJzB,EAOCkG,IAAMkI,SAAS,CAACrS,QAAS,GAAIqC,QAAS,KAPvC,mBAO1BgU,EAP0B,KAOfC,EAPe,OAUTnM,IAAMkI,SAAS,IAVN,mBAU1B7P,EAV0B,KAUpB+T,EAVoB,OAabpM,IAAMkI,SAAS,CAAEnQ,IAAK,GAAIP,KAAM,KAbnB,mBAa1BsB,EAb0B,KAatBuT,EAbsB,KA2CjC,OA3BA7F,qBAAU,WAYR6F,EACEhX,YAXsB,SAACiX,GACvB,IAAIC,EAAiB,GAMrB,OALAhL,OAAOiL,KAAKF,GAAa5V,SAAQ,SAAA+V,GAC/BF,GAAkBE,EAAY,IAAMH,EAAYG,GAAa,OAE3DF,EAAezR,OAAS,IAAKyR,EAAiBA,EAAe1S,MAAM,GAAI,IAC3ET,QAAQC,IAAI,mBAAoB,IAAMkT,EAAiB,KAChDA,EAKLG,CAAgBrU,GAChBuG,EAAMrJ,OACNqJ,EAAMe,MAAQf,EAAMiB,UACpBjB,EAAMkB,SAASrK,QACfmJ,EAAMlC,cAAcC,UACpBiC,EAAM/I,YAGT,CAAC+I,EAAOvG,IAEXe,QAAQC,IAAIP,GAIV,yBAAK2E,UAAYC,KAAOsH,SACtB,yBAAKvH,UAAYC,KAAO6L,OAAxB,8BAGA,yBAAK9L,UAAYC,KAAOiP,SACU,IAA7BpL,OAAOiL,KAAKnU,GAAMyC,QAAiB,oBACpCyG,OAAOiL,KAAKnU,GAAMiN,KAAI,SAACmH,GACvB,OACE,yBACEhP,UAAYC,KAAOkP,WACnB9G,IAAM2G,EACN/E,QAAU,WACRyE,EAAa,CAAEtW,QAAS4W,EAAWvU,QAASG,EAAKoU,OAGnD,yBACEhP,UAAYC,KAAOmP,YAGI,KAApBxU,EAAKoU,GACD,8DACsB,8BAAQA,GAD9B,0BACuE,8BAAQpU,EAAKoU,KAEpF,0FAAqD,8BAAQA,GAA7D,aAGT,yBACEhP,UAAY,CAAC,YAAaC,KAAOoP,cAAclR,KAAK,KACpD8L,QAAU,SAACpM,GACT,IAAMyR,EAAO,eAAQ1U,UACd0U,EAAQN,GACfL,EAAQW,GACRzR,EAAE0R,oBAGJ,4CAMV,yBAAKvP,UAAYC,KAAOuP,QACnBf,EAAUrW,QAAQiF,OAAS,GAAM,yBAClC2C,UAAY,CAACC,KAAOwP,UAAW,YAAYtR,KAAK,KAChD8L,QAAU,WACR0E,EAAQ,eACH/T,EADE,gBAEJ6T,EAAUrW,QAAU,MAEvBsW,EAAa,CAAEtW,QAAS,GAAIqC,QAAS,OAPL,UAYpC,8BACEiP,YAAa,EACbtQ,MAAQqV,EAAUrW,QAClB4H,UAAYC,KAAOyP,cACnB/F,YAAc,UACdE,SAAW,SAAChM,GACV6Q,EAAa,eAAKD,EAAN,CAAiBrW,QAASyF,EAAE2K,OAAOpP,YAGnD,8BACEsQ,YAAa,EACbtQ,MAAQqV,EAAUhU,QAClBuF,UAAYC,KAAO0P,cACnBhG,YAAc,qBACdE,SAAW,SAAChM,GACV6Q,EAAa,eAAKD,EAAN,CAAiBhU,QAASoD,EAAE2K,OAAOpP,YAGnD,yBACE4G,UAAY,CAAC,YAAaC,KAAO2P,OAAQ,YAAYzR,KAAK,KAC1D8L,QAAU,WACR0E,EAAQ,eACH/T,EADE,gBAEJ6T,EAAUrW,QAAUqW,EAAUhU,WAEjCiU,EAAa,CAAEtW,QAAS,GAAIqC,QAAS,OAGvC,qCAGJ,yBAAKuF,UAAYC,KAAO4P,UACpBjT,EAASiL,KAAI,SAACC,EAASgI,GACvB,OACE,yBACE9P,UAAYC,KAAO8P,SACnB1H,IAAMyH,EACN7F,QAAU,WACRyE,EAAa,CAAEtW,QAAS0P,EAAG1P,QAASqC,QAASqN,EAAGrN,YAGlD,yBAAKuF,UAAYC,KAAO+P,aACpBlI,EAAG1P,SAEP,yBAAK4H,UAAYC,KAAOgQ,aACpBnI,EAAGrN,cAMf,yBAAKuF,UAAYC,KAAO+L,eACtB,kBAAC,EAAD,CACE5L,KAAK,OACL6J,QAAU,WACRvE,GAAqBvE,EAAOsD,EAAU,KAH1C,W,qBCtJKyL,GAAkB,WAAO,IAAD,EAG7BvK,EAAI,UAFQpD,IAAM4D,WAAW7D,GAA3BnB,MAEWY,gBAAT,aAAG,EAAgB3C,QAC7B,OACE,yBAAKY,UAAY,CAACC,KAAOsH,QAAS,aAAapJ,KAAK,MACtC,IAATwH,GAAe,kBAAC,GAAD,MACN,IAATA,GAAe,kBAAC,GAAD,MACN,IAATA,GAAe,kBAAC,GAAD,MACN,IAATA,GAAe,kBAAC,GAAD,OAEdA,GAAShK,QAAQC,IAAI,kBCfhB,SAASuU,KAQtB,OACE,oCACE,kBAAC,GAAD,MAEA,kBAAC,GAAD,O,yBCfOC,GAAS,WACpB,OACE,oCACE,yBACEpQ,UAAYC,KAAOoQ,SADrB,2BAKA,yBACErQ,UAAYC,KAAOqQ,MAEnB,uBACE/H,KAAK,gDACLC,OAAO,SACPC,IAAI,uBAEH,UAEH,kBAAC,IAAD,CAAMd,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,KAAT,aCQO4I,GAxBH,WAGV,IAAMC,EAAe,IAAIC,gBAAgB/F,OAAOgG,SAASC,QAAS5B,OAAOvS,OAAOpD,MAKhF,OAJAoX,GAAe7U,QAAQC,IAAI,gCAAiC4U,GAE5DA,GAAe9F,OAAOpL,QAAQsR,UAAU,GAAI,GAAIlG,OAAOgG,SAASG,SAAW,QAAUL,GAGnF,oCAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,KAAK,aAAaC,UAAW7G,KACpC,kBAAC,IAAD,CAAO8G,OAAK,EAACF,KAAK,OAAOC,UAAW7G,KACpC,kBAAC,IAAD,CAAO4G,KAAK,SAASC,UAAWzG,KAChC,kBAAC,IAAD,CAAOwG,KAAK,UAAUC,UAAWZ,KACjC,kBAAC,IAAD,CAAOW,KAAK,UAAUC,UAAW7G,KACjC,kBAAC,IAAD,CAAO8G,OAAK,EAACF,KAAK,IAAIC,UAAW7G,MAEnC,kBAAC,GAAD,Q,oBCvBA+G,GAAOC,EAAQ,KCKrBC,IAASnJ,OACP,mB3BkDK,YAAkF,IAAxDxH,EAAuD,EAAvDA,SAAuD,EAC5D+B,IAAM6O,WAAWlQ,EAASc,GADkC,mBAC/Eb,EAD+E,KACxEsD,EADwE,KAEtF,OACE,kBAACnC,EAAM+O,SAAP,CAAgBjY,MAAO,CAAE+H,QAAOsD,aAC5BjE,K2BtDN,KACE,kBAAC,IAAD,KACE,kBAAC,GAAD,OAEF,mBDHoB,SAACf,GAA6B,IAAD,EACvB8C,IAAM4D,WAAW7D,GAArCnB,EAD2C,EAC3CA,MAAOsD,EADoC,EACpCA,SADoC,EAIvBgG,oBAAkB,GAJK,mBAI5C6G,EAJ4C,KAIpCC,EAJoC,KAOnDxI,qBAAU,WACR,IAAMyI,EAAW,SAAC3T,GAGR,IAAD,EAFP,GAAc,MAAVA,EAAEwK,IACJkJ,GAAWD,QAGX,GAAmC,eAA/B,UAAAlF,SAASqF,qBAAT,eAAwBnI,IAAoB,CAC9C,IAAMC,EAAY6C,SAASC,eAAe,aACjC,OAAT9C,QAAS,IAATA,KAAWL,UAKjB,OADAkD,SAASrB,iBAAiB,QAASyG,GAC5B,WACLpF,SAASpB,oBAAoB,QAASwG,MAEvC,CAACF,IA6BJ,OACE,uCACEtR,UAAW,CACTC,KAAOyR,OACNJ,EAAyB,GAAhBrR,KAAOqR,QACjBnT,KAAK,MACFsB,GAEL,6BAAK,wCACL,yBACEO,UAAYC,KAAO0R,OACnB1H,QAAU,YAvBA,WACd,IAAIrP,EAAO,2BAA6BgX,mBAAmBxH,KAAKC,UAAUlJ,IACtE+B,EAAIkJ,SAASyF,cAAc,KAC/B3O,EAAEqF,KAAO,QAAU3N,EACnBsI,EAAE4O,SAAW,YACb5O,EAAE6O,UAAY,gBACd,IAAIC,EAAY5F,SAASC,eAAe,aAC/B,OAAT2F,QAAS,IAATA,KAAWC,YAAY/O,GACvBA,EAAEgP,QACFhP,EAAEiP,SAeIC,KAHJ,cAQA,yBACEpS,UAAY,CAACC,KAAOoS,WAAYpS,KAAO0R,QAAQxT,KAAK,KACpD8L,QA9CiB,WACrB,IAAMX,EAAa,WACbgJ,EAA4BlG,SAASC,eAAe/C,GAC1D,GAAKgJ,EAOE,CAAC,IAAD,EACL,UAAAA,EAAMC,kBAAN,SAAkBC,YAAYF,OARpB,CACV,IACM5S,EAAQ0M,SAASyF,cAAc,SACrCnS,EAAM4B,KAAO,WACb5B,EAAM4J,GAAKA,EACX5J,EAAMuS,YAAY7F,SAASqG,eAJR,mCAKnBrG,SAASsG,KAAKT,YAAYvS,MAmC1B,WAMA,yBACEM,UAAYC,KAAO0R,OACnB1H,QAAU,WACRtO,QAAQC,IAAIqV,IACZxM,EAAS,CAAEnD,KAAM/B,EAAY0B,WAAYI,QAAS4P,OAJtD,iBCxEF,OAEF7E,SAASC,eAAe,U,mBCf1B3U,EAAOC,QAAU,CAAC,OAAS,yBAAyB,OAAS,yBAAyB,WAAa,6BAA6B,OAAS,2B,iCCDzI,yDACMgb,EAAKta,UACLua,EAAUva,SAAeua,QASlBta,EAAY,SAACP,EAAoBG,GAC5C,IAAME,EAAUC,WAAiBH,GAG3B2a,EAAazY,EAAOC,KAAKtC,EAAY,QAIrC+a,EAAgBza,SAAe0a,QAAQ,CAC3CH,EAAQC,GACRF,EAAGK,UAaL,MAAO,CACLza,qBAVYF,WAAiB4a,MAAM,CACnCC,OAAQ,CACNjY,OAAQ6X,EACR1a,WAEFA,YAEiCqC,Y,yDChCrC,qGASaI,EAAU,SACrBsY,EAAoBC,GAChB,IADsCC,EACvC,uDAD6DD,EAO1D/K,EAAMiL,IAAOC,WAAW,UAAUC,OAAOJ,GAAcK,SACvDC,EAAKJ,IAAOC,WAAW,UAAUC,OAAOH,GAAaI,SAASrX,MAAM,EAAG,IAEzEuX,EAASL,IAAOM,eAAe,cAAevL,EAAKqL,GACnDG,EAAYF,EAAOH,OAAOpZ,EAAOC,KAAK8Y,IAI1C,OAFAU,EAAYzZ,EAAO0Z,OAAO,CAACD,EAAWF,EAAOI,WAYlCxV,EAAU,SACrByV,EAAsBZ,GAClB,IADwCC,EACzC,uDAD+DD,EAG5D/K,EAAMiL,IAAOC,WAAW,UAAUC,OAAOJ,GAAcK,SACvDC,EAAKJ,IAAOC,WAAW,UAAUC,OAAOH,GAAaI,SAASrX,MAAM,EAAG,IAEzE6X,EAAWX,IAAOY,iBAAiB,cAAe7L,EAAKqL,GAGvDS,EAAYF,EAAST,OAAOQ,GAKhC,OAFAG,EAAY/Z,EAAO0Z,OAAO,CAACK,EAAWF,EAASF,WAE9BpZ,SAAS,W,2CCjD5BjD,EAAOC,QAAU,CAAC,QAAU,8BAA8B,IAAM,0BAA0B,MAAQ,4BAA4B,IAAM,0BAA0B,OAAS,+B,mBCAvKD,EAAOC,QAAU,CAAC,QAAU,8BAA8B,eAAiB,qCAAqC,cAAgB,oCAAoC,QAAU,8BAA8B,MAAQ,8B,mBCApND,EAAOC,QAAU,CAAC,gBAAkB,qCAAqC,YAAc,iCAAiC,UAAY,+BAA+B,UAAY,iC,mBCA/KD,EAAOC,QAAU,CAAC,aAAe,kCAAkC,UAAY,+BAA+B,UAAY,iC,gCCD1H,kCAIO,IAAM6C,EAAuB,SAAC4Z,EAAqBjS,EAA6BjD,GACrF,IAAImV,EAAe,EASnB,OARAnV,EAAUjG,SAAQ,SAAAoC,GAEhB,GAAIA,EAAGqC,IAAI,GAAGC,QAAQF,uBAAyB2W,GAAe/Y,EAAGoB,OAAOC,aAAc,CACpF,IAAMoF,EAASzG,EAAGoB,OAAOC,aACzB2X,EAAe5b,KAAK6b,IAAID,EAAcvS,OAG1CnG,QAAQC,IAAI,mBAAoBwY,EAAa,KAAMjS,EAAqB,KAAMkS,GACvEA,K","file":"static/js/main.25c6253f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Navbar_root__2XES1\",\"warning\":\"Navbar_warning__1HOBZ\"};","import * as bitcoin from 'bitcoinjs-lib'\nimport { calcP2WSH } from './calcP2WSH'\nimport { MIN_BURN, MIN_NOTIFY } from './constants'\nimport { encrypt } from './cryptography'\nimport { getLastMessageHeight } from './getLastMessageHeight'\n\n/**\n * Creates hex of tx to bid on domain.\n * Throws error if not enough funds.\n * Leave vBytes blank, it will call itself via recursion until it derives needed size.\n * @param   {string}      stringToEmbed           - string of forwarding information to embed in tx.\n * @param   {object}      wallet                  - { WIF, address, txHistory, utxoList, ... }.\n * @param   {string}      domainName              - full domainName to use (e.g. 'satoshi.btc').\n * @param   {number}      feeRate                 - fee rate in satoshi/vBytes.\n * @param   {Array}       notificationTxHistory   - Array of transactions to notification address.\n * @param   {string}      networkChoice           - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @param   {number=}     [vBytes=0]              - size of transaction in vBytes. *\n * @returns {object}                              - { thisVirtualSize, txid, hex, valueNeeded, fee, change }.\n */\nexport const calcBidDomainTx = (\n  stringToEmbed: string,\n  wallet: any,\n  domainName: string,\n  feeRate: number,\n  notificationTxHistory: Array<any>,\n  networkChoice: string,\n  vBytes: number = 0\n): any => {\n\n  const network = bitcoin.networks[networkChoice]\n  const { notificationsAddress } = calcP2WSH(domainName, networkChoice)\n\n  // calculate funds necessary for this tx, more than needed better than less.\n  const fee = Math.ceil(vBytes * feeRate)\n  const valueNeeded = MIN_BURN + MIN_NOTIFY + fee; // sat\n  // gather necessary utxo to use until enough to cover costs\n  let usedUtxoOfPayer: Array<any> = []\n  let totalGathered = 0 // sat\n  wallet.utxoList.forEach((utxo: any) => {\n    // while not enough funds\n    if (totalGathered < valueNeeded) {\n      usedUtxoOfPayer.push(utxo)\n      totalGathered += utxo.value\n    }\n  })\n  // if still not enough funds\n  if (totalGathered < valueNeeded) {\n    throw new Error('Not enough funds in all the utxo')\n  }\n  const change = totalGathered - valueNeeded\n\n  // calculate keys from wallet import format key\n  const keyPair = bitcoin.ECPair.fromWIF(wallet.WIF, network)\n  // create Partially Signed Bitcoin Transaction object to build tx\n  const psbt = new bitcoin.Psbt({ network })\n  psbt.setVersion(2)    // default\n  psbt.setLocktime(0)   // default\n\n  // add all inputs (owner address must always be at index 0)\n  usedUtxoOfPayer.forEach(utxo => {\n    psbt.addInput({\n      hash: utxo.txid,\n      index: utxo.vout,\n      sequence: 0xfffffffe,\n      nonWitnessUtxo: Buffer.from(utxo.hex, 'hex') // should work for segwit and nonsegwit inputs\n    })\n  })\n\n  // add inputs of all ACS UTXO from this owner or it doesn't count (TODO)\n\n\n  // add the op_return output (always index 0)\n\n  // if first time sending, nonce is '0', otherwise the last blockheight when notification was sent from this owner address\n  // TODO calculate nonce in case this owner has unspent acs utxo left at notification address\n  const nonce = getLastMessageHeight(wallet.address, notificationsAddress, notificationTxHistory)\n  const encryptionKey =  domainName + wallet.address + nonce.toString()\n  const data = encrypt(stringToEmbed,encryptionKey)\n  const embed = bitcoin.payments.embed({ data: [data] })\n  psbt.addOutput({\n    script: embed.output,\n    value: MIN_BURN,\n  })\n\n  // add notification output (always index 1)\n  psbt.addOutput({\n    address: notificationsAddress, // calculated from domainName provided\n    value: MIN_NOTIFY\n  })\n\n  // add change output (anything is fine for index 2 or higher outputs)\n  psbt.addOutput({\n    address: wallet.address,\n    value: change\n  })\n\n  // at this point all inputs & outputs added so ready to sign\n\n  usedUtxoOfPayer.forEach((utxo, index) => {\n    // sign p2wpkh of controlling\n    psbt.signInput(index, keyPair)\n    // (TODO) signing ACS inputs will need script\n\n    if (!psbt.validateSignaturesOfInput(index)) {\n      throw new Error('Signature validation failed for input index ' + index.toString())\n    }\n  })\n\n  psbt.finalizeAllInputs()\n\n  const tx = psbt.extractTransaction()\n  const thisVirtualSize = tx.virtualSize()\n  const txid = tx.getId()\n  const hex = tx.toHex()\n\n  if (vBytes >= thisVirtualSize) {\n    // If this tx fee was calculated for a vBytes size equal to or larger than the resulting derived tx (thisVirtualSize),\n    // fee should be safe by being equal to or larger than necessary at required feeRate.\n    // Obviously vBytes = 0 will never give the correct fee minimum the first time through.\n    console.log('virtualSize', tx.virtualSize())\n    console.log('byteLength', tx.byteLength())\n    console.log('getId', tx.getId())\n    console.log('hex', tx.toHex())\n    console.log('')\n    return { thisVirtualSize, txid, hex, valueNeeded, fee, change }\n  } else {\n    // Redo this tx calculation using the virtual size we just calculated for vByte optional parameter.\n    return calcBidDomainTx(stringToEmbed, wallet, domainName, feeRate, notificationTxHistory, networkChoice, thisVirtualSize)\n  }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P4ClaimDomain_wrapper__19Udt\",\"title\":\"P4ClaimDomain_title__3TuBt\",\"changes\":\"P4ClaimDomain_changes__2iRzW\",\"pastList\":\"P4ClaimDomain_pastList__2MRGM\",\"buttonWrapper\":\"P4ClaimDomain_buttonWrapper__2Eu6S\",\"editor\":\"P4ClaimDomain_editor__3T-N4\",\"updateItem\":\"P4ClaimDomain_updateItem__z_wcv\",\"updateCancel\":\"P4ClaimDomain_updateCancel__2zAix\",\"updateInfo\":\"P4ClaimDomain_updateInfo__2gcUj\",\"editorNetwork\":\"P4ClaimDomain_editorNetwork__b7zAX\",\"editorAddress\":\"P4ClaimDomain_editorAddress__udbHC\",\"btnAdd\":\"P4ClaimDomain_btnAdd__-RHwN\",\"btnDelete\":\"P4ClaimDomain_btnDelete__BUzel\",\"pastPair\":\"P4ClaimDomain_pastPair__2V7A6\",\"pastNetwork\":\"P4ClaimDomain_pastNetwork__1kptH\",\"pastAddress\":\"P4ClaimDomain_pastAddress__3ZBYh\"};","/**\n * Constants used to determine rules on BNS\n */\n\nconst TESTING = true                        // testing mode true/false to reduce waiting time for tests\nTESTING && console.warn('Testing mode ON')\n\nconst MIN_BURN = 1000                       // Satoshis to burn minimum for ownership\nconst MIN_NOTIFY  = 1000                    //  Minimum to use for notification output\n\nconst OWNERSHIP_DURATION_BY_BLOCKS = !TESTING ? 52560 : 1000\n// ^ (real) 52560 blocks ~365 days. (testing) 288 blocks ~48 hours. Block times can vary from 10 minutes.\n// const CHALLENGE_PERIOD_DURATION_BY_BLOCKS = 3456\n// ^ ~24 hours. Only matters if someone is monitoring specific domainName, otherwise they won't know what domainName the bids are for.\n\nexport {\n  TESTING,\n  MIN_BURN,\n  MIN_NOTIFY,\n  OWNERSHIP_DURATION_BY_BLOCKS\n}","import { calcP2WSH } from './calcP2WSH'\nimport { OWNERSHIP_DURATION_BY_BLOCKS, MIN_BURN, MIN_NOTIFY } from './constants'\nimport { decrypt } from './cryptography'\n\n/**\n * Returns ownership and notification information objects.\n * @param   {Array<any>}  notificationsHistory  - array of any tx with notificationsAddress.\n * @param   {string}      domainName            - full domainName to use (e.g. 'satoshi.btc').\n * @param   {number}      currentHeight         - current blockheight of the network chain selected.\n * @param   {string}      networkChoice         - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @returns {object}                            - { notifications, ownership } information objects.\n */\nexport const calcOwnership = (\n  notificationsHistory: Array<any>,\n  domainName: string,\n  currentHeight: number,\n  networkChoice: string\n) => {\n\n  // grab notification address\n  const { notificationsAddress } = calcP2WSH(domainName, networkChoice)\n\n  // start by sorting history from earliest to latest\n  // reversing should speed it up if not complete it\n  const sortedNotificationsHistory = notificationsHistory.slice().reverse().sort((prev, next) => {\n    const aBlockHeight = prev.status.block_height\n    const bBlockHeight = next.status.block_height\n    return aBlockHeight - bBlockHeight\n  })\n\n  // object to track ownership of domainName through history\n  interface IOwner {\n    address: string\n    forwards: Array<any>\n    burnAmount: number\n    winHeight: number\n    winTimestamp: number\n    lastUpdate: number\n  }\n  const resetOwner: IOwner = {  // values to reset owner when ownership is lost\n    address: '',                // address in control\n    forwards: [],               // for forwards later\n    burnAmount: 0,              // burned to get ownership\n    winHeight: 0,               // blockheight winning bid\n    winTimestamp: 0,            // winHeight in block's timestamp\n    lastUpdate: 0               // for parsing data later, last tx blockheight\n  }\n  const ownersHistory: Array<IOwner> = []          // history of all owners\n  let currentOwner: IOwner = { ...resetOwner };   // clone initial values\n  // Array to track utxo to redeem\n  // const utxoToRedeem = []\n  // Array to track notification utxo to consume\n  // const utxoToConsume = []\n\n  // iterate through all relevant tx history to derive ownership of this domainName\n  sortedNotificationsHistory.forEach(tx => {\n    ownersHistory.push(currentOwner) // update ownership history\n    try {\n      // Expiration: if OWNERSHIP_DURATION_BY_BLOCKS blocks since ownership update, no owner again\n      const txBlockHeight = tx.status.block_height\n      const blocksSinceUpdate = txBlockHeight - currentOwner.winHeight\n      const isExpired = blocksSinceUpdate > OWNERSHIP_DURATION_BY_BLOCKS\n      if (!!currentOwner.address && isExpired) {\n        currentOwner = { ...resetOwner }\n        console.log(domainName, txBlockHeight, 'ownership expired')\n      }\n\n      // Rules on ownership bid tx described in throw's\n      if (!(tx.vout.length >= 2)) { throw new Error('Not enough outputs') }\n\n      const isOpreturn = (tx.vout[0].scriptpubkey_asm.split(' ')[0] === 'OP_RETURN')\n      if (!isOpreturn) { throw new Error('OP_RETURN missing from output index 0') }\n\n      const txBurnAmount = tx.vout[0].value\n      const didBurnMin = (txBurnAmount >= MIN_BURN)\n      if (!didBurnMin) { throw new Error('Did not burn the minimum of ' + MIN_BURN) }\n\n      const didNotifyMin = (tx.vout[1].value >= MIN_NOTIFY)\n      if (!didNotifyMin) { throw new Error('Did not send enough for notify ' + MIN_BURN) }\n\n      const isNotify = (tx.vout[1].scriptpubkey_address === notificationsAddress)\n      if (!isNotify) { throw new Error('Notification output missing from output index 1') }\n\n      // if no owner, good enough to give ownership\n      if (!currentOwner.address) {\n        currentOwner = {\n          address: tx.vin[0].prevout.scriptpubkey_address,\n          forwards: [...resetOwner.forwards],\n          burnAmount: txBurnAmount,\n          winHeight: txBlockHeight,\n          winTimestamp: tx.status.block_time,\n          lastUpdate: 0\n        }\n        console.log(domainName, txBlockHeight, 'new owner found:', currentOwner.address)\n      }\n    } catch (e) {\n      console.log(e.message, '\\n', tx)\n    }\n  })\n\n  // Iterate through history one more time to build up forwards for this owner\n  // rules are much more relaxed for forwards\n  // just has to be from controlling address @ vin[0] and have data in op_return @ vout[0]\n  // notification address must have been used for this tx to be in the list so can skip checking\n  // Separate pass has convinience of being able to reuse forwards of same controlling address\n  // Keep track of last notification tx by owner blockheight (before other checks) for aes nonce\n  //\n  // each forward object has the following data\n  interface Iforward {\n    network: string\n    address: string\n    updateHeight: number\n    updateTimestamp: number\n  }\n  const collectedForwardsInHistory: (Array<Iforward> | []) = (sortedNotificationsHistory\n    .reduce( (foundForwardsInHistory, tx) => {\n      // is tx input #0 from owner's controlling address\n      const txOwner = tx.vin[0].prevout.scriptpubkey_address\n      const fromOwner = (txOwner === currentOwner.address)\n      if (!fromOwner) { return foundForwardsInHistory } // skip tx bc irrelevant\n\n      // If from owner, update blockheight as future nonce.\n      // The only requirement for nonce update for this controlling address is for input [0] to be from this address.\n      const nonce = currentOwner.lastUpdate.toString()        // prev update height by this owner or 0\n      const txBlockHeight = tx.status.block_height\n      currentOwner.lastUpdate = txBlockHeight                 // new update height\n\n      const isOpreturn = (tx.vout[0].scriptpubkey_asm.split(' ')[0] === 'OP_RETURN')\n      if (!isOpreturn) { return foundForwardsInHistory } // skip tx bc didn't have op_return so irrelevant\n\n      // remove 'OP_RETURN '\n      const embeddedDataHex = tx.vout[0].scriptpubkey_asm.split(' ').slice(2).join('')\n      const embeddedDataBuffer = Buffer.from(embeddedDataHex, 'hex')\n      // decrypt\n      const decryptionKey = domainName + currentOwner.address + nonce\n      const embeddedDataUtf8 = decrypt(embeddedDataBuffer, decryptionKey)\n      // console.log('found asm', tx.vout[0].scriptpubkey_asm)\n      // console.log('embeddedDataHex:', embeddedDataHex)\n      console.log('found embedded data:', embeddedDataUtf8)\n\n      // need to form array of forwards out of each tx (could be more than 1 defined)\n      // and then combine these forwards across all tx for this owner\n      const collectedForwardsInThisTx = (embeddedDataUtf8\n        // data separated by utf8 spaces\n        .split(' ')\n        .reduce((foundForwardsInThisTx: (Array<Iforward> | []), networkPiece, index, embeddedTxDataArray) => {\n          // only need to do on every 2nd data piece\n          // for now only for cases where there is network id following each value\n          const lastIndex = embeddedTxDataArray.length - 1 // largest array index I can call\n          if ((index % 2 === 0) && (index < lastIndex)) {\n            // every 2nd & safe index\n            const forwardingAddressPiece = embeddedTxDataArray[index + 1] // forwarding address\n            console.log('added', networkPiece, ':', forwardingAddressPiece)\n            const thisForward = {\n              network: networkPiece,\n              address: forwardingAddressPiece,\n              updateHeight: txBlockHeight,\n              updateTimestamp: tx.status.block_time\n            }\n            return [\n              ...foundForwardsInThisTx,\n              thisForward\n            ]\n          } else {\n            return foundForwardsInThisTx // skip if not a pair to end looping\n          }\n        }, [])\n      )\n      // adds collected network:forwards pairs from this tx to overall list of them\n      return [\n        ...foundForwardsInHistory,\n        ...collectedForwardsInThisTx\n      ]\n    }, [])\n  )\n\n  // update forwards for owner object\n  currentOwner.forwards = collectedForwardsInHistory\n\n  // Check if last known ownership timed out. if so reset.\n  const blocksSinceUpdate = currentHeight - currentOwner.winHeight\n  const isExpired = blocksSinceUpdate > OWNERSHIP_DURATION_BY_BLOCKS\n  if (!!currentOwner.address && isExpired) {\n    ownersHistory.push(currentOwner) // update ownership history\n    currentOwner = { ...resetOwner } // reset current owner\n    console.log(domainName, currentHeight, 'currently ownership expired')\n  }\n\n  // returns notification info and ownership info that includes current owners forwards\n  return {\n    notifications: {\n      address: notificationsAddress,\n      txHistory: sortedNotificationsHistory,\n      utxoList: []\n    },\n    ownership: {\n      current: currentOwner,\n      topBidder: {}, // (TODO)\n      history: ownersHistory\n    }\n  }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AboutContent_wrapper__1kfnm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CreateNavigator_wrapper__24rTe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P1RestoreOrBackup_wrapper__32TQJ\",\"title\":\"P1RestoreOrBackup_title__2rH-6\",\"contentWrapper\":\"P1RestoreOrBackup_contentWrapper__1NT85\",\"buttonWrapper\":\"P1RestoreOrBackup_buttonWrapper__2ryAq\",\"describe\":\"P1RestoreOrBackup_describe__1RMqs\",\"Orange\":\"P1RestoreOrBackup_Orange__2IaJN\",\"spacer\":\"P1RestoreOrBackup_spacer__3luud\",\"backup\":\"P1RestoreOrBackup_backup__357rd\",\"restoreBackup\":\"P1RestoreOrBackup_restoreBackup__VUHgs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P3DomainAndWallet_wrapper__1ElFg\",\"contentWrapper\":\"P3DomainAndWallet_contentWrapper__vm5qp\",\"title\":\"P3DomainAndWallet_title__3ing2\",\"domainInfo\":\"P3DomainAndWallet_domainInfo__3p2aJ\",\"domainButton\":\"P3DomainAndWallet_domainButton__2PIDz\",\"walletInfo\":\"P3DomainAndWallet_walletInfo__2cQY0\",\"walletButton\":\"P3DomainAndWallet_walletButton__MmLZ3\",\"unspent\":\"P3DomainAndWallet_unspent__bUWZW\",\"buttonWrapper\":\"P3DomainAndWallet_buttonWrapper__djJkL\",\"ownership\":\"P3DomainAndWallet_ownership__lSY6a\",\"balance\":\"P3DomainAndWallet_balance__2fns7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SearchResults_wrapper__VvaYk\",\"listContainer\":\"SearchResults_listContainer__12vQE\",\"listItem\":\"SearchResults_listItem__3Udwx\",\"key\":\"SearchResults_key__358jo\",\"describe\":\"SearchResults_describe__3HACm\",\"expired\":\"SearchResults_expired__2ptnD\",\"notExpired\":\"SearchResults_notExpired__2m4VI\",\"createLink\":\"SearchResults_createLink__13Wez\"};","/**\n * All the interfaces\n */\n\nexport enum ActionTypes {\n  STORE_SEARCH_RESULTS = 'STORE_SEARCH_RESULTS',\n  STORE_SEARCH_RESULTS_FAIL = 'STORE_SEARCH_RESULTS_FAIL',\n  TYPING = 'TYPING',\n  NEW_WALLET = 'NEW_WALLET',\n  CHANGE_PAGE_INFO = 'CHANGE_PAGE_INFO',\n  UPDATE_WALLET = 'UPDATE_WALLET',\n  UPDATE_NOTIFICATION_ADDRESS = 'UPDATE_NOTIFICATION_ADDRESS',\n  ACTION_FAIL = 'ACTION_FAIL',\n  LOAD_STATE = 'LOAD_STATE'\n}\n\nexport type Dispatch = React.Dispatch<IAction>\n\nexport interface IState {\n  network: string\n  alias: string\n  extension: string\n  notifications: {\n    address: string\n    txHistory: Array<any>\n    utxoList: Array<any>\n    checkedHistory: boolean\n    checkedUtxo: boolean\n  }\n  wallet: {\n    WIF: string\n    address: string\n    mnemonic: string\n    txHistory: Array<any>\n    utxoList: Array<any>\n    checkedHistory: boolean\n    checkedUtxo: boolean\n  }\n  ownership: {\n    current: {\n      address: string\n      forwards: [ {\n        network: string\n        address: string\n        updateHeight: number\n        updateTimestamp: number\n      } ] | []\n      burnAmount: number\n      winTimestamp: number\n      winHeight: number\n    }\n    topBidder: object\n    history: []\n    checked: boolean\n  }\n  chain: {\n    height: number\n  }\n  pageInfo: {\n    current: number\n  }\n  settings: {\n    feeRate: number\n  }\n  lastTimeStamp: number\n}\n\nexport interface IAction {\n  type: ActionTypes\n  payload: any\n}\n","import React from 'react'\nimport styles from './RoundButton.module.css'\n\n/**\n * Standard button for this app.\n *\n * Pass the following props to customize it.\n *\n * next='true' to add next arrow at right.\n *\n * back='true' to add back arrow on left.\n *\n * show='true' to display element vs show='false' to set display to none (dom still exists).\n *\n * sizebutton='2.9' to make the button size 2.9x standard var(--s) size used (defined in global global.css).\n *\n * colorbutton='var(--colorBitcoinOrange)' to customize color.\n *\n * colorbuttonText='var(--colorButtonText)' to customize text color.\n *\n * Defaults (vars defined in global global.css):\n *\n * sizebutton = 2.5. ( means font size calc(2.5/2.9 * var(--s)) )\n *\n * colorbutton = var(--colorBitcoinOrange).\n *\n * colorbuttontext = var(--colorButtonText).\n */\nexport const RoundButton = (props:any): JSX.Element => {\n  return (\n    <div\n      // variables defined by string will be available to button & its children for scope\n      style={{\n        display: (\n          (props?.show === 'false') ? 'none' : 'inline-block'\n        ) as React.CSSProperties,\n        '--colorThisButton': (\n          props.colorbutton ? props.colorbutton : `var(--colorBitcoinOrange)`\n        )  as React.CSSProperties,\n        '--colorThisButtonText': (\n          props.colorbuttontext ? props.colorbuttontext : `var(--colorButtonText)`\n        ) as React.CSSProperties,\n        '--sizeButton': (\n          props.sizebutton\n          // Button was designed at 2.9 * var(--s) scale font so\n          // this just lets user redefine font & everything else proportionally\n            ? `calc(${props.sizebutton}/2.9 * var(--s))`\n            : `calc(2.5/2.9 * var(--s))`\n        ) as React.CSSProperties\n      }}\n      className={ styles.roundButtonWrap }\n      {...props}\n    >\n      <div\n        className={ [\n          styles.roundButton,\n          props.back ? styles.backArrow : undefined,\n          props.next ? styles.nextArrow : undefined,\n        ].join(' ') }\n      >\n        { props.children }\n      </div>\n    </div>\n  )\n}\n","import { IState, IAction, ActionTypes } from '../../interfaces'\nimport { initialState } from './../'\nconst {\n  STORE_SEARCH_RESULTS_FAIL,\n  STORE_SEARCH_RESULTS,\n  TYPING,\n  NEW_WALLET,\n  CHANGE_PAGE_INFO,\n  UPDATE_WALLET,\n  UPDATE_NOTIFICATION_ADDRESS,\n  ACTION_FAIL,\n  LOAD_STATE\n} = ActionTypes\n\n/**\n * Reducer edits global state via information in payload.\n * Action is object { payload, type }.\n * type describes what type of changes to global state to make.\n * payload contains data provided to make those changes.\n */\nexport default function reducer (state: IState, action: IAction): IState {\n  const { payload } = action\n\n  switch (action.type) {\n\n    case UPDATE_WALLET: {\n      // after full scan of the wallet address\n      return {\n        ...state,\n        wallet: {\n          ...state.wallet, // wif/mnemonic/address unchanged\n          txHistory: payload.wallet.txHistory,\n          utxoList: payload.wallet.utxoList,\n          checkedHistory: true,\n          checkedUtxo: true\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case UPDATE_NOTIFICATION_ADDRESS: {\n      return {\n        ...state,\n        notifications: {\n          address: payload.notifications.address,\n          txHistory: payload.notifications.txHistory,\n          utxoList: payload.notifications.utxoList,\n          checkedHistory: true,\n          checkedUtxo: true\n        },\n        ownership: {\n          ...payload.ownership,\n          checked: true\n        },\n        chain: {\n          height: payload.chain.height\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case CHANGE_PAGE_INFO:\n      // navigation info for controlling domains\n      return {\n        ...state,\n        pageInfo: payload\n      }\n\n    case NEW_WALLET: {\n      // store totally new wallet object\n      return {\n        ...state,\n        wallet: {\n          ...initialState.wallet,\n          address: payload.address,\n          mnemonic: payload.mnemonic,\n          WIF: payload.WIF\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case STORE_SEARCH_RESULTS: {\n      // store results of looking up totally new alias\n      // update notifications and ownership information\n      return {\n        ...state,\n        alias: payload.alias,\n        notifications: {\n          ...initialState.notifications,\n          ...payload.notifications,\n          checkedHistory: true\n        },\n        ownership: {\n          ...initialState.ownership,\n          ...payload.ownership,\n          checked: true\n        },\n        chain: {\n          height: payload.chain.height\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case STORE_SEARCH_RESULTS_FAIL: {\n      // store results of looking up totally new alias\n      // reset notifications and ownership information\n      return {\n        ...state,\n        alias: payload.alias,\n        notifications: {\n          ...initialState.notifications,\n          address: payload.notificationAddress\n        },\n        ownership: {\n          ...initialState.ownership\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case TYPING: {\n      // change of alias part of domain name\n      // this change renders owner and notification information outdated\n      return {\n        ...state,\n        alias: payload,\n        notifications: initialState.notifications,\n        ownership: initialState.ownership,\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case ACTION_FAIL: {\n      return {\n        ...state,\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case LOAD_STATE: {\n      return {\n        ...payload,\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    default: {\n      console.warn('Unknown action type')\n      return state\n    }\n  }\n}\n\n// can split maybe like this later if gets too long\n// https://dev.to/vanderleisilva/global-state-management-with-react-hooks-and-context-5f6h\n\n","import React from 'react'\nimport { IState } from '../interfaces'\nimport reducer from './reducers/Reducer'\n\n// Change state process:\n// 1. Component calls action from src/store/actions/\n// 2. Action does stuff (e.g. API calls) and dispatches results to reducer in src/store/reducer/\n// 3. Reducer modifies state based on dispatched payload and type of action.\n\n// initial state\n// (changes to design need to be matched in reducers & interfaces)\nexport const initialState: IState = {\n  network: 'testnet',       // 'testnet' or 'bitcoin'\n  alias: 'satoshi',         // first half of domain name\n  extension: '.btc',        // last half of domain name\n  notifications: {          // notification info for this domain name\n    address: '',            // p2wsh address for this domain name (alias + extension)\n    txHistory: [],          // array of all tx for this address (old addressHistory)\n    utxoList: [],           // array of all current utxo for this address\n    checkedHistory: false,  // if notifications tx history has ever been updated\n    checkedUtxo: false      // if notifications utxo including raw tx has ever been updated\n  },\n  wallet: {                 // wallet information & utxo for controlling domain names\n    address: '',            // public address (p2wpkh)\n    mnemonic: '',           // mnemonic for private key derivation\n    WIF: '',                // wallet import format for private key derivation\n    txHistory: [],          // array of all tx for this address\n    utxoList: [],           // array of all current utxo for this address\n    checkedHistory: false,  // if wallet tx history has ever been updated\n    checkedUtxo: false      // if wallet utxo including raw tx has ever been updated\n  },\n  ownership: {              // all details about ownership info for this domain name\n    current: {              // current owner only\n      address: '',          // address of current owner\n      forwards: [],         // array of forwards for this owner\n      burnAmount: 0,        // price burnt for ownership\n      winTimestamp: 0,      // unix timestamp of winning bid to simplify comparison w/ current time (0 default)\n      winHeight: 0          // block height of win\n    },\n    topBidder: {},          // bidding info (only relevant during challenge time)\n    history: [],            // history of ownership\n    checked: false          // if ownership info has ever been updated\n  },\n  chain: {\n    height: 0               // height of blockchain\n  },\n  pageInfo: {               // user navigation information for controlling domain name\n    current: 1\n  },\n  settings: {\n    feeRate: 1.1            // fee rate to use in sat/bByte\n  },\n  lastTimeStamp: Date.now() // last change timestamp, to detect any changes to state or time out\n}\n\nexport const Store = React.createContext<any>(initialState)\n// returns object with .Provider and .Consumer\n// Provider makes state available to all child components no matter how deep\n\n// creates wrapping element for global state\nexport function StoreProvider ({ children }: JSX.ElementChildrenAttribute): JSX.Element {\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n  return (\n    <Store.Provider value={{ state, dispatch }}>\n      { children }\n    </Store.Provider>\n  )\n}\n","export default function sanitize (inString, type) {\r\n  let filter;\r\n  if (type === 'base58') {\r\n    // https://en.wikipedia.org/wiki/Base58#cite_note-3\r\n    filter = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\r\n  } else if (type === 'hex') {\r\n    filter = '0123456789abcdef';\r\n  } else if (type === 'basic') {\r\n    filter = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  } else if (type === 'numbers') {\r\n    filter = '0123456789';\r\n  } else if (type === 'fractions') {\r\n    filter = '0123456789.';\r\n  } else if (type === 'oneline') {\r\n    filter = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.';\r\n  } else if (type === 'url') {\r\n    filter = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ./-_';\r\n  } else {\r\n    console.log('sanitize: valid type not provided');\r\n    return undefined;\r\n  }\r\n\r\n  const res = inString\r\n    .split('')\r\n    .filter(letter => filter.indexOf(letter) > -1)\r\n    .join('');\r\n\r\n  return res;\r\n}\r\n","import { IState, Dispatch } from '../../interfaces'\nimport sanitize from '../../helpers/sanitize'\nimport { ActionTypes } from './../../interfaces'\nconst { TYPING } = ActionTypes;\n\n/**\n * Cleans up the entered string including removing next line characters\n */\nexport const changeAliasAction = async (state: IState, dispatch: Dispatch, value: any) => {\n  // clean up the string\n  const newString = value\n  const sanitizedString = sanitize(newString, 'url')\n\n  return dispatch({\n    type: TYPING,\n    payload: sanitizedString\n  })\n}","import axios from 'axios'\n\n// Documentation\n// https://github.com/Blockstream/esplora/blob/esplora_v2.00/API.md\n// https://github.com/Blockstream/esplora/blob/master/API.md#post-tx\n\nconst API_PATH_TESTNET = 'https://blockstream.info/testnet/api/'\nconst API_PATH_BITCOIN = 'https://blockstream.info/api/'\nconst API_RATE_LIMIT = 0.6    // guessing calls per second cap\n\n// (TODO) a single instance of async task executing loop per API to ensure rate limit holds per API\n// Meanwhile calling function can use its own busy flag to ensure promises are resolved before repeats.\n// RawTx requests and multipage history (length > 25) are main risks.\n\n\nexport async function getHeight (strNetwork: string) {\n  const API_PATH = (\n    (strNetwork === 'testnet')\n    ? API_PATH_TESTNET\n    : API_PATH_BITCOIN\n  ) + 'blocks/tip/height'\n  console.log(API_PATH)\n\n  try {\n\n    const res = await axios.get(API_PATH)\n    console.log('getHeight', res.data)\n    return res.data\n\n  } catch (e) {\n\n    console.log(e)\n    await rateLimit()\n    throw new Error('Blockstream.info API height get failed')\n  }\n\n}\n\n/**\n * API request for each UTXO in array to get the raw tx necessary for psbt.\n * @param     {Array}     arrayUtxo       Array of UTXO.\n * @param     {string}    strNetwork      Network type: 'bitcoin' or 'testnet'.\n * @returns   {object}                    { arrayTx: arrayTx w/ .hex, error: string, fails: number }\n */\nexport async function addRawTxToArray (arrayUtxo: Array<any>, strNetwork: string) {\n  // to track failures indecies\n  let erroredOutputs = ''\n\n  // abort if empty array\n  if (arrayUtxo?.length === 0) { return { arrayUtxo, error: 'no utxo' } }\n\n  // clone array\n  const arrayUtxoWithHex = [...arrayUtxo]\n\n  // iterate through original utxo and add hex onto clone, 2 tries max each\n  for (const [indexString, utxo] of Object.entries(arrayUtxo)) {\n    // indexString is a string so convert for array index use\n    const index = parseInt(indexString, 10)\n\n    let tries = 2\n    while (tries-- > 0) {\n      try {\n        const { txid } = utxo\n\n        // raw tx hex path on API\n        const API_PATH = (\n          (strNetwork === 'testnet')\n            ? API_PATH_TESTNET\n            : API_PATH_BITCOIN\n        ) + 'tx/' + txid + '/hex'\n        console.log(API_PATH)\n\n        const res = await axios.get(API_PATH)\n\n        console.log(index, 'index utxo has raw hex of', res.data)\n\n        // add hex data into cloned utxo array\n        arrayUtxoWithHex[index].hex = res.data\n\n        // break while loop if got data, don't need more tries\n        break\n\n      } catch(e) {\n        // keeping track of failures\n        console.log('fail detected', indexString, utxo, tries, erroredOutputs, e)\n        // keep track of indecies missing hex\n        erroredOutputs += indexString + ' '\n      }\n\n      await rateLimit()\n    }\n  }\n\n  // return summary object\n  return { arrayUtxoWithHex, erroredOutputs }\n}\n\n/**\n * API request for all utxo for this address\n * @param     {string}    address       Bitcoin address.\n * @param     {string}    strNetwork    Network type: 'bitcoin' or 'testnet'.\n * @returns   {Array}                   Array of UTXO.\n */\nexport async function getUTXOList (address: string, strNetwork: string) {\n  const API_PATH = (\n    (strNetwork === 'testnet')\n    ? API_PATH_TESTNET\n    : API_PATH_BITCOIN\n  ) + 'address/' + address + '/utxo'\n  console.log(API_PATH)\n\n  try {\n    const res = await axios.get(API_PATH)\n\n    console.log('getUTXOList', res.data)\n\n    await rateLimit()\n\n    return res.data\n\n  } catch (e) {\n\n    console.log(e)\n    await rateLimit()\n    throw new Error('Blockstream.info API access failed')\n\n  }\n}\n\n/**\n * API request all transactions for a specific address.\n * parameters: (address, network).\n * @param   {string} address    - address on network.\n * @param   {string} network    - 'testnet' or 'bitcoin' to match bitcoinjs-lib.\n * @returns {Array<object>}     -  Array of tx objects.\n */\nexport async function getAddressHistory (address: string, network: string) {\n  // https://blockstream.info/testnet/api/address/tb1qprkzdaqt5jkxrhy57ngvra8k0rvq63ulksz8cx85qwke3myhjrtq9s6nj3/txs/chain\n  // GET /address/:address/txs/chain[/:last_seen_txid]\n  // Get confirmed transaction history for the specified address/scripthash, sorted with newest first.\n  // Returns 25 transactions per page. More can be requested by specifying the last txid seen by the previous query.\n\n  // const API_PATH_TESTNET = 'https://blockstream.info/testnet/api/address/'\n  // const API_PATH_BITCOIN = 'https://blockstream.info/api/address/'\n  const CONFIRMED_PAGES_ADDON = '/txs/chain'\n\n  const API_PATH = (\n    (network === 'testnet')\n    ? API_PATH_TESTNET\n    : API_PATH_BITCOIN\n  ) + 'address/' + address + CONFIRMED_PAGES_ADDON\n\n  try {\n    const res = await axios.get(API_PATH)\n\n    console.log('blockstream.info API address history request', res)\n    return res.data\n\n  } catch (e) {\n    console.log(e)\n    throw new Error('Blockstream.info API access failed')\n  }\n}\n\n/**\n * Broadcasts content onto the blockchain.\n * parameters: (content, network).\n * @param   {string}  content  - raw hex content of transaction.\n * @param   {string}  network  - 'testnet' or 'bitcoin' to match bitcoinjs-lib.\n * @returns {string}           - Successful broadcast returns txid, otherwise error reason.\n */\nexport async function txPush (content: string, network: string) {\n\n  // const API_PATH_TESTNET =\n  //  'https://blockstream.info/testnet/api/broadcast'\n\n  // const API_PATH_BITCOIN =\n  //   'https://blockstream.info/api/broadcast'\n\n  const API_PATH =\n    (network === 'testnet')\n    ? API_PATH_TESTNET + 'broadcast'\n    : API_PATH_BITCOIN + 'broadcast'\n\n  try {\n    const res = await axios.get(API_PATH, {\n      params: {\n        tx: content\n      }\n    })\n\n    // console.log(res)\n    console.log('Broadcasted on', network)\n\n    // returns txid on success\n    return { txid: res.data }\n\n  } catch (e) {\n    console.log('Failed pushtx', network, e)\n\n    // console.log('error main message:', e.response.data)\n    return { error: e.response.data }\n  }\n}\n\n// Slow down based on rate limit.\n// Convert hz to time in milliseconds.\nasync function rateLimit () {\n  return new Promise(r => setTimeout(r, 1000.0 / API_RATE_LIMIT))\n}\n","import { IState, Dispatch, ActionTypes } from '../../interfaces'\nimport { calcP2WSH, calcOwnership } from '../../helpers/bns'\nimport { getAddressHistory, getHeight } from './../../api/blockstream'\nconst { STORE_SEARCH_RESULTS_FAIL, STORE_SEARCH_RESULTS } = ActionTypes;\n\n/**\n * Get address,\n * tx with notification address,\n * calculate owner,\n * find current owner's forwarding info,\n * send/dispatch to reducer to store important data found\n */\nexport const searchAction = async (state: IState, dispatch: Dispatch, router: any = undefined) => {\n  const domainName = state.alias + state.extension\n  // stop if no alias submitted, nothing to save to state\n  if (!state.alias) { return undefined }\n\n  // find address for this alias\n  const { notificationsAddress } = calcP2WSH(domainName, state.network)\n\n  // (TODO) should check if max length for API reached to know if to use pages & append value (25?)\n\n  try {\n\n    // 1. Get current blockheight from API so ownership is using latest possible info\n\n    const currentHeight = await getHeight(state.network)\n\n    // 2. Get API response for all tx history of this address\n    // This will grab all tx that \"notified\" this address by sending to it\n    // Upon failure error should be caught in this function\n    const notificationsTxHistory = await getAddressHistory(notificationsAddress, state.network)\n\n    // calculate bns data from this history via helper functions\n    const { notifications, ownership } = calcOwnership(\n      notificationsTxHistory,\n      domainName,\n      currentHeight,\n      state.network\n    )\n\n    // if navigated via id, use router to navigate home w/o id in url\n    if (router) { router?.push('/') }\n\n    // store data\n    return dispatch({\n      type: STORE_SEARCH_RESULTS,\n      payload: {\n        alias: state.alias,\n        notifications,\n        ownership,\n        chain: {\n          height: currentHeight\n        }\n      }\n    })\n\n  } catch (e) {\n    console.log(e)\n    // still updating the notification address\n    return dispatch({\n      type: STORE_SEARCH_RESULTS_FAIL,\n      payload: {\n        alias: state.alias,               // can save alias\n        notificationsAddress              // can save this easy derivation\n      }\n    });\n  }\n}\n\n// test address tb1qprkzdaqt5jkxrhy57ngvra8k0rvq63ulksz8cx85qwke3myhjrtq9s6nj3\n// has mixture of tx sent to it on testnet\n// https://blockstream.info/testnet/address/tb1qprkzdaqt5jkxrhy57ngvra8k0rvq63ulksz8cx85qwke3myhjrtq9s6nj3","import * as bitcoin from 'bitcoinjs-lib'\r\nimport bip39 from 'bip39'\r\n\r\n\r\n/**\r\n * Scans the address for utxo on a given network.\r\n * (In BNS would be useful for wallet and notification address)\r\n */\r\n// export const scanAddress = async (address: string, strNetwork: string) => {\r\n  // create array of utxo\r\n\r\n\r\n  // add full tx hex to that array (might take time)\r\n// }\r\n\r\n/**\r\n * Make new mnemonic for p2wpkh m/44'/0'/0'/0/0 address and WIF.\r\n * @param     {string}    strNetwork    String describing network ('bitcoin', 'testnet').\r\n * @returns   {object}                  Object { mnemonic, WIF, address } - all strings.\r\n */\r\nexport const createNewWallet = (strNetwork: string) => {\r\n  // network version. bitcoin or testnet\r\n  const network = bitcoin.networks[strNetwork]\r\n  // create backup phrase\r\n  const mnemonic = bip39.generateMnemonic()\r\n  const seedBuffer = bip39.mnemonicToSeed(mnemonic)\r\n  // create derivation master node\r\n  const masterNode = bitcoin.bip32.fromSeed(seedBuffer, network)\r\n  // derive m/44'/0'/0'/0 /0 node\r\n  const childNode0 = masterNode.derivePath(\"m/44'/0'/0'\").derivePath(\"0/0\")\r\n  // get private key in wallet import format for that child node\r\n  const WIF = childNode0.toWIF()\r\n  // derive a standard p2wpkh address from that WIF\r\n  const keyPair = bitcoin.ECPair.fromWIF(WIF, network)\r\n  const address = bitcoin.payments.p2wpkh({ pubkey: keyPair.publicKey, network }).address\r\n\r\n  return { mnemonic, WIF, address }\r\n}\r\n\r\n/**\r\n * Load p2wpkh m/44'/0'/0'/0/0 wallet info from mnemonic.\r\n * @param     {string}    strMnemonic     Mnemonic string of 12 words as described in bip39.\r\n * @param     {string}    strNetwork      String describing network ('bitcoin', 'testnet').\r\n * @returns   {object}                    Object { mnemonic, WIF, address } - all strings.\r\n */\r\nexport const loadWallet = (strMnemonic: string, strNetwork: string) => {\r\n  // network version. bitcoin or testnet\r\n  const network = bitcoin.networks[strNetwork]\r\n  const seedBuffer = bip39.mnemonicToSeed(strMnemonic)\r\n  // create derivation master node\r\n  const masterNode = bitcoin.bip32.fromSeed(seedBuffer, network)\r\n  // derive m/44'/0'/0'/0 /0 node\r\n  const childNode0 = masterNode.derivePath(\"m/44'/0'/0'\").derivePath(\"0/0\")\r\n  // get private key in wallet import format for that child node\r\n  const WIF = childNode0.toWIF()\r\n  // derive a standard p2wpkh address from that WIF\r\n  const keyPair = bitcoin.ECPair.fromWIF(WIF, network)\r\n  const address = bitcoin.payments.p2wpkh({ pubkey: keyPair.publicKey, network }).address\r\n\r\n  return { mnemonic: strMnemonic, WIF, address }\r\n}\r\n\r\n\r\n//\r\n/**\r\n * Parse UTXO array to get total unspent balance in satoshi.\r\n * @param     {Array}    utxoArray      Array of UTXO objects with '.value' field in satoshi.\r\n * @returns   {number}                  Total number of unspent satoshi.\r\n */\r\nexport function getUnspentSum(utxoArray: Array<any>): number {\r\n\r\n  const sumSats = utxoArray?.reduce(\r\n    (sum: number, utxo: any) => sum + utxo.value\r\n    , 0) || 0\r\n\r\n  return sumSats\r\n}","import { IState, Dispatch } from '../../interfaces'\nimport { ActionTypes } from './../../interfaces'\n\nimport { createNewWallet, loadWallet } from './../../helpers/bitcoin'\n\nconst { NEW_WALLET } = ActionTypes;\n\n/**\n * Create new wallet address & backup.\n * If mnemonic is provided, wallet is generated from that.\n */\nexport const createNewWalletAction = async (\n  state: IState, dispatch: Dispatch, strMnemonic: string = ''\n) => {\n\n  // load all the wallet info from mnemonic or generate new random mnemonic to do it\n  const { mnemonic, WIF, address } = (\n    (strMnemonic === '')\n      ? createNewWallet(state.network)\n      : loadWallet(strMnemonic, state.network)\n  )\n\n  return dispatch({\n    type: NEW_WALLET,\n    payload: { mnemonic, WIF, address }\n  })\n}","import { IState, Dispatch, ActionTypes } from '../../interfaces'\nconst { CHANGE_PAGE_INFO } = ActionTypes;\n\n\n/**\n * Request to change page info that's checked for validity here\n */\nexport const changePageInfoAction = async (state: IState, dispatch: Dispatch, page: number) => {\n  // for now no checks\n\n  const { pageInfo } = state\n  pageInfo.current = page\n\n  return dispatch({\n    type: CHANGE_PAGE_INFO,\n    payload: pageInfo\n  })\n}","import { IState, Dispatch, ActionTypes } from '../../interfaces'\nimport { calcP2WSH, calcOwnership } from '../../helpers/bns'\nimport { getAddressHistory, getUTXOList, addRawTxToArray, getHeight } from '../../api/blockstream'\nconst { UPDATE_WALLET, UPDATE_NOTIFICATION_ADDRESS, ACTION_FAIL } = ActionTypes\n\n/**\n * Scans the address for utxo on a given network (w/ API).\n * Add hex of each tx that created utxo (for psbt).\n * addressType is one of enums ActionTypes that's either UPDATE_WALLET or UPDATE_NOTIFICATION.\n * If scanning wallet, then update wallet state.\n * If scanning notification address, then update notification state.\n * Notification scan will reproduce address scan first before getting details.\n */\nexport const scanAddressFullyAction = async (\n  state: IState,\n  dispatch: Dispatch,\n  addressType: ActionTypes\n) => {\n  const domainName = state.alias + state.extension\n\n  // wallet address scan\n  if (addressType === UPDATE_WALLET) {\n    // wallet address\n\n    try {\n\n      // 1. get address TX history\n\n      const walletAddress = state.wallet.address\n      const walletTxHistory = await getAddressHistory(walletAddress, state.network)\n\n      // 2. get address UTXO list (could also calculate from tx history or API)\n\n      const utxoListWalletAddress = await getUTXOList(walletAddress, state.network)\n\n      // 3. get raw tx for each UTXO (psbt requirement...)\n\n      const { arrayUtxoWithHex, erroredOutputs } = await addRawTxToArray(utxoListWalletAddress, state.network)\n\n      console.log({ walletAddress, walletTxHistory, utxoListWalletAddress, arrayUtxoWithHex, erroredOutputs })\n\n      return dispatch({\n        type: addressType,\n        payload: {\n          wallet: {\n            txHistory: walletTxHistory,\n            utxoList: arrayUtxoWithHex\n          }\n        }\n      })\n\n    } catch (e) {\n      console.log('Wallet address scan failed')\n      console.log(e)\n      // abort\n      return dispatch({\n        type: ACTION_FAIL,\n        payload: {}\n      });\n    }\n  }\n\n  // notification address scan\n  if (addressType === UPDATE_NOTIFICATION_ADDRESS) {\n\n\n    try {\n\n      // 1. get current blockheight from API so ownership is using latest possible info\n\n      const currentHeight = await getHeight(state.network)\n\n      // 2. get address TX history\n\n      const { notificationsAddress } = calcP2WSH(domainName, state.network)\n      const notificationsTxHistory = await getAddressHistory(notificationsAddress, state.network)\n      const { notifications, ownership } = calcOwnership(\n        notificationsTxHistory,\n        domainName,\n        currentHeight,\n        state.network\n      )\n\n      // 3. get address UTXO list (could also calculate from tx history or API)\n\n      const utxoListNotificationAddress = await getUTXOList(notificationsAddress, state.network)\n\n      // 4. get raw tx for each UTXO (psbt requirement...)\n\n      const { arrayUtxoWithHex, erroredOutputs } = await addRawTxToArray(utxoListNotificationAddress, state.network)\n\n      console.log({ notifications, ownership, utxoListNotificationAddress, arrayUtxoWithHex, erroredOutputs })\n\n      return dispatch({\n        type: addressType,\n        payload: {\n          notifications: {\n            address: notificationsAddress,\n            txHistory: notifications.txHistory, // sorted\n            utxoList: arrayUtxoWithHex\n          },\n          ownership: {\n            ...ownership\n          },\n          chain: {\n            height: currentHeight\n          }\n        }\n      })\n\n    } catch (e) {\n      console.log('Notification address scan failed')\n      console.log(e)\n      // abort\n      return dispatch({\n        type: ACTION_FAIL,\n        payload: {}\n      });\n    }\n\n  }\n\n  throw new Error('unexpected address type')\n}","import React from 'react'\nimport { Store } from './../../store'\nimport { Link } from 'react-router-dom'\n\nimport styles from './SearchResults.module.css'\nimport timeDiff from './../../helpers/timediff'\nimport { OWNERSHIP_DURATION_BY_BLOCKS, interpretFw, findLatestForwards } from '../../helpers/bns/'\n\n\nexport const SearchResults = () => {\n  const { state } = React.useContext(Store)\n\n  // calc time left in ownership\n  const diff = timeDiff(\n    state.ownership.current.winTimestamp, // this is 0 when nothing found\n    OWNERSHIP_DURATION_BY_BLOCKS\n  )\n\n  // account expires or expired information\n  const expirationMsg = () => {\n    // abort if no known ownership history\n    if (state.ownership.current.winTimestamp === 0) { return ('') }\n    return (\n      <div\n        className={ diff.expired ? styles.expired : styles.notExpired }\n      >\n        {(diff.expired\n          ? 'expired ' + diff.dh + ' ago'\n          : 'expires in ' + diff.dh\n        )}\n      </div>\n    )\n  }\n\n  // calculate latest forwards\n  const latestForwards = findLatestForwards(state.ownership.current.forwards)\n\n  return (\n    <>\n      <div className={ styles.wrapper }>\n        <div\n          className={ styles.describe }\n        >\n          { latestForwards.length } matches on { state.network } {'  '}\n          { expirationMsg() }\n        </div>\n        <div className={ styles.listContainer } >\n          {(diff.expired) && (\n            <Link\n              to='/create'\n              className={ styles.createLink }\n            >\n              Domain available!\n            </Link>\n          )}\n        </div>\n        <div className={ styles.listContainer } >\n          {\n            latestForwards.map(fw => {\n              const ifw = interpretFw(fw)\n              if (ifw.render) {\n                return (\n                  <a\n                    key={ fw.network }\n                    className={ styles.listItem }\n                    href={ ifw?.link }\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <span className={ styles.key }>{ ifw.where }</span>\n                    { ifw.what }\n                  </a>\n                )\n              } else {\n                return ('')\n              }\n            })\n          }\n        </div>\n      </div>\n    </>\n  )\n}\n","\n/**\n * Returns strings of time between inTimeStampS in seconds after blocksDuration number of blocks (assuming 10 minutes ea) and current time.\n */\nexport default function timeDiff (inTimeStampS: number, blocksDuration: number) {\n  // N of blocks to ms, approximation\n  const blocksTime = blocksDuration * 10 * 60 * 1000\n  // Time left until expiration of ownership, approximation\n  let diff = (inTimeStampS * 1000) + blocksTime - Date.now()\n  // write down ms of it\n  const msDifference = diff\n  // note sign\n  const expired = (diff <= 0)\n  // mod away higher time frames\n  diff = Math.abs(diff)\n  const d = Math.floor(diff / (1000 * 60 * 60 * 24))\n  diff -= d * (1000 * 60 * 60 * 24) // remove days\n  const h = Math.floor(diff / (1000 * 60 * 60)) % 24\n  diff -= h * (1000 * 60 * 60) // remove hours\n  const m = Math.floor(diff / (1000 * 60)) % 60\n  return {\n    dhm: `${d} days ${h} hours ${m} min`,\n    dh: `${d} days ${h} hours`,\n    expired,\n    msDifference\n  };\n}","  // take array of all forwards for owner and return array with only latest forwards\nexport const findLatestForwards = (forwards: Array<any>) => {\n  // simplest would be to go through object where keys of cloned network would overwrite\n  // sort first for simplicity\n  const sortedForwards = [...forwards].sort((prev, next) => {\n    // sorts by index proportional to block height and time\n    const prevHeight = prev.updateHeight\n    const nextHeight = next.updateHeight\n    return prevHeight - nextHeight\n  })\n  // now just overwrite values for same networks in order of sorted array\n  const currentNetworks: {[key: string]: any} = {}\n  sortedForwards.forEach(eaForward => {\n    currentNetworks[eaForward.network] = eaForward\n  })\n  // return just array of values, networks still part of values as well\n  return Object.values(currentNetworks)\n}\n","/**\n * Reads a single forward info object to interpret its values\n * as where the forwarding address should be used, what it is, and what link to use.\n * Returns {what: string, where: string, link: string, render: boolean}.\n */\nexport function interpretFw (\n  fw: { network: string, address: string, updateHeight: number, updateTimestamp: number }\n) {\n  // blank address means it was removed\n  if (fw.address === '') {\n    return {\n      render: false\n    }\n  }\n\n  if (fw.network === 'p2wsh' || fw.network === 'btc') {\n    return {\n      where: 'btc:',\n      what: (\n        fw.address\n      ),\n      link: (\n        'https://blockstream.info/address/' + fw.address\n      ),\n      render: true\n    }\n  }\n\n  if (fw.network === 'http' || fw.network === 'https' || fw.network === 'url' || fw.network === 'web') {\n    return {\n      where: 'https://',\n      what: fw.address,\n      link: 'https://' + fw.address,\n      render: true\n    }\n  }\n\n  if (fw.network === 'twitter') {\n    return {\n      where: 'twitter.com/',\n      what: fw.address,\n      link: 'https://twitter.com/' + fw.address,\n      render: true\n    }\n  }\n\n  if (fw.network === 'github') {\n    return {\n      where: 'github.com/',\n      what: fw.address,\n      link: 'https://github.com/' + fw.address,\n      render: true\n    }\n  }\n\n  if (fw.network === 'youtube') {\n    return {\n      where: 'youtu.be/',\n      what: fw.address,\n      link: 'https://www.youtube.com/watch?v=' + fw.address,\n      render: true\n    }\n  }\n\n  // if unknown forward network, no link, and the rest is shown as is\n  return {\n    where: fw.network,\n    what: fw.address,\n    link: undefined,\n    render: true\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport { RoundButton } from './../general/RoundButton'\nimport { Store } from './../../store/'\nimport { searchAction, changeAliasAction } from './../../store/actions/'\nimport { SearchResults } from './../SearchResults'\nimport styles from './HomeContent.module.css'\n\nexport const HomeContent = (props: any): JSX.Element => {\n  const { state, dispatch } = React.useContext(Store)\n\n  // if page is loaded with #/id/:alias format\n  // this will change alias to that one\n  // then it will navigate to '/'\n  // and then it will do search with new alias\n  // http://localhost:3000/#/id/satoshi\n  const alias = props?.match?.params?.alias\n  if (alias) {\n    searchAction({...state, alias}, dispatch, props.history)\n  }\n\n  // put the textarea (by ref) into focus on mount and move caret to end\n  const inputEl = useRef<HTMLTextAreaElement>(null)\n  useEffect(() => {\n    if (inputEl && inputEl.current) {\n      inputEl.current.selectionEnd = inputEl.current.value.length\n      inputEl.current.selectionStart = inputEl.current.value.length\n      inputEl.current.focus()\n    }\n  }, [])\n\n  const placeHolder = 'satoshi'\n  return (\n    <>\n      <div className={ [styles.lblMainTitle, styles.noselect].join(' ') }>\n        <span>Bitcoin</span> Name System\n      </div>\n      <div className={ styles.divSearch }>\n        <textarea\n          id=\"txtSearch\"\n          className={ styles.txtSearch }\n          cols={ 30 }\n          rows={ 1 }\n          spellCheck={ false }\n          value={ state.alias }\n          placeholder={ placeHolder }\n          ref={ inputEl }\n          onChange={e => changeAliasAction(state, dispatch, e?.target?.value)}\n          onKeyPress={e => { e.key === 'Enter' && searchAction(state, dispatch) }}\n        ></textarea>\n        <RoundButton\n          sizebutton='2.6'\n          onClick={ () => searchAction(state, dispatch) }\n        >\n          .btc\n        </RoundButton>\n      </div>\n      <div style={{ display: state.notifications.address ? 'block' : 'none' }}>\n        <SearchResults />\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { HomeContent } from './../components/HomeContent'\n\nconst Home = (props: any): JSX.Element => {\n  return (\n    <>\n      <HomeContent { ...props } />\n    </>\n  )\n}\nexport default Home","import React from 'react'\nimport { Store } from './../../store/'\nimport styles from './AboutContent.module.css'\n\nexport const AboutContent = () => {\n  const { state } = React.useContext(Store)\n\n  return (\n    <>\n      <div>\n        About page\n      </div>\n      <div className={ styles.wrapper }>\n        <pre>\n          { JSON.stringify({ ...state }, null, 2) }\n        </pre>\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { AboutContent } from './../components/AboutContent'\n\nexport default function About(): JSX.Element {\n  return (\n    <>\n      <AboutContent />\n    </>\n  )\n}\n\n// for lazy loading:\n// const RoundButton = React.lazy<any>(() => import('../components/RoundButton')\n// <React.Suspense\n//   fallback={\n//     <div>loading...</div>\n//   }\n// >\n// </React.Suspense>\n","import React, { useState } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P1RestoreOrBackup.module.css'\nimport { createNewWalletAction, changePageInfoAction } from '../../../store/actions/'\n\nimport { Store } from './../../../store/'\n\nenum pages {\n  ROOT,\n  NEW_WALLET,\n  LOAD_BACKUP\n}\n\n// restore backup or create new\nexport const P1RestoreOrBackup = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n  const [ page, setPage ] = useState(pages.ROOT) // local state\n  const [ backup, setBackup ] = useState('') // local state\n\n  return (\n    <div className={ styles.wrapper }>\n      {/* ROOT PAGE */}\n      <div\n        style={{ display: page === pages.ROOT ? 'block' : 'none' }}\n      >\n        <div\n          className={ styles.title }\n        >\n          Need <span className={styles.Orange}>BTC</span> address to control<br />\n          the domain name\n        </div>\n        <div\n          className={ styles.buttonWrapper }\n        >\n          <RoundButton\n            show={ (state.wallet.mnemonic.length > 0) ? 'false' : 'true' }\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n              createNewWalletAction(state, dispatch)\n            }}\n          >\n            I need a new wallet\n          </RoundButton>\n          <RoundButton\n            show={ (state.wallet.mnemonic.length > 0) ? 'true' : 'false' }\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n            }}\n          >\n            Current backup\n          </RoundButton>\n          <RoundButton\n            onClick={() => {\n              setPage(pages.LOAD_BACKUP)\n            }}\n          >\n            Restore from backup\n          </RoundButton>\n          <RoundButton\n            show={ (!!state.wallet?.address).toString() }\n            onClick={() => {\n              changePageInfoAction(state, dispatch, 2)\n            }}\n            next='true'\n            colorbutton={'var(--colorHighlight)'}\n          >\n            Don't change wallet\n          </RoundButton>\n        </div>\n      </div>\n      {/* NEW_WALLET PAGE */}\n      <div\n        className={ styles.contentWrapper }\n        style={{ display: page === pages.NEW_WALLET ? 'flex' : 'none' }}\n      >\n        <div className={ styles.describe }>\n          Randomly generated for domain control\n          <br /><br />\n          Backup this private phrase\n          or you will lose access\n        </div>\n        <div\n          id='divBackup'\n          spellCheck={ false }\n          className={ styles.backup }\n          onClick={ () => {\n            // select div entire contents\n            const thisDiv = document?.getElementById('divBackup')\n            if (thisDiv) {\n              window.getSelection()?.selectAllChildren(thisDiv)\n            }\n          }}\n        >\n          { state.wallet.mnemonic }\n        </div>\n        <div className={ styles.buttonWrapper } >\n          <RoundButton\n            onClick={() => {\n              setPage(pages.ROOT)\n            }}\n            back='true'\n          >\n            Back\n          </RoundButton>\n          <RoundButton\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n              createNewWalletAction(state, dispatch)\n            }}\n          >\n            New\n          </RoundButton>\n          <RoundButton\n            next='true'\n            onClick={() => {\n              changePageInfoAction(state, dispatch, 2)\n            }}\n          >\n            I'm done with backup\n          </RoundButton>\n        </div>\n      </div>\n      {/* LOAD_BACKUP PAGE */}\n      <div\n        style={{ display: page === pages.LOAD_BACKUP ? 'block' : 'none' }}\n      >\n        <div className={ styles.describe }>\n          Paste backup here (TODO: no validity checks yet)\n        </div>\n        <textarea\n          className={ styles.restoreBackup }\n          cols={ 30 }\n          rows={ 3 }\n          spellCheck={ false }\n          placeholder={ '12 words' }\n          onChange={e => setBackup(e.target.value)}\n        ></textarea>\n        <div className={ styles.buttonWrapper } >\n          <RoundButton\n            onClick={() => {\n              setPage(pages.ROOT)\n            }}\n            back='true'\n          >\n            Back\n          </RoundButton>\n          <RoundButton\n            // 12 words minimum separated by spaces (TODO): proper checks\n            show={ (backup.split(' ').length >= 12) ? 'true' : 'false' }\n            next='true'\n            onClick={() => {\n              createNewWalletAction(state, dispatch, backup)\n              changePageInfoAction(state, dispatch, 2)\n            }}\n          >\n            Done\n          </RoundButton>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","import React, { useEffect, useState } from 'react'\nimport styles from './CreateHeader.module.css'\nimport { Store } from './../../../store/'\n\n\n\n// restore backup or create new\nexport const CreateHeader = () => {\n  const { state } = React.useContext(Store) // global state\n\n  // get window width in component instance state 'width'\n  // so can resize alias based on char count\n  const [ width, setWidth ] = useState(window.innerWidth)\n  useEffect(() => {\n    const resize = () => { setWidth(window.innerWidth) }\n    window.addEventListener('resize', resize);\n    return () => window.removeEventListener('resize', resize);\n  }, [])\n  const domainName = state.alias + state.extension\n  const fontScale = Math.min(\n      Math.floor(1.3 * width / domainName.length),\n      Math.floor(1.3 * width / 20)\n  )\n\n  return (\n    <>\n      <div\n        className={ styles.bar }\n        style={{ top: (-0.10 * width - 0.4 * fontScale).toString() + 'px' }}\n      />\n      <div\n        className={ styles.wrapper }\n        style={{ marginTop: (0.03 * width - 0.3 * fontScale).toString() + 'px' }}\n      >\n        <span\n          className={ styles.alias }\n          style={{ fontSize: fontScale.toString() + 'px' }}\n        >{ state.alias }</span>\n        <span\n          className={ styles.ext }\n          style={{ fontSize: fontScale.toString() + 'px' }}\n        >{ state.extension }</span>\n      </div>\n      <div className={ styles.spacer } />\n    </>\n  )\n}\n\n","import React, { useState, useEffect } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P2LoadWallet.module.css'\nimport { Store } from '../../../store'\nimport { changePageInfoAction } from '../../../store/actions'\nimport qr from 'qrcode'\n\n/**\n * Load wallet page, including faucet link for testnet users\n */\nexport const P2LoadWallet = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n\n  // load QR code into local state\n  const [ qrCode, setQrCode] = useState()\n  useEffect(() => {\n    qr.toDataURL(state.wallet.address, { type: 'image/jpeg' }, (err: any, url: any) => {\n      if (!err) { setQrCode(url) }\n    })\n  }, [state.wallet.address])\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.contentWrapper }>\n        <div\n          className={ styles.imgQr }\n        >\n          {/* downloadable */}\n          <img src={qrCode} alt={'QR Code'} />\n        </div>\n        <div>\n          Fund your wallet to control domain.\n        </div>\n        <div className={ styles.address }>\n          { state.wallet.address }\n        </div>\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 1)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          colorbutton={'var(--colorHighlight)'}\n          show={ (state.network === 'testnet').toString() }\n          onClick={ () => {\n            // open faucet page in new window\n            // segwit compatible:\n            // 1) https://testnet-faucet.mempool.co/\n            // 2) https://bitcoinfaucet.uo1.net/\n            window.open('https://bitcoinfaucet.uo1.net/', '_blank')\n            // window.open('https://testnet-faucet.mempool.co/', '_blank')\n          }}\n        >\n          Testnet: tBTC faucet\n        </RoundButton>\n        <RoundButton\n          onClick={ () => {\n            // open blockstream explorer for address in new window/tab\n            const pathEdit = (state.network === 'testnet') ? 'testnet/' : ''\n            window.open(\n              `https://blockstream.info/${pathEdit}address/${state.wallet.address}`\n            , '_blank')\n          }}\n        >\n          Open explorer\n        </RoundButton>\n        <RoundButton\n          next='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 3)\n          }}\n        >\n          Ready\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P3DomainAndWallet.module.css'\nimport { Store } from '../../../store'\nimport { changePageInfoAction } from '../../../store/actions'\nimport { scanAddressFullyAction } from './../../../store/actions'\nimport { ActionTypes } from './../../../interfaces'\nimport { getUnspentSum } from './../../../helpers/bitcoin'\n\n/**\n * Bid on network\n */\nexport const P3DomainAndWallet = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n\n  // Local state: keep track if API is busy\n  const [ apiStatus, setApiStatus ] = React.useState('ok')\n\n  // on state update detected by timestamp, reset api status\n  React.useEffect(() => { setApiStatus('ok') }, [ state.lastTimeStamp ])\n\n  // most important for domain notificaiton address is the transaction history to know ownership\n  // but also the current utxo in case we want to control the domain\n  const domainInfo = () => {\n    if (state.notifications.checkedHistory && state.notifications.checkedUtxo) {\n      return ('✓')\n    } else {\n      return ('needs scan')\n    }\n  }\n\n  // wallet needs utxo info including raw tx & tx history for nonce\n  const walletInfo = () => {\n    if (state.wallet.checkedHistory && state.wallet.checkedUtxo) {\n      return ( '✓' )\n    } else {\n      return ('needs scan')\n    }\n  }\n\n  // are all necessary scans done\n  const areScansDone = () => {\n    return (\n      state.wallet.checkedUtxo &&\n      state.wallet.checkedHistory &&\n      state.notifications.checkedUtxo &&\n      state.notifications.checkedHistory\n    )\n  }\n\n  // Conditions to enable next pages.\n  // if owner - full control\n  // if domain available - bid\n  // if not owner, warn user\n  // (TODO) if auction period, challenge bids\n  const readyStatus = () => {\n    if (!areScansDone()) {\n      // needs scans\n      return { isReady: false,  type: 'missing', info: 'Scan both to move on' }\n    }\n    const ownerAddress = state.ownership.current.address;\n    const walletAddress = state.wallet.address;\n    const isWalletAddress = (walletAddress !== '')\n    const isDomainAvailable = (ownerAddress === '')\n    const isWalletTheOwner = (walletAddress === ownerAddress)\n    if (!isWalletAddress) {\n      return { isReady: false,  type: 'nowallet', info: 'No wallet loaded' }\n    }\n    if (isWalletTheOwner && !isDomainAvailable) {\n      return { isReady: true,   type: 'owner',    info: 'Your domain ready' }\n    }\n    if (!isWalletTheOwner && isDomainAvailable) {\n      return { isReady: true,   type: 'open',     info: 'Domain is available' }\n    }\n    if (!isWalletTheOwner && !isDomainAvailable) {\n      return { isReady: false,  type: 'taken',    info: 'Not your domain' }\n    }\n    console.log('Unknown status of ownership', ownerAddress, walletAddress, isWalletAddress, isDomainAvailable, isWalletTheOwner)\n    return { isReady: false,    type: 'unknown',  info: '' }\n  }\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Wallet and domain history needed. <br />\n        (No offline method yet)\n      </div>\n      <div className={ styles.domainInfo }>\n        { (apiStatus !== 'domain')  && 'Domain ' + domainInfo() }\n        { (apiStatus === 'domain')  && 'Domain scanning...' }\n      </div>\n      <div className={ styles.domainButton }>\n        <RoundButton\n          onClick={ () => {\n            if (apiStatus === 'ok') {\n              setApiStatus('domain')\n              scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_NOTIFICATION_ADDRESS)\n            }\n          }}\n        >\n          API Scan\n        </RoundButton>\n      </div>\n      <div className={ styles.walletInfo }>\n        { (apiStatus !== 'wallet')  && 'Wallet ' + walletInfo() }\n        { (apiStatus === 'wallet') && 'Wallet scanning...' }\n      </div>\n      <div className={ styles.walletButton }>\n        <RoundButton\n          onClick={ () => {\n            if (apiStatus === 'ok') {\n              setApiStatus('wallet')\n              scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_WALLET)\n            }\n          }}\n        >\n          API Scan\n        </RoundButton>\n      </div>\n      <div className={ styles.unspent }>\n        <div className={ styles.balance }>\n          { state.wallet.checkedUtxo? (getUnspentSum(state.wallet.utxoList) / 1e8).toFixed(8) : 'n/a' }\n        </div>\n        { (state.network === 'testnet') ? ' tBTC' : ' BTC' }\n      </div>\n      <div className={ styles.ownership }>\n        { readyStatus().info }\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 2)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          show={ readyStatus().isReady ? 'true' : 'false' }\n          next='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 4)\n          }}\n        >\n          Ready\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n\n","import React, { useEffect } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P4ClaimDomain.module.css'\nimport { Store } from '../../../store'\nimport { changePageInfoAction } from '../../../store/actions'\n\nimport { calcBidDomainTx } from '../../../helpers/bns/'\n\n/**\n * Bid on network\n */\nexport const P4ClaimDomain = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n\n  // array of network:forwardingAddress objects\n  const forwards = state.ownership.current.forwards.slice().reverse()\n\n  // local state for data to embed (content inside textboxes for network/address)\n  const [customAdd, setCustomAdd] = React.useState({network: '', address: '' })\n\n  // local state for all data to embed\n  const [data, setData] = React.useState({} as { [key: string]: string })\n\n  // local state for tx hex\n  const [tx, setTx] = React.useState({ hex: '', txid: '' })\n\n  // calculate tx (on mount or changes in global state or local data to embed)\n  useEffect(() => {\n    // combine forwards into a string for the tx\n    const combineForwards = (objForwards: any) => {\n      let forwardsString = ''\n      Object.keys(objForwards).forEach(fwNetwork => {\n        forwardsString += fwNetwork + ' ' + objForwards[fwNetwork] + ' '\n      })\n      if (forwardsString.length > 0) { forwardsString = forwardsString.slice(0, -1) }\n      console.log('string to embed:', '\"' + forwardsString + '\"')\n      return forwardsString\n    }\n\n    setTx(\n      calcBidDomainTx(\n        combineForwards(data),\n        state.wallet,\n        state.alias + state.extension,\n        state.settings.feeRate,\n        state.notifications.txHistory,\n        state.network\n      )\n    )\n  }, [state, data])\n\n  console.log(tx)\n\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Add new forwarding changes\n      </div>\n      <div className={ styles.changes }>\n        { (Object.keys(data).length === 0) && 'Nothing added yet' }\n        { Object.keys(data).map((fwNetwork) => {\n          return (\n            <div\n              className={ styles.updateItem }\n              key={ fwNetwork }\n              onClick={ () => {\n                setCustomAdd({ network: fwNetwork, address: data[fwNetwork] })\n              } }\n            >\n              <div\n                className={ styles.updateInfo }\n              >\n                {\n                  (data[fwNetwork] !== '')\n                    ? (<>\n                      Updating forwarding on <span>{ fwNetwork }</span> network to address of <span>{ data[fwNetwork] }</span>\n                    </>)\n                    : (<>Deleting previously set forwarding information for <span>{ fwNetwork }</span> network</>)\n                }\n              </div>\n              <div\n                className={ ['btnCircle', styles.updateCancel].join(' ') }\n                onClick={ (e) => {\n                  const newData = { ...data }\n                  delete newData[fwNetwork]\n                  setData(newData)\n                  e.stopPropagation()\n                } }\n              >\n                <span>×</span>\n              </div>\n            </div>\n          )\n        }) }\n      </div>\n      <div className={ styles.editor } >\n        { (customAdd.network.length > 0) && <div\n          className={ [styles.btnDelete, 'canPress'].join(' ') }\n          onClick={ () => {\n            setData({\n              ...data,\n              [customAdd.network]: ''\n            })\n            setCustomAdd({ network: '', address: '' })\n          } }\n        >\n          Delete\n        </div> }\n        <textarea\n          spellCheck={ false }\n          value={ customAdd.network }\n          className={ styles.editorNetwork }\n          placeholder={ 'network' }\n          onChange={ (e) => {\n            setCustomAdd({ ...customAdd, network: e.target.value })\n          } }\n        ></textarea>\n        <textarea\n          spellCheck={ false }\n          value={ customAdd.address }\n          className={ styles.editorAddress }\n          placeholder={ 'address on network' }\n          onChange={ (e) => {\n            setCustomAdd({ ...customAdd, address: e.target.value })\n          } }\n        ></textarea>\n        <div\n          className={ ['btnCircle', styles.btnAdd, 'canPress'].join(' ') }\n          onClick={ () => {\n            setData({\n              ...data,\n              [customAdd.network]: customAdd.address\n            })\n            setCustomAdd({ network: '', address: '' })\n          } }\n        >\n          <span>+</span>\n        </div>\n      </div>\n      <div className={ styles.pastList } >\n        { forwards.map((fw: any, i: number) => {\n          return (\n            <div\n              className={ styles.pastPair }\n              key={ i }\n              onClick={ () => {\n                setCustomAdd({ network: fw.network, address: fw.address })\n              } }\n            >\n              <div className={ styles.pastNetwork } >\n                { fw.network }\n              </div>\n              <div className={ styles.pastAddress } >\n                { fw.address }\n              </div>\n            </div>\n          )\n        }) }\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 3)\n          }}\n        >\n          Back\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n\n// const dummyChanges = {\n//   longaddresscentral: 'banananannananananaananannaaannananannaanannananannananannanananan3456abcdefghi',\n//   thisisaverylongnetworknamethisisaverylongnetworknamethisisaverylongnetworkname: 'lol',\n//   http: '',\n//   imgur: 'abcde.jpg'\n// }","import React from 'react'\nimport { Store } from './../../store/'\nimport { P1RestoreOrBackup } from '../CreateSteps/P1RestoreOrBackup'\nimport { P2LoadWallet } from '../CreateSteps/P2LoadWallet'\nimport { P3DomainAndWallet } from '../CreateSteps/P3DomainAndWallet'\nimport { P4ClaimDomain } from '../CreateSteps/P4ClaimDomain'\nimport styles from './CreateNavigator.module.css'\n\n/**\n * Handle navigation of alias manipulation\n */\nexport const CreateNavigator = () => {\n  const { state } = React.useContext(Store) // global state\n\n  const page = state.pageInfo?.current\n  return (\n    <div className={ [styles.wrapper, 'scrollbar'].join(' ') }>\n      { (page === 1) && <P1RestoreOrBackup /> }\n      { (page === 2) && <P2LoadWallet /> }\n      { (page === 3) && <P3DomainAndWallet /> }\n      { (page === 4) && <P4ClaimDomain /> }\n\n      { (!page) && console.log('Unknown Page') }\n    </div>\n  )\n}\n","import React from 'react'\nimport { CreateHeader } from './../components/CreateSteps/CreateHeader'\nimport { CreateNavigator } from './../components/CreateNavigator'\n\n/**\n * Combine header & body components for alias manipulation\n */\nexport default function Create () {\n  // const verticalShift: React.CSSProperties = {\n  //   padding: '0',\n  //   margin: '0',\n  //   overflowY: 'auto',\n  //   height: 'calc(100vh - 17vw - calc(9 * var(--s)))'\n  // }\n\n  return (\n    <>\n      <CreateHeader />\n      {/* <div style={verticalShift}> */}\n      <CreateNavigator />\n      {/* </div> */}\n    </>\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styles from './Navbar.module.css'\n\nexport const Navbar = (): JSX.Element => {\n  return (\n    <>\n      <div\n        className={ styles.warning }\n      >\n        FOR TESTING, DO NOT USE\n      </div>\n      <div\n        className={ styles.root }\n      >\n        <a\n          href=\"https://github.com/ildarmgt/BitcoinNameSystem\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {'source'}\n        </a>\n        <Link to='/about'>about</Link>\n        <Link to='/create'>owners</Link>\n        <Link to='/'>search</Link>\n      </div>\n    </>\n  )\n}\n\n// Hash history cannot PUSH the same path; a new entry will not be added to the history stack\n// Only issue is the warning in console, but that only exists in development mode so can be ignored.","import React from 'react';\nimport { Route, Switch } from 'react-router-dom'\nimport Home from './pages/Home'\nimport About from './pages/About'\nimport Create from './pages/Create'\nimport { Navbar } from './components/Navbar'\n\n// using for routing\nconst App = (): JSX.Element => {\n  // onbtc.me?satoshi can now forward to onbtc.me/#/id/satoshi which resets to onbtc.me after search\n  // redirect to auto searching path routed in return and remove query from url\n  const searchParam = (new URLSearchParams(window.location.search)).keys().next().value\n  searchParam && console.log('search param detected after ?', searchParam)\n  // no forward slash before # in string is vital\n  searchParam && window.history.pushState({}, '', window.location.pathname + '#/id/' + searchParam)\n\n  return (\n    <>\n      {/* switch only renders first match instead of all matches */}\n      <Switch>\n        <Route path='/id/:alias' component={Home} />\n        <Route exact path='/id/' component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/create\" component={Create} />\n        <Route path='/:noise' component={Home} />\n        <Route exact path='/' component={Home} />\n      </Switch>\n      <Navbar />\n      {/* <Route exact path=\"/\" render={() => <Home />} /> */}\n    </>\n  );\n}\nexport default App;\n","import React, { useState, useEffect } from 'react'\nimport styles from './DevPanel.module.css'\nimport { Store } from '../../store/'\nimport { ActionTypes } from './../../interfaces/'\nconst json = require('./../../utils/test.json');\n\ninterface IState {\n  blShow: boolean\n  setShow: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nexport const DevPanel = (props: any): JSX.Element => {\n  const { state, dispatch } = React.useContext(Store) // global state\n\n  // store if DevPanel is hidden\n  const [hidden, setHidden] = useState<boolean>(false);\n\n  // reruns to reattach keyup event to toggle hidden class\n  useEffect(() => {\n    const onDevKey = (e: any) => {\n      if (e.key === '`') {\n        setHidden(!hidden)\n      } else {\n        // give focus back to the input bar\n        if (document.activeElement?.id !== 'txtSearch') {\n          const txtSearch = document.getElementById('txtSearch') as HTMLTextAreaElement\n          txtSearch?.focus()\n        }\n      }\n    }\n    document.addEventListener('keyup', onDevKey)\n    return () => {\n      document.removeEventListener('keyup', onDevKey)\n    }\n  }, [hidden])\n\n  const onOutlineClick = () => {\n    const id: string = 'outliner';\n    const sheet: HTMLElement | null = document.getElementById(id);\n    if (!sheet) {\n      const outlineCss = '* {box-shadow: 0 0 0 1px red;}'\n      const style = document.createElement('style')\n      style.type = 'text/css'\n      style.id = id\n      style.appendChild(document.createTextNode(outlineCss))\n      document.head.appendChild(style)\n    } else {\n      sheet.parentNode?.removeChild(sheet)\n    }\n  }\n\n  const dlState = () => {\n    let data = \"text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(state))\n    let a = document.createElement('a')\n    a.href = 'data:' + data\n    a.download = 'test.json'\n    a.innerHTML = 'download JSON'\n    let container = document.getElementById('container')\n    container?.appendChild(a)\n    a.click()\n    a.remove()\n  }\n\n  return (\n    <div\n      className={[\n        styles.divDev,\n        !hidden ? styles.hidden : ''\n      ].join(' ')}\n      { ...props }\n    >\n      <div><b>DevPanel</b></div>\n      <div\n        className={ styles.button }\n        onClick={ () => {\n          dlState()\n        } }\n      >\n        Save State\n      </div>\n      <div\n        className={ [styles.btnOutline, styles.button].join(' ') }\n        onClick={ onOutlineClick }\n      >\n        Outline\n      </div>\n      <div\n        className={ styles.button }\n        onClick={ () => {\n          console.log(json);\n          dispatch({ type: ActionTypes.LOAD_STATE, payload: json });\n        } }\n      >\n        Load State\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './css/global.css';\nimport App from './App';\nimport { StoreProvider } from './store'\nimport { DevPanel } from './components/DevPanel'\n\n// Using for store access and hash router base\nReactDOM.render(\n  <StoreProvider>\n    <HashRouter>\n      <App />\n    </HashRouter>\n    <DevPanel />\n  </StoreProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\n// import * as serviceWorker from './serviceWorker';","// extracted by mini-css-extract-plugin\nmodule.exports = {\"divDev\":\"DevPanel_divDev__2q66m\",\"hidden\":\"DevPanel_hidden__Wlj3v\",\"btnOutline\":\"DevPanel_btnOutline__2FJLx\",\"button\":\"DevPanel_button__1DKHt\"};","import * as bitcoin from 'bitcoinjs-lib'\nconst op = bitcoin.opcodes;\nconst hash160 = bitcoin.crypto.hash160;\n\n\n/**\n * Get p2wsh notificaiton address from domainName and network.\n * @param   {string} domainName         - full domainName to use (e.g. 'satoshi.btc').\n * @param   {string} networkChoice      - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @returns {object}                    - { notificationsAddress - p2wsh address derived from domainName }.\n */\nexport const calcP2WSH = (domainName: string, networkChoice: string) => {\n  const network = bitcoin.networks[networkChoice];\n\n  // convert domainName into buffer so it can be put into script\n  const bufferData = Buffer.from(domainName, 'utf8');\n\n  // easily spendable script for ACS notification output\n  // specific to this domainName\n  const witnessScript = bitcoin.script.compile([\n    hash160(bufferData),\n    op.OP_DROP\n  ]);\n\n  // calculate p2wsh address for this witnessScript & network\n  const p2wsh = bitcoin.payments.p2wsh({\n    redeem: {\n      output: witnessScript,\n      network\n    },\n    network\n  })\n  const notificationsAddress = p2wsh.address;\n\n  return {\n    notificationsAddress\n  };\n}\n","import crypto from 'crypto'\n\n/**\n * Encrypt - symmetric - aes-256-crt\n * @param   {string}  stringText      To be encrypted (up to 80 bytes)\n * @param   {string}  stringForKey    Derive Key from (not final Key).\n * @param   {string}  stringForIV     Derive IV from (not final IV). Defaults as stringForKey.\n * @returns {Buffer}                  Buffer to embed in tx.\n */\nexport const encrypt = (\n  stringText: string, stringForKey: string, stringForIV: string = stringForKey\n) => {\n  // aes-NUMBER-TYPE\n  // Must have key size matching NUMBER (in aes name) of bits (NUMBER/8 bytes)\n  // Must have IV matching encryption block size, 16 bytes for AES128-to-256-range in cbc mode\n  // sha256 can make 32 byte buffer out of anything and then .slice(0, N) can cut it to N bytes\n\n  const key = crypto.createHash('sha256').update(stringForKey).digest()             // 32 bytes\n  const iv = crypto.createHash('sha256').update(stringForIV).digest().slice(0, 16)  // 16 bytes\n\n  let cipher = crypto.createCipheriv('aes-256-ctr', key, iv)\n  let encrypted = cipher.update(Buffer.from(stringText))\n\n  encrypted = Buffer.concat([encrypted, cipher.final()])\n\n  return encrypted\n}\n\n /**\n * Decrypt - symmetric - aes-256-crt\n * @param   {Buffer}  stringText      Buffer to be decrypted.\n * @param   {string}  stringForKey    Derive Key from (not final Key).\n * @param   {string}  stringForIV     Derive IV from (not final IV). Defaults as stringForKey.\n * @returns {Buffer}                  Buffer to utf8 embeded in tx.\n */\nexport const decrypt = (\n  bufferCypher: Buffer, stringForKey: string, stringForIV: string = stringForKey\n) => {\n\n  const key = crypto.createHash('sha256').update(stringForKey).digest()             // 32 bytes\n  const iv = crypto.createHash('sha256').update(stringForIV).digest().slice(0, 16)  // 16 bytes\n\n  let decipher = crypto.createDecipheriv('aes-256-ctr', key, iv)\n\n  // first part\n  let decrypted = decipher.update(bufferCypher)\n\n  // the rest\n  decrypted = Buffer.concat([decrypted, decipher.final()])\n\n  return decrypted.toString('utf8')\n}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CreateHeader_wrapper__3cPTN\",\"bar\":\"CreateHeader_bar__27ge1\",\"alias\":\"CreateHeader_alias__1dNdj\",\"ext\":\"CreateHeader_ext__17sc6\",\"spacer\":\"CreateHeader_spacer__3tstm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P2LoadWallet_wrapper__vI_bb\",\"contentWrapper\":\"P2LoadWallet_contentWrapper__UNLo4\",\"buttonWrapper\":\"P2LoadWallet_buttonWrapper__1rrct\",\"address\":\"P2LoadWallet_address__37xx2\",\"imgQr\":\"P2LoadWallet_imgQr__3Avh3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"roundButtonWrap\":\"RoundButton_roundButtonWrap__2X50a\",\"roundButton\":\"RoundButton_roundButton__tfjmf\",\"nextArrow\":\"RoundButton_nextArrow__SS6Nl\",\"backArrow\":\"RoundButton_backArrow__2MJJm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lblMainTitle\":\"HomeContent_lblMainTitle__1LqCG\",\"divSearch\":\"HomeContent_divSearch__3dKw5\",\"txtSearch\":\"HomeContent_txtSearch__3HpSp\"};","/**\n * Returns the blockheight of last confirmed tx from the\n * fromAddress to notificationAddress within txHistory array.\n */\nexport const getLastMessageHeight = (fromAddress: string, notificationAddress: string, txHistory: Array<any>) => {\n  let highestFound = 0\n  txHistory.forEach(tx => {\n    // if this tx is from the fromAddress & it has a block height\n    if (tx.vin[0].prevout.scriptpubkey_address === fromAddress && tx.status.block_height) {\n      const height = tx.status.block_height\n      highestFound = Math.max(highestFound, height)\n    }\n  })\n  console.log('nonce to use for', fromAddress, 'to', notificationAddress, 'is', highestFound)\n  return highestFound\n}"],"sourceRoot":""}