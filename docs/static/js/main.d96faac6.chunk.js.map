{"version":3,"sources":["helpers/bns/deterministicRandom.tsx","helpers/bns/constants.tsx","components/CreateSteps/P5CustomForwards/P5CustomForwards.module.css","components/Navbar/Navbar.module.css","helpers/bns/calcTx.tsx","helpers/bns/ecies.tsx","helpers/bns/types/types.tsx","helpers/bns/types/index.js","components/CreateSteps/P1RestoreOrBackup/P1RestoreOrBackup.module.css","components/AboutContent/graphic.png","components/wallet/Wallet/helpers/getTx.tsx","components/SearchResults/SearchResults.module.css","components/CreateSteps/P4ActionChoice/P4ActionChoice.module.css","components/CreateSteps/P2LoadWallet/P2LoadWallet.module.css","components/wallet/Withdraw/Withdraw.module.css","components/wallet/Wallet/Wallet.module.css","components/CreateSteps/P6Broadcast/P6Broadcast.module.css","components/general/RoundButton/RoundButton.module.css","components/CreateSteps/P3DomainAndWallet/P3DomainAndWallet.module.css","components/AboutContent/AboutContent.tsx","pages/About.tsx","interfaces/index.tsx","store/reducers/Reducer.tsx","store/initialState.tsx","store/state.tsx","store/helpers.tsx","helpers/sanitize.js","store/actions/changeAliasAction.tsx","helpers/bns/actions/actions.tsx","helpers/bns/actions/batch.tsx","helpers/bns/calcBnsState.tsx","helpers/bns/forwards/findLatestForwards.tsx","helpers/bns/forwards/findOwnersForwards.tsx","helpers/bns/forwards/interpretCommand.tsx","helpers/bns/stringByteCount.tsx","helpers/bns/actionhelpers.tsx","helpers/bns/stealth.tsx","api/blockstream.tsx","components/CreateSteps/P1RestoreOrBackup/P1RestoreOrBackup.tsx","store/actions/addNewApiTaskAction.tsx","store/actions/searchAction.tsx","store/actions/createNewWalletAction.tsx","store/actions/changePageInfoAction.tsx","store/actions/scanAddressFullyAction.tsx","store/actions/changeChoicesBNSAction.tsx","store/actions/setApiAction.tsx","components/CreateSteps/CreateHeader/CreateHeader.tsx","components/general/RoundButton/RoundButton.tsx","components/general/Details/Details.tsx","components/CreateSteps/P2LoadWallet/P2LoadWallet.tsx","components/CreateSteps/P3DomainAndWallet/P3DomainAndWallet.tsx","components/general/InputForm/InputForm.tsx","components/general/Switch/Switch.tsx","components/CreateSteps/P4ActionChoice/P4ActionChoice.tsx","components/CreateSteps/P5CustomForwards/P5CustomForwards.tsx","components/general/FeesSelection/FeesSelection.tsx","components/CreateSteps/P6Broadcast/P6Broadcast.tsx","components/CreateNavigator/CreateNavigator.tsx","pages/Create.tsx","helpers/timediff.tsx","components/SearchResults/SearchResults.tsx","components/wallet/Wallet/interfaces/index.tsx","helpers/bns/forwards/interpretFw.tsx","components/HomeContent/HomeContent.tsx","pages/Home.tsx","components/SettingsContent/SettingsContent.tsx","pages/Settings.tsx","components/wallet/Withdraw/Withdraw.tsx","pages/Wallet.tsx","components/general/Logo/Logo.tsx","components/wallet/Wallet/store/index.tsx","components/wallet/Wallet/components/sending/Sending.tsx","components/wallet/Wallet/Wallet.tsx","components/general/Spinner/Spinner.tsx","components/wallet/VisualAPI/VisualAPI.tsx","components/Navbar/Navbar.tsx","App.tsx","index.tsx","components/DevPanel/DevPanel.tsx","helpers/bns/formathelpers.tsx","components/general/InputForm/InputForm.module.css","components/HomeContent/HomeContent.module.css","helpers/bns/cryptography.tsx","helpers/bns/initialState.tsx","components/CreateSteps/CreateHeader/CreateHeader.module.css","components/general/FeesSelection/FeesSelection.module.css","components/general/Logo/Logo.module.css","components/DevPanel/DevPanel.module.css","helpers/bns/bitcoin.tsx","components/general/Details/Details.module.css","components/general/Switch/Switch.module.css","components/wallet/Wallet/components/sending/Sending.module.css","helpers/bns/calcP2WSH.tsx","components/AboutContent/AboutContent.module.css","components/CreateNavigator/CreateNavigator.module.css","components/SettingsContent/SettingsContent.module.css","components/wallet/VisualAPI/VisualAPI.module.css","components/general/Spinner/Spinner.module.css"],"names":["deterministicRandomBid","bidArray","undefined","length","maxRange","ranges","map","thisBid","thisRange","min","max","value","weight","bid","blockHash","some","console","warn","rangedHashBigInt","BigInt","i","BYTES_MAX","MIN_BURN","MIN_NOTIFY","OWNERSHIP_DURATION_BY_BLOCKS","CHALLENGE_PERIOD_DURATION_BY_BLOCKS","CHALLENGE_MIN_MULTIPLY","EARLIEST_NOTIFICATION_HEIGHT","log","TESTING","process","module","exports","hash160","bitcoin","op","calcTx","wallet","domain","choices","networkChoice","vBytes","utxoList","Error","feeRate","network","calcP2WSH","domainName","notificationsAddress","fee","Math","ceil","burnAmounts","action","suggestions","reduce","allBurnAmounts","thisSuggestion","burnAmountsHere","info","set","name","get","parseInt","burnAmount","refundsAmount","refundAmountsArray","refundAmounts","type","BnsSuggestionType","REFUND_BIDDERS","refunds","split","thisAmountAndAddress","thisAddress","thisAmount","address","amount","valueNeeded","totalGathered","gatheredFromWallet","gatheredFromOther","toBeUsedUtxoOfNotifications","derivedUtxoList","forEach","utxo","from_scriptpubkey_address","push","toBeUsedUtxoOfUserWallet","toFixed","keyPair","fromWIF","WIF","psbt","setVersion","setLocktime","addInput","hash","txid","index","vout","sequence","nonWitnessUtxo","Buffer","from","hex","witnessScript","compile","OP_DROP","inputScript","OP_TRUE","nonce","getNonce","toString","encryptionKey","fromEmbedString_Buffer","embedString","fromEmbedBuffers_Buffer","embedBuffers","concat","finalEmbeddedData","slice","data","encryptFromBuffer","embed","addOutput","script","output","changeAddress","find","suggestion","change","thisRefund","signInput","validateSignaturesOfInput","finalizeInput","getFinalScripts","tx","extractTransaction","thisVirtualSize","virtualSize","getId","toHex","nInputs","ins","nOutputs","outs","byteLength","notifyAmount","nInputsFromWallet","nInputsFromOther","BnsActionType","BnsBidType","getTx","tb","vBytesMax","initializeValues","addInputs","outputs","JSON","parse","stringify","outputsFixed","addOutputs","signInputs","result","e","inputs","inputsFixed","outgoingValue","minOutgoingValue","changeValue","inputsValue","availableInputsValue","Object","keys","minValue","minDustValue","totalNeeded","valueGatheredFromWallet","slack","subtractable","redeemScript","keyPairs","wif","sighashTypes","sighashType","canJustSign","thisVin","thisInput","inputBuilder","fromASM","trim","replace","nextIndex","thisVout","thisNewOutput","outputBuilder","input","inputIndex","isSegwit","isP2SH","isP2WSH","payment","p2wsh","redeem","p2sh","finalScriptSig","finalScriptWitness","witness","vector","buffer","allocUnsafe","writeVarInt","currentLen","varintLen","varuint","encodingLength","encode","writeVarSlice","writeSlice","witnessStackToScriptWitness","AboutContent","className","styles","wrapper","join","title","contentWrapper","drawing","src","image","alt","href","target","rel","About","ActionTypes","STORE_SEARCH_RESULTS_FAIL","STORE_SEARCH_RESULTS","TYPING","NEW_WALLET","CHANGE_PAGE_INFO","UPDATE_WALLET","UPDATE_DOMAIN","ACTION_FAIL","LOAD_STATE","CHOICES_BNS_ACTION","SET_API","reducer","state","payload","api","lastTimeStamp","Date","now","txHistory","pageInfo","checkedWallet","chain","height","checkedDomain","current","initialState","mnemonic","alias","checkedLightSearch","notificationAddress","extension","newState","txHex","path","testnet","running","tasks","rateLimit","processId","Store","React","createContext","getOwner","st","ownerAddress","currentOwner","users","unitsBTC","satsToBTCSpaced","sats","spacesLocationsFromRight","styling","lengthText","lengthLocations","location","splice","getUnspentSum","utxoArray","sum","sanitize","inputString","stringOrArray","String","Array","isArray","filter","logicFilters","choice","str","letter","resultingString","numbers","digits","startsWith","maxDecimalPlaces","decimalIndex","indexOf","digitsAfterDecimal","cutoffNumber","outputString","fn","changeAliasAction","dispatch","a","async","sanitizedString","OUTS_2","status","atLeastTwoOutputs","describe","OUT_0","isOpreturnOutput0","OUT_1","isNotify","NOTIFIED_MIN","didNotifyMin","units","BURNED_MIN","didBurnMin","NO_OWNER","existsCurrentOwner","EXISTS_OWNER","BURN_LAST_WIN","burnedPreviousRateMin","getLastOwnerBurnedValue","USER_IS_OWNER","isSenderTheCurrentOwner","isAddressTheCurrentOwner","USER_IS_BIDDER","isSenderACurrentBidder","isAddressACurrentBidder","IS_OWNER_EXPIRED","isOwnerExpired","NO_UNSPENT_USER_NOTIFICATIONS_UTXO","noUnspentUserNotificationsUtxo","USER_ADDRESS_NOT_NOTIFICATION_ADDRESS","getNotificationAddress","getTxInput0SourceUserAddress","IS_COMMAND_CALLED","command","isCommandCalled","IS_BIDDING_ONGOING","isBiddingOngoing","IS_BIDDING_OVER","isBiddingOver","SUGGESTION_SUBMIT_NEW_ADDRESS","SUGGESTION_SUBMIT_NEW_OWNER_ADDRESS","SUGGESTION_SUBMIT_BURN_AMOUNT","calcMin","bidding","bids","SUGGESTION_REFUND_PAST_BIDDERS","ignoreAddress","leftAmounts","unrefundedAmounts","toAddress","WARNING_POINTLESS_IF_NOT_OWNER","args","warning","WARN_IF_NOT_BIDDER","refundOtherBidders","REFUND_OTHER_BIDS","permissions","conditions","execute","assert","subtractRefunds","pass","permission","condition","bidForOwnershipAction","BID_FOR_OWNERSHIP","addBid","BURN","changeAddressAction","CHANGE_ADDRESS","thisCommand","getCommandCalled","newAddress","existsUser","createNewUser","oldOwner","setOwner","getUser","winHeight","winTimestamp","forwards","sendOwnershipAction","SEND_OWNERSHIP","currentOwnerRenewAction","RENEW","owner","getTxHeight","getTxTimestamp","updateForwardingInfoAction","ONLY_FORWARDS","readEmbeddedData","autoCheckForOwnerExpiredAction","clearOwner","getParsedHeight","updateUtxoFromTxAction","updateUtxoFromTx","autoCheckForBiddingWinnerNewOwnerAction","endBidding","runAllAutomaticActions","areAllConditionsMet","eaCondition","calcBnsState","notificationsHistory","currentHeight","reverse","sort","prev","next","block_height","setParsedHeight","updateSourceUserFromTx","actions","okConditions","okPermissions","areAllPermissionsMet","eaPermission","updateOwnerHistory","findLatestForwards","sortedForwards","updateHeight","currentNetworks","eaForward","isNotCommand","isNotEmptyNetwork","values","findOwnersForwards","nullResponse","toForwards","toSpaceSeparated","fw","interpretCommand","key","allActions","getterName","stringByteCount","encrypt","getSetters","getStealthAddress","networkName","seedBuffer","bip39","mnemonicToSeed","masterNode","fromSeed","childNode_m_1001h_0h_indexh","derivePath","childNode_m_1001h_0h_0h_neutered","neutered","xPub_B58","toBase58","xPub_Buffer","bs58check","decode","getFeeEstimatesAPI","strNetwork","API_PATH","axios","res","getHeightAPI","addRawTxToArrayAPI","delay","msDelay","erroredOutputs","error","entries","indexString","tries","getUTXOListAPI","confirmed","getAddressHistoryAPI","MAX_TX","lastTxid","allTx","txPushAPI","content","params","response","pages","Promise","r","setTimeout","addNewApiTaskAction","newTaskFunction","resolve","reject","newTask","run","timestamp","searchAction","otherDomain","apiPath","notificationsTxHistory","createNewWalletAction","strMnemonic","createNewWallet","loadWallet","changePageInfoAction","page","scanAddressFullyAction","addressType","walletAddress","walletTxHistory","utxoListWalletAddress","newDomain","changeChoicesBNSAction","setApiAction","CreateHeader","useContext","history","useHistory","useState","window","innerWidth","width","setWidth","useEffect","resize","addEventListener","removeEventListener","fontScale","floor","barHeight","aliasMarginTop","marginTop","aliasFontSize","fontSize","cutOverflow","style","bar","onClick","ext","spacer","RoundButton","props","display","show","colorbutton","colorbuttontext","sizebutton","roundButtonWrap","back","backWrapper","minor","minorWrapper","showdisabled","disabledWrap","roundButton","backArrowPad","nextArrowPad","minorButton","disabled","backArrow","children","nextArrow","overhead","Details","showDetails","setShowDetails","buttonWrapper","toggleDetails","description","arrow","down","details","P1RestoreOrBackup","ROOT","setPage","backup","setBackup","wordCount","v","orange","LOAD_BACKUP","id","spellCheck","restoreBackup","cols","rows","placeholder","onChange","cleanString","toLowerCase","trimLeft","P2LoadWallet","qrCode","setQrCode","qr","toDataURL","color","dark","err","url","imgQr","backAndReady","button","open","pathEdit","P3DomainAndWallet","initialized","setInitialized","apiStatus","setApiStatus","readyStatus","isReady","domainInfo","domainButton","walletInfo","walletButton","unspent","balance","ownership","InputForm","thisInitialValue","textValue","setTextValue","lastTimer","known","dropdowns","setDropdowns","hasFocus","setHasFocus","handleChange","cleanedValue","sanitizeFilters","thisInputOnChange","getDropdowns","clearTimeout","newTimer","items","shiftRight","label","thisInputLabel","onFocus","TIME_DELAY_BEFORE_SEARCH","onBlur","textarea","wrap","renderDropdowns","item","suggestions__item","newValue","selection","contents","suggestions__separator","showButton","thisSubmitButtonOnClick","showBonusInformation","bonusInformation","Switch","setSelection","defaultChoices","do","initialIndex","initialValue","choiceArea","thisChoice","selected","P4ActionChoice","extraFormData","setExtraFormData","checkActions","setCheckActions","bns","checkedActions","checkedPermissions","isAllowed","actionSuggestions","isUsable","every","permissionList","runAllActionPermissionChecks","getSuggestInfo","getSuggestion","btcMin","btcUnits","btcValue","btcMinFull","btcValueFull","showStatus","availableActions","suggestionsToGet","getGetters","haveGettersOrSetters","suggestionToGet","onChangeFunction","thisAction","inputForms","cleanInput","round","parseFloat","setSuggestion","setDescription","setName","settings","valueToReturn","valueArray","unitsArray","thisValue","bullets","isNaN","Number","strings","renderSetSuggestion","breakable","okButton","unavailableActions","unavailableActions__title","unavailableActions__actionList","unavailableActions__actionList__action","unavailableActions__actionList__action__title","unavailableActions__actionList__action__permissionList","unavailableActions__actionList__action__permissionList__permission","P5CustomForwards","textboxContent","setTextboxContent","setPlannedChanges","objForwards","forwardsString","fwNetwork","forward","needsChanging","getPlannedChanges","actionRequirementsString","chosenAction","stringFromCommands","getActionEmbedRequirements","plannedChangesSoFar","word","words","pastForwards","bytesOfChanges","bytesTotal","eachBufferObject","bytesLeft","isSpaceFull","explainForwards","embededBuffer","bytes","thisByteCostEstimate","interpretation","cmd","allowRemoval","stringApprox","updateItem","updateInfo","updateCancel","newEmbedBuffers","el","newData","stopPropagation","subtitle","changes","bytesOver","abs","eb","editor","btnDelete","editorNetwork","cleanText","editorAddress","btnAdd","pastList","pastPair","decodeURIComponent","pastNetwork","pastAddress","newBufferAddress","FeesSelection","initialFee","setFeeExternal","setFee","getFeeSuggestionsExternal","getFeeSuggestions","feeText","setFeeText","showSuggestions","apiSuccess","min20","min40","min60","feeSuggestions","setFeeSuggestions","onClickElsewhere","document","fees","fees__rate","fees__apicall","apiSuggest","tryFees","fees__feeSelection","fees__feeSelection__choice","P6Broadcast","txIssue","message","endsWith","numberOfUpdates","countSoFar","ok","reason","broadcastStatus","setBroadcastStatus","unitBTC","showBTC","finalCost","totalCost","txSummary","status__button","PATH","status__failed","notify","CreateNavigator","scroller","horizontalScaler","Create","timeDiff","timestampMsec","referenceTimestampMsec","diff","isExpired","d","h","m","dhm","dh","msDiff","Mode","SearchResults","notificationLink","linkable","nAddress","tabledOwnershipData","toUTCString","Fragment","isBurn","getBidding","tabledBiddingData","startHeight","endHeight","bidIndex","tabledAvailableDomainData","expandableTable","inputData","inputDescription","ownershipDetails","dataRows","dataRowIndex","latestForwards","matches","scrollbars","listContainer","ifw","blockchain","render","onNetwork","where","what","link","xpub","interpretFw","listItem","avaiability","to","createLink","HomeContent","match","reroute","then","catch","isSearchDone","inputEl","useRef","selectionEnd","selectionStart","focus","onAnyKey","sessionStorage","getItem","activeElement","lblMainTitle","lblMainTitleAfter","divSearch","divSearchAfter","txtSearch","ref","onKeyPress","Home","SettingsContent","Settings","Withdraw","btnAvailable","setBtnAvailable","withdrawAddress","setWithdrawAddress","controlBalance","scanWallet","top","top__title","total","total__value","total__units","btnScan","from__label","from__alias","from__address","withdraw_control","searchTerm","showUI","loadMode","notifyUI","addToSessionStorage","setItem","dispatchEvent","StorageEvent","Wallet","Logo","outershell2","size","btcLogo","cutoffs","background","theB","initialWallet","headline","mode","MAIN","lastError","initialTxBuilder","minFeeRate","maxFeeRate","Sending","passedstate","setWallet","txBuilder","setTxBuilder","recalcBuilder","setShowInterface","feeSelection","export","amounts","calculatedAmounts","broadcastTx","success","HISTORY","setParams","showInterface","handleListeners","processNewParams","includes","w","interface_not","interface","SENDING","entry","entries__entry","entries__entry__done","entries__entry__error","entries__entry__button","entries__entry__message","entries__entry__time","logo_wrapper","logo","logo_selected","addListeners","removeListeners","handleStorageChange","prevTxBuilder","fedValues","foundObject","thisKey","newParams","Spinner","spinner","block","last","loops","VisualAPI","setProcessId","setTasks","setBusy","busy","delayStandby","delayBusy","apiLoop","loop","launch","text","loopKey","timedOut","time","newId","checkSelfTerminate","me","terminate","handleWrongProcessIds","canRunTask","task","ms","isProcessIdLoopAlive","isThisTheNewestLoop","idKey","otherLoop","callsPerSec","Navbar","refButton","toggleMenuButtonDiv","overflowMenuDiv","buttonWidth","offsetWidth","showCollapsed","resizeTimer","nav","setNav","Event","isCreatePage","pathname","isHomePage","isAboutPage","isSettingsPage","menu","getBoundingClientRect","menuLeft","left","menuTop","opacity","onResize","body","classList","add","remove","onClickAnywhere","buttonSearch","buttonUser","buttonSource","buttonAbout","buttonSettings","buttonsArray","windowWidth","margin","innerHeight","howManyButtonsFitSafely","buttonsOnNavbar","btn","buttonsOverflow","htmlFor","leftCorner","cleanNumber","pageNum","collapsitron","menuShown","dots","thisButton","overflowMenu","App","searchParam","URLSearchParams","search","pushState","component","exact","ReactDOM","StrictMode","useReducer","Provider","hidden","setHidden","onDevKey","divDev","btnOutline","sheet","getElementById","parentNode","removeChild","createElement","appendChild","createTextNode","head","localStorage","newUser","getOwnerAddress","newOwnerAddress","ownersHistory","parsedHeight","block_time","getTxOutput0BurnValue","vin","prevout","scriptpubkey_address","fromAddress","user","embeddedDataHex","scriptpubkey_asm","getTxOutput0Data","embeddedDataBuffer","decryptionKey","embeddedDataBufferDecrypted","decryptToBuffer","separator","emptyBuffer","embeddedDataBufferArray","thisByte","isSeparator","compare","wordIndex","outputText","sepBuffer","forwardsInThisTx","networkPiece","forwardingAddressPiece","thisForward","encodeURIComponent","updateTimestamp","addToUserForwards","getTxOutput1NotifyAddress","getTxOutput1NotifyValue","txHeight","spentUtxoIndex","findIndex","userOfTxAddress","userThatCreatedThisUtxo","isInThePast","resetBidding","userAddress","burnValue","startBidding","valueLeftToRefund","block_hash","biddingType","NULL","txUserAddress","paidTo","toAmount","thisBidAddress","refund","unrefundedBidsOnly","refundsLeft","unrefundedBids","goodBidsThatRefunded","thisBidHeight","thisUnrefundedBid","winner","validBidsAtLastHeight","lastHeight","maxBidIndex","thisHeight","stringText","stringForKey","stringForIV","crypto","createHash","update","digest","iv","cipher","createCipheriv","encrypted","final","bufferInput","bufferCypher","decipher","createDecipheriv","decrypted","generateMnemonic","toWIF","p2wpkh","pubkey","publicKey","bufferData"],"mappings":"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","file":"static/js/main.d96faac6.chunk.js","sourcesContent":["import { I_Bid } from './types'\n\n// this file will be used for various functions that might need deterministic random function\n\n/**\n * Takes array of bids or empty array and returns a winner if possible, otherwise undefined.\n * Winner is derived through deterministic weighted random number weighted by bid values.\n */\nexport const deterministicRandomBid = (\n  bidArray: Array<I_Bid>\n): I_Bid | undefined => {\n  // easy cases\n  if (bidArray === undefined) return undefined\n  if (bidArray.length === 0) return undefined\n  if (bidArray.length === 1) return bidArray[0]\n\n  // now the harder derivations of N > 1 elements\n\n  // max weight summed up across all elements\n  let maxRange = 0\n  // array of each element including their range based on weight (value)\n  const ranges = bidArray.map(thisBid => {\n    const thisRange = {\n      min: maxRange,\n      max: maxRange + thisBid.value,\n      weight: thisBid.value,\n      bid: thisBid\n    }\n    maxRange = maxRange + thisBid.value\n    return thisRange\n  })\n\n  // Ideally should use block hash at this height to get random value,\n  // which is not predictable or cheap to change when block is found, even by miners.\n  // Grabbing the first blockHash, same at same height (same block = same block hash).\n  const blockHash = bidArray[0].blockHash\n\n  // quickly check that all block hashes are same\n  if (bidArray.some(thisBid => thisBid.blockHash !== blockHash)) {\n    console.warn(\n      'bidArray should have same height txs but txs contained different block hashes!!!',\n      bidArray\n    )\n  }\n\n  // convert block hash to hex BigInt can read and create BigInt\n  const hashBigInt = BigInt('0x' + blockHash)\n\n  // take a mod of max range to use as random number\n  const rangedHashBigInt = hashBigInt % BigInt(maxRange)\n\n  // find the range where it landed and return that bid\n  // the overall range of [0, maxRange) is split into separate ranges by each bid the exact length of each bid amount\n  // a number mod of max range has to fall somewhere within the individual ranges, and decide the winner\n  // completely deterministic by anyone independently yet very hard to predict before tx confirmations\n  for (let i = 0; i < ranges.length; i++) {\n    if (BigInt(ranges[i].min) <= rangedHashBigInt) {\n      if (BigInt(ranges[i].max) < rangedHashBigInt) {\n        // found it\n        return ranges[i].bid\n      }\n    }\n  }\n\n  console.warn(\n    'something went wrong and no winner was found',\n    ranges,\n    bidArray,\n    maxRange\n  )\n  return undefined\n}\n","/**\n * Constants used to determine rules on BNS.\n */\n\n// testing mode true/false to reduce waiting time for tests\n// on for `npm run start` (development mode)\n// off for `npm run build` (production mode)\nexport const TESTING = process.env.NODE_ENV === 'development'\nTESTING ? console.warn('Testing mode ON') : console.warn('Deployment mode')\n\n// Block times can vary from 10 minutes but ok for estimate.\n// Extremely different results timewise on testnet.\n// blocks * 10 / 60 / 24 ~ days\n// 52560 blocks ~365 days.\n// 15000 blocks ~104 days.\n// 1000 blocks ~7 days.\n// 288 blocks ~48 hours.\n// 144 blocks ~1 day.\n\n// max data safe to embed in OP_RETURN type tx (bytes)\n// ~80 chars\nexport const BYTES_MAX = 80\n\n// Satoshis to burn minimum for attempting ownership (satoshi)\nexport const MIN_BURN = 1000\n\n//  Minimum to use for notification output (satoshi)\nexport const MIN_NOTIFY = 1000\n\n// Ownership duration after victory (blocks)\n// ~1 year (production) / ~104 days (development)\nexport const OWNERSHIP_DURATION_BY_BLOCKS = !TESTING ? 52560 : 15000\n\n// Duration before a top bidder becomes owner (blocks)\n// ~1 day\nexport const CHALLENGE_PERIOD_DURATION_BY_BLOCKS = 144\n\n// Multiplier required on burn amount for new bid to beat\n// a previous (lower height) winning bid (assuming meets other conditions by deadline).\n// sets a minimum treshhold for trying to outbid someone else\nexport const CHALLENGE_MIN_MULTIPLY = 2\n\n// BNS did not really exist before this point (for notifications only, wallets can go further)\n// this might be used to feed to nodes to speed up fetching of notification data to only after this height\nexport const EARLIEST_NOTIFICATION_HEIGHT = 1662000\n\nconsole.log('CONSTANTS:', {\n  TESTING,\n  MIN_BURN,\n  MIN_NOTIFY,\n  OWNERSHIP_DURATION_BY_BLOCKS,\n  BYTES_MAX,\n  CHALLENGE_PERIOD_DURATION_BY_BLOCKS,\n  CHALLENGE_MIN_MULTIPLY,\n  EARLIEST_NOTIFICATION_HEIGHT\n})\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P5CustomForwards_wrapper__2kAy2\",\"title\":\"P5CustomForwards_title__29aFH\",\"subtitle\":\"P5CustomForwards_subtitle__1iqt_\",\"changes\":\"P5CustomForwards_changes__23bYg\",\"pastList\":\"P5CustomForwards_pastList__3rXdy\",\"buttonWrapper\":\"P5CustomForwards_buttonWrapper__3hvwB\",\"editor\":\"P5CustomForwards_editor__1ZVVF\",\"updateItem\":\"P5CustomForwards_updateItem__1wAhx\",\"updateCancel\":\"P5CustomForwards_updateCancel__3b5bW\",\"updateInfo\":\"P5CustomForwards_updateInfo__2OBcF\",\"editorNetwork\":\"P5CustomForwards_editorNetwork__1L6UB\",\"editorAddress\":\"P5CustomForwards_editorAddress__1N25M\",\"btnAdd\":\"P5CustomForwards_btnAdd__1tiSg\",\"btnDelete\":\"P5CustomForwards_btnDelete__3NCte\",\"pastPair\":\"P5CustomForwards_pastPair__3YvIk\",\"pastNetwork\":\"P5CustomForwards_pastNetwork__35eVe\",\"pastAddress\":\"P5CustomForwards_pastAddress__3-W_H\",\"bytesLeft\":\"P5CustomForwards_bytesLeft__2zySr\",\"bytesOver\":\"P5CustomForwards_bytesOver__ysfMq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2imOE\",\"leftCorner\":\"Navbar_leftCorner__qPPEV\",\"wallet\":\"Navbar_wallet__1RkTc\",\"pageNum\":\"Navbar_pageNum__1amUi\",\"api\":\"Navbar_api__ArjdL\",\"warning\":\"Navbar_warning__1HOBZ\",\"overflowMenu\":\"Navbar_overflowMenu__1dStH\",\"button\":\"Navbar_button__3Xi0T\",\"selected\":\"Navbar_selected__10Mm9\",\"collapsitron\":\"Navbar_collapsitron__2qzRt\",\"dots\":\"Navbar_dots__1OrSM\",\"menuShown\":\"Navbar_menuShown__3-TaY\",\"blurme\":\"Navbar_blurme__2nA1q\"};","import * as bitcoin from 'bitcoinjs-lib'\nimport { calcP2WSH } from './calcP2WSH'\nimport { MIN_NOTIFY } from './constants'\nimport { encryptFromBuffer } from './cryptography'\nimport { I_Domain, I_Checked_Action } from './types/'\nimport { BnsSuggestionType } from './../bns/types'\nimport { getNonce } from './formathelpers'\nimport { getFinalScripts } from './bitcoin'\n\nconst hash160 = bitcoin.crypto.hash160\nconst op = bitcoin.opcodes\n// psbt: https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/ts_src/psbt.ts\n\ninterface I_Tx_Result {\n  thisVirtualSize: number\n  txid: number\n  hex: string\n  valueNeeded: number\n  fee: number\n  change: number\n  burnAmount: number\n  notifyAmount: number\n  refundsAmount: number\n  totalGathered: number\n  gatheredFromWallet: number\n  gatheredFromOther: number\n  nInputs: number\n  nOutputs: number\n  nInputsFromWallet: number\n  nInputsFromOther: number\n}\n\n/**\n * Creates hex of tx to bid on domain.\n * Throws error if not enough funds.\n * Leave vBytes blank, it will call itself via recursion until it derives needed size.\n * @param   {object}      wallet                  - { WIF, address, txHistory, utxoList, ... }.\n * @param   {object}      domain                  - all domain info\n * @param   {object}      choices                 - { action, feeRate, embedString, ... }\n * @param   {string}      networkChoice           - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @param   {number=}     [vBytes=0]              - size of transaction in vBytes. *\n * @returns {object}                              - Tx Results.\n */\nexport const calcTx = (\n  wallet: any,\n  domain: I_Domain,\n  choices: {\n    action: I_Checked_Action\n    feeRate: number\n    embedString: string\n    embedBuffers: Array<any>\n    [key: string]: any\n  },\n  networkChoice: string,\n  vBytes = 1\n): I_Tx_Result => {\n  if (wallet.utxoList.length === 0) {\n    throw new Error('Wallet has no funds (utxo) to use')\n  }\n\n  // grab fee rate\n  const feeRate = choices.feeRate\n\n  // grab network object\n  const network = bitcoin.networks[networkChoice]\n\n  // calculate domain notification address\n  const { notificationsAddress } = calcP2WSH(domain.domainName, networkChoice)\n\n  // calculate funds necessary for this tx, round up sat for more better than being below minimum.\n  const fee = Math.ceil(vBytes * feeRate)\n\n  // output[0]: check special tx rules for max amount required to burn among all of them\n  const burnAmounts = choices.action.suggestions.reduce(\n    (allBurnAmounts: any, thisSuggestion: any) => {\n      // console.log('choices.action.suggestions each item:', thisSuggestion)\n      let burnAmountsHere: any = []\n      // if there's a set burn rule, add to list\n      if (\n        'set' in thisSuggestion.info &&\n        thisSuggestion.info.set.name === 'Bid burn amount'\n      ) {\n        burnAmountsHere = [...burnAmountsHere, thisSuggestion.info.set.value]\n      }\n      // if there's a user provided get value, add to list\n      if (\n        'get' in thisSuggestion.info &&\n        thisSuggestion.info.get.name === 'Bid burn amount'\n      ) {\n        burnAmountsHere = [\n          ...burnAmountsHere,\n          parseInt(thisSuggestion.info.get.value, 10)\n        ]\n      }\n      return [...allBurnAmounts, ...burnAmountsHere]\n    },\n    []\n  )\n  const burnAmount = Math.max(...burnAmounts, 0)\n\n  // add up any refunds to do for total needed and array of address/amount for generating outputs\n  // (refunds are the requirement to compensate past bidders for their burn in auction)\n  let refundsAmount = 0\n  const refundAmountsArray = choices.action.suggestions.reduce(\n    (refundAmounts: any, thisSuggestion: any) => {\n      // console.log('choices.action.suggestions each item:', thisSuggestion)\n      // if there's a refund to do, add to list\n      if (\n        thisSuggestion.info.type === BnsSuggestionType.REFUND_BIDDERS &&\n        thisSuggestion.info.get.value === true\n      ) {\n        const arrayOfAmountsAndAddresses = thisSuggestion.info.set.value.split(\n          '\\n'\n        )\n        const refunds = arrayOfAmountsAndAddresses.map(\n          (thisAmountAndAddress: any) => {\n            const thisAddress = thisAmountAndAddress.split(' ')[1]\n            const thisAmount = parseInt(thisAmountAndAddress.split(' ')[0], 10)\n            refundsAmount += thisAmount\n            return { address: thisAddress, amount: thisAmount }\n          }\n        )\n\n        return [...refundAmounts, ...refunds]\n      } else {\n        return refundAmounts\n      }\n    },\n    []\n  )\n\n  const valueNeeded = refundsAmount + burnAmount + MIN_NOTIFY + fee // sat\n\n  // gather necessary utxo to use until enough to cover costs\n  let totalGathered = 0 // sat\n\n  // track multiple sources for providing detailed information\n  let gatheredFromWallet = 0\n  let gatheredFromOther = 0\n\n  /* ---------- get all your notification (anyone can spend acs) utxo --------- */\n\n  // prepare extra inputs from other rules\n  // adding these first to totalGathered satoshi since have to add them all anyway\n  const toBeUsedUtxoOfNotifications: Array<any> = []\n  // must consume all ACS utxo wallet.address has created\n  // get all utxo for notification address\n  domain.derivedUtxoList.forEach(utxo => {\n    // use only utxo created from this wallet's address\n    if (utxo.from_scriptpubkey_address === wallet.address) {\n      toBeUsedUtxoOfNotifications.push(utxo)\n      totalGathered += utxo.value\n      gatheredFromOther += utxo.value\n    }\n  })\n\n  /* -------------------- get all the necessary wallet utxo ------------------- */\n\n  // Adding remaining funds from user's wallet to total Gathered\n  // Must always add at least 1 user utxo @ index 0 to indicate ownership\n  const toBeUsedUtxoOfUserWallet: Array<any> = []\n  wallet.utxoList.forEach((utxo: any) => {\n    // while not enough funds or if haven't added a single user utxo yet\n    if (totalGathered < valueNeeded || toBeUsedUtxoOfUserWallet.length === 0) {\n      toBeUsedUtxoOfUserWallet.push(utxo)\n      totalGathered += utxo.value\n      gatheredFromWallet += utxo.value\n    }\n  })\n\n  // all utxo parsed at this point\n\n  // if still not enough funds after all possible inputs,\n  // there are simply not enough funds to do the tx\n  if (totalGathered < valueNeeded) {\n    throw new Error(\n      'Not enough funds available (need: ' +\n        (valueNeeded / 1e8).toFixed(8) +\n        ' BTC, have: ' +\n        (totalGathered / 1e8).toFixed(8) +\n        ' BTC)'\n    )\n  }\n\n  // calculate keys from wallet import format key\n  const keyPair = bitcoin.ECPair.fromWIF(wallet.WIF, network)\n  // create Partially Signed Bitcoin Transaction object to build tx\n  const psbt = new bitcoin.Psbt({ network })\n  psbt.setVersion(2) // default\n  psbt.setLocktime(0) // default\n\n  /* -------------------------------------------------------------------------- */\n  /*                                adding inputs                               */\n  /* -------------------------------------------------------------------------- */\n\n  // must be first added as owner address must always be at index 0 input\n  toBeUsedUtxoOfUserWallet.forEach(utxo => {\n    psbt.addInput({\n      hash: utxo.txid,\n      index: utxo.vout,\n      // anything below 0xfffffffe enables opt-in-RBF\n      // relative locktime in version 2 tx needs to follow BIP68\n      sequence: 0xfffffffe,\n      // should work for segwit and nonsegwit inputs\n      nonWitnessUtxo: Buffer.from(utxo.hex, 'hex')\n    })\n  })\n\n  // calculate witnessScript\n  const witnessScript = bitcoin.script.compile([\n    hash160(Buffer.from(domain.domainName, 'utf8')),\n    op.OP_DROP\n  ])\n\n  // script to feed to witness script to spend\n  // anyone can spend (ACS), literally\n  const inputScript = bitcoin.script.compile([op.OP_TRUE])\n\n  // add each utxo to inputs\n  toBeUsedUtxoOfNotifications.forEach(utxo => {\n    if (!utxo.hex) {\n      // abort if missing raw hex\n      throw new Error(\n        `Utxo is missing hex, txid: ${utxo.txid}, vout:${utxo.vout}`\n      )\n    }\n    psbt.addInput({\n      hash: utxo.txid,\n      index: utxo.vout,\n      sequence: 0xfffffffe,\n      nonWitnessUtxo: Buffer.from(utxo.hex, 'hex'),\n      witnessScript: witnessScript\n    })\n  })\n\n  // inputs done\n\n  /* -------------------------------------------------------------------------- */\n  /*                              creating outputs                              */\n  /* -------------------------------------------------------------------------- */\n\n  // add the op_return output (always index 0)\n  // if first time notifying, nonce is '0', otherwise the last blockheight when this user has sent ANY tx to that notification address\n  const nonce = getNonce({ domain }, wallet.address).toString()\n  const encryptionKey = domain.domainName + wallet.address + nonce\n  console.log('nonce used to encrypt', domain.domainName, wallet.address, nonce)\n\n  /* ------------------------------ embedded data ----------------------------- */\n\n  // for now 2 sources of data to embed:\n  // 1) choices.embedString\n  // 2) choices.embedBuffers which is an array of {network:string, .address:Buffer}\n  // (TODO): simplify & generalize to just handle buffer array w/o string as it's confusing\n\n  // buffer to be embedded fromchoices.embedString\n  const fromEmbedString_Buffer = Buffer.from(choices.embedString)\n\n  // buffer to be embedded from fromchoices.embedBuffers array\n  let fromEmbedBuffers_Buffer = Buffer.from([])\n  for (let i = 0; i < choices.embedBuffers.length; i++) {\n    fromEmbedBuffers_Buffer = Buffer.concat([\n      fromEmbedBuffers_Buffer, // keep adding on\n      Buffer.from(choices.embedBuffers[i].network), // add the network\n      Buffer.from(' '), // add the separator\n      Buffer.from(choices.embedBuffers[i].address), // add the address\n      Buffer.from(' ') // add the separator for next one\n    ])\n  }\n  // combine to get total data to embed from string and buffer array\n  let finalEmbeddedData = fromEmbedBuffers_Buffer\n  if (fromEmbedString_Buffer.length > 0) {\n    // if there's string data, just add it onto the end\n    finalEmbeddedData = Buffer.concat([\n      finalEmbeddedData,\n      fromEmbedString_Buffer\n    ])\n  } else {\n    // if there's not string data, just remove the final separator\n    // (empty buffer stays empty)\n    finalEmbeddedData = finalEmbeddedData.slice(0, -1)\n  }\n\n  const data = encryptFromBuffer(finalEmbeddedData, encryptionKey)\n\n  console.log(\n    'total embedded data is',\n    '\"' + finalEmbeddedData + '\", bytes:',\n    finalEmbeddedData.length\n  )\n  console.log(\n    'after encryption embedded data is',\n    '\"' + data + '\", bytes:',\n    data.length\n  )\n\n  if (data.length > 80) {\n    throw new Error(\n      'Embedded data is larger than standardness 80 byte limit rule'\n    )\n  }\n\n  const embed = bitcoin.payments.embed({ data: [data] })\n\n  psbt.addOutput({\n    script: embed.output,\n    value: burnAmount\n  })\n  console.log('rules say to burn ', burnAmount)\n\n  // output[1] add notification output (always index 1)\n  psbt.addOutput({\n    address: notificationsAddress, // calculated from domainName provided\n    value: MIN_NOTIFY\n  })\n\n  // output[2] add change output (anything is fine for output[2] or higher)\n  // here we can set an address change where user keeps control as the\n  // address to receive the remaining change from this tx\n  const changeAddress =\n    choices.action.type === 'CHANGE_ADDRESS'\n      ? choices.action.suggestions.find(\n          (suggestion: any) => 'get' in suggestion.info\n        )!.info.get!.value\n      : wallet.address\n  const change = totalGathered - valueNeeded\n  psbt.addOutput({\n    address: changeAddress,\n    value: change\n  })\n\n  refundAmountsArray.forEach(\n    (thisRefund: { address: string; amount: number }) => {\n      psbt.addOutput({\n        address: thisRefund.address,\n        value: thisRefund.amount\n      })\n    }\n  )\n\n  /* -------------------------------------------------------------------------- */\n  /*          at this point all inputs & outputs added so ready to sign         */\n  /* -------------------------------------------------------------------------- */\n\n  toBeUsedUtxoOfUserWallet.forEach((utxo, index) => {\n    // sign p2wpkh of controlling\n    psbt.signInput(index, keyPair)\n\n    if (!psbt.validateSignaturesOfInput(index)) {\n      throw new Error(\n        'Signature validation failed for input index ' + index.toString()\n      )\n    }\n  })\n\n  // finalizing inputs\n  // psbt.finalizeAllInputs()\n\n  // finalize regular p2wsh inputs normally\n  for (let i = 0; i < toBeUsedUtxoOfUserWallet.length; i++) {\n    psbt.finalizeInput(i)\n  }\n  // finalize witness script stack inputs with extra parameter\n  // for the submitted script parameters & original full script\n  for (\n    let i = toBeUsedUtxoOfUserWallet.length;\n    i < toBeUsedUtxoOfUserWallet.length + toBeUsedUtxoOfNotifications.length;\n    i++\n  ) {\n    psbt.finalizeInput(i, getFinalScripts({ inputScript, network }))\n  }\n\n  const tx = psbt.extractTransaction()\n  console.log(tx)\n  const thisVirtualSize = tx.virtualSize()\n  const txid = tx.getId()\n  const hex = tx.toHex()\n  const nInputs = tx.ins.length\n  const nOutputs = tx.outs.length\n\n  if (vBytes >= thisVirtualSize) {\n    // If this tx fee was calculated for a vBytes size equal to or larger than the resulting derived tx (thisVirtualSize),\n    // fee should be safe by being equal to or larger than necessary at required feeRate.\n    // Obviously vBytes = 0 will never give the correct fee minimum the first time through.\n    console.log('virtualSize', tx.virtualSize())\n    console.log('byteLength', tx.byteLength())\n    console.log('getId', tx.getId())\n    console.log('hex', tx.toHex())\n    console.log('')\n    return {\n      txid,\n      thisVirtualSize,\n      hex,\n      valueNeeded,\n      fee,\n      change,\n      burnAmount,\n      notifyAmount: MIN_NOTIFY,\n      refundsAmount,\n      totalGathered,\n      gatheredFromWallet,\n      gatheredFromOther,\n      nInputs,\n      nOutputs,\n      nInputsFromWallet: toBeUsedUtxoOfUserWallet.length,\n      nInputsFromOther: toBeUsedUtxoOfNotifications.length || 0\n    }\n  } else {\n    // Redo this tx calculation using the virtual size we just calculated for vByte optional parameter.\n    return calcTx(wallet, domain, choices, networkChoice, thisVirtualSize)\n  }\n}\n","// My edit of https://github.com/bin-y/standard-ecies/blob/master/main.js\n// Removed space consuming hmac, replaced with 4 byte checksum, simplified\n// https://medium.com/asecuritysite-when-bob-met-alice/go-public-and-symmetric-key-the-best-of-both-worlds-ecies-180f71eebf59\n// https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme\n\nimport crypto from 'crypto'\n\n// ecies.encrypt() or ecies.decrypt()\n\ninterface I_Options {\n  hashName?: string // 'sha256' (default)\n  curveName?: string // e.g. 'secp256k1' (default)\n  symmetricCypherName?: string // e.g. 'aes-256-crt' or 'aes-256-ecb' (default)\n  iv?: Buffer | null // 16 byte buffer or null\n  toIv?: Buffer | string // will get hashed to derive iv\n  keyFormat?: 'compressed' | 'uncompressed' | 'hybrid' // e.g. 'compressed' (default)\n}\n\n/**\n * Attempts to encrypt with public key.\n * For 'secp256k1' 33 bytes on ephemeral key, 4 bytes checksum, rest on cipher content.\n * Returns encrypted message buffer or undefined if error.\n * @param     {Buffer}      publicKey           Public key to encrypt with.\n * @param     {Buffer}      message             Clear text message to decrypt.\n * @param     {object}      [options={}]        Object with options.\n * @returns   {Buffer | undefined}              Encrypted message buffer, undefined if error.\n */\nconst encrypt = (\n  publicKey: Buffer,\n  message: Buffer,\n  options: I_Options = {}\n) => {\n  options = makeUpOptions(options)\n\n  try {\n    // add 4 byte checksum to end of cleartext to check later\n    const checkSum = crypto\n      .createHash('sha256')\n      .update(message)\n      .digest()\n      .slice(0, 4)\n    const checkSummedMessage = Buffer.concat([message, checkSum])\n\n    const ecdh = crypto.createECDH(options.curveName!)\n    // R (generated)\n    // null error avoided via hex buffer\n    const R = Buffer.from(ecdh.generateKeys('hex', options.keyFormat!), 'hex')\n    // S (calculated)\n    const sharedSecret = ecdh.computeSecret(publicKey)\n\n    // uses KDF to derive a symmetric encryption\n    // Ke = KDF(S)\n    const hash = hashMessage(options.hashName!, sharedSecret)\n    // Ke\n    const encryptionKey = hash\n\n    // encrypts the message:\n    // c = E(Ke m)\n    const cipherText = symmetricEncrypt(\n      options.symmetricCypherName!,\n      options.iv,\n      encryptionKey,\n      checkSummedMessage\n    )\n\n    // console.log('ecies encryption success with', { R, cipherText })\n\n    // outputs R || c\n    return Buffer.concat([R, cipherText])\n  } catch (e) {\n    return undefined\n  }\n}\n\n/**\n * Attempts to decrypt with private key.\n * Returns decrypted message buffer or undefined if error or checksum fail.\n * @param     {Buffer}      privateKey          Private key to decrypt with.\n * @param     {Buffer}      encryptedMessage    Encrypted message to decrypt.\n * @param     {object}      [options={}]        Object with options.\n * @returns   {Buffer | undefined}              Cleartext if decrypted, otherwise undefined.\n */\nconst decrypt = (\n  privateKey: Buffer,\n  encryptedMessage: Buffer,\n  options: I_Options = {}\n) => {\n  options = makeUpOptions(options)\n\n  const ecdh = crypto.createECDH(options.curveName!)\n  ecdh.setPrivateKey(privateKey)\n\n  try {\n    // null error avoided via hex buffer\n    const publicKeyLength = Buffer.from(\n      ecdh.getPublicKey('hex', options.keyFormat),\n      'hex'\n    ).length\n    // R (provided)\n    const R = encryptedMessage.slice(0, publicKeyLength)\n    // c (provided)\n    const cipherText = encryptedMessage.slice(\n      publicKeyLength,\n      encryptedMessage.length\n    )\n    // S (calculated)\n    const sharedSecret = ecdh.computeSecret(R)\n\n    // derives keys the same way as Alice did:\n    // Ke = KDF(S)\n    const hash = hashMessage(options.hashName!, sharedSecret)\n    // Ke\n    const encryptionKey = hash\n\n    // console.log({ R, cipherText })\n    const decryptedMessagecheckSummed = symmetricDecrypt(\n      options.symmetricCypherName!,\n      options.iv,\n      encryptionKey,\n      cipherText\n    )\n\n    // check the last 4 bytes of checksum\n    const checkSum = decryptedMessagecheckSummed.slice(-4)\n    const decryptedMessage = decryptedMessagecheckSummed.slice(0, -4)\n    const newCheckSum = crypto\n      .createHash('sha256')\n      .update(decryptedMessage)\n      .digest()\n      .slice(0, 4)\n\n    // if not equal or either are too short\n    if (\n      Buffer.compare(checkSum, newCheckSum) !== 0 ||\n      checkSum.length !== 4 ||\n      newCheckSum.length !== 4\n    ) {\n      throw new Error('checkSum failed')\n    }\n\n    // console.log('ecies decryption success from', { R, cipherText })\n    return decryptedMessage\n  } catch (e) {\n    return undefined\n  }\n}\n\nexport const ecies = { encrypt, decrypt }\n\n/* -------------------------------------------------------------------------- */\n/*                                   helpers                                  */\n/* -------------------------------------------------------------------------- */\n\n// E\nfunction symmetricEncrypt(\n  cypherName: string,\n  iv: Buffer | null | undefined,\n  key: Buffer,\n  plaintext: Buffer\n) {\n  let cipher\n  if (iv) {\n    cipher = crypto.createCipheriv(cypherName, key, iv)\n  } else {\n    cipher = crypto.createCipher(cypherName, key)\n  }\n  const firstChunk = cipher.update(plaintext)\n  const secondChunk = cipher.final()\n  return Buffer.concat([firstChunk, secondChunk])\n}\n\n// E-1\nfunction symmetricDecrypt(\n  cypherName: string,\n  iv: Buffer | null | undefined,\n  key: Buffer,\n  ciphertext: Buffer\n) {\n  let cipher\n  if (iv) {\n    cipher = crypto.createDecipheriv(cypherName, key, iv)\n  } else {\n    cipher = crypto.createDecipher(cypherName, key)\n  }\n  const firstChunk = cipher.update(ciphertext)\n  const secondChunk = cipher.final()\n  return Buffer.concat([firstChunk, secondChunk])\n}\n\n// KDF\nfunction hashMessage(cypherName: string, message: Buffer) {\n  return crypto\n    .createHash(cypherName)\n    .update(message)\n    .digest()\n}\n\nfunction makeUpOptions(options: I_Options = {}) {\n  if (options.hashName === undefined) {\n    options.hashName = 'sha256'\n  }\n  if (options.curveName === undefined) {\n    options.curveName = 'secp256k1'\n  }\n  if (options.symmetricCypherName === undefined) {\n    options.symmetricCypherName = 'aes-256-ecb'\n    options.iv = null\n  }\n  if (options.iv === undefined && !!options.toIv) {\n    options.iv = crypto\n      .createHash('sha256')\n      .update(options.toIv) // value to hash\n      .digest() // hash\n      .slice(0, 16) // first 16 bytes\n  }\n  if (options.keyFormat === undefined) {\n    options.keyFormat = 'compressed'\n  }\n\n  return options\n}\n","// types of user BNS actions that match use in actions.tsx\nexport enum BnsActionType {\n  RENEW = 'RENEW',\n  ONLY_FORWARDS = 'ONLY_FORWARDS',\n  BID_FOR_OWNERSHIP = 'BID_FOR_OWNERSHIP',\n  SEND_OWNERSHIP = 'SEND_OWNERSHIP',\n  CHANGE_ADDRESS = 'CHANGE_ADDRESS',\n  REFUND_OTHER_BIDS = 'REFUND_OTHER_BIDS'\n}\n\n// types of suggestions so user interface can interpret correctly\n// among limited options\nexport enum BnsSuggestionType {\n  REFUND_BIDDERS = 'REFUND_BIDDERS'\n}\n\n// types of bidding\nexport enum BnsBidType {\n  BURN = 'BURN', // ownership bidding in progress taht requires burns\n  NULL = 'NULL' // no bidding in progress\n}\n\nexport interface I_BNS_Action {\n  type: BnsActionType\n  info: string\n  permissions: Array<any>\n  conditions: Array<any>\n  execute: () => void\n  args: any\n}\n\nexport interface I_BNS_Auto_Action {\n  info: string\n  conditions: Array<any>\n  execute: () => void\n}\n\n// export interface I_Action_Choice {\n//   type: BnsActionType\n//   info: string\n//   suggestions: Array<any>\n//   actionContent: string\n// }\n\nexport interface I_BnsState {\n  domain: I_Domain\n  chain?: {\n    parsedHeight: number // parsed height for derivation\n    currentHeight: number // real world block height (for final update)\n  }\n}\n\nexport interface I_Domain {\n  // notification info for this domain name\n  domainName: string // domain name\n  notificationAddress: string // p2wsh address for this domain name (alias + extension)\n  txHistory: Array<I_TX> // array of all tx for this address (old addressHistory)\n  derivedUtxoList: Array<I_UTXO> // derived utxo set from tx history parse\n  utxoList: Array<I_UTXO> // array of all real time utxo at address\n  users: {\n    // keeps track of interacting users / source addresses\n    // with addresses as keys\n    [address: string]: I_User\n  }\n  currentOwner: string // points to a source address or blank string\n\n  bidding: {\n    // bidding\n    startHeight: number // auction/challenge start height\n    endHeight: number // \" end height\n    type: BnsBidType // type of bidding - e.g. BURN / NULL\n    bids: Array<I_Bid> // array of bids\n  }\n\n  ownersHistory: Array<I_User> // owner history log\n}\n\nexport interface I_Bid {\n  height: number // height the bid was confirmed\n  timestamp: number // timestamp when bid was confirmed\n  address: string // address doing the bidding\n  value: number // amount bid\n  valueLeftToRefund: number // amount of bid left to refund\n  blockHash: string // block hash of block where tx was confirmed\n}\n\nexport interface I_User {\n  address: string // address in control\n  forwards: Array<I_Forward> // for forwards later\n  burnAmount: number // burned to get ownership\n  winHeight: number // blockheight winning bid\n  winTimestamp: number // winHeight in block's timestamp\n  nonce: number // for counting previous notification\n  // height from this address, no matter good/bad/type\n  updateHeight: number // the height of most current parsed update, created\n  // after nonce height & therefore using it\n}\n\n// each forward object has the following data\nexport interface I_Forward {\n  network: string\n  address: string\n  updateHeight: number\n  updateTimestamp: number\n}\n\nexport interface I_TX {\n  txid: string\n  version: number\n  locktime: number\n  size: number\n  weight: number\n  fee: number\n  vin: Array<{\n    txid: string\n    vout: number\n    prevout: {\n      scriptpubkey: string\n      scriptpubkey_asm: string\n      scriptpubkey_type: string\n      scriptpubkey_address: string\n    }\n    scriptsig: string\n    scriptsig_asm: string\n    witness: {\n      [key: number]: string\n    }\n    is_coinbase: boolean\n    sequence: number\n  }>\n  vout: Array<{\n    scriptpubkey: string\n    scriptpubkey_asm: string\n    scriptpubkey_type: string\n    scriptpubkey_address: string // op return case?\n    value: number\n  }>\n  status: {\n    confirmed: boolean // unconfirmed case?\n    block_height: number\n    block_hash: string\n    block_time: number\n  }\n}\n\nexport interface I_UTXO {\n  txid: string\n  vout: number\n  status: {\n    confirmed: boolean\n    block_height: number\n    block_hash: string\n    block_time: number\n  }\n  value: number\n  hex?: string\n  from_scriptpubkey_address?: string\n}\n\nexport interface I_Condition {\n  status: () => boolean\n  info: {\n    describe: string // string containing explanation for user\n    type?: BnsSuggestionType // type of suggestion\n    set?: {\n      // object suggesting user sets something to a value\n      value: any // value to set it to (if exact value unknown better to .get it from user)\n      name: string // what the value is for\n      units: string // units\n    }\n    get?: {\n      // object of suggested variable to get from user\n      value: number | string | boolean // initial value of variable trying to get\n      name: string // name of variable getting\n      min?: number | null // possible min value\n      max?: number | null // possible max value\n      units?: string // units if necessary\n    }\n    command?: string // command if this is a command to be embedded (value in get/set)\n    warning?: string // warn if this is possible but terrible idea\n  }\n}\n\nexport interface I_Evaluated_Condition extends I_Condition {\n  // all I_Conditions parameters extended\n  isAllowed: boolean // if permission passed check\n}\n\n// this is checked to know what user options are PER ACTION\nexport interface I_Checked_Action {\n  type: BnsActionType // pass each action type to user attempting to create tx\n  info: string // describe each action type\n  isUsable: boolean // summarize if it meets all permissions for user to do\n  permissionList: [\n    // ONLY permissiond checked for this action (all can do before tx)\n    I_Evaluated_Condition\n  ]\n  suggestions: Array<I_Condition> // info from ALL action's conditions\n}\n","export * from './types'\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P1RestoreOrBackup_wrapper__32TQJ\",\"title\":\"P1RestoreOrBackup_title__2rH-6\",\"contentWrapper\":\"P1RestoreOrBackup_contentWrapper__1NT85\",\"buttonWrapper\":\"P1RestoreOrBackup_buttonWrapper__2ryAq\",\"describe\":\"P1RestoreOrBackup_describe__1RMqs\",\"orange\":\"P1RestoreOrBackup_orange__3V9sL\",\"spacer\":\"P1RestoreOrBackup_spacer__3luud\",\"backup\":\"P1RestoreOrBackup_backup__357rd\",\"restoreBackup\":\"P1RestoreOrBackup_restoreBackup__VUHgs\"};","module.exports = __webpack_public_path__ + \"static/media/graphic.b15c3267.png\";","import * as bitcoin from 'bitcoinjs-lib'\nimport { I_TxBuilder } from '../interfaces'\nimport varuint from 'varuint-bitcoin'\n\n/**\n * Handles psbt actions through bitcoinjs-lib.\n * Tx builder (tb) values cannot be undefined, only null or type.\n * Null values will not enter into psbt.\n * Throws tb-specific errors too.\n * vBytes is the max allowed tx size that is within fee rate set.\n */\nexport const getTx = (tb: I_TxBuilder, vBytesMax = 1): I_TxBuilder => {\n  try {\n    if (!tb.network)\n      throw new Error('Must provide network (\"bitcoin\" or \"testnet\")')\n\n    const network = bitcoin.networks[tb.network]\n\n    // initialize psbt object & values\n    const psbt = new bitcoin.Psbt({ network })\n    initializeValues({ tb, psbt })\n\n    // add exact inputs & adjust outputs if need more for fee\n    addInputs({ tb, psbt, vBytesMax })\n\n    // reset outputs from fixedOutputs\n    tb.outputs = JSON.parse(JSON.stringify(tb.outputsFixed))\n\n    // add outputs\n    addOutputs({ tb, psbt })\n\n    // sign & finalize inputs\n    signInputs({ tb, psbt })\n\n    // finalize tx\n    const tx = psbt.extractTransaction()\n    const thisVirtualSize = tx.virtualSize()\n\n    if (vBytesMax >= thisVirtualSize) {\n      // if within fee limit\n\n      // update transction builder\n      tb.result.hex = tx.toHex()\n      tb.result.virtualSize = thisVirtualSize\n      tb.result.txid = tx.getId()\n\n      // console.log some results\n      console.log('')\n      console.log(`tx with appropriate size calculated:`)\n      console.log(tx)\n      console.log('hex', tb.result.hex)\n      console.log('virtualSize', thisVirtualSize)\n      console.log('txid', tb.result.txid)\n      console.log('actual fee', tb.result.fee)\n      console.log('actual fee rate', tb.result.fee / tb.result.virtualSize)\n      console.log('transaction builder object:', tb)\n      console.log('')\n\n      // return transaction builder object\n      return tb\n    } else {\n      console.log(\n        `tx draft size ${thisVirtualSize} was larger than max of ${vBytesMax} vbytes, recalculating`\n      )\n      // if above fee limit, redo calc with new fee limit\n      return getTx(tb, thisVirtualSize)\n    }\n  } catch (e) {\n    console.log('before', tb)\n    initializeValues({ tb })\n    console.log('after', tb)\n    throw e\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                              Initialize values                             */\n/* -------------------------------------------------------------------------- */\nconst initializeValues = ({ tb, psbt }: { tb: any; psbt?: any }): any => {\n  // basic tx settings\n  psbt?.setVersion(tb.setVersion)\n  psbt?.setLocktime(tb.setLocktime)\n  // reset inputs & outputs from fixedInputs\n  tb.inputs = JSON.parse(JSON.stringify(tb.inputsFixed))\n  tb.outputs = JSON.parse(JSON.stringify(tb.outputsFixed))\n\n  // reset results\n  tb.result = {\n    hex: '',\n    virtualSize: 0,\n    outgoingValue: 0,\n    minOutgoingValue: 0,\n    changeValue: 0,\n    inputsValue: 0,\n    availableInputsValue: 0,\n    fee: 0,\n    txid: ''\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                 add inputs                                 */\n/* -------------------------------------------------------------------------- */\nconst addInputs = ({\n  tb,\n  psbt,\n  vBytesMax\n}: {\n  tb: any\n  psbt: any\n  vBytesMax: number\n}): any => {\n  // add up required \"fixed\" outputs for required \"fixed\" outgoing value\n  tb.result.outgoingValue = 0\n  tb.result.minOutgoingValue = 0\n  Object.keys(tb.outputsFixed).forEach((vout: string) => {\n    tb.result.minOutgoingValue += tb.outputsFixed[vout].minValue\n    tb.result.outgoingValue += tb.outputsFixed[vout].value\n    if (tb.outputsFixed[vout].value <= tb.minDustValue)\n      throw new Error(\n        `Output ${vout} value is below dust setting of ${tb.minDustValue}`\n      )\n  })\n\n  // use last calculated tx size to calculate fee\n  // recursion guarantees fee will not end up smaller than fee rate\n  let fee: number = Math.ceil(vBytesMax * tb.feeRate) + 1\n  // to cover transfer AND fee, need at least this much from inputs\n  const totalNeeded: number = tb.result.outgoingValue + fee\n\n  // match or beat needed sats value with utxo list\n  let valueGatheredFromWallet = 0\n  const toBeUsedUtxoOfUserWallet: any = []\n  tb.result.availableInputsValue = 0\n\n  // go from utxo array to enough utxo to cover withdrawal\n  tb.utxoList?.forEach((utxo: any) => {\n    tb.result.availableInputsValue += utxo.value\n    if (\n      valueGatheredFromWallet < totalNeeded ||\n      toBeUsedUtxoOfUserWallet.length === 0\n    ) {\n      toBeUsedUtxoOfUserWallet.push(utxo)\n      valueGatheredFromWallet += utxo.value\n    }\n  })\n\n  // disqualify if more outgoing than all funds available in utxo\n  if (tb.result.availableInputsValue < tb.result.outgoingValue) {\n    throw new Error(\n      'Not enough overall funds available (need: ' +\n        (tb.result.outgoingValue / 1e8).toFixed(8) +\n        ' BTC, have: ' +\n        (tb.result.availableInputsValue / 1e8).toFixed(8) +\n        ' BTC)'\n    )\n  }\n\n  // check if not enough funds\n  if (valueGatheredFromWallet < totalNeeded) {\n    // check if there's enough funds to subtract the fees from amount to send\n    if (tb.result.outgoingValue - fee > tb.result.minOutgoingValue) {\n      console.log(\n        `Attempting to reduce outputs to get ${fee} sats necessary for fee`,\n        tb\n      )\n      // go through reducing fixed outputs to  attempt to find enough for a fee\n      Object.keys(tb.outputsFixed).forEach((vout: string) => {\n        if (\n          tb.outputsFixed[vout].minValue === undefined ||\n          tb.outputsFixed[vout].minValue === null\n        ) {\n          // just in case set min value to value if it's missing\n          tb.outputsFixed[vout].minValue = tb.outputsFixed[vout].value\n        }\n        console.log(tb.outputsFixed[vout].value, tb.outputsFixed[vout].minValue)\n        // this output allows this much reduction in sats\n        const slack = Math.max(\n          tb.outputsFixed[vout].value - tb.outputsFixed[vout].minValue,\n          0\n        )\n        // this is how much this output & outstanding fee can be reduced by\n        const subtractable = Math.min(slack, fee)\n        // reduce outstanding fees needed and output value\n        fee -= subtractable\n        tb.outputsFixed[vout].value -= subtractable\n\n        console.log(\n          tb.outputsFixed[vout].value,\n          tb.outputsFixed[vout].minValue,\n          slack,\n          subtractable\n        )\n\n        console.log(\n          `output ${vout} value had to be decreased from ${tb.outputsFixed[vout]\n            .value + subtractable} to ${\n            tb.outputsFixed[vout].value\n          } resulting in ${fee} sat more necessary to cover the fee`\n        )\n      })\n\n      // if the fee was covered, redo adding inputs\n      if (fee <= 0) {\n        // abort this addInputs call and redo it with new outputsFixed values\n        return addInputs({ tb, psbt, vBytesMax })\n      }\n      // otherwise continue to the error below\n    }\n\n    // abort since no way to compensate for lacking funds\n    throw new Error(\n      'Not enough funds available (need: ' +\n        (totalNeeded / 1e8).toFixed(8) +\n        ' BTC, have: ' +\n        (valueGatheredFromWallet / 1e8).toFixed(8) +\n        ' BTC)'\n    )\n  }\n\n  // change is the left over between wallet inputs minus fee minus transfer\n  tb.result.changeValue = valueGatheredFromWallet - totalNeeded\n  tb.result.fee = fee\n  tb.result.inputsValue = valueGatheredFromWallet\n\n  /* ----------------- add detailed info for USED psbt inputs ----------------- */\n\n  toBeUsedUtxoOfUserWallet.forEach((utxo: any, index: number) => {\n    tb.inputs[index.toFixed(0)] = {\n      hash: utxo.txid,\n      index: utxo.vout,\n      sequence: utxo.sequence,\n      nonWitnessUtxo: Buffer.from(utxo.hex, 'hex'),\n      witnessScript: utxo.witnessScript,\n      redeemScript: utxo.redeemScript,\n      inputScript: utxo.inputScript,\n\n      keyPairs: utxo.keyPairs.map((wif: any) =>\n        bitcoin.ECPair.fromWIF(wif, bitcoin.networks[tb.network])\n      ),\n      // string to bitcoin lib sighash value\n      sighashTypes: utxo.sighashTypes.map(\n        (sighashType: string) => bitcoin.Transaction[sighashType]\n      ),\n      canJustSign: utxo.canJustSign,\n\n      // useful info\n      address: utxo.address,\n      value: utxo.value,\n      info: utxo.info\n    }\n  })\n\n  // check that there has been enough information for at least one input\n  if (!tb.inputs || Object.keys(tb.inputs).length === 0) {\n    throw new Error(`Can't have no inputs`)\n  }\n\n  // check that there's an input for each index up to max\n  console.log(`getTx found ${Object.keys(tb.inputs).length.toFixed(0)} inputs`)\n  for (let i = 0; i < Object.keys(tb.inputs).length; i++) {\n    const thisValue = tb.inputs[i.toFixed(0)]\n    if (thisValue === undefined) {\n      throw new Error(`Missing input at vin index ${i.toFixed(0)}`)\n    }\n  }\n\n  // check and add each exact input to PSBT\n  // thisInput is what goes into PSBT\n  // tb.inputs is my personal detailed input data\n  Object.keys(tb.inputs).forEach((thisVin: string, i: number) => {\n    // check that input key matches current index\n    if (thisVin !== i.toFixed(0))\n      throw new Error(`Wrong labeled input with key ${thisVin}`)\n\n    const thisInput = tb.inputs[thisVin]\n\n    // required values\n    if (thisInput.hash === undefined)\n      throw new Error(`Missing txid on input #${thisVin}`)\n    if (thisInput.index === undefined)\n      throw new Error(`Missing vout on input #${thisVin}`)\n    if (thisInput.sequence === undefined)\n      throw new Error(`Missing sequence on input #${thisVin}`)\n    if (thisInput.nonWitnessUtxo === undefined)\n      throw new Error(`Missing input's full tx hex on input #${thisVin}`)\n\n    const inputBuilder: any = {\n      hash: thisInput.hash,\n      index: thisInput.index,\n      sequence: thisInput.sequence,\n      nonWitnessUtxo: thisInput.nonWitnessUtxo\n    }\n\n    // optional values\n\n    if (thisInput.witnessScript)\n      inputBuilder.witnessScript = thisInput.witnessScript\n    if (thisInput.redeemScript)\n      inputBuilder.redeemScript = thisInput.redeemScript\n\n    // (TODO) calc sigs for inputScript\n    // could do from asm and pass as string instead of function\n    // then replace signature<index> publickey<index> with matching\n    // keyPairs[index] and if needed sighashTypes[index], numbers can be encoded\n    // into string before.\n    // https://github.com/bitcoinjs/bitcoinjs-lib/blob/f48abd322f14f6eec8bfc19e7838a1a150eefb56/test/integration/cltv.spec.ts#L43\n    if (thisInput.inputScript)\n      inputBuilder.inputScript = bitcoin.script\n        .fromASM(inputBuilder.inputScript)\n        .trim()\n        .replace(/\\s+/g, ' ')\n\n    // If witness or redeem script are provided it means inputscript is necessary to spend output\n    if (\n      (thisInput.witnessScript || thisInput.redeemScript) &&\n      !thisInput.inputScript\n    ) {\n      throw new Error(`\n        Missing input script on input #${thisVin} but provided\n        ${thisInput.witnessScript ? ' witness ' : ''}\n        ${thisInput.witnessScript && thisInput.redeemScript ? ' & ' : ''}\n        ${thisInput.redeemScript ? ' redeem ' : ''}\n        script\n      `)\n    }\n    // Backwards also doesn't work. if input script is provided need one of the others.\n    // Input script needs to input values into one of them...\n    if (\n      !thisInput.witnessScript &&\n      !thisInput.redeemScript &&\n      thisInput.inputScript\n    ) {\n      throw new Error(\n        `Missing witness or redeem scripts but provided input script for input #${thisVin}`\n      )\n    }\n\n    if (\n      !thisInput.canJustSign &&\n      (!thisInput.inputScript ||\n        !thisInput.witnessScript ||\n        !thisInput.redeemScript)\n    ) {\n      throw new Error(\n        `Can't just sign but no spending scripts either for input #${thisVin}`\n      )\n    }\n\n    if (thisInput.keyPairs) inputBuilder.keyPairs = thisInput.keyPairs\n    if (\n      (!thisInput.keyPairs || !thisInput.keyPairs[0]) &&\n      thisInput.canJustSign\n    ) {\n      throw new Error(`Need 1 keypair to just sign input #${thisVin}`)\n    }\n\n    if (thisInput.sighashTypes)\n      inputBuilder.sighashTypes = thisInput.sighashTypes\n    if (\n      thisInput.sighashTypes &&\n      thisInput.keyPairs &&\n      thisInput.sighashTypes.length !== thisInput.keyPairs.length\n    ) {\n      throw new Error(\n        `Each key pair needs matching sighash choice. Missing matches on input #${thisVin}`\n      )\n    }\n\n    // add it\n    psbt.addInput({ ...inputBuilder })\n  })\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                 add outputs                                */\n/* -------------------------------------------------------------------------- */\nconst addOutputs = ({ tb, psbt }: { tb: any; psbt: any }) => {\n  if (!tb.outputs || Object.keys(tb.outputs).length === 0) {\n    throw new Error(`Can't have no outputs`)\n  }\n\n  // check that there's an output for each index up to max\n  console.log(\n    `getTx found ${Object.keys(tb.outputs).length.toFixed(0)} outputs`\n  )\n\n  for (let i = 0; i < Object.keys(tb.outputs).length; i++) {\n    const thisValue = tb.outputs[i.toFixed(0)]\n    if (thisValue === undefined) {\n      throw new Error(`Missing output at vout index ${i.toFixed(0)}`)\n    }\n  }\n\n  // add change output if change is above dust level\n  if (tb.minDustValue < tb.result.changeValue) {\n    const nextIndex = Object.keys(tb.outputs).length // next index\n    tb.outputs[nextIndex.toFixed(0)] = {\n      address: tb.changeAddress,\n      value: tb.result.changeValue,\n      info: 'change'\n    }\n  }\n\n  Object.keys(tb.outputs).forEach((thisVout: string, i: number) => {\n    // check that output key matches current index\n    if (thisVout !== i.toFixed(0))\n      throw new Error(`Badly labeled output with key ${thisVout}`)\n\n    const thisNewOutput = tb.outputs[thisVout]\n\n    // required values\n    if (!thisNewOutput.value)\n      throw new Error(`Missing value on output #${thisVout}`)\n\n    const outputBuilder: any = {\n      value: thisNewOutput.value\n    }\n\n    // need either address or script\n    if (!thisNewOutput.address && !thisNewOutput.script) {\n      throw new Error(`Missing address OR script on output #${thisVout}`)\n    }\n    if (thisNewOutput.address) outputBuilder.address = thisNewOutput.address\n    if (thisNewOutput.script) outputBuilder.script = thisNewOutput.script\n\n    // add it\n    psbt.addOutput({ ...thisNewOutput })\n  })\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                 sign inputs                                */\n/* -------------------------------------------------------------------------- */\nconst signInputs = ({ tb, psbt }: { tb: any; psbt: any }) => {\n  const network = bitcoin.networks[tb.network]\n\n  const nInputs = Object.keys(tb.inputs).length\n\n  for (let i = 0; i < nInputs; i++) {\n    const input = tb.inputs[i.toFixed(0)]\n\n    if (input.canJustSign) {\n      // easy case, signs with input.keyPairs[0]\n      psbt.signInput(i, input.keyPairs[0])\n\n      if (!psbt.validateSignaturesOfInput(i)) {\n        throw new Error(\n          'Signature validation failed for input index ' + i.toFixed(0)\n        )\n      }\n\n      psbt.finalizeInput(i)\n    }\n\n    // hard case with scripts\n    // ((TODO): no signatures calc yet. Those would go into input.inputScript)\n    if (!input.canJustSign) {\n      psbt.finalizeInput(\n        i,\n        getFinalScripts({\n          inputScript: input.inputScript,\n          network\n        })\n      )\n    }\n  }\n}\n\n/* ----------------------------- handle scripts ----------------------------- */\n\n/**\n * Finalize outputs that require custom scripts.\n * Based on based on\n * https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/csv.spec.ts\n */\nexport const getFinalScripts = ({ inputScript, network }: any) => {\n  return function (\n    inputIndex: number,\n    input: any,\n    script: Buffer,\n    isSegwit: boolean,\n    isP2SH: boolean,\n    isP2WSH: boolean\n  ): {\n    finalScriptSig: Buffer | undefined\n    finalScriptWitness: Buffer | undefined\n  } {\n    // Step 1: Check to make sure the meaningful script matches what you expect.\n\n    // Step 2: Create final scripts\n    let payment: any = {\n      network,\n      output: script,\n      input: inputScript\n    }\n    if (isP2WSH && isSegwit)\n      payment = bitcoin.payments.p2wsh({\n        network,\n        redeem: payment\n      })\n    if (isP2SH)\n      payment = bitcoin.payments.p2sh({\n        network,\n        redeem: payment\n      })\n\n    function witnessStackToScriptWitness (witness: Buffer[]): Buffer {\n      let buffer = Buffer.allocUnsafe(0)\n\n      function writeSlice (slice: Buffer): void {\n        buffer = Buffer.concat([buffer, Buffer.from(slice)])\n      }\n\n      function writeVarInt (i: number): void {\n        const currentLen = buffer.length\n        const varintLen = varuint.encodingLength(i)\n\n        buffer = Buffer.concat([buffer, Buffer.allocUnsafe(varintLen)])\n        varuint.encode(i, buffer, currentLen)\n      }\n\n      function writeVarSlice (slice: Buffer): void {\n        writeVarInt(slice.length)\n        writeSlice(slice)\n      }\n\n      function writeVector (vector: Buffer[]): void {\n        writeVarInt(vector.length)\n        vector.forEach(writeVarSlice)\n      }\n\n      writeVector(witness)\n\n      return buffer\n    }\n\n    return {\n      finalScriptSig: payment.input,\n      finalScriptWitness:\n        payment.witness && payment.witness.length > 0\n          ? witnessStackToScriptWitness(payment.witness)\n          : undefined\n    }\n  }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SearchResults_wrapper__VvaYk\",\"scrollbars\":\"SearchResults_scrollbars__1zMfY\",\"breakable\":\"SearchResults_breakable__3r3ay\",\"listContainer\":\"SearchResults_listContainer__12vQE\",\"listItem\":\"SearchResults_listItem__3Udwx\",\"key\":\"SearchResults_key__358jo\",\"expired\":\"SearchResults_expired__2ptnD\",\"avaiability\":\"SearchResults_avaiability__3E0Yr\",\"createLink\":\"SearchResults_createLink__13Wez\",\"describe\":\"SearchResults_describe__3HACm\",\"ownershipDetails\":\"SearchResults_ownershipDetails__1Z7p1\",\"balance\":\"SearchResults_balance__11rok\",\"linkable\":\"SearchResults_linkable__86qQ2\",\"matches\":\"SearchResults_matches__CzTtF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P4ActionChoice_wrapper__2u2J5\",\"title\":\"P4ActionChoice_title__2PdRs\",\"availableActions\":\"P4ActionChoice_availableActions__1O5aS\",\"inputForms\":\"P4ActionChoice_inputForms__3vlaZ\",\"okButton\":\"P4ActionChoice_okButton__lq4sl\",\"unavailableActions\":\"P4ActionChoice_unavailableActions__3rEYI\",\"buttonWrapper\":\"P4ActionChoice_buttonWrapper__3Sx3Y\",\"orange\":\"P4ActionChoice_orange__6-7sA\",\"unavailableActions__title\":\"P4ActionChoice_unavailableActions__title__2EQ4_\",\"unavailableActions__actionList\":\"P4ActionChoice_unavailableActions__actionList__1VAc_\",\"unavailableActions__actionList__action\":\"P4ActionChoice_unavailableActions__actionList__action__GMwoW\",\"unavailableActions__actionList__action__title\":\"P4ActionChoice_unavailableActions__actionList__action__title__3ljZU\",\"unavailableActions__actionList__action__permissionList\":\"P4ActionChoice_unavailableActions__actionList__action__permissionList__2pKeq\",\"unavailableActions__actionList__action__permissionList__permission\":\"P4ActionChoice_unavailableActions__actionList__action__permissionList__permission__2eF7F\",\"breakable\":\"P4ActionChoice_breakable__x4Qcm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P2LoadWallet_wrapper__vI_bb\",\"title\":\"P2LoadWallet_title__8Dw43\",\"contentWrapper\":\"P2LoadWallet_contentWrapper__UNLo4\",\"buttonWrapper\":\"P2LoadWallet_buttonWrapper__1rrct\",\"button\":\"P2LoadWallet_button__1A8-S\",\"address\":\"P2LoadWallet_address__37xx2\",\"orange\":\"P2LoadWallet_orange__UP8xH\",\"imgQr\":\"P2LoadWallet_imgQr__3Avh3\",\"backAndReady\":\"P2LoadWallet_backAndReady__3oVit\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Withdraw_wrapper__3h_E8\",\"top\":\"Withdraw_top__WMcMG\",\"top__title\":\"Withdraw_top__title__2nvNl\",\"contentWrapper\":\"Withdraw_contentWrapper__3qh1K\",\"from\":\"Withdraw_from__2QYKc\",\"from__alias\":\"Withdraw_from__alias__19Znf\",\"from__label\":\"Withdraw_from__label__2ih7A\",\"from__address\":\"Withdraw_from__address__27oey\",\"buttonWrapper\":\"Withdraw_buttonWrapper__3KjA4\",\"total\":\"Withdraw_total__1JqZ7\",\"total__value\":\"Withdraw_total__value__27G97\",\"total__units\":\"Withdraw_total__units__3QTMy\",\"withdraw_control\":\"Withdraw_withdraw_control__dWjSP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo_wrapper\":\"Wallet_logo_wrapper__2MTPI\",\"logo\":\"Wallet_logo__1MF_4\",\"logo_selected\":\"Wallet_logo_selected__FVFkj\",\"interface_not\":\"Wallet_interface_not__2GDqb\",\"interface\":\"Wallet_interface__G-UJ_\",\"title\":\"Wallet_title__1-hmV\",\"amounts\":\"Wallet_amounts__1ZUs7\",\"calculatedAmounts\":\"Wallet_calculatedAmounts__3Yt45\",\"lastError\":\"Wallet_lastError__3ty5G\",\"buttonWrapper\":\"Wallet_buttonWrapper__9VSeJ\",\"entries\":\"Wallet_entries__3RRgo\",\"entries__entry\":\"Wallet_entries__entry__1xv5-\",\"entries__entry__time\":\"Wallet_entries__entry__time__3SEYL\",\"entries__entry__button\":\"Wallet_entries__entry__button__yjy2c\",\"entries__entry__message\":\"Wallet_entries__entry__message__KpGlp\",\"entries__entry__error\":\"Wallet_entries__entry__error__1J4by\",\"entries__entry__done\":\"Wallet_entries__entry__done__k3v84\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P6Broadcast_wrapper__32tq-\",\"title\":\"P6Broadcast_title__2fzea\",\"fees\":\"P6Broadcast_fees__STZ2e\",\"txSummary\":\"P6Broadcast_txSummary__24FzE\",\"status\":\"P6Broadcast_status__3SsMv\",\"totalCost\":\"P6Broadcast_totalCost__Agr2T\",\"buttonWrapper\":\"P6Broadcast_buttonWrapper__ROAk6\",\"status__button\":\"P6Broadcast_status__button__fFvc3\",\"status__failed\":\"P6Broadcast_status__failed__1moa8\",\"balance\":\"P6Broadcast_balance__1ZVur\",\"error\":\"P6Broadcast_error__1ohCz\",\"notify\":\"P6Broadcast_notify__3_5vg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"roundButtonWrap\":\"RoundButton_roundButtonWrap__2X50a\",\"roundButton\":\"RoundButton_roundButton__tfjmf\",\"disabledWrap\":\"RoundButton_disabledWrap__8UNi1\",\"overhead\":\"RoundButton_overhead__As9JW\",\"nextArrowPad\":\"RoundButton_nextArrowPad__20zeF\",\"nextArrow\":\"RoundButton_nextArrow__SS6Nl\",\"backArrowPad\":\"RoundButton_backArrowPad__3Epn7\",\"backArrow\":\"RoundButton_backArrow__2MJJm\",\"backWrapper\":\"RoundButton_backWrapper__3sdTM\",\"minorWrapper\":\"RoundButton_minorWrapper__3HkhX\",\"minorButton\":\"RoundButton_minorButton__347lF\",\"disabled\":\"RoundButton_disabled__1vfKo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P3DomainAndWallet_wrapper__1ElFg\",\"contentWrapper\":\"P3DomainAndWallet_contentWrapper__vm5qp\",\"title\":\"P3DomainAndWallet_title__3ing2\",\"domainInfo\":\"P3DomainAndWallet_domainInfo__3p2aJ\",\"domainButton\":\"P3DomainAndWallet_domainButton__2PIDz\",\"walletInfo\":\"P3DomainAndWallet_walletInfo__2cQY0\",\"walletButton\":\"P3DomainAndWallet_walletButton__MmLZ3\",\"unspent\":\"P3DomainAndWallet_unspent__bUWZW\",\"buttonWrapper\":\"P3DomainAndWallet_buttonWrapper__djJkL\",\"ownership\":\"P3DomainAndWallet_ownership__lSY6a\",\"balance\":\"P3DomainAndWallet_balance__2fns7\"};","import React from 'react'\n// import { Store } from './../../store/'\nimport styles from './AboutContent.module.css'\nimport image from './graphic.png'\n\nexport const AboutContent = () => {\n  // const { state } = React.useContext(Store)\n\n  return (\n    <>\n      <div className={[styles.wrapper, 'scrollbar'].join(' ')}>\n        <div className={styles.title}>\n          <div>\n            Your <span>Bitcoin</span> domain &nbsp;=&nbsp;\n          </div>\n          <div>&nbsp;infinite forwarding addresses</div>\n        </div>\n\n        <div className={styles.contentWrapper}>\n          <img className={styles.drawing} src={image} alt='graphic' />\n\n          <p>\n            <span>Bitcoin</span> Domain System (<span>BNS</span>): easy to read\n            custom domain names (i.e. aliases) that can store unlimited\n            forwarding information to long alphanumeric btc addresses or any\n            other types of addreses (e.g. ipfs, https, twitter, ...).\n          </p>\n\n          <p>\n            All <span>BNS</span> data is stored inside transactions on the{' '}\n            <span>Bitcoin</span> blockchain. This means that <span>BNS</span> is\n            protected by the most secure, decentralized, permissionless, and\n            censorship resistant public network ever created.\n          </p>\n\n          <a\n            href='https://github.com/ildarmgt/BitcoinNameSystem/blob/master/README.md'\n            target='_blank'\n            rel='noopener noreferrer'\n          >\n            more on github\n          </a>\n        </div>\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { AboutContent } from './../components/AboutContent'\n\nexport function About (): JSX.Element {\n  return (\n    <>\n      <AboutContent />\n    </>\n  )\n}\n\n// for lazy loading:\n// const RoundButton = React.lazy<any>(() => import('../components/RoundButton')\n// <React.Suspense\n//   fallback={\n//     <div>loading...</div>\n//   }\n// >\n// </React.Suspense>\n","import {\n  I_Domain,\n  I_TX,\n  I_UTXO,\n  I_Checked_Action\n} from './../helpers/bns/types/'\n\n/**\n * All the interfaces & enums\n */\n\nexport * from './../helpers/bns/types/'\n\n// for global state \"Store\" action creators\nexport enum ActionTypes {\n  STORE_SEARCH_RESULTS = 'STORE_SEARCH_RESULTS',\n  STORE_SEARCH_RESULTS_FAIL = 'STORE_SEARCH_RESULTS_FAIL',\n  TYPING = 'TYPING',\n  NEW_WALLET = 'NEW_WALLET',\n  CHANGE_PAGE_INFO = 'CHANGE_PAGE_INFO',\n  UPDATE_WALLET = 'UPDATE_WALLET',\n  UPDATE_DOMAIN = 'UPDATE_DOMAIN',\n  ACTION_FAIL = 'ACTION_FAIL',\n  LOAD_STATE = 'LOAD_STATE',\n  CHOICES_BNS_ACTION = 'CHOICES_BNS_ACTION',\n  SET_API = 'SET_API'\n}\n\n// for global state reducer\nexport type Dispatch = React.Dispatch<I_Action>\n\n// for global state \"Store\" actions\nexport interface I_Action {\n  type: ActionTypes\n  payload: any\n}\n\nexport interface I_State {\n  network: string\n  alias: string\n  extension: string\n  domain: I_Domain\n  wallet: {\n    address: string\n    mnemonic: string\n    WIF: string\n    txHistory: Array<I_TX>\n    utxoList: Array<I_UTXO>\n  }\n  chain: {\n    height: number\n  }\n  pageInfo: {\n    current: number\n    checkedDomain: boolean\n    checkedWallet: boolean\n    checkedLightSearch: boolean\n  }\n  choices: {\n    action: I_Checked_Action | {}\n    feeRate: number\n    txHex: string\n    embedString: string\n    embedBuffers:\n      | [\n          {\n            network: string\n            address: Buffer\n          }\n        ]\n      | []\n  }\n  api: {\n    running: boolean // whether it's busy\n    tasks: any[]\n    path: {\n      [network: string]: string\n    }\n    rateLimit: number // calls per second\n    processId: number | null\n  }\n  lastTimeStamp: number\n}\n","import { I_State, I_Action, ActionTypes } from '../../interfaces'\nimport { initialState } from './../index.js'\nconst {\n  STORE_SEARCH_RESULTS_FAIL,\n  STORE_SEARCH_RESULTS,\n  TYPING,\n  NEW_WALLET,\n  CHANGE_PAGE_INFO,\n  UPDATE_WALLET,\n  UPDATE_DOMAIN,\n  ACTION_FAIL,\n  LOAD_STATE,\n  CHOICES_BNS_ACTION,\n  SET_API\n} = ActionTypes\n\n/**\n * Reducer edits global state via information in payload.\n * Action is object { payload, type }.\n * type describes what type of changes to global state to make.\n * payload contains data provided to make those changes.\n */\nexport default function reducer(state: I_State, action: I_Action): I_State {\n  const { payload } = action\n\n  switch (action.type) {\n    case SET_API: {\n      // edit api task queue\n      return {\n        ...state,\n        api: {\n          ...state.api,\n          ...payload\n        }\n      }\n    }\n\n    case CHOICES_BNS_ACTION: {\n      // BNS action chosen\n      return {\n        ...state,\n        choices: {\n          ...state.choices,\n          ...payload\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case UPDATE_WALLET: {\n      // after full scan of the wallet address\n      return {\n        ...state,\n        wallet: {\n          ...state.wallet, // wif/mnemonic/address unchanged\n          txHistory: payload.wallet.txHistory,\n          utxoList: payload.wallet.utxoList\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedWallet: true\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case UPDATE_DOMAIN: {\n      return {\n        ...state,\n        domain: {\n          ...payload.domain\n        },\n        chain: {\n          height: payload.chain.height\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedDomain: true\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case CHANGE_PAGE_INFO:\n      // navigation info for controlling domains\n      return {\n        ...state,\n        pageInfo: {\n          ...state.pageInfo,\n          current: payload\n        }\n      }\n\n    case NEW_WALLET: {\n      // store totally new wallet object\n      return {\n        ...state,\n        wallet: {\n          ...initialState.wallet,\n          address: payload.address,\n          mnemonic: payload.mnemonic,\n          WIF: payload.WIF\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedWallet: false\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case STORE_SEARCH_RESULTS: {\n      // store results of looking up totally new alias\n      // update notifications and ownership information\n\n      return {\n        ...state,\n        alias: payload.alias,\n        domain: {\n          ...initialState.domain,\n          ...payload.domain\n        },\n        chain: {\n          height: payload.chain.height\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedDomain: false,\n          checkedLightSearch: true\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case STORE_SEARCH_RESULTS_FAIL: {\n      // store results of looking up totally new alias\n      // reset notifications and ownership information\n      return {\n        ...state,\n        alias: payload.alias,\n        domain: {\n          ...initialState.domain,\n          domainName: payload.domainName,\n          notificationAddress: payload.notificationAddress\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedDomain: false,\n          checkedLightSearch: false\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case TYPING: {\n      // change of alias part of domain name\n      // this change renders owner and notification information outdated\n      return {\n        ...state,\n        alias: payload,\n        domain: initialState.domain,\n        pageInfo: {\n          ...state.pageInfo,\n          current: 1,\n          checkedDomain: false,\n          checkedLightSearch: false\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case ACTION_FAIL: {\n      return {\n        ...state,\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case LOAD_STATE: {\n      return {\n        ...payload,\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    default: {\n      console.warn('Unknown action type')\n      return state\n    }\n  }\n}\n\n// can split maybe like this later if gets too long\n// https://dev.to/vanderleisilva/global-state-management-with-react-hooks-and-context-5f6h\n","import { I_State } from '../interfaces'\nimport { newState } from './../helpers/bns/initialState'\n\n/* -------------------------------------------------------------------------- */\n/*                                initial state                               */\n/* -------------------------------------------------------------------------- */\n\nexport const initialState: I_State = {\n  network: 'testnet', // 'testnet' or 'bitcoin'\n  alias: 'satoshi', // first half of domain name\n  extension: '.btc', // last half of domain name\n  domain: newState.domain, // using BNS equivalent domain object\n  wallet: {\n    // wallet information & utxo for controlling domain names\n    address: '', // public control address (p2wpkh)\n    mnemonic: '', // mnemonic for private key derivation\n    WIF: '', // wallet import format for private key derivation (what path? TODO here)\n    txHistory: [], // array of all tx for this address\n    utxoList: [] // array of all current utxo for this address\n  },\n  chain: {\n    height: 0 // height of blockchain\n  },\n  pageInfo: {\n    // user navigation information for controlling domain name\n    current: 1,\n    checkedDomain: false, // current domain notification address was scanned\n    checkedWallet: false, // current wallet address was scanned\n    checkedLightSearch: false // if light search was done (no utxo / txhex scan)\n  },\n  choices: {\n    // choices made by user via this app\n    action: {}, // choices and data for action to take\n    feeRate: 1.1, // fee rate to use in sat/bByte,\n    txHex: '', // hex of raw transaction, ideally ready for broadcast\n    embedString: '', // string to embed in op_return\n    embedBuffers: [] // buffers to embed in op_return\n  },\n  api: {\n    path: {\n      bitcoin: 'https://blockstream.info/api/',\n      testnet: 'https://blockstream.info/testnet/api/'\n    },\n    running: false,\n    tasks: [],\n    rateLimit: 4,\n    processId: null\n  },\n  lastTimeStamp: Date.now() // last change timestamp, to detect any changes to state or time out\n}\n","import React from 'react'\nimport reducer from './reducers/Reducer'\nimport { initialState } from './initialState'\n\n/* -------------------------------------------------------------------------- */\n/*                            Change state process                            */\n/* -------------------------------------------------------------------------- */\n\n// 1. Component calls action from src/store/actions/\n// 2. Action does stuff (e.g. API calls) and dispatches results to reducer in src/store/reducer/\n// 3. Reducer modifies state based on dispatched payload and type of action.\n\n/* -------------------------------------------------------------------------- */\n/*                             Global state setup                             */\n/* -------------------------------------------------------------------------- */\n\n// returns object with .Provider and .Consumer\n// Provider makes context available to all child components no matter how deep\nexport const Store = React.createContext<any>(initialState)\n\n// creates wrapping element for global state\nexport function StoreProvider ({\n  children\n}: JSX.ElementChildrenAttribute): JSX.Element {\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n\n  // dev mode only (npm run start mode only, not built version!)\n  // const TESTING = (process.env.NODE_ENV === 'development')\n  // if (TESTING) {\n  //   localStorage.setItem('tempstate', JSON.stringify(state))\n  // }\n\n  return <Store.Provider value={{ state, dispatch }}>{children}</Store.Provider>\n}\n","import { I_State, BnsBidType } from '../interfaces'\n\n/* -------------------------------------------------------------------------- */\n/*                         Helper functions for state                         */\n/* -------------------------------------------------------------------------- */\n\n/**\n * get owner based on state, or undefined\n */\nexport const getOwner = (st: I_State) => {\n  const ownerAddress = st.domain.currentOwner\n  return st.domain.users[ownerAddress]\n}\n\n/**\n * Undefined if no user, otherwise existing user.\n */\nexport const getUser = (st: I_State, address: string) => {\n  return st.domain.users[address]\n}\n\n/**\n * Get if bidding for ownership period is happening and bidding object.\n */\nexport const getBidding = (st: I_State) => {\n  const bidding = st.domain.bidding\n  return {\n    isBurn: bidding.type === BnsBidType.BURN,\n    bidding\n  }\n}\n\n// show BTC balance with styling and proper units based on network\nexport const unitsBTC = (st: I_State) =>\n  st.network === 'testnet' ? 'tBTC' : 'BTC'\n\nexport const satsToBTC = (sats: number): string => (sats / 1e8).toFixed(8)\n\n// easier visually to count satoshi via spaces\nexport const satsToBTCSpaced = (sats: number): string => {\n  // where to put spaces (from right)\n  const spacesLocationsFromRight = [3, 6, 12, 15, 18]\n\n  const styling = (sats / 1e8).toFixed(8).split('')\n  const lengthText = styling.length\n  const lengthLocations = spacesLocationsFromRight.length\n  for (let i = 0; i < lengthLocations; i++) {\n    const location = lengthText - spacesLocationsFromRight[i]\n    if (location > 0) styling.splice(location, 0, '\\xa0')\n  }\n\n  return styling.join('')\n}\n\nexport const getUnspentSum = (utxoArray: Array<any>): number => {\n  const sumSats =\n    utxoArray?.reduce((sum: number, utxo: any) => sum + utxo.value, 0) || 0\n\n  return sumSats\n}\n\n// writes out the network name clearly\nexport const getNetworkName = (st: I_State): string =>\n  st.network === 'bitcoin' ? 'Bitcoin mainnet' : 'Bitcoin testnet'\n","/**\r\n * Takes in a string of interest inputString\r\n * and Array of strings or string describing filter.\r\n * Returns the string of interst with only characters present in filters selected.\r\n */\r\nexport default function sanitize (inputString, stringOrArray) {\r\n  inputString = String(inputString)\r\n\r\n  // get choice input into same form of array of string(s) of choices\r\n  let choices // :string | Array<string>\r\n  if (Array.isArray(stringOrArray)) {\r\n    choices = stringOrArray\r\n  }\r\n  if (typeof stringOrArray === 'string') {\r\n    choices = [stringOrArray]\r\n  }\r\n\r\n  // add each choice to filter selection\r\n  // (set object would be fastest but these are only a few letters)\r\n\r\n  // string mask\r\n  let filter = ''\r\n  // array of functions\r\n  const logicFilters = []\r\n\r\n  choices.forEach(choice => {\r\n    // short masks\r\n    if (choice === 'numbers') {\r\n      filter += '0123456789'\r\n    }\r\n    if (choice === 'fractions' || choice === 'number') {\r\n      filter += '0123456789.'\r\n    }\r\n    if (choice === 'decimal_point') {\r\n      filter += '.'\r\n    }\r\n    if (choice === 'hex') {\r\n      filter += '0123456789abcdefABCDEF'\r\n    }\r\n    if (choice === 'lowcaps') {\r\n      filter += 'abcdefghijklmnopqrstuvwxyz'\r\n    }\r\n    if (choice === 'highcaps') {\r\n      filter += 'ABCDEFGHIJKLMNOPQRSTUVWYZ'\r\n    }\r\n    if (choice === 'spaces') {\r\n      filter += ' '\r\n    }\r\n\r\n    // longer masks\r\n    if (choice === 'base58') {\r\n      // https://en.wikipedia.org/wiki/Base58#cite_note-3\r\n      filter += '12345689ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\r\n    }\r\n    if (choice === 'basic') {\r\n      filter += '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\n    }\r\n    if (choice === 'oneline') {\r\n      filter +=\r\n        '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,./-_!`~[]{}|@#%^&()-=?$'\r\n    }\r\n    if (choice === 'url' || choice === 'string') {\r\n      //  RFC 3986 (Section 2: Characters) 84 total\r\n      filter += `0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:/?#[]@!$&'()*+,;=-_.~`\r\n    }\r\n\r\n    // ========================================================\r\n    // functions\r\n    // adds anon function to array of functions\r\n\r\n    if (choice === 'no_spaces') {\r\n      logicFilters.push(str =>\r\n        str\r\n          .split('')\r\n          .filter(letter => letter !== ' ')\r\n          .join('')\r\n      )\r\n    }\r\n\r\n    if (choice === 'single_space_width') {\r\n      logicFilters.push(str =>\r\n        // split by 2+ spaces and replace with single space\r\n        str.split(/  */).join(' ')\r\n      )\r\n    }\r\n\r\n    // keep only first decimal point\r\n    if (choice === 'decimal_point') {\r\n      logicFilters.push(str =>\r\n        str\r\n          // splits to array between .\r\n          .split('.')\r\n          // join first 2 elements with ., others with empty string\r\n          // returns a string\r\n          .reduce((resultingString, numbers, index) => {\r\n            // real . goes b/w array's index 0 and 1, even if string had . first\r\n            const digits = index === 0 && numbers === '' ? '0' : numbers\r\n            return index === 1\r\n              ? [resultingString, digits].join('.')\r\n              : [resultingString, digits].join('')\r\n          }, '')\r\n      )\r\n    }\r\n\r\n    if (choice === 'no_leading_zeros') {\r\n      logicFilters.push(str =>\r\n        str\r\n          // splits to array between .\r\n          .split('.')\r\n          .map((numbers, index) => {\r\n            if (index === 0) {\r\n              return (parseInt(numbers, 10) || 0).toString()\r\n            } else {\r\n              return numbers\r\n            }\r\n          })\r\n          .join('.')\r\n      )\r\n    }\r\n\r\n    // 'max_decimal_places:3'\r\n    if (choice.startsWith('max_decimal_places')) {\r\n      const maxDecimalPlaces = +choice.split(':')[1] || 8\r\n      logicFilters.push(str => {\r\n        const length = str.length\r\n        const decimalIndex = str.indexOf('.')\r\n        const digitsAfterDecimal = length - decimalIndex - 1\r\n        // if there is no decimal or it's last character, no changes\r\n        if (decimalIndex === -1 || digitsAfterDecimal === 0) return str\r\n        // otherwise cut off necessary number of characters\r\n        if (digitsAfterDecimal > maxDecimalPlaces) {\r\n          const cutoffNumber = digitsAfterDecimal - maxDecimalPlaces\r\n          return str.slice(0, -cutoffNumber)\r\n        } else return str\r\n      })\r\n    }\r\n  })\r\n\r\n  if (filter.length === 0 && logicFilters.length === 0) {\r\n    console.warn('sanitize used w/o any known filters', stringOrArray)\r\n  }\r\n\r\n  let outputString = ''\r\n\r\n  // apply string mask to only keep characters within filter string\r\n  outputString = inputString\r\n    .split('')\r\n    .filter(letter => filter.indexOf(letter) > -1)\r\n    .join('')\r\n\r\n  // use every selected logic function on the outputString\r\n  logicFilters.forEach(fn => (outputString = fn(outputString)))\r\n\r\n  return outputString\r\n}\r\n","import { I_State, Dispatch } from '../../interfaces'\nimport sanitize from '../../helpers/sanitize'\nimport { ActionTypes } from './../../interfaces'\nconst { TYPING } = ActionTypes\n\n/**\n * Cleans up the entered string including removing next line characters\n */\nexport const changeAliasAction = async (\n  state: I_State,\n  dispatch: Dispatch,\n  value: any\n) => {\n  // clean up the string\n  const newString = value\n  const sanitizedString = sanitize(newString, 'url')\n\n  return dispatch({\n    type: TYPING,\n    payload: sanitizedString\n  })\n}\n","import {\n  I_BnsState,\n  BnsActionType,\n  I_BNS_Action,\n  I_BNS_Auto_Action,\n  I_Condition,\n  I_TX,\n  BnsBidType,\n  BnsSuggestionType\n} from './../types/'\nimport { MIN_NOTIFY, MIN_BURN, CHALLENGE_MIN_MULTIPLY } from './../constants'\nimport {\n  existsCurrentOwner,\n  isOwnerExpired,\n  clearOwner,\n  getParsedHeight,\n  atLeastTwoOutputs,\n  isNotify,\n  isOpreturnOutput0,\n  didNotifyMin,\n  didBurnMin,\n  setOwner,\n  getOwner,\n  getUser,\n  getTxInput0SourceUserAddress,\n  getTxHeight,\n  getTxTimestamp,\n  isAddressTheCurrentOwner,\n  burnedPreviousRateMin,\n  readEmbeddedData,\n  getLastOwnerBurnedValue,\n  isSenderTheCurrentOwner,\n  updateUtxoFromTx,\n  noUnspentUserNotificationsUtxo,\n  getNotificationAddress,\n  isCommandCalled,\n  getCommandCalled,\n  existsUser,\n  createNewUser,\n  addBid,\n  isBiddingOver,\n  endBidding,\n  isBiddingOngoing,\n  isSenderACurrentBidder,\n  isAddressACurrentBidder,\n  subtractRefunds,\n  unrefundedAmounts\n} from './../formathelpers'\n\n/* -------------------------------------------------------------------------- */\n/*                          Conditoins / Permissions                          */\n/* -------------------------------------------------------------------------- */\n\n// const NONE = (args: any): I_Condition => ({\n//   status: () => true,\n//   info: { describe: 'No requirements', warning: 'Placeholder only' }\n// })\n\nconst OUTS_2 = ({ tx = undefined }: any = {}): I_Condition => ({\n  status: () => atLeastTwoOutputs(tx),\n  info: { describe: 'Must have 2+ outputs' }\n})\n\nconst OUT_0 = ({ tx = undefined }: any = {}): I_Condition => ({\n  status: () => isOpreturnOutput0(tx),\n  info: { describe: 'Must have OP_RETURN @ output[0]' }\n})\n\nconst OUT_1 = ({ st, tx = undefined }: any = {}): I_Condition => ({\n  status: () => isNotify(st, tx),\n  info: { describe: 'Must have notification address @ output[1]' }\n})\n\nconst NOTIFIED_MIN = ({ tx = undefined }: any = {}): I_Condition => ({\n  status: () => didNotifyMin(tx),\n  info: {\n    describe: `Notification output amount must not be lower than the BNS minimum`,\n    set: { value: MIN_NOTIFY, name: 'Notification minimum', units: 'satoshi' }\n  }\n})\n\nconst BURNED_MIN = ({ tx = undefined }: any = {}): I_Condition => ({\n  status: () => didBurnMin(tx),\n  info: {\n    describe: `Must burn (i.e. bid) at least the BNS minimum amount`,\n    set: { value: MIN_BURN, units: 'satoshi', name: 'Bid burn amount' }\n  }\n})\n\nconst NO_OWNER = ({ st }: any = {}): I_Condition => ({\n  status: () => !existsCurrentOwner(st),\n  info: { describe: 'There must not be an existing owner' }\n})\n\nconst EXISTS_OWNER = ({ st }: any = {}): I_Condition => ({\n  status: () => existsCurrentOwner(st),\n  info: { describe: 'There must be existing owner' }\n})\n\nconst BURN_LAST_WIN = ({ st, tx = undefined }: any = {}): I_Condition => ({\n  status: () => burnedPreviousRateMin(st, tx),\n  info: {\n    describe: 'Tx must burn the last ownership winning burn amount',\n    set: {\n      value: getLastOwnerBurnedValue(st),\n      name: 'Bid burn amount',\n      units: 'satoshi'\n    }\n  }\n})\n\n// calculated based on tx if available, otherwise address\nconst USER_IS_OWNER = ({\n  st,\n  address,\n  tx = undefined\n}: any = {}): I_Condition => ({\n  status: () =>\n    tx\n      ? isSenderTheCurrentOwner(st, tx)\n      : isAddressTheCurrentOwner(st, address),\n  info: { describe: `User's address must match owner's address` }\n})\n\nconst USER_IS_BIDDER = ({\n  st,\n  address,\n  tx = undefined\n}: any = {}): I_Condition => ({\n  status: () =>\n    tx ? isSenderACurrentBidder(st, tx) : isAddressACurrentBidder(st, address),\n  info: { describe: `User's address must match one of bidder's addresses` }\n})\n\nconst IS_OWNER_EXPIRED = ({ st }: any = {}): I_Condition => ({\n  status: () => isOwnerExpired(st),\n  info: { describe: 'Ownership must be expired at current parsed height' }\n})\n\nconst NO_UNSPENT_USER_NOTIFICATIONS_UTXO = ({\n  st,\n  tx = undefined\n}: any = {}): I_Condition => ({\n  status: () => noUnspentUserNotificationsUtxo(st, tx),\n  info: {\n    describe:\n      'There must not be any remaining notification address utxo created by sender'\n  }\n})\n\n// easy mistake to make\nconst USER_ADDRESS_NOT_NOTIFICATION_ADDRESS = ({\n  st,\n  tx = undefined\n}: any = {}): I_Condition => ({\n  status: () => getNotificationAddress(st) !== getTxInput0SourceUserAddress(tx),\n  info: {\n    describe: 'Do not accidentally send from notification address at input[0]'\n  }\n})\n\nconst IS_COMMAND_CALLED = ({\n  st,\n  command,\n  tx = undefined\n}: any = {}): I_Condition => ({\n  status: () => isCommandCalled(st, tx as I_TX, command),\n  info: {\n    describe: 'Checks forwards for a specific command issued at this height'\n  }\n})\n\nconst IS_BIDDING_ONGOING = ({ st }: any = {}): I_Condition => ({\n  status: () => isBiddingOngoing(st),\n  info: { describe: 'The domain must be undergoing a bidding period' }\n})\n\nconst IS_BIDDING_OVER = ({ st }: any = {}): I_Condition => ({\n  status: () => isBiddingOver(st),\n  info: { describe: 'The bidding period must be over but not resolved' }\n})\n\n/* -------------------------------------------------------------------------- */\n/*              Suggestions (e.g. values to set or get from user)             */\n/* -------------------------------------------------------------------------- */\n\nconst SUGGESTION_SUBMIT_NEW_ADDRESS = ({ command }: any = {}): I_Condition => ({\n  status: () => true,\n  info: {\n    describe: 'Submit your new address (forwards are kept)',\n    get: { value: '', name: 'Your new address' },\n    command\n  }\n})\n\nconst SUGGESTION_SUBMIT_NEW_OWNER_ADDRESS = ({\n  command\n}: any = {}): I_Condition => ({\n  status: () => true,\n  info: {\n    describe: \"Submit new owner's address (forwards are not copied)\",\n    get: { value: '', name: \"New owner's address\" },\n    command\n  }\n})\n\nconst SUGGESTION_SUBMIT_BURN_AMOUNT = ({ st }: any = {}): I_Condition => {\n  const calcMin = !st\n    ? // default\n      undefined\n    : // but when state provided:\n    // and there are existing bids\n    st.domain.bidding.bids.length > 0\n    ? // return the highest of the bids\n      Math.ceil(\n        Math.max(...st.domain.bidding.bids.map((bid: any) => bid.value)) *\n          CHALLENGE_MIN_MULTIPLY\n      )\n    : // otherwise return burn minimum\n      MIN_BURN\n\n  return {\n    status: () => true,\n    info: {\n      describe: 'Submit your bid burn amount',\n      get: {\n        value: calcMin || 0,\n        name: 'Bid burn amount',\n        // good guess for min next bid is CHALLENGE_MIN_MULTIPLY x (highest known bid)\n        // assuming they all meet the rules  by end of bidding\n        min: calcMin,\n        units: 'satoshi'\n      }\n    }\n  }\n}\n\n/**\n * Need a way to suggest refunds and how much but not force it. Only suggests to set or get values if there are refunds to do.\n */\nconst SUGGESTION_REFUND_PAST_BIDDERS = ({\n  st,\n  address = undefined\n}: any = {}): I_Condition => {\n  const describe =\n    'Must refund all prior bids for bid to count as valid at the end of the bidding period. Refunds can be done separately or during the bid'\n\n  let refunds = ''\n\n  if (st) {\n    const ignoreAddress = address // if provided, can ignore for refund suggestions\n\n    const leftAmounts = unrefundedAmounts(st)\n    for (const toAddress in leftAmounts) {\n      if (ignoreAddress && toAddress !== ignoreAddress) {\n        refunds += leftAmounts[toAddress] + ' ' + toAddress + '\\n'\n      }\n    }\n    refunds = refunds.slice(0, -1)\n  }\n\n  if (refunds === '') {\n    return {\n      status: () => true,\n      info: { describe }\n    }\n  } else {\n    return {\n      status: () => true,\n      info: {\n        describe,\n        type: BnsSuggestionType.REFUND_BIDDERS,\n        get: {\n          value: true,\n          name: 'Refund now?'\n        },\n        set: {\n          value: refunds,\n          name: 'Amount & address to refund',\n          units: 'satoshi address'\n        }\n      }\n    }\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*               Warnings (if action is a bad idea but possible)              */\n/* -------------------------------------------------------------------------- */\n\nconst WARNING_POINTLESS_IF_NOT_OWNER = (args: any): I_Condition => ({\n  status: () => true,\n  info: {\n    describe: 'Action not recommended for non-owners',\n    warning: !USER_IS_OWNER(args)?.status()\n      ? 'Useless unless you are the owner or will be owner in future'\n      : undefined\n  }\n})\n\nconst WARN_IF_NOT_BIDDER = (args: any): I_Condition => ({\n  status: () => true,\n  info: {\n    describe: 'Action not recommended for non-bidders',\n    warning: !USER_IS_BIDDER(args)?.status()\n      ? 'Useless unless you are a bidder or will be bidder in this period later'\n      : undefined\n  }\n})\n\n/* -------------------------------------------------------------------------- */\n/*                           User's possible actions                          */\n/* -------------------------------------------------------------------------- */\n\n/**\n * One of requirements for bids is to refund past bidders by the time bidding period is over. This action allows doing that separately.\n */\nexport const refundOtherBidders = (\n  st: I_BnsState | null,\n  address = '',\n  tx: any = undefined\n): I_BNS_Action => {\n  const args = { st, tx, address }\n\n  const type = BnsActionType.REFUND_OTHER_BIDS\n\n  const info = 'Refund other bidders for bids to count.'\n\n  const permissions = [\n    IS_BIDDING_ONGOING,\n\n    // suggestions\n    WARN_IF_NOT_BIDDER\n  ]\n\n  const conditions = [\n    NOTIFIED_MIN,\n    NO_UNSPENT_USER_NOTIFICATIONS_UTXO,\n    USER_ADDRESS_NOT_NOTIFICATION_ADDRESS\n  ]\n\n  const execute = !st\n    ? pass\n    : () => {\n        console.assert(!!tx, 'Must not execute action without tx')\n        subtractRefunds(st, tx)\n        console.log(`Actions:subtractRefunds:executed`, tx)\n      }\n\n  return {\n    permissions: st\n      ? permissions.map(permission => permission(args))\n      : permissions,\n    conditions: st ? conditions.map(condition => condition(args)) : conditions,\n    args,\n    info,\n    type,\n    execute\n  }\n}\n\n// Describe: If no owner, sender can start process to claim ownership\n// Since autoChecks run before user action checks in calcBnsState,\n// after bidding ends owner will be set by time this is checked.\nexport const bidForOwnershipAction = (\n  st: I_BnsState | null,\n  address = '',\n  tx: any = undefined\n): I_BNS_Action => {\n  const args = { st, tx, address }\n\n  const type = BnsActionType.BID_FOR_OWNERSHIP\n\n  const info = 'Bid for ownership of a domain'\n\n  const permissions = [\n    // this means no more bids when there's a winner\n    NO_OWNER,\n\n    // suggestions\n    SUGGESTION_SUBMIT_BURN_AMOUNT,\n    SUGGESTION_REFUND_PAST_BIDDERS\n  ]\n\n  const conditions = [\n    // minimum rules to counting tx still apply for bids\n    OUTS_2,\n    OUT_0,\n    OUT_1,\n    NOTIFIED_MIN,\n    NO_UNSPENT_USER_NOTIFICATIONS_UTXO,\n    USER_ADDRESS_NOT_NOTIFICATION_ADDRESS,\n\n    // at very least minimum is burnt, the rest is derived\n    BURNED_MIN\n  ]\n\n  const execute = !st\n    ? pass\n    : () => {\n        // have to start or add to bidding\n        // ownership will be derived through automatic check based on bidding started here\n        addBid(st, tx, BnsBidType.BURN)\n        console.log(`Actions:bidForOwnershipAction:executed`, tx)\n      }\n\n  return {\n    permissions: st\n      ? permissions.map(permission => permission(args))\n      : permissions,\n    conditions: st ? conditions.map(condition => condition(args)) : conditions,\n    args,\n    info,\n    type,\n    execute\n  }\n\n  // need to get user input on burn amount possible minimum (general action guidance)\n  // also needs some guidance for refunds necessary to win (general action guidance)\n}\n\n/**\n * Change address. (similar to send ownership, but keeps forwards)\n * network: '!ca'\n * address: 'newaddress'\n */\nexport const changeAddressAction = (\n  st: I_BnsState | null,\n  address = '',\n  tx: any = undefined\n): I_BNS_Action => {\n  const command = '!ca'\n\n  const args = { st, address, tx, command }\n\n  const type = BnsActionType.CHANGE_ADDRESS\n\n  const info = 'Update your ownership address'\n\n  const permissions = [\n    USER_IS_OWNER,\n\n    // suggestions\n    SUGGESTION_SUBMIT_NEW_ADDRESS\n  ]\n\n  const conditions = [\n    OUTS_2,\n    OUT_0,\n    OUT_1,\n    NOTIFIED_MIN,\n    NO_UNSPENT_USER_NOTIFICATIONS_UTXO,\n    USER_ADDRESS_NOT_NOTIFICATION_ADDRESS,\n\n    IS_COMMAND_CALLED\n  ]\n\n  const execute = !st\n    ? pass\n    : () => {\n        const thisCommand = getCommandCalled(st, tx, command)\n        const newAddress = thisCommand?.address\n        if (!newAddress) {\n          console.log('ownership transfer detected, but no address found')\n        } else {\n          // quite possible user doesn't exist so create blank one\n          if (!existsUser(st, newAddress)) createNewUser(st, newAddress)\n\n          // new owner is created and given old owner's ownership data\n\n          const oldOwner = getOwner(st)\n          setOwner(st, newAddress)\n          // one of conditions is USER_IS_OWNER so there is owner\n          getUser(st, newAddress).winHeight = oldOwner!.winHeight\n          getUser(st, newAddress).winTimestamp = oldOwner!.winTimestamp\n          getUser(st, newAddress).burnAmount = oldOwner!.burnAmount\n          // clone forwards\n          getUser(st, newAddress).forwards = JSON.parse(\n            JSON.stringify(oldOwner!.forwards)\n          )\n          // for new user, no changes to updateHeight, nonce\n\n          // old owner loses ownership data\n          // oldOwner!.winHeight = 0\n          // oldOwner!.winTimestamp = 0\n          // oldOwner!.burnAmount = 0\n          // nonce, forwards (not active now), update height are not touched\n\n          console.log(\n            'ownership transfered from',\n            oldOwner!.address,\n            'to',\n            newAddress\n          )\n        }\n      }\n\n  return {\n    permissions: st\n      ? permissions.map(permission => permission(args))\n      : permissions,\n    conditions: st ? conditions.map(condition => condition(args)) : conditions,\n    args,\n    info,\n    type,\n    execute\n  }\n}\n\n/**\n * Send ownership to another address. Forwards are not kept.\n * network: '!so'\n * address: 'newaddress'\n */\nexport const sendOwnershipAction = (\n  st: I_BnsState | null,\n  address = '',\n  tx: any = undefined\n): I_BNS_Action => {\n  const command = '!so'\n\n  const args = { st, address, tx, command }\n\n  const type = BnsActionType.SEND_OWNERSHIP\n\n  const info = 'Give up ownership to another address'\n\n  const permissions = [\n    USER_IS_OWNER,\n\n    // suggestions\n    SUGGESTION_SUBMIT_NEW_OWNER_ADDRESS\n  ]\n\n  const conditions = [\n    OUTS_2,\n    OUT_0,\n    OUT_1,\n    NOTIFIED_MIN,\n    NO_UNSPENT_USER_NOTIFICATIONS_UTXO,\n    USER_ADDRESS_NOT_NOTIFICATION_ADDRESS,\n\n    IS_COMMAND_CALLED\n  ]\n\n  const execute = !st\n    ? pass\n    : () => {\n        const thisCommand = getCommandCalled(st, tx, command)\n        const newAddress = thisCommand?.address\n        if (!newAddress) {\n          console.log('ownership transfer detected, but no address found')\n        } else {\n          // quite possible user doesn't exist so create blank one\n          if (!existsUser(st, newAddress)) createNewUser(st, newAddress)\n\n          // new owner is created and given old owner's ownership data\n\n          const oldOwner = getOwner(st)\n          setOwner(st, newAddress)\n          // one of conditions is USER_IS_OWNER so there is owner\n          getUser(st, newAddress).winHeight = oldOwner!.winHeight\n          getUser(st, newAddress).winTimestamp = oldOwner!.winTimestamp\n          getUser(st, newAddress).burnAmount = oldOwner!.burnAmount\n          // for new user, no changes to updateHeight, nonce, or forwards\n\n          // old owner loses ownership data\n          // oldOwner!.winHeight = 0\n          // oldOwner!.winTimestamp = 0\n          // oldOwner!.burnAmount = 0\n          // nonce, forwards (not active now), update height are not touched\n\n          console.log(\n            'ownership transfered from',\n            oldOwner!.address,\n            'to',\n            newAddress\n          )\n        }\n      }\n\n  return {\n    permissions: st\n      ? permissions.map(permission => permission(args))\n      : permissions,\n    conditions: st ? conditions.map(condition => condition(args)) : conditions,\n    args,\n    info,\n    type,\n    execute\n  }\n}\n\n// Describe: If from current owner & burned past winning minimum, extend ownership.\nexport const currentOwnerRenewAction = (\n  st: I_BnsState | null,\n  address = '',\n  tx: any = undefined\n): I_BNS_Action => {\n  const args = { st, address, tx }\n\n  const type = BnsActionType.RENEW\n\n  const info = 'Extend ownership of this domain'\n\n  const permissions = [USER_IS_OWNER]\n\n  const conditions = [\n    OUTS_2,\n    OUT_0,\n    OUT_1,\n    NOTIFIED_MIN,\n    NO_UNSPENT_USER_NOTIFICATIONS_UTXO,\n    USER_ADDRESS_NOT_NOTIFICATION_ADDRESS,\n\n    BURNED_MIN,\n    BURN_LAST_WIN\n  ]\n\n  const execute = !st\n    ? pass\n    : () => {\n        const owner = getOwner(st)\n        // set owner's win height to current tx height therefore updating ownership\n        owner && (owner.winHeight = getTxHeight(tx))\n        owner && (owner.winTimestamp = getTxTimestamp(tx))\n        console.log(\n          `${st.domain.domainName} : ${getTxHeight(\n            tx\n          )} height: owner extended ownership ${owner?.address}`\n        )\n      }\n\n  return {\n    permissions: st\n      ? permissions.map(permission => permission(args))\n      : permissions,\n    conditions: st ? conditions.map(condition => condition(args)) : conditions,\n    args,\n    info,\n    type,\n    execute\n  }\n}\n\n// Describe: update forwarding information.\nexport const updateForwardingInfoAction = (\n  st: I_BnsState | null,\n  address = '',\n  tx: any = undefined\n): I_BNS_Action => {\n  const args = { st, address, tx }\n\n  const type = BnsActionType.ONLY_FORWARDS\n\n  const info = 'Only update forwarding information'\n\n  const permissions = [\n    // suggestions\n    WARNING_POINTLESS_IF_NOT_OWNER\n  ]\n\n  const conditions = [\n    OUTS_2,\n    OUT_0,\n    OUT_1,\n    NOTIFIED_MIN,\n    NO_UNSPENT_USER_NOTIFICATIONS_UTXO,\n    USER_ADDRESS_NOT_NOTIFICATION_ADDRESS\n  ]\n\n  const execute = !st\n    ? pass\n    : () => {\n        readEmbeddedData(st, tx)\n      }\n\n  return {\n    permissions: st\n      ? permissions.map(permission => permission(args))\n      : permissions,\n    conditions: st ? conditions.map(condition => condition(args)) : conditions,\n    args,\n    info,\n    type,\n    execute\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                              Automatic Actions                             */\n/* -------------------------------------------------------------------------- */\n\n// Describe: if OWNERSHIP_DURATION_BY_BLOCKS blocks since ownership update, no owner again\nexport const autoCheckForOwnerExpiredAction = (\n  st: I_BnsState\n): I_BNS_Auto_Action => {\n  const args = { st }\n  return {\n    info: 'Existing ownerships that expire are removed',\n\n    conditions: [EXISTS_OWNER(args), IS_OWNER_EXPIRED(args)],\n\n    execute: () => {\n      clearOwner(st)\n      console.log(\n        st.domain.domainName,\n        getParsedHeight(st),\n        'ownership expired'\n      )\n    }\n  }\n}\n\n// Describe: always uses this tx to update derivedUtxoList of the domain notificatin address\nexport const updateUtxoFromTxAction = (\n  st: I_BnsState,\n  tx: I_TX\n): I_BNS_Auto_Action => {\n  return {\n    info: 'Update derivedUtxoList from new tx',\n\n    conditions: [],\n\n    execute: () => {\n      updateUtxoFromTx(st, tx)\n    }\n  }\n}\n\n// Describe: update bidding winner and owner\nexport const autoCheckForBiddingWinnerNewOwnerAction = (\n  st: I_BnsState\n): I_BNS_Auto_Action => {\n  const args = { st }\n  return {\n    info: 'Derive the new owner from bidding period',\n\n    conditions: [\n      NO_OWNER(args),\n      // this will only be true directly after bidding\n      IS_BIDDING_OVER(args)\n    ],\n\n    execute: () => {\n      endBidding(st)\n\n      console.log(\n        'autoCheckForBiddingWinnerNewOwnerAction(): Bidding period has ended'\n      )\n    }\n  }\n}\n\nconst pass = () => {\n  // empty function that can be executed but does nothing\n}\n","import {\n  currentOwnerRenewAction,\n  bidForOwnershipAction,\n  refundOtherBidders,\n  autoCheckForOwnerExpiredAction,\n  updateForwardingInfoAction,\n  updateUtxoFromTxAction,\n  sendOwnershipAction,\n  changeAddressAction,\n  autoCheckForBiddingWinnerNewOwnerAction\n} from './actions'\nimport { I_BnsState, I_TX, I_Condition } from './../types/'\n\n/**\n * Returns what actions are available for specific user address at current state.\n */\nexport const runAllActionPermissionChecks = (\n  st: I_BnsState,\n  address: string\n) => {\n  console.log('currentOwnerRenewAction running:')\n\n  // Edit this list to include more actions for checks\n  // (address here only at best, tx not necessary or possible)\n  const allActions = [\n    updateForwardingInfoAction(st, address),\n    currentOwnerRenewAction(st, address),\n    bidForOwnershipAction(st, address),\n    refundOtherBidders(st, address),\n\n    sendOwnershipAction(st, address),\n    changeAddressAction(st, address)\n  ]\n\n  // check which actions are doable\n  const checkedActions: any[] = []\n  allActions.forEach(action => {\n    // check each permission in each action\n    const checkedPermissions: any[] = []\n    action.permissions.forEach((permission: any) => {\n      const isAllowed = permission.status()\n\n      // add to list of permissions checked in this action & their display info\n      checkedPermissions.push({\n        isAllowed,\n        ...permission\n      })\n    })\n\n    // grab every condition (for info)\n    const actionSuggestions: any[] = []\n    action.permissions.forEach((permission: any) => {\n      actionSuggestions.push(permission)\n    })\n    action.conditions.forEach((condition: any) => {\n      actionSuggestions.push(condition)\n    })\n\n    // add to list of all actions with summary of all their permissions checks\n    checkedActions.push({\n      type: action.type,\n      info: action.info,\n      isUsable: checkedPermissions.every(permission => permission.isAllowed),\n      permissionList: checkedPermissions,\n      suggestions: actionSuggestions\n    })\n  })\n\n  // return array of doable actions\n  return checkedActions\n}\n\n/****************************************************************************************\n * Executes all actions possible by user that sent tx.\n * Nothing returned.\n */\nexport const runAllUserActions = (st: I_BnsState, tx: I_TX): void => {\n  // edit this list (tx here, address not necessary)\n  const allUserActions = [\n    updateForwardingInfoAction(st, undefined, tx), // reads embedded data\n    currentOwnerRenewAction(st, undefined, tx), // renew ownership\n    bidForOwnershipAction(st, undefined, tx), // new ownership\n    refundOtherBidders(st, undefined, tx), // count the refunds\n\n    // giving up ownership should go last in case user state needs to be edited first\n    sendOwnershipAction(st, undefined, tx), // give up ownership to another\n    changeAddressAction(st, undefined, tx) // change your ownership address\n  ]\n\n  allUserActions.forEach((action: any) => {\n    // check that all conditions & permissions are true\n    const okConditions = action.conditions.reduce(\n      (areAllConditionsMet: boolean, eaCondition: any) =>\n        areAllConditionsMet && eaCondition.status(),\n      true\n    )\n\n    const okPermissions = action.permissions.reduce(\n      (areAllPermissionsMet: boolean, eaPermission: any) =>\n        areAllPermissionsMet && eaPermission.status(),\n      true\n    )\n\n    if (okConditions && okPermissions) action.execute()\n  })\n}\n\n/****************************************************************************************\n * Executes non-user actions like ownership expiration over time or deriving new UTXO.\n * Nothing returned.\n */\nexport const runAllAutomaticActions = (\n  st: I_BnsState,\n  tx: I_TX | undefined\n): void => {\n  // list of all automatic actions\n  const allAutoChecks = [\n    autoCheckForOwnerExpiredAction(st),\n    tx ? updateUtxoFromTxAction(st, tx) : undefined,\n    autoCheckForBiddingWinnerNewOwnerAction(st)\n  ]\n\n  allAutoChecks.forEach(action => {\n    if (!!action) {\n      // check that all conditions are true\n      const ok = action.conditions.reduce(\n        (areAllConditionsMet: boolean, eaCondition: I_Condition) =>\n          areAllConditionsMet && eaCondition.status(),\n        true\n      )\n      if (ok) action.execute()\n    }\n  })\n}\n\n/****************************************************************************************\n * Simply returns all user actions without any fed parameters\n */\nexport const scanEveryActionForCommand = () => {\n  // list of all actions to check\n  const actions = [\n    updateForwardingInfoAction(null),\n    currentOwnerRenewAction(null),\n    bidForOwnershipAction(null),\n    refundOtherBidders(null),\n\n    sendOwnershipAction(null),\n    changeAddressAction(null)\n  ]\n  return actions\n}\n\n// (TODO) rewrite so don't have to list same user actiosn 5 times w/ diff arguments, more generalized\n","import { calcP2WSH } from './calcP2WSH'\nimport { newState } from './initialState'\nimport * as actions from './actions'\nimport { EARLIEST_NOTIFICATION_HEIGHT } from './constants'\nimport { I_BnsState } from './types'\nimport {\n  setParsedHeight,\n  updateSourceUserFromTx,\n  getTxHeight,\n  updateOwnerHistory\n} from './formathelpers'\n\n/**\n * Returns ownership and notification information objects.\n * @param   {Array<any>}  notificationsHistory  - Array of any tx with notificationsAddress.\n * @param   {string}      domainName            - Full domainName to use (e.g. 'satoshi.btc').\n * @param   {number}      currentHeight         - Current blockheight of the network chain selected.\n * @param   {string}      networkChoice         - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @returns {I_BnsState}                         - BNS state describing object.\n */\nexport const calcBnsState = (\n  notificationsHistory: Array<any>,\n  domainName: string,\n  currentHeight: number,\n  networkChoice: string\n): I_BnsState => {\n  // initialize temporary derivation state\n  const st = JSON.parse(JSON.stringify(newState)) // deep object clone\n  st.domain.domainName = domainName\n  st.chain && (st.chain.currentHeight = currentHeight)\n  st.domain.notificationAddress =\n    calcP2WSH(domainName, networkChoice)?.notificationsAddress || ''\n\n  // Sorting history from earliest to latest\n  // reversing should speed it up if not complete it\n  st.domain.txHistory = notificationsHistory\n    .slice()\n    .reverse()\n    .filter((tx: any) => getTxHeight(tx) >= EARLIEST_NOTIFICATION_HEIGHT)\n    .sort((prev, next) => {\n      const prevBlockHeight = prev.status.block_height\n      const nextBlockHeight = next.status.block_height\n      return prevBlockHeight - nextBlockHeight\n    })\n\n  // iterate with blockheights of relevant tx to derive st state\n  // Each tx blockheight serves as reference time\n  st.domain.txHistory.forEach((tx: any) => {\n    // update current chain's parsed height based on tx confirmed height\n    setParsedHeight(st, getTxHeight(tx))\n\n    // update or create new basic user info based on source address @ input0\n    // this includes user's NONCE set to height of the user's tx prior to this one\n    updateSourceUserFromTx(st, tx)\n\n    // check if owner expired & update derivedUtxo\n    actions.runAllAutomaticActions(st, tx)\n\n    // run all possible actions\n    // starting with reading embedded data\n    actions.runAllUserActions(st, tx)\n\n    // update nonce\n    // after this tx, this tx height is the last tx height, so the new nonce\n    updateSourceUserFromTx(st, tx)\n\n    // update ownership history each tx even if not owner\n    updateOwnerHistory(st)\n  })\n\n  // final check for current block height\n  setParsedHeight(st, currentHeight)\n\n  // check if owner expired\n  actions.runAllAutomaticActions(st, undefined)\n\n  return st\n}\n","import { I_Forward } from '../types'\n/**\n * Returns array with only latest forwards from array of all forwards.\n * Removes actions, ones that start with \"!\" and ones that are blank addresses.\n */\nexport const findLatestForwards = (\n  forwards: Array<I_Forward>\n): Array<I_Forward> => {\n  // simplest would be to go through object where keys of cloned network would overwrite\n  // sort first for simplicity\n  const sortedForwards = [...forwards].sort((prev, next) => {\n    // sorts by index proportional to block height and time\n    const prevHeight = prev.updateHeight\n    const nextHeight = next.updateHeight\n    return prevHeight - nextHeight\n  })\n  // now just overwrite values for same networks in order of sorted array\n  const currentNetworks: { [key: string]: I_Forward } = {}\n  sortedForwards.forEach(eaForward => {\n    // add all networks that are not commands or blank network name\n    const isNotCommand = !eaForward.network.startsWith('!')\n    const isNotEmptyNetwork = !(eaForward.network === '')\n    if (isNotCommand && isNotEmptyNetwork) {\n      currentNetworks[eaForward.network] = eaForward\n    }\n    // if the final address is blank, delete it from object\n    const isDeleted = eaForward.address === ''\n    if (isDeleted) {\n      delete currentNetworks[eaForward.network]\n    }\n  })\n\n  // return just array of values, networks still part of values as well\n  return [...Object.values(currentNetworks)]\n}\n","import { I_Forward, I_BnsState } from '../types'\nimport { getOwner } from './../formathelpers'\nimport { findLatestForwards } from './findLatestForwards'\n\n/**\n * Returns array with only latest forwards from array of all forwards.\n * Removes actions, ones that start with \"!\" and ones that are blank addresses.\n */\nexport const findOwnersForwards = (\n  st: any\n): { length: number; toForwards: I_Forward[]; toSpaceSeparated: string[] } => {\n  if (st === undefined || st === null) return nullResponse\n  const owner = getOwner(st as I_BnsState)\n  if (!owner || !owner.forwards) return nullResponse\n  const forwards = findLatestForwards(owner.forwards)\n  return {\n    length: forwards.length,\n    toForwards: forwards,\n    toSpaceSeparated: forwards.map((fw: any) => `${fw.network} ${fw.address}`)\n  }\n}\n\n// return this on fail\nconst nullResponse = {\n  length: 0,\n  toForwards: [] as I_Forward[],\n  toSpaceSeparated: [] as string[]\n}\n","import { scanEveryActionForCommand } from './../actions/batch'\n\n/**\n * Can grab simple words that explain what command does/did for visualization if found.\n * Only useful to grab text not dependent on any state.\n * Otherwise, returns undefined.\n * For example: interpretCommand('!ca', 'banana')\n */\nexport const interpretCommand = (key: string, value: string) => {\n  // grab all basic action objects\n  const allActions = scanEveryActionForCommand()\n\n  // scan each for matching commmand\n  let action\n  for (let i = 0; i < allActions.length; i++) {\n    if (key.startsWith(allActions[i].args.command)) {\n      action = allActions[i]\n      break\n    }\n  }\n\n  if (!action) return undefined\n\n  // scan for getters within\n  let getterName\n  for (let i = 0; i < action.permissions.length; i++) {\n    if ('get' in action.permissions[i]().info) {\n      console.log(action.permissions[i]())\n      getterName = action.permissions[i]().info.get.name\n      break\n    }\n  }\n\n  if (!getterName) return undefined\n\n  return {\n    info: action.info,\n    getterName,\n    value\n  }\n}\n","import { encrypt } from './cryptography'\n\n/**\n * Returns number of bytes the string has after encryption.\n * Encryption is used directly to measure result accurately\n * even if cryption method changes in the future.\n */\nexport const stringByteCount = (data: string): number => {\n  const cipher: Buffer = encrypt(data, 'arbitrary key and iv seeding string')\n  // returns buffer, so length should be bytesize\n  return cipher.length\n}\n","import { I_Checked_Action, I_Condition } from './types'\n\n/**\n * Return all \"get\" suggestions of a checked action.\n * get = seeking input from user.\n * Within array, each getter is at suggestion.info.get.\n */\nexport const getGetters = (action: I_Checked_Action): Array<I_Condition> => {\n  const getters = action.suggestions.filter((thisSuggestion: any) => {\n    return 'get' in thisSuggestion.info\n  })\n  return getters || []\n}\n\n/**\n * Return all \"set\" suggestions of a checked action.\n * set = already know what the value is & necessary to set.\n * Within array, each setter is at suggestion.info.set.\n */\nexport const getSetters = (action: I_Checked_Action): Array<I_Condition> => {\n  const setters = action.suggestions.filter((thisSuggestion: any) => {\n    return 'set' in thisSuggestion.info\n  })\n  return setters || []\n}\n","import * as bitcoin from 'bitcoinjs-lib'\nimport bip39 from 'bip39'\nimport bs58check from 'bs58check'\n\n/**\n * Returns xpub base58check from seed mnemonic and last hardened index.\n * @param     {Buffer}      mnemonic            Mnemonic.\n * @param     {Buffer}      message             Hardened index to use.\n * @returns   {Buffer}                          xpub Buffer\n */\nexport const getStealthAddress = (\n  mnemonic: string,\n  networkName = 'bitcoin',\n  index = 0\n) => {\n  // pick testnet or bitcoin\n  const network = bitcoin.networks[networkName]\n  // create seed\n  const seedBuffer = bip39.mnemonicToSeed(mnemonic)\n  // create masterNode for HD wallet\n  const masterNode = bitcoin.bip32.fromSeed(seedBuffer, network)\n  // derive the path used, e.g. m/1001'/0'/0'\n  const childNode_m_1001h_0h_indexh = masterNode.derivePath(\n    `m/1001'/0'/${index}'`\n  )\n  // make xpriv into xpub, no private keys\n  const childNode_m_1001h_0h_0h_neutered = childNode_m_1001h_0h_indexh.neutered()\n  // from js object to base58check\n  const xPub_B58 = childNode_m_1001h_0h_0h_neutered.toBase58()\n\n  // convert to byte data buffer from base58check\n  const xPub_Buffer = bs58check.decode(xPub_B58)\n  console.log('xpub bytes:', xPub_Buffer.length)\n\n  // return b58 string & byte format\n  return xPub_Buffer\n}\n","import axios from 'axios'\n\n// Documentation\n// https://github.com/Blockstream/esplora/blob/master/API.md\n// https://github.com/Blockstream/esplora/blob/esplora_v2.00/API.md\n// https://github.com/Blockstream/esplora/blob/master/API.md#post-tx\n\n// const API_PATH_TESTNET = 'https://blockstream.info/testnet/api/'\n// const API_PATH_BITCOIN = 'https://blockstream.info/api/'\n\nconst API_RATE_LIMIT = 0.5 // guessing calls per second cap\n\n// (TODO) a single instance of async task executing loop per API to ensure rate limit holds per API\n// Meanwhile calling function can use its own busy flag to ensure promises are resolved before repeats.\n// RawTx requests and multipage history (length > 25) are main risks.\n\n/* -------------------------------------------------------------------------- */\n/*                             getFeeEstimatesAPI                             */\n/* -------------------------------------------------------------------------- */\n\nexport async function getFeeEstimatesAPI(\n  strNetwork: string,\n  path: { [network: string]: string }\n) {\n  const API_PATH = path[strNetwork] + 'fee-estimates'\n  console.warn(API_PATH)\n\n  try {\n    const res = await axios.get(API_PATH)\n    console.warn('Blockstream.info API getFeeEstimates', res.data)\n\n    return res.data\n  } catch (e) {\n    console.warn(e)\n\n    throw new Error('Blockstream.info API getFeeEstimates failed')\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                getHeightAPI                                */\n/* -------------------------------------------------------------------------- */\n\nexport async function getHeightAPI(\n  strNetwork: string,\n  path: { [network: string]: string }\n) {\n  const API_PATH = path[strNetwork] + 'blocks/tip/height'\n  console.warn(API_PATH)\n\n  try {\n    const res = await axios.get(API_PATH)\n    console.warn('Blockstream.info API getHeight', res.data)\n\n    return res.data\n  } catch (e) {\n    console.warn(e)\n\n    throw new Error('Blockstream.info API height get failed')\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                             addRawTxToArrayAPI                             */\n/* -------------------------------------------------------------------------- */\n\n/**\n * API request for each UTXO in array to get the raw tx necessary for psbt.\n * @param     {Array}     arrayUtxo       Array of UTXO.\n * @param     {string}    strNetwork      Network type: 'bitcoin' or 'testnet'.\n * @returns   {object}                    { arrayTx: arrayTx w/ .hex, error: string, fails: number }\n */\nexport async function addRawTxToArrayAPI(\n  utxoList: Array<any>,\n  strNetwork: string,\n  path: { [any: string]: string },\n  delay: () => void = msDelay\n) {\n  if (utxoList === undefined)\n    throw new Error('undefined utxoList when addRawTxToArray was called')\n\n  // to track failures indecies\n  let erroredOutputs = ''\n\n  // abort if empty array\n  if (utxoList?.length === 0) {\n    return { utxoList, error: 'no utxo' }\n  }\n\n  // iterate through original utxo and add hex onto clone, 2 tries max each\n  // (changed let to const in for of loop)\n  for (const [indexString, utxo] of Object.entries(utxoList)) {\n    // indexString is a string so convert for array index use\n    const index = parseInt(indexString, 10)\n\n    let tries = 2\n    while (tries-- > 0) {\n      try {\n        const { txid } = utxo\n\n        // raw tx hex path on API\n        const API_PATH = path[strNetwork] + 'tx/' + txid + '/hex'\n        console.warn(API_PATH)\n\n        const res = await axios.get(API_PATH)\n        console.warn(\n          'Blockstream.info API addRawTxToArray:',\n          index,\n          'index utxo has raw hex of',\n          res.data\n        )\n\n        // add hex data into cloned utxo array\n        utxoList[index].hex = res.data\n\n        // break while loop if got data, don't need more tries\n        break\n      } catch (e) {\n        // keeping track of failures\n        console.warn(\n          'fail detected',\n          indexString,\n          utxo,\n          tries,\n          erroredOutputs,\n          e\n        )\n        // keep track of indecies missing hex\n        erroredOutputs += indexString + ' '\n      }\n\n      // since each utxo is separate call, injected delay very important here\n      await delay()\n    }\n  }\n\n  // return summary object\n  return { utxoList, erroredOutputs }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                               getUTXOListAPI                               */\n/* -------------------------------------------------------------------------- */\n\n/**\n * API request for all utxo for this address.\n * Blockstream utxo do not have addresses that created them!\n * @param     {string}    address       Bitcoin address.\n * @param     {string}    strNetwork    Network type: 'bitcoin' or 'testnet'.\n * @returns   {Array}                   Array of UTXO.\n */\nexport async function getUTXOListAPI(\n  address: string,\n  strNetwork: string,\n  path: { [any: string]: string }\n) {\n  if (address === undefined || address === '')\n    throw new Error('no address when getUTXOList called')\n\n  const API_PATH = path[strNetwork] + 'address/' + address + '/utxo'\n  console.warn(API_PATH)\n\n  try {\n    const res = await axios.get(API_PATH)\n    console.warn('Blockstream.info API getUTXOList', res.data)\n\n    // for now lets filter out the unconfirmed tx\n    return res.data.filter((utxo: any) => utxo.status.confirmed)\n  } catch (e) {\n    console.warn(e)\n\n    throw new Error('Blockstream.info API access failed')\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                            getAddressHistoryAPI                            */\n/* -------------------------------------------------------------------------- */\n\n/**\n * API request all transactions for a specific address.\n * parameters: (address, network).\n * @param   {string} address    - address on network.\n * @param   {string} network    - 'testnet' or 'bitcoin' to match bitcoinjs-lib.\n * @returns {Array<object>}     -  Array of tx objects.\n */\nexport async function getAddressHistoryAPI(\n  address: string,\n  strNetwork: string,\n  path: { [any: string]: string }\n) {\n  if (address === undefined || address === '')\n    throw new Error('no address when getAddressHistory called')\n  // https://blockstream.info/testnet/api/address/tb1qprkzdaqt5jkxrhy57ngvra8k0rvq63ulksz8cx85qwke3myhjrtq9s6nj3/txs/chain\n  // GET /address/:address/txs/chain[/:last_seen_txid]\n  // Get confirmed transaction history for the specified address/scripthash, sorted with newest first.\n  // Returns 25 transactions per page. More can be requested by specifying the last txid seen by the previous query.\n  const MAX_TX = 25\n  let lastTxid = ''\n  const allTx = []\n\n  const CONFIRMED_PAGES_ADDON = '/txs/chain/'\n  const API_PATH =\n    path[strNetwork] + 'address/' + address + CONFIRMED_PAGES_ADDON\n  console.warn(API_PATH)\n\n  try {\n    do {\n      const res = await axios.get(API_PATH + lastTxid)\n      console.warn(\n        'blockstream.info API getAddressHistory',\n        API_PATH + lastTxid,\n        '\\n',\n        res.data\n      )\n\n      // add these tx to the list of tx\n      allTx.push(...res.data)\n\n      if (res.data.length >= MAX_TX) {\n        lastTxid = res.data.slice(-1)[0].txid // last txid\n\n        console.log(\n          'Multiple pages of tx detected, lastTxid received is',\n          lastTxid\n        )\n\n        await msDelay()\n      } else {\n        lastTxid = ''\n      }\n\n\n      // repeat until lastTxid is empty if not already\n    } while (lastTxid !== '')\n\n    return allTx\n  } catch (e) {\n    console.warn(e)\n    throw new Error('Blockstream.info API access failed')\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                  txPushAPI                                 */\n/* -------------------------------------------------------------------------- */\n\n/**\n * Broadcasts content onto the blockchain.\n * parameters: (content, network).\n * @param   {string}  content  - raw hex content of transaction.\n * @param   {string}  network  - 'testnet' or 'bitcoin' to match bitcoinjs-lib.\n * @returns {string}           - Successful broadcast returns txid, otherwise error reason.\n */\nexport async function txPushAPI(\n  content: string,\n  strNetwork: string,\n  path: { [any: string]: string }\n) {\n  if (content === undefined || content === '')\n    throw new Error('no content when txPush called')\n\n  const API_PATH = path[strNetwork] + 'broadcast'\n\n  try {\n    const res = await axios.get(API_PATH, {\n      params: {\n        tx: content\n      }\n    })\n\n    // console.warn(res)\n    console.warn(\n      'blockstream.info API txPush',\n      res,\n      ' Broadcasted on',\n      strNetwork\n    )\n\n    // returns txid on success\n    return { txid: res.data }\n  } catch (e) {\n    console.warn('Failed pushtx', strNetwork, e.response.data)\n\n    throw new Error('Blockstream.info API access failed\\n' + e.response.data)\n  }\n}\n\nconst msDelay = (msDelay = 1000.0 / API_RATE_LIMIT) =>\n  new Promise(r => setTimeout(r, msDelay))\n","import React, { useState } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P1RestoreOrBackup.module.css'\nimport {\n  createNewWalletAction,\n  changePageInfoAction\n} from '../../../store/actions/'\nimport sanitize from './../../../helpers/sanitize'\nimport { Store } from '../../../store/'\nimport { Details } from './../../general/Details'\n\nenum pages {\n  ROOT,\n  NEW_WALLET,\n  LOAD_BACKUP\n}\n\n// restore backup or create new\nexport const P1RestoreOrBackup = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n  const [page, setPage] = useState(pages.ROOT) // local state\n  const [backup, setBackup] = useState('') // local state\n\n  // count non empty string strings separated by spaces\n  const wordCount = backup.split(' ').filter(v => v !== '').length\n\n  return (\n    <div className={styles.wrapper}>\n      {/* ROOT PAGE */}\n      <div style={{ display: page === pages.ROOT ? 'block' : 'none' }}>\n        <div className={styles.title}>\n          {state.wallet.address ? (\n            <>\n              Your <span className={styles.orange}>BTC</span> wallet for\n              interacting\n              <br />\n              with the domains\n            </>\n          ) : (\n            <>\n              Need a <span className={styles.orange}>BTC</span> wallet for\n              interacting\n              <br />\n              with the domains\n            </>\n          )}\n        </div>\n\n        <div className={styles.contentWrapper}>\n          <Details description={'Explain'}>\n            <p>\n              <span>\n                This wallet has the built-in unique functionality to create\n                transactions with custom scripts, inputs, and outputs necessary\n                for this application.\n              </span>\n\n              <span>\n                The wallet's address is how users and owners of the domains are\n                identified and should only be used for this purpose.\n              </span>\n\n              <span>1. BIP39 mnemonic is used from backup or generated</span>\n              <span>2. BIP32 master seed is derived from the mnemonic</span>\n              <span>\n                3. Key pair is derived at the m/44'/0'/0'/0/0 path from master\n                seed\n              </span>\n              <span>\n                4. The p2wpkh (pay-to-witness-public-key-hash) address is\n                derived from key pair\n              </span>\n            </p>\n          </Details>\n        </div>\n\n        <div className={styles.buttonWrapper}>\n          <RoundButton\n            show={state.wallet.mnemonic.length > 0 ? 'false' : 'true'}\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n              createNewWalletAction(state, dispatch)\n            }}\n          >\n            I need a new wallet\n          </RoundButton>\n          <RoundButton\n            show={state.wallet.mnemonic.length > 0 ? 'true' : 'false'}\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n            }}\n          >\n            Current mnemonic\n          </RoundButton>\n          <RoundButton\n            onClick={() => {\n              setPage(pages.LOAD_BACKUP)\n            }}\n          >\n            Restore from backup\n          </RoundButton>\n          <RoundButton\n            show={(!!state.wallet?.address).toString()}\n            onClick={() => {\n              changePageInfoAction(state, dispatch, 2)\n            }}\n            next='true'\n          >\n            Don't change wallet\n          </RoundButton>\n        </div>\n      </div>\n\n      {/* NEW_WALLET PAGE */}\n      <div\n        className={styles.title}\n        style={{ display: page === pages.NEW_WALLET ? 'inline-block' : 'none' }}\n      >\n        Randomly generated mnemonic backup for{' '}\n        <span className={styles.orange}>BTC</span> wallet\n      </div>\n      <div\n        className={styles.contentWrapper}\n        style={{ display: page === pages.NEW_WALLET ? 'flex' : 'none' }}\n      >\n        <div className={styles.describe}>\n          Backup this private phrase or you will lose access!\n        </div>\n        <div\n          id='divBackup'\n          spellCheck={false}\n          className={[styles.backup, 'selectable'].join(' ')}\n          onClick={() => {\n            // select div entire contents\n            // const thisDiv = document?.getElementById('divBackup')\n            // if (thisDiv) {\n            //   window.getSelection()?.selectAllChildren(thisDiv)\n            // }\n          }}\n        >\n          {state.wallet.mnemonic}\n        </div>\n      </div>\n      <div\n        className={styles.buttonWrapper}\n        style={{ display: page === pages.NEW_WALLET ? 'flex' : 'none' }}\n      >\n        <RoundButton\n          onClick={() => {\n            setPage(pages.ROOT)\n          }}\n          back='true'\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          onClick={() => {\n            setPage(pages.NEW_WALLET)\n            createNewWalletAction(state, dispatch)\n          }}\n        >\n          New\n        </RoundButton>\n        <RoundButton\n          next='true'\n          onClick={() => {\n            changePageInfoAction(state, dispatch, 2)\n          }}\n        >\n          I'm done with backup\n        </RoundButton>\n      </div>\n\n      {/* LOAD_BACKUP PAGE */}\n\n      <div style={{ display: page === pages.LOAD_BACKUP ? 'block' : 'none' }}>\n        <div className={styles.title}>Type or paste your backup here</div>\n\n        <div className={styles.contentWrapper}>\n          {wordCount.toString() + ' words now. 12 minimum.'}\n        </div>\n\n        <textarea\n          className={styles.restoreBackup}\n          cols={30}\n          rows={3}\n          spellCheck={false}\n          placeholder={'mnemonic backup'}\n          onChange={e => {\n            // lowcaps, spaces, single space max, only one space on left while typing\n            const cleanString = sanitize(\n              e.target.value.toLowerCase(),\n              'lowcaps spaces single_space_width'.split(' ')\n            ).trimLeft()\n            setBackup(cleanString.trim()) // store without trailing space\n            e.target.value = cleanString // quick update\n          }}\n        ></textarea>\n        <div className={styles.buttonWrapper}>\n          <RoundButton\n            onClick={() => {\n              setPage(pages.ROOT)\n            }}\n            back='true'\n          >\n            Back\n          </RoundButton>\n          <RoundButton\n            // 12 words minimum separated by spaces (TODO): proper checks\n            show={wordCount >= 12 ? 'true' : 'false'}\n            next='true'\n            onClick={() => {\n              createNewWalletAction(state, dispatch, backup)\n              changePageInfoAction(state, dispatch, 2)\n            }}\n          >\n            Done\n          </RoundButton>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import { I_State, Dispatch } from '../../interfaces'\nimport { ActionTypes } from './../../interfaces'\nconst { SET_API } = ActionTypes\n\n/**\n * Adds 1 api task and returns a promise of the result.\n * newTaskFunction must be a callback function (delayFunc)=>{ return something }\n * Example: (delay param is optional, based on prop used to create component)\n * const getUltra = await addNewApiTaskAction(state, dispatch, ({delay}) => ultraAPI(stuffForUltraAPI, delay))\n */\nexport const addNewApiTaskAction = async (\n  state: I_State,\n  dispatch: Dispatch,\n  newTaskFunction: any\n) => {\n  return new Promise((resolve: any, reject: any) => {\n    // wrapping task with resolve and reject\n    const newTask = {\n      run: newTaskFunction,\n      resolve,\n      reject,\n      timestamp: Date.now()\n    }\n\n    // adding the task and ability to resolve it with value\n    // to the end of task queue within payload\n    const payload = {\n      ...state.api,\n      tasks: [...state.api.tasks, newTask]\n    }\n\n    // dispatching the payload to include it in state\n    dispatch({ type: SET_API, payload })\n  })\n}\n","import { I_State, Dispatch, ActionTypes } from '../../interfaces'\nimport { calcP2WSH, calcBnsState } from '../../helpers/bns'\nimport { getAddressHistoryAPI, getHeightAPI } from './../../api/blockstream'\nimport { addNewApiTaskAction } from './addNewApiTaskAction'\nconst { STORE_SEARCH_RESULTS_FAIL, STORE_SEARCH_RESULTS } = ActionTypes\n\n/**\n * Get address,\n * tx with notification address,\n * calculate owner,\n * find current owner's forwarding info,\n * send/dispatch to reducer to store important data found\n * (No UTXO nor raw TX scan for speed in front page search necessary yet)\n * otherDomain - to search another alias.btc & return state\n */\nexport const searchAction = async (\n  state: I_State,\n  dispatch: Dispatch,\n  { otherDomain } = { otherDomain: '' }\n) => {\n  // stop if no alias or domain submitted, nothing to save to state\n  if (!state.alias && !otherDomain) {\n    console.log('no alias/domain found')\n    return undefined\n  }\n\n  const domainName = !otherDomain ? state.alias + state.extension : otherDomain\n  const apiPath = state.api.path\n\n  // find address for this alias\n  const { notificationsAddress } = calcP2WSH(domainName, state.network)\n\n  try {\n    // 1. Get current blockheight from API so ownership is using latest possible info\n    const currentHeight = await addNewApiTaskAction(state, dispatch, () =>\n      getHeightAPI(state.network, apiPath)\n    )\n\n    // 2. Get API response for all tx history of this address\n    // This will grab all tx that \"notified\" this address by sending to it\n    // Upon failure error should be caught in this function\n    const notificationsTxHistory = await addNewApiTaskAction(\n      state,\n      dispatch,\n      () => getAddressHistoryAPI(notificationsAddress, state.network, apiPath)\n    )\n\n    // calculate bns data from this history via helper functions\n    const { domain } = calcBnsState(\n      notificationsTxHistory as Array<any>,\n      domainName,\n      currentHeight as number,\n      state.network\n    )\n\n    // store data\n    if (!otherDomain)\n      dispatch({\n        type: STORE_SEARCH_RESULTS,\n        payload: {\n          alias: state.alias,\n          domain,\n          chain: {\n            height: currentHeight\n          }\n        }\n      })\n\n    return {\n      domain,\n      chain: {\n        height: currentHeight\n      }\n    }\n\n    // if (window.location.hash !== '#/') router.push('/')\n  } catch (e) {\n    console.log('searchAction issue found:', e)\n\n    // still updating the notification address\n    if (!otherDomain)\n      dispatch({\n        type: STORE_SEARCH_RESULTS_FAIL,\n        payload: {\n          alias: state.alias, // can save alias\n          domainName,\n          notificationsAddress // can save this easy derivation\n        }\n      })\n\n    return null\n    // if (window.location.hash !== '#/') router.push('/')\n  }\n}\n","import { I_State, Dispatch } from '../../interfaces'\nimport { ActionTypes } from './../../interfaces'\n\nimport { createNewWallet, loadWallet } from '../../helpers/bns/bitcoin'\n\nconst { NEW_WALLET } = ActionTypes\n\n/**\n * Create new wallet address & backup.\n * If mnemonic is provided, wallet is generated from that.\n */\nexport const createNewWalletAction = async (\n  state: I_State,\n  dispatch: Dispatch,\n  strMnemonic = ''\n) => {\n  // load all the wallet info from mnemonic or generate new random mnemonic to do it\n  const { mnemonic, WIF, address } =\n    strMnemonic === ''\n      ? createNewWallet(state.network)\n      : loadWallet(strMnemonic, state.network)\n\n  return dispatch({\n    type: NEW_WALLET,\n    payload: { mnemonic, WIF, address }\n  })\n}\n","import { I_State, Dispatch, ActionTypes } from '../../interfaces'\nconst { CHANGE_PAGE_INFO } = ActionTypes\n\n/**\n * Request to change page info that's checked for validity here\n */\nexport const changePageInfoAction = async (\n  state: I_State,\n  dispatch: Dispatch,\n  page: number\n) => {\n  // for now no checks\n\n  return dispatch({\n    type: CHANGE_PAGE_INFO,\n    payload: page\n  })\n}\n","import { I_State, Dispatch, ActionTypes } from '../../interfaces'\nimport { calcP2WSH, calcBnsState } from '../../helpers/bns'\nimport {\n  getAddressHistoryAPI,\n  getUTXOListAPI,\n  addRawTxToArrayAPI,\n  getHeightAPI\n} from '../../api/blockstream'\nimport { addNewApiTaskAction } from './../'\nconst { UPDATE_WALLET, UPDATE_DOMAIN, ACTION_FAIL } = ActionTypes\n\n/**\n * Scans the address for utxo on a given network (w/ API).\n * Add hex of each tx that created utxo (for psbt).\n * addressType is one of enums ActionTypes that's either UPDATE_WALLET or UPDATE_NOTIFICATION.\n * If scanning wallet, then update wallet state.\n * If scanning notification address, then update notification state.\n * Notification scan will reproduce address scan first before getting details.\n */\nexport const scanAddressFullyAction = async (\n  state: I_State,\n  dispatch: Dispatch,\n  addressType: ActionTypes\n) => {\n  const domainName = state.alias + state.extension\n\n  // wallet address scan\n  if (addressType === UPDATE_WALLET) {\n    // wallet address\n\n    try {\n      // 1. get address TX history\n\n      const walletAddress = state.wallet.address\n      const walletTxHistory: any = await addNewApiTaskAction(\n        state,\n        dispatch,\n        () => getAddressHistoryAPI(walletAddress, state.network, state.api.path)\n      )\n\n      // 2. get address UTXO list (could also calculate from tx history or API)\n\n      const utxoListWalletAddress: any = await addNewApiTaskAction(\n        state,\n        dispatch,\n        () => getUTXOListAPI(walletAddress, state.network, state.api.path)\n      )\n\n      // 3. get raw tx for each UTXO (psbt requirement for creating new tx later)\n\n      const { utxoList, erroredOutputs }: any = await addNewApiTaskAction(\n        state,\n        dispatch,\n        ({ delay }: any) =>\n          addRawTxToArrayAPI(\n            utxoListWalletAddress,\n            state.network,\n            state.api.path,\n            delay // passing delay here as this requires many steps\n          )\n      )\n\n      !!erroredOutputs &&\n        console.log('API had issues during hex utxo scan:', erroredOutputs)\n\n      return dispatch({\n        type: UPDATE_WALLET,\n        payload: {\n          wallet: {\n            txHistory: walletTxHistory,\n            utxoList: utxoList\n          }\n        }\n      })\n    } catch (e) {\n      console.log('Wallet address scan failed')\n      console.log(e)\n      // abort\n      return dispatch({\n        type: ACTION_FAIL,\n        payload: {}\n      })\n    }\n  }\n\n  // notification address scan\n  if (addressType === UPDATE_DOMAIN) {\n    try {\n      // 1. get current blockheight from API so ownership is using latest possible info\n\n      const currentHeight: any = await addNewApiTaskAction(\n        state,\n        dispatch,\n        () => getHeightAPI(state.network, state.api.path)\n      )\n\n      // 2. get address TX history\n\n      const { notificationsAddress } = calcP2WSH(domainName, state.network)\n      const notificationsTxHistory: any = await addNewApiTaskAction(\n        state,\n        dispatch,\n        () =>\n          getAddressHistoryAPI(\n            notificationsAddress,\n            state.network,\n            state.api.path\n          )\n      )\n\n      // 3. derive new BNS domain state & utxo\n      const { domain: newDomain } = calcBnsState(\n        notificationsTxHistory,\n        domainName,\n        currentHeight,\n        state.network\n      )\n\n      // 4. get raw tx for each UTXO (psbt requirement for creating new tx later)\n\n      const { erroredOutputs }: any = await addNewApiTaskAction(\n        state,\n        dispatch,\n        ({ delay }: any) =>\n          addRawTxToArrayAPI(\n            newDomain.derivedUtxoList,\n            state.network,\n            state.api.path,\n            delay // passing delay as it requires many steps\n          )\n      )\n\n      !!erroredOutputs &&\n        console.log('API had issues during hex utxo scan:', erroredOutputs)\n\n      return dispatch({\n        type: UPDATE_DOMAIN,\n        payload: {\n          domain: newDomain,\n          chain: {\n            height: currentHeight\n          }\n        }\n      })\n    } catch (e) {\n      console.log('Notification address scan failed')\n      console.log(e)\n      // abort\n      return dispatch({\n        type: ACTION_FAIL,\n        payload: {}\n      })\n    }\n  }\n\n  throw new Error('unexpected address type')\n}\n","import { I_State, Dispatch, ActionTypes } from '../../interfaces'\nconst { CHOICES_BNS_ACTION } = ActionTypes\n\n/**\n * Cleans up the entered string including removing next line characters\n */\nexport const changeChoicesBNSAction = async (\n  state: I_State,\n  dispatch: Dispatch,\n  choices: any\n) => {\n  return dispatch({\n    type: CHOICES_BNS_ACTION,\n    payload: choices\n  })\n}\n","import { I_State, Dispatch } from '../../interfaces'\nimport { ActionTypes } from './../../interfaces'\nconst { SET_API } = ActionTypes\n\n/**\n * Updates API object.\n */\nexport const setApiAction = async (\n  state: I_State,\n  dispatch: Dispatch,\n  api: any\n) => {\n  return dispatch({\n    type: SET_API,\n    payload: api\n  })\n}\n","import React, { useEffect, useState } from 'react'\nimport styles from './CreateHeader.module.css'\nimport { Store } from '../../../store/'\nimport { useHistory } from 'react-router-dom'\n\n// restore backup or create new\nexport const CreateHeader = () => {\n  // global state\n  const { state } = React.useContext(Store)\n\n  const domainName = state.alias + state.extension\n\n  // navigation object\n  const history = useHistory()\n\n  // Make sure entire alias is always visible on top through\n  // resizing based on letter count.\n  //\n  // get window width in component instance state 'width'\n  // so can resize alias based on char count\n  const [width, setWidth] = useState(window.innerWidth)\n  useEffect(() => {\n    const resize = () => {\n      setWidth(window.innerWidth)\n    }\n    window.addEventListener('resize', resize)\n    return () => window.removeEventListener('resize', resize)\n  }, [])\n\n  // enforces max size to font size so 1 letter alias has same font as 19 letter alias\n  const fontScale = Math.min(\n    Math.floor((1.1 * width) / domainName.length),\n    Math.floor((1.1 * width) / 15)\n  )\n\n  const barHeight = {\n    height: (0.13 * width + 0.4 * fontScale).toString() + 'px'\n  }\n  const aliasMarginTop = {\n    marginTop: (0.02 * width - 0.1 * fontScale).toString() + 'px'\n  }\n  const aliasFontSize = { fontSize: fontScale.toString() + 'px' }\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.cutOverflow} style={barHeight}>\n        <div className={styles.bar} style={barHeight} />\n      </div>\n      <div\n        className={styles.domain}\n        style={aliasMarginTop}\n        onClick={() => {\n          history.push('/')\n        }}\n      >\n        <span className={styles.alias} style={aliasFontSize}>\n          {state.alias}\n        </span>\n        <span className={styles.ext} style={aliasFontSize}>\n          {state.extension}\n        </span>\n      </div>\n      <div className={styles.spacer} />\n    </div>\n  )\n}\n","import React from 'react'\nimport styles from './RoundButton.module.css'\n\n/**\n * Standard button for this app.\n *\n * Pass the following props to customize it.\n *\n * next='true' to add next arrow at right (off if undefined or '').\n *\n * back='true' to add back arrow on left (off if undefined or '').\n *\n * minor='true' to just color it like a minor button (like back button) w/o arrow.\n *\n * show='true' to display element vs show='false' to set display to none (dom still exists).\n *\n * showdisabled='true' to make button unclickable and grayed out\n *\n * sizebutton='2.9' to make the button size 2.9x standard var(--s) size used (defined in global global.css).\n *\n * colorbutton='var(--colorBitcoinOrange)' to customize color.\n *\n * colorbuttonText='var(--colorButtonText)' to customize text color.\n *\n * -------------------------------------------------\n * Defaults (vars defined in global global.css):`\n *\n * sizebutton = 2.5. ( means font size calc(2.5/2.9 * var(--s)) )\n *\n * colorbutton = var(--colorBitcoinOrange).\n *\n * colorbuttontext = var(--colorButtonText).\n */\nexport const RoundButton = (props: any): JSX.Element => {\n  // styles.roundButtonWrap on outside\n  return (\n    <div\n      // variables defined by string will be available to button & its children for scope\n      style={{\n        display: (props?.show === 'false'\n          ? 'none'\n          : 'inline-block') as React.CSSProperties,\n        '--colorThisButton': (props.colorbutton\n          ? props.colorbutton\n          : `var(--colorBitcoinOrange)`) as React.CSSProperties,\n        '--colorThisButtonText': (props.colorbuttontext\n          ? props.colorbuttontext\n          : `var(--colorButtonText)`) as React.CSSProperties,\n        '--sizeButton': (props.sizebutton\n          ? // Button was designed at 2.9 * var(--s) scale font so\n            // this just lets user redefine font & everything else proportionally\n            `calc(${props.sizebutton}/2.9 * var(--s))`\n          : `calc(2.5/2.9 * var(--s))`) as React.CSSProperties\n      }}\n      {...props}\n      className={[\n        styles.roundButtonWrap,\n        props.back ? styles.backWrapper : '',\n        props.minor ? styles.minorWrapper : undefined,\n        props.showdisabled ? styles.disabledWrap : undefined,\n        props.className\n      ].join(' ')}\n      onClick={e => {\n        // do not process click if showdisabled is on\n        if (!props.showdisabled) props.onClick(e)\n      }}\n    >\n      <div\n        className={[\n          styles.roundButton,\n          props.back ? styles.backArrowPad : undefined,\n          props.next ? styles.nextArrowPad : undefined,\n          props.minor ? styles.minorButton : undefined,\n          props.showdisabled ? styles.disabled : undefined\n        ].join(' ')}\n      >\n        {props.back && <div className={styles.backArrow} />}\n\n        {props.children}\n\n        {props.next && <div className={styles.nextArrow} />}\n\n        <div className={styles.overhead} />\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport styles from './Details.module.css'\n\n/**\n * Create details expanding/collapsing button.\n * Optional props:\n * title={ 'random text' } to change text shown on the hide/show toggle button\n * show={ 'true } to show initially *\n * Background is automatically styled if <p></p> is used directly inside.\n * If so, <span></span> can be used inside <p></p> to separate\n * paragraphs and indent the wrap as well.\n */\nexport const Details = (props: any) => {\n  // local state for showing or hiding details\n  const [showDetails, setShowDetails] = React.useState(\n    props?.show === 'true' || false\n  )\n\n  return (\n    <div className={styles.wrapper}>\n      {/* button that toggles whether details are shown or not */}\n      <div\n        className={styles.buttonWrapper}\n        onClick={() => {\n          setShowDetails(!showDetails)\n        }}\n      >\n        <div className={styles.toggleDetails}>\n          {/* the text on button coems from title prop */}\n          {props.title || props.description || 'Show details'}\n        </div>\n        {/* the arrow that rotates on click */}\n        <div\n          className={[styles.arrow, showDetails ? styles.down : ''].join(' ')}\n        />\n      </div>\n\n      {/* the details that is rendered when showDetails = true */}\n      <div\n        className={styles.details}\n        style={{\n          display: showDetails ? 'block' : 'none'\n        }}\n      >\n        {/* any arbitrary content surrounded by this component brackets */}\n        {/* if <p></p> tags are used, they will be formated */}\n        {props.children}\n      </div>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P2LoadWallet.module.css'\nimport { Store } from '../../../store/'\nimport { changePageInfoAction } from '../../../store/actions'\nimport qr from 'qrcode'\nimport { useHistory } from 'react-router-dom'\n\n/**\n * Load wallet page, including faucet link for testnet users\n */\nexport const P2LoadWallet = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n\n  // load QR code into local state\n  const [qrCode, setQrCode] = useState()\n  useEffect(() => {\n    qr.toDataURL(\n      state.wallet.address,\n      {\n        type: 'image/jpeg',\n        color: { dark: '#111133ff' }\n      },\n      (err: any, url: any) => {\n        if (!err) {\n          setQrCode(url)\n        }\n      }\n    )\n  }, [state.wallet.address])\n\n  // url changer\n  const history = useHistory()\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.title}>\n        Fund your <span className={styles.orange}>BTC</span> wallet to interact\n        with domains\n      </div>\n\n      <div className={styles.contentWrapper}>\n        <div className={styles.imgQr}>\n          {/* downloadable */}\n          <img src={qrCode} alt={'QR Code'} />\n        </div>\n\n        <div className={[styles.address, 'selectable'].join(' ')}>\n          {state.wallet.address}\n        </div>\n      </div>\n      <div className={styles.buttonWrapper}>\n        <div className={styles.backAndReady}>\n          <RoundButton\n            className={styles.button}\n            back='true'\n            onClick={() => {\n              changePageInfoAction(state, dispatch, 1)\n            }}\n          >\n            Back\n          </RoundButton>\n\n          <RoundButton\n            className={styles.button}\n            next='true'\n            onClick={() => {\n              changePageInfoAction(state, dispatch, 3)\n            }}\n          >\n            Ready\n          </RoundButton>\n        </div>\n\n        <RoundButton\n          className={styles.button}\n          show={(!!state.wallet?.address).toString()}\n          onClick={() => {\n            history.push('/wallet')\n          }}\n          colorbutton={'var(--colorHighlightDark)'}\n        >\n          Withdraw\n        </RoundButton>\n\n        <RoundButton\n          className={styles.button}\n          colorbutton={'var(--colorHighlightDark)'}\n          show={(state.network === 'testnet').toString()}\n          onClick={() => {\n            // open faucet page in new window\n            window.open('https://bitcoinfaucet.uo1.net/', '_blank')\n          }}\n        >\n          Testnet faucet #1\n        </RoundButton>\n\n        <RoundButton\n          className={styles.button}\n          colorbutton={'var(--colorHighlightDark)'}\n          show={(state.network === 'testnet').toString()}\n          onClick={() => {\n            // open faucet page in new window\n            window.open('https://testnet-faucet.mempool.co/', '_blank')\n          }}\n        >\n          Testnet faucet #2\n        </RoundButton>\n\n        <RoundButton\n          className={styles.button}\n          colorbutton={'var(--colorHighlightDark)'}\n          onClick={() => {\n            // open blockstream explorer for address in new window/tab\n            const pathEdit = state.network === 'testnet' ? 'testnet/' : ''\n            window.open(\n              `https://blockstream.info/${pathEdit}address/${state.wallet.address}`,\n              '_blank'\n            )\n          }}\n        >\n          Open explorer\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P3DomainAndWallet.module.css'\nimport {\n  Store,\n  unitsBTC,\n  satsToBTCSpaced,\n  getUnspentSum\n} from '../../../store/'\nimport { changePageInfoAction } from '../../../store/actions'\nimport { scanAddressFullyAction } from './../../../store/actions'\nimport { ActionTypes } from './../../../interfaces'\n\n/**\n * Bid on network\n */\nexport const P3DomainAndWallet = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n  // initialized state\n  const [initialized, setInitialized] = React.useState(false)\n\n  // Local state: keep track if API is busy\n  const [apiStatus, setApiStatus] = React.useState('ok')\n\n  // on state update detected by timestamp, reset api status\n  React.useEffect(() => {\n    setApiStatus('ok')\n  }, [state.lastTimeStamp])\n\n  // most important for domain notificaiton address is the transaction history to know ownership\n  // but also the current utxo in case we want to control the domain\n  const domainInfo = () => {\n    if (state.pageInfo.checkedDomain) {\n      return '✓'\n    } else {\n      return 'needs scan'\n    }\n  }\n\n  // wallet needs utxo info including raw tx & tx history for nonce\n  const walletInfo = () => {\n    if (state.pageInfo.checkedWallet) {\n      return '✓'\n    } else {\n      return 'needs scan'\n    }\n  }\n\n  // Conditions to enable next pages.\n  const readyStatus = () => {\n    if (!state.pageInfo.checkedDomain && !state.pageInfo.checkedWallet) {\n      return { isReady: false, info: 'Scan both to move on' }\n    }\n    if (!state.pageInfo.checkedDomain && state.pageInfo.checkedWallet) {\n      return { isReady: false, info: 'Scan domain to move on' }\n    }\n    if (state.pageInfo.checkedDomain && !state.pageInfo.checkedWallet) {\n      return { isReady: false, info: 'Scan wallet to move on' }\n    }\n    if (state.pageInfo.checkedDomain && state.pageInfo.checkedWallet) {\n      return { isReady: true, info: '' }\n    }\n    return { isReady: false, info: 'Unknown status' }\n  }\n\n  // try scanning for best UX\n  if (!initialized) {\n    setInitialized(true)\n    const initialScan = async () => {\n      if (!state.pageInfo.checkedDomain) {\n        setApiStatus('domain')\n        await scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_DOMAIN)\n      }\n      if (!state.pageInfo.checkedWallet) {\n        setApiStatus('wallet')\n        await scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_WALLET)\n      }\n    }\n    initialScan()\n  }\n\n  /* -------------------------------------------------------------------------- */\n  /*                                   render                                   */\n  /* -------------------------------------------------------------------------- */\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.title}>\n        Must scan the domain and owner addresses\n      </div>\n      <div className={styles.domainInfo}>\n        {apiStatus !== 'domain' && 'Domain ' + domainInfo()}\n        {apiStatus === 'domain' && 'Domain scanning...'}\n      </div>\n      <div className={styles.domainButton}>\n        <RoundButton\n          onClick={() => {\n            if (apiStatus === 'ok') {\n              setApiStatus('domain')\n              scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_DOMAIN)\n            }\n          }}\n          minor={'true'}\n        >\n          API Scan\n        </RoundButton>\n      </div>\n      <div className={styles.walletInfo}>\n        {apiStatus !== 'wallet' && 'Wallet ' + walletInfo()}\n        {apiStatus === 'wallet' && 'Wallet scanning...'}\n      </div>\n      <div className={styles.walletButton}>\n        <RoundButton\n          onClick={() => {\n            if (apiStatus === 'ok') {\n              setApiStatus('wallet')\n              scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_WALLET)\n            }\n          }}\n          minor={'true'}\n        >\n          API Scan\n        </RoundButton>\n      </div>\n      <div className={styles.unspent}>\n        <div className={styles.balance}>\n          {state.pageInfo.checkedWallet\n            ? satsToBTCSpaced(getUnspentSum(state.wallet.utxoList))\n            : 'n/a'}\n        </div>\n        {' ' + unitsBTC(state)}\n      </div>\n      <div className={styles.ownership}>{readyStatus().info}</div>\n      <div className={styles.buttonWrapper}>\n        <RoundButton\n          back='true'\n          onClick={() => {\n            changePageInfoAction(state, dispatch, 2)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          show={readyStatus().isReady ? 'true' : 'false'}\n          next='true'\n          onClick={() => {\n            changePageInfoAction(state, dispatch, 4)\n          }}\n        >\n          Ready\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport styles from './InputForm.module.css'\nimport { RoundButton } from './../../general/RoundButton'\nimport sanitize from '../../../helpers/sanitize'\n\nconst TIME_DELAY_BEFORE_SEARCH = 1000 // ms\n\n/**\n * Reusable and styled form, label, textarea.\n * Component is internally a controlled component, but externally uncontrolled.\n * value is kept in text form, but can provide thisInputOnChange to optionally store it in another form elsewhere.\n * value is read internally, but initial value can be set with thisInitialValue\n *\n * props:\n * thisInputLabel - label.\n * thisInitialValue - initial value.\n * thisInputOnChange - function to do onChange.\n * sanitizeFilters - sanitize filters, default is single line.\n * showButton - show ok button or not.\n * thisSubmitButtonOnClick - function to run on OK clicked.\n * showBonusInformation - show what's b/w <InputForm> & </InputForm> under the text area.\n * placeholder - text to show as placeholder in text area.\n */\nexport const InputForm = (props: any) => {\n  // local state so can edit / store textbox content without having\n  // to read from final state which might be a number or further sanitized\n  const [textValue, setTextValue]: [string, any] = React.useState(\n    props.thisInitialValue !== undefined ? props.thisInitialValue : ''\n  )\n\n  // store look up table and time delay for it\n  const [dropdowns, setDropdowns]: any = React.useState({\n    lastTimer: null,\n    known: {}\n  })\n\n  // const [note, setNote]: any = React.useState('')\n\n  // store if text area has focus (for drop down)\n  const [hasFocus, setHasFocus]: any = React.useState(false)\n\n  const handleChange = (e?: any) => {\n    // set what we see in the textarea after removing unwanted chars like nextline\n    const cleanedValue = sanitize(\n      e.target.value,\n      props.sanitizeFilters || ['oneline']\n    )\n    setTextValue(cleanedValue)\n\n    // update value so it's single line for custom change function below if any\n    e.target.value = cleanedValue\n    // furthermore, run user provided setter\n    if (props.thisInputOnChange) props.thisInputOnChange(e)\n\n    // check dropdown once stopped typing long enough\n    // clear old timer, set new timer\n    if (props.getDropdowns) {\n      clearTimeout(dropdowns.lastTimer)\n      const newTimer = setTimeout(async () => {\n        // look up previously searched string, otherwise use the function to search it\n        if (!dropdowns.known[cleanedValue]) {\n          // if have to look it up first time\n          const items = (await props.getDropdowns(cleanedValue)) || []\n          // add whatever it is to look up table\n          if (items.length)\n            setDropdowns({\n              ...dropdowns,\n              known: {\n                ...dropdowns.known,\n                [cleanedValue]: items\n              }\n            })\n        }\n      }, TIME_DELAY_BEFORE_SEARCH)\n      setDropdowns({ ...dropdowns, lastTimer: newTimer })\n    }\n  }\n\n  /* -------------------------------------------------------------------------- */\n  /*                                   render                                   */\n  /* -------------------------------------------------------------------------- */\n\n  return (\n    <div\n      className={[styles.wrapper, props.className].join(' ')}\n      style={props.style}\n    >\n      <div className={styles.shiftRight}>\n        <aside className={styles.label}>{props.thisInputLabel || ''}</aside>\n        <textarea\n          onFocus={() =>\n            setTimeout(async () => {\n              setHasFocus(true)\n            }, TIME_DELAY_BEFORE_SEARCH / 4)\n          }\n          onBlur={() => {\n            setTimeout(async () => {\n              setHasFocus(false)\n            }, TIME_DELAY_BEFORE_SEARCH / 4)\n            // format if textarea is prop.onBlur provided and textarea is unfocused\n            if (props?.onBlur) setTextValue(props.onBlur())\n          }}\n          className={styles.textarea}\n          wrap={'off'}\n          spellCheck={false}\n          value={\n            // read what we see in the textarea\n            textValue\n            // props.thisInputValue\n          }\n          onChange={handleChange}\n          // onKeyDown={handleChange}\n          placeholder={props.placeholder || ''}\n        ></textarea>\n        {/* show suggestions when text area is in focus, delay, and there are results */}\n        {props.getDropdowns &&\n          props.renderDropdowns &&\n          hasFocus &&\n          dropdowns.known[textValue] && (\n            <div className={[styles.suggestions, 'scrollbar'].join(' ')}>\n              {(dropdowns.known[textValue] || []).map(\n                (item: any, index: number) => {\n                  // fill in the string\n                  const handleClick = (newValue: string) => {\n                    setTextValue(newValue)\n                    handleChange({ target: { value: newValue } })\n                  }\n                  const renderDropdowns = props?.renderDropdowns({\n                    textValue,\n                    item\n                  })\n                  return !renderDropdowns ? (\n                    undefined\n                  ) : (\n                    <div key={`suggestion_dropdown_${index}`}>\n                      <div\n                        className={[\n                          styles.suggestions__item,\n                          'letter_breakable'\n                        ].join(' ')}\n                        onClick={() => handleClick(renderDropdowns.selection)}\n                      >\n                        {renderDropdowns.contents}\n                      </div>\n\n                      <div className={styles.suggestions__separator}></div>\n                    </div>\n                  )\n                }\n              )}\n            </div>\n          )}\n        {props.showButton === 'true' && (\n          <RoundButton\n            className={[styles.button].join(' ')}\n            next={'true'}\n            onClick={() => {\n              if (props.thisSubmitButtonOnClick)\n                props.thisSubmitButtonOnClick(textValue)\n            }}\n          >\n            OK\n          </RoundButton>\n        )}\n        {!!props.showBonusInformation && (\n          <div className={styles.bonusInformation}>{props.children}</div>\n        )}\n      </div>\n    </div>\n  )\n}\n\n// if (textValue === undefined) {\n//   if (props.thisInputOnChange)\n//     props.thisInputOnChange({\n//       target: {\n//         value:\n//           props.thisInitialValue !== undefined ? props.thisInitialValue : ''\n//       }\n//     })\n// }\n\n// React.useEffect(() => {\n//   setTextValue(\n//     props.thisInitialValue !== undefined ? props.thisInitialValue : ''\n//   )\n// }, [props.thisInitialValue])\n","import React from 'react'\nimport styles from './Switch.module.css'\n\n/**\n * Selection menu.\n * choices - Array of selection choices to choose from\n * initialIndex - index of the initially selected choice (1st by default, or 0) *\n * onClick - pass clicking event to use\n */\nexport const Switch = (props: any) => {\n  const [selection, setSelection] = React.useState<number | undefined>()\n\n  const defaultChoices = [\n    {\n      value: true,\n      display: 'yes',\n      do: () => {\n        console.log('default true chosen')\n      }\n    },\n    {\n      value: false,\n      display: 'no',\n      do: () => {\n        console.log('default false chosen')\n      }\n    }\n  ]\n  const choices: Array<any> = props.choices || defaultChoices\n\n  if (selection === undefined) {\n    const initialIndex = props.initialIndex || 0\n    setSelection(initialIndex)\n    const initialValue = choices[initialIndex].value\n    console.log(initialIndex, initialValue, choices)\n    if (choices[initialIndex].do) choices[initialIndex].do(initialValue)\n  }\n\n  return (\n    <div className={[styles.wrapper, props.className].join(' ')}>\n      <div className={styles.shiftRight}>\n        <div className={styles.label}>{props.thisInputLabel || ''}</div>\n        <div className={styles.choiceArea}>\n          {choices.map((thisChoice: any, index: number) => (\n            <div\n              key={index}\n              className={[\n                styles.choice,\n                selection === index ? styles.selected : ''\n              ].join(' ')}\n              onClick={e => {\n                // change local state of selection\n                setSelection(index)\n                // do the corresponding action\n                if (thisChoice.do) thisChoice.do(thisChoice.value)\n                // do other stuff passed in onClick\n                if (props.onClick) props.onClick(e)\n\n                console.log(\n                  '',\n                  thisChoice.display || String(thisChoice.value),\n                  'chosen'\n                )\n              }}\n            >\n              {thisChoice.display || String(thisChoice.value)}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P4ActionChoice.module.css'\nimport { Store } from '../../../store/'\nimport {\n  changePageInfoAction,\n  changeChoicesBNSAction\n} from '../../../store/actions'\nimport { Details } from './../../general/Details'\nimport {\n  runAllActionPermissionChecks,\n  calcBnsState,\n  getGetters,\n  getSetters\n} from './../../../helpers/bns/'\nimport { I_Checked_Action } from './../../../helpers/bns/types'\nimport { InputForm } from './../../general/InputForm'\nimport { Switch } from './../../general/Switch'\nimport sanitize from '../../../helpers/sanitize'\n\n/**\n * Page to handle choice of action to perform with a domain.\n */\nexport const P4ActionChoice = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  // local state for special cases where form is attempting to get data from user\n  const [extraFormData, setExtraFormData] = React.useState<{\n    [key: string]: { show: boolean }\n  }>()\n\n  // local state for permission scan so can be used directly and becomes reactive\n  const [checkActions, setCheckActions] = React.useState<I_Checked_Action[]>()\n\n  // calculate and get all permissions (once)\n  if (!checkActions) {\n    // simulate bns state once again just in case\n    // up to current block height\n    const bns = calcBnsState(\n      state.domain.txHistory,\n      state.domain.domainName,\n      state.chain.height,\n      state.network\n    )\n    setCheckActions(\n      runAllActionPermissionChecks(bns, state.wallet.address) as Array<\n        I_Checked_Action\n      >\n    )\n  }\n\n  // help with units & type of numbers needed for a get suggestion input\n  const getSuggestInfo = (getSuggestion: any) => {\n    const get = getSuggestion.info.get\n    const network = state.network\n    const units = get.units\n    const min = get.min\n    const type = typeof get.value\n\n    if (type === 'number') {\n      // if satoshi, convert to btc\n      const btcMin = min ? (units === 'satoshi' ? min / 1.0e8 : min) : 0\n      const btcUnits = network === 'testnet' ? 'tBTC' : 'BTC'\n      const btcValue = units === 'satoshi' ? get.value / 1.0e8 : get.value\n\n      return {\n        value: get.value, // raw value\n        btcMin: '' + btcMin, // min in BTC\n        btcMinFull: btcMin.toFixed(8), // ^ with 8 decimal places\n        type, // typeof on min\n        units, // original units\n        btcUnits, // btc units tBTC or BTC\n        btcValue, // btc value\n        btcValueFull: btcValue.toFixed(8) // btc value with 8 decimal places\n      }\n    }\n\n    // if a string\n    return {\n      type,\n      value: get.value\n    }\n  }\n\n  // render suggestion data\n  const renderSetSuggestion = (setSuggestion: any, settings: any) => {\n    const set = setSuggestion.info.set\n    const value = setSuggestion.info.set.value\n\n    let valueToReturn = ['']\n    const valueArray = String(value).split(/ |\\n/)\n    const unitsArray = set.units.split(' ')\n\n    for (let i = 0; i < valueArray.length; i++) {\n      const thisValue = valueArray[i]\n      const units = unitsArray[i % unitsArray.length]\n\n      // if this is not the first set of values, add next line char\n      if (i % unitsArray.length === 0 && i !== 0) {\n        valueToReturn = [...valueToReturn, '\\n']\n      }\n\n      if (i % unitsArray.length === 0) {\n        if (settings.bullets) {\n          valueToReturn = [...valueToReturn, ' + ']\n        }\n      }\n\n      if (!isNaN(Number(thisValue))) {\n        // if value can be a number\n\n        // assume it's in bitcoin form already unless units are satoshi\n\n        // show btc value to 8 decimal spaces\n        if (settings.btcValueFull) {\n          if (units === 'satoshi') {\n            valueToReturn = [\n              ...valueToReturn,\n              (parseInt(thisValue, 10) / 1.0e8).toFixed(8)\n            ]\n          } else {\n            valueToReturn = [...valueToReturn, parseFloat(thisValue).toFixed(8)]\n          }\n        }\n\n        // show correct btc units\n        if (settings.btcUnits) {\n          valueToReturn = [\n            ...valueToReturn,\n            state.network === 'testnet' ? ' tBTC' : ' BTC'\n          ]\n        }\n      } else {\n        // if not a number\n\n        // if function for strings was provided\n        if (settings.strings) {\n          valueToReturn = [\n            ...valueToReturn,\n            ' ',\n            ...settings.strings(thisValue),\n            ' '\n          ]\n        }\n      }\n    }\n\n    return <>{valueToReturn}</>\n  }\n\n  // initializes extra form status from permission checks\n  React.useEffect(() => {\n    // only do if undefined local state (once)\n    if (!extraFormData) {\n      // go through each action, set key to .info and set show status to false\n      const showStatus: {\n        [key: string]: { show: boolean }\n      } = {}\n      checkActions &&\n        checkActions.forEach(action => {\n          showStatus[action.info] = { show: false }\n        })\n      setExtraFormData(showStatus)\n    }\n  }, [checkActions, extraFormData])\n\n  /* -------------------------------------------------------------------------- */\n  /*                      list available actions for render                     */\n  /* -------------------------------------------------------------------------- */\n\n  const listAvailableActions = () =>\n    !!checkActions &&\n    checkActions.map((action: any) => {\n      // usable actions only\n      if (action.isUsable) {\n        // abort if it has even 1 warning as well\n        if (\n          action.suggestions.some((suggestion: any) => suggestion.info.warning)\n        )\n          return ''\n        // check if there's data needed from user for this action\n        const suggestionsToGet = getGetters(action)\n        // action.suggestions.filter(\n        //   (suggestion: any) => 'get' in suggestion.info\n        // ) || []\n\n        // onsole.log('action:', action.info)\n        // onsole.log('getters:', getGetters(action))\n        // onsole.log('setters:', getSetters(action))\n\n        const haveGettersOrSetters =\n          suggestionsToGet.length > 0 || getSetters(action).length > 0\n\n        return (\n          // action div start\n          <div key={action.info}>\n            {/* change what action button does based on if there's data to get */}\n            {/* missing data (~ get suggestion) means it has to be requested first before moving on */}\n            <RoundButton\n              next={!haveGettersOrSetters ? 'true' : undefined}\n              onClick={() => {\n                if (!haveGettersOrSetters) {\n                  // if regular action without extra data needed\n                  // set this action as the chosen action\n                  changeChoicesBNSAction(state, dispatch, {\n                    action: JSON.parse(JSON.stringify(action))\n                  })\n                  // change page\n                  changePageInfoAction(state, dispatch, 5)\n                } else {\n                  // if special action with extra data needed,\n                  // toggle form showing instead:\n                  // action.info is the key for extraFormData local state, .show toggles visibility\n                  if (extraFormData) {\n                    const { show } = extraFormData[action.info]\n                    setExtraFormData({\n                      ...extraFormData,\n                      [action.info]: { show: !show }\n                    })\n                  }\n                }\n              }}\n            >\n              {action.info}\n              {haveGettersOrSetters ? <>&nbsp;...</> : ''}\n            </RoundButton>\n\n            {/* create input forms if extraFormData local state has it set to shown for this action */}\n\n            {extraFormData && extraFormData[action.info].show && (\n              <>\n                {suggestionsToGet.map((suggestionToGet: any) => {\n                  if (typeof suggestionToGet.info.get.value === 'boolean') {\n                    const onChangeFunction = (value: boolean) => {\n                      console.log('updated boolean:', value)\n                      // find and change action setting\n                      checkActions\n                        .find(\n                          (thisAction: any) => thisAction.type === action.type\n                        )!\n                        .suggestions.find(\n                          (thisSuggestion: any) =>\n                            thisSuggestion.info.describe ===\n                            suggestionToGet.info.describe\n                        )!.info!.get!.value = value\n                      // update local state with edited object\n                      setCheckActions([...checkActions])\n                    }\n\n                    /* -------------------- render a switch for boolean input ------------------- */\n                    return (\n                      <Switch\n                        key={suggestionToGet.info.describe}\n                        thisInputLabel={\n                          suggestionToGet.info.describe +\n                          ': \\n\\n  ' +\n                          suggestionToGet.info.get.name\n                        }\n                        initialIndex={suggestionToGet.info.get.value ? 1 : 0}\n                        choices={[\n                          { value: false, display: 'No', do: onChangeFunction },\n                          { value: true, display: 'Yes', do: onChangeFunction }\n                        ]}\n                      />\n                    )\n                  } else {\n                    /* ------------------- render an input form for data input ------------------ */\n                    return (\n                      <InputForm\n                        key={suggestionToGet.info.describe}\n                        showButton={'false'}\n                        className={styles.inputForms}\n                        thisInputLabel={\n                          // show minimum if available in bitcoin units\n                          suggestionToGet.info.describe +\n                          (!suggestionToGet.info.get.min\n                            ? ''\n                            : // if has a min\n                              '\\n' +\n                              '(at least ' +\n                              getSuggestInfo(suggestionToGet).btcMinFull +\n                              ' ' +\n                              getSuggestInfo(suggestionToGet).btcUnits +\n                              ' to get a winning ' +\n                              'valid bid )'.replace(/ /g, '\\xa0'))\n                        }\n                        thisInitialValue={\n                          // if number, show in BTC and to 8 digits intially\n                          typeof suggestionToGet.info.get.value === 'number'\n                            ? getSuggestInfo(suggestionToGet).btcValueFull\n                            : // if not number just show the actual value\n                              suggestionToGet.info.get.value\n                        }\n                        sanitizeFilters={\n                          typeof suggestionToGet.info.get.value === 'number'\n                            ? [\n                                'number',\n                                'no_leading_zeros',\n                                'decimal_point',\n                                'max_decimal_places:8'\n                              ]\n                            : ['string']\n                        }\n                        thisInputOnChange={(e: any) => {\n                          // type in bitcoin units\n                          // store into memory in expected units (depending on .units)\n\n                          // sanitize text\n                          let cleanInput: number | string\n\n                          if (\n                            typeof suggestionToGet.info.get.min === 'number' ||\n                            typeof suggestionToGet.info.get.value === 'number'\n                          ) {\n                            // if number\n                            cleanInput = sanitize(e.target.value, [\n                              'no_spaces',\n                              'fractions',\n                              'no_leading_zeros',\n                              'decimal_point'\n                            ])\n\n                            if (suggestionToGet.info.get.units === 'satoshi') {\n                              // convert to satoshi and then number\n                              cleanInput = Math.round(\n                                parseFloat(cleanInput) * 1.0e8\n                              )\n                            } else {\n                              // just convert to number\n                              cleanInput = Math.round(parseFloat(cleanInput))\n                            }\n                          } else {\n                            // if string, just make sure no spaces\n                            cleanInput = sanitize(e.target.value, [\n                              'basic',\n                              'no_spaces'\n                            ])\n                          }\n\n                          // add changed value to checkActions current object\n                          // find and edit the value\n                          checkActions\n                            // find array index where this action is\n                            .find(\n                              (thisAction: any) =>\n                                thisAction.type === action.type\n                            )!\n                            // find array index where this data request/suggestion is\n                            .suggestions.find(\n                              (thisSuggestion: any) =>\n                                thisSuggestion.info.describe ===\n                                suggestionToGet.info.describe\n                            )!.info.get!.value = cleanInput\n\n                          // update local state with edited object\n                          setCheckActions([...checkActions])\n\n                          console.log(\n                            'Updated suggestionToGet.info.get:',\n                            suggestionToGet.info.get\n                          )\n                        }}\n                      />\n                    )\n                  }\n                })}\n\n                {/* also render the fixed requirements (getters) for this action */}\n\n                {getSetters(action).length > 0 && (\n                  <Details description={'Details...'} show={'false'}>\n                    <p>\n                      {getSetters(action).map(\n                        (setSuggestion: any, index: number) => {\n                          const setDescription =\n                            setSuggestion.info.describe || ''\n                          const setName = setSuggestion.info.set.name || ''\n\n                          return (\n                            <span key={setDescription}>\n                              {index + 1}. {setDescription}: {'\\n'}\n                              {renderSetSuggestion(setSuggestion, {\n                                btcValueFull: true,\n                                btcUnits: true,\n                                bullets: true,\n                                strings: (content: string) => [\n                                  'for ',\n                                  <span\n                                    key={setDescription + content}\n                                    className={styles.breakable}\n                                  >\n                                    {content}\n                                  </span>\n                                ]\n                              })}\n                              {' ' +\n                                ('(' + setName + ')').replace(/ /g, '\\xa0')}\n                            </span>\n                          )\n                        }\n                      )}\n                    </p>\n                  </Details>\n                )}\n              </>\n            )}\n\n            {extraFormData && extraFormData[action.info].show && (\n              <RoundButton\n                className={styles.okButton}\n                next={'true'}\n                onClick={() => {\n                  // place the customized action object entirely into the global state\n                  changeChoicesBNSAction(state, dispatch, {\n                    action: action // JSON.parse(JSON.stringify( needed?\n                  })\n\n                  // change page\n                  changePageInfoAction(state, dispatch, 5)\n\n                  // const isNotEmpty = suggestionToGet.info.get.value !== ''\n                  // const meetsMinRequirement = (typeof suggestionToGet.info.get.min === 'number')\n                  //     ? (suggestionToGet.info.get.value >= suggestionToGet.info.get.min)\n                  //     : true\n\n                  // // if input is not blank\n                  // if (isNotEmpty && meetsMinRequirement) {}\n                }}\n              >\n                OK\n              </RoundButton>\n            )}\n          </div>\n        )\n      } else {\n        return ''\n      }\n    })\n\n  /* -------------------------------------------------------------------------- */\n  /*                     list unavailable actions for render                    */\n  /* -------------------------------------------------------------------------- */\n\n  const listUnavailableActions = () =>\n    !!checkActions &&\n    checkActions.map((action: any) => {\n      if (!action.isUsable) {\n        return (\n          <div\n            className={styles.unavailableActions__actionList__action}\n            key={action.info}\n          >\n            <div\n              className={styles.unavailableActions__actionList__action__title}\n            >\n              {action.info}\n            </div>\n            <div\n              className={\n                styles.unavailableActions__actionList__action__permissionList\n              }\n            >\n              {action.permissionList.map((permission: any) => {\n                if (!permission.isAllowed) {\n                  return (\n                    <div\n                      className={\n                        styles.unavailableActions__actionList__action__permissionList__permission\n                      }\n                      key={permission.info.describe}\n                    >\n                      - {permission.info.describe}\n                    </div>\n                  )\n                } else {\n                  return ''\n                }\n              })}\n            </div>\n          </div>\n        )\n      } else {\n        return ''\n      }\n    })\n\n  /* -------------------------------------------------------------------------- */\n  /*                                   render                                   */\n  /* -------------------------------------------------------------------------- */\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.title}>\n        Available <span className={styles.orange}>BNS</span> <br />\n        actions\n      </div>\n      <div className={styles.availableActions}>{listAvailableActions()}</div>\n      <div className={styles.unavailableActions}>\n        <Details\n          description={'Show unavailable actions'}\n          className={styles.unavailableActions__title}\n        >\n          <div className={styles.unavailableActions__actionList}>\n            {listUnavailableActions()}\n          </div>\n        </Details>\n      </div>\n      <div className={styles.buttonWrapper}>\n        <RoundButton\n          back='true'\n          onClick={() => {\n            changePageInfoAction(state, dispatch, 3)\n          }}\n        >\n          Back\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport { Details } from './../../general/Details'\nimport styles from './P5CustomForwards.module.css'\nimport { Store, getOwner } from '../../../store/'\nimport {\n  changePageInfoAction,\n  changeChoicesBNSAction\n} from '../../../store/actions'\nimport {\n  stringByteCount,\n  BYTES_MAX,\n  findLatestForwards,\n  interpretCommand,\n  getStealthAddress\n} from '../../../helpers/bns'\n\nimport sanitize from '../../../helpers/sanitize'\nimport bs58check from 'bs58check'\n\ntype Planned_Changes = { [key: string]: string }\n\n/**\n * Component for page where user can edit custom forwards information.\n * state - global state.\n * textboxContent - text content inside the network and address textareas.\n */\nexport const P5CustomForwards = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  // string to embed located at state.choices.embedString\n\n  // local state for content in textboxes for new network address changes\n  const [textboxContent, setTextboxContent] = React.useState({\n    network: '',\n    address: ''\n  })\n\n  // Check if the main action requires space in the embed string.\n  // Return necessary string. No extra spaces.\n  // e.g. returns: '', '!ca 234', '!abc '\n  const getActionEmbedRequirements = (): string => {\n    const chosenAction = state.choices.action\n    let stringFromCommands = ''\n    // Go through all action's suggestions and combine any commands found.\n    // This is compatible with 0, 1, or multiple commands being used at same time.\n    chosenAction.suggestions.forEach((thisSuggestion: any) => {\n      if ('command' in thisSuggestion.info) {\n        // command setting found,\n        // so add its contents to string and add value in getter as command match\n        stringFromCommands += thisSuggestion.info.command + ' '\n        stringFromCommands += thisSuggestion.info.get.value + ' '\n      }\n    })\n\n    // remove extra space from end ('' stays '')\n    stringFromCommands = stringFromCommands.slice(0, -1)\n\n    // console.log('after checking', chosenAction.suggestions)\n    // console.log('getActionEmbedRequirements returned', stringFromCommands)\n    return stringFromCommands\n  }\n\n  // set global state's string to embed from an object of planned changes\n  const setPlannedChanges = (objForwards: Planned_Changes = {}) => {\n    let forwardsString = ''\n    Object.keys(objForwards).forEach(fwNetwork => {\n      const forward = objForwards[fwNetwork]\n\n      forwardsString += fwNetwork + ' ' + forward + ' '\n    })\n    // remove extra space from end ('' stays '')\n    forwardsString = forwardsString.slice(0, -1)\n\n    // to avoid useless rerenders, only change state\n    // if it current state string doesn't match calculated string\n    const needsChanging = forwardsString !== state.choices.embedString\n\n    if (needsChanging) {\n      changeChoicesBNSAction(state, dispatch, {\n        embedString: forwardsString\n      })\n    }\n  }\n\n  // Object of planned changes derived from\n  // global state embedString and action choice\n  const getPlannedChanges = () => {\n    // this is string that's going to be embedded\n    const forwardsString = state.choices.embedString\n\n    // get required by actions string as well\n    const actionRequirementsString = getActionEmbedRequirements()\n\n    // combine (later string values are given priority)\n    const finalString =\n      forwardsString +\n      // if either are blank, no need to separate with space\n      (actionRequirementsString === '' || forwardsString === '' ? '' : ' ') +\n      actionRequirementsString\n\n    // convert all changes to object so same networks overwrite themselves as keys.\n    const changesObject = finalString.split(' ').reduce(\n      (\n        // add each planned change into plannedChangesSoFar\n        plannedChangesSoFar: Planned_Changes,\n        // from each word\n        word: string,\n        index: number,\n        // out of this array of words\n        words: Array<string>\n      ): Planned_Changes => {\n        // every second word is \"forwarding address\", word before it is \"network\"\n        if (index % 2 === 1) {\n          return { ...plannedChangesSoFar, [words[index - 1]]: word }\n        } else {\n          return plannedChangesSoFar\n        }\n      },\n      {} // initial value for plannedChangesSoFar\n    )\n\n    return changesObject\n  }\n\n  // If embed string is empty (to minimize calculations per render), call setPlannedChanges to initialize it\n  // since it doesn't update state unless it's necessary, no refresh is triggered each render\n  if (state.choices.embedString === '') setPlannedChanges(getPlannedChanges())\n\n  // Array of past {[network]:forwardingAddress} objects.\n  // Display only active ones with latest higher.\n  const pastForwards = findLatestForwards(\n    getOwner(state)?.forwards || []\n  ).reverse()\n\n  // count # of bytes in string and buffers\n  const bytesOfChanges =\n    stringByteCount(state.choices.embedString) +\n    state.choices.embedBuffers.reduce(\n      (bytesTotal: number, eachBufferObject: any) =>\n        // network + space + buffer\n        bytesTotal +\n        eachBufferObject.network.length +\n        eachBufferObject.address.length +\n        1,\n      0\n    )\n  // count # of bytes left for storage\n  const bytesLeft = BYTES_MAX - bytesOfChanges\n  // if no more space\n  const isSpaceFull = bytesLeft < 0\n\n  /**\n   * Render explanation of the change with submitted forwards network name.\n   * Checks if it's a buffer version or simple string.\n   */\n  const explainForwards = (\n    fwNetwork: string,\n    {\n      embededBuffer\n    }: { embededBuffer: null | { network: string; address: Buffer } } = {\n      embededBuffer: null\n    }\n  ) => {\n    const value = !embededBuffer\n      ? getPlannedChanges()[fwNetwork]\n      : `${embededBuffer.address.length} bytes long`\n\n    // display byte cost (including separator)\n    const bytes = !embededBuffer\n      ? stringByteCount(fwNetwork + ' ' + value)\n      : embededBuffer.network.length + 1 + embededBuffer.address.length\n    const thisByteCostEstimate = (\n      <i>\n        {' '}\n        ({bytes}-{bytes + 1}B)\n      </i>\n    )\n\n    // return explanation of embedded content\n    const interpretation = () => {\n      // if it was a command\n      if (fwNetwork.startsWith('!')) {\n        const cmd = interpretCommand(fwNetwork, value)\n        return {\n          content: (\n            <>\n              {cmd ? (\n                <>\n                  \"{cmd.info}\" user action. {cmd.getterName} is set to{' '}\n                  <span>{cmd.value}</span>.\n                </>\n              ) : (\n                'User action'\n              )}\n              {thisByteCostEstimate}\n            </>\n          ),\n          allowRemoval: false\n        }\n      }\n\n      // forwarding for stealth addresses\n      if (embededBuffer && fwNetwork === '?') {\n        // base58 is standard for xpub & thus stealth\n        const stringApprox = bs58check.encode(embededBuffer.address)\n        return {\n          content: (\n            <>\n              Updating <span>stealth address</span> to an address\n              <span>\n                {' ' +\n                  stringApprox.slice(0, 7) +\n                  '...' +\n                  stringApprox.slice(-7) +\n                  ' '}\n              </span>\n              {thisByteCostEstimate}\n            </>\n          ),\n          allowRemoval: true\n        }\n      }\n\n      // regular forwarding: network's forwarding address was provided\n      if (value !== '') {\n        return {\n          content: (\n            <>\n              Updating forwarding on <span>{' ' + fwNetwork + ' '}</span>\n              network to an address of <span>{' ' + value + ' '}</span>\n              {thisByteCostEstimate}\n            </>\n          ),\n          allowRemoval: true\n        }\n      }\n\n      // regular forwarding: if network's forwarding address was set blank\n      if (value === '') {\n        return {\n          content: (\n            <>\n              Deleting previously set forwarding information for\n              <span>{' ' + fwNetwork + ' '}</span> network\n              {thisByteCostEstimate}\n            </>\n          ),\n          allowRemoval: true\n        }\n      }\n\n      return { content: '' }\n    }\n\n    // return a div that onclick fills in the contents of planned changes into textboxes\n    return (\n      <div\n        className={styles.updateItem}\n        key={fwNetwork}\n        onClick={() => {\n          // fill in the edit field with these values in case\n          // (only if it's not a command or a buffer value)\n          if (!fwNetwork.startsWith('!') && !embededBuffer)\n            setTextboxContent({ network: fwNetwork, address: String(value) })\n        }}\n      >\n        <div className={styles.updateInfo}>{interpretation().content}</div>\n        {/* removal button. only render removal button if allowed */}\n        {interpretation().allowRemoval && (\n          <div\n            className={[\n              'btnCircle',\n              styles.updateCancel,\n              'addTooltipRight'\n            ].join(' ')}\n            onClick={e => {\n              if (embededBuffer) {\n                // remove this embedded buffer from array\n                const newEmbedBuffers = state.choices.embedBuffers.filter(\n                  (el: any) => embededBuffer.network !== el.network\n                )\n                // update front end state\n                changeChoicesBNSAction(state, dispatch, {\n                  embedBuffers: newEmbedBuffers\n                })\n              } else {\n                // embedded string\n                const newData = { ...getPlannedChanges() }\n                delete newData[fwNetwork]\n                setPlannedChanges(newData)\n              }\n              // block event from also clicking onto the updateItem\n              e.stopPropagation()\n            }}\n          >\n            <span>×</span>\n            <aside>Remove from planned changes</aside>\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  console.log('bytes to embed', bytesOfChanges)\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.title}>Update forwarding information</div>\n\n      <div className={styles.subtitle}>\n        BNS action: {state.choices.action.info}\n      </div>\n\n      {/* ----------------------------- list of changes ---------------------------- */}\n\n      <div className={styles.changes}>\n        {/* bytes info */}\n        {state.choices.embedString.length === 0 &&\n        state.choices.embedBuffers.length === 0\n          ? 'no forwarding updates'\n          : 'planned forwarding updates'}\n        {!isSpaceFull && (\n          <div className={styles.bytesLeft}>{bytesLeft} Bytes left</div>\n        )}\n        {isSpaceFull && (\n          <div className={styles.bytesOver}>\n            Too much by {Math.abs(bytesLeft)} Bytes\n          </div>\n        )}\n\n        {/* Show, explain, and allow editing and removing of each added key/value pair to embed */}\n        {Object.keys(getPlannedChanges()).map((fwNetwork: any) =>\n          explainForwards(fwNetwork)\n        )}\n        {state.choices.embedBuffers.map((eb: any) =>\n          explainForwards(eb.network, { embededBuffer: eb })\n        )}\n      </div>\n\n      {/* ----------------------------- text input area ---------------------------- */}\n\n      <div className={styles.editor}>\n        {textboxContent.network.length > 0 && (\n          <div\n            className={[styles.btnDelete, 'canPress'].join(' ')}\n            onClick={() => {\n              setPlannedChanges({\n                ...getPlannedChanges(),\n                [textboxContent.network]: ''\n              })\n              setTextboxContent({ network: '', address: '' })\n            }}\n          >\n            delete old\n          </div>\n        )}\n        <div className={styles.editorNetwork}>\n          <aside>Network</aside>\n          <textarea\n            spellCheck={false}\n            value={textboxContent.network}\n            placeholder={'e.g. btc'}\n            onChange={e => {\n              const cleanText = sanitize(e.target.value, [\n                'oneline',\n                'no_spaces'\n              ])\n              setTextboxContent({ ...textboxContent, network: cleanText })\n            }}\n          ></textarea>\n        </div>\n        <div className={styles.editorAddress}>\n          <aside>Forwarding address</aside>\n          <textarea\n            spellCheck={false}\n            value={textboxContent.address}\n            placeholder={'e.g. your btc address'}\n            onChange={e => {\n              const cleanText = sanitize(e.target.value, [\n                'oneline',\n                'no_spaces'\n              ])\n              setTextboxContent({ ...textboxContent, address: cleanText })\n              console.log('forwarding sanitized:', '\"' + cleanText + '\"')\n            }}\n          ></textarea>\n        </div>\n        <div\n          className={[\n            'btnCircle',\n            styles.btnAdd,\n            'canPress',\n            'addTooltip'\n          ].join(' ')}\n          onClick={() => {\n            if (textboxContent.network !== '') {\n              setPlannedChanges({\n                ...getPlannedChanges(),\n                [textboxContent.network]: textboxContent.address\n              })\n              setTextboxContent({ network: '', address: '' })\n            }\n          }}\n        >\n          <span>+</span>\n          <aside>Add to planned changes</aside>\n        </div>\n      </div>\n\n      {/* ---------------------------- current forwards ---------------------------- */}\n\n      <div className={styles.pastList}>\n        <Details description={'Current forwards (expand for info):'}>\n          <p>\n            Enter the forwarding addresses you want to use (e.g. long bitcoin\n            address) and specify on which network that address should be used\n            (e.g. btc) when someone wants to reach you after looking up your\n            domain alias.\n            <br />\n            <br />\n            Submit new updates by hitting [+] button. Remove updates by hitting\n            [x] buttons.\n            <br />\n            <br />\n            Below, the currently active forwarding addresses are shown, if any.\n            <br />\n            <br />\n            Edit them by reusing the exact same network or remove by setting\n            forwarding address to nothing or hitting [delete old] button under\n            network name text.\n          </p>\n        </Details>\n        {pastForwards.map((fw: any, i: number) => {\n          return (\n            <div\n              className={styles.pastPair}\n              key={i}\n              onClick={() => {\n                setTextboxContent({\n                  network: decodeURIComponent(fw.network),\n                  address: decodeURIComponent(fw.address)\n                })\n              }}\n            >\n              <div className={styles.pastNetwork}>\n                {decodeURIComponent(fw.network) !== '?'\n                  ? decodeURIComponent(fw.network)\n                  : '? (stealth)'}\n              </div>\n              <div className={styles.pastAddress}>\n                {decodeURIComponent(fw.address)}\n              </div>\n            </div>\n          )\n        })}\n      </div>\n\n      {/* --------------------------------- buttons -------------------------------- */}\n\n      <div className={styles.buttonWrapper}>\n        <RoundButton\n          back='true'\n          onClick={() => {\n            changePageInfoAction(state, dispatch, 4)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          next='true'\n          show={bytesOfChanges > BYTES_MAX ? 'false' : 'true'}\n          onClick={() => {\n            changePageInfoAction(state, dispatch, 6)\n          }}\n        >\n          Ready\n        </RoundButton>\n        {/* if no stealth address, show button */}\n        {/* (TODO) replace with constant for '?' type of network */}\n        {/* (TODO) allow to increment stealth address hardened index by 1 */}\n        {!state.choices.embedBuffers.some((fw: any) => fw.network === '?') &&\n          !pastForwards.some(\n            (fw: any) => decodeURIComponent(fw.network) === '?'\n          ) && (\n            <RoundButton\n              colorbutton={'var(--colorHighlightDark)'}\n              onClick={() => {\n                console.log('adding stealth address')\n\n                // need to add stealth address to embeds\n                const newBufferAddress = {\n                  network: '?',\n                  address: getStealthAddress(\n                    state.wallet.mnemonic,\n                    state.network\n                  )\n                }\n                changeChoicesBNSAction(state, dispatch, {\n                  embedBuffers: [\n                    ...state.choices.embedBuffers,\n                    newBufferAddress\n                  ]\n                })\n              }}\n            >\n              Add a stealth address\n            </RoundButton>\n          )}\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport styles from './FeesSelection.module.css'\nimport { RoundButton } from './../../general/RoundButton'\nimport sanitize from './../../../helpers/sanitize'\n// import {\n//   addNewApiTaskAction,\n//   changeChoicesBNSAction\n// } from './../../../store/actions'\n// import { getFeeEstimatesAPI } from './../../../api/blockstream'\n\n/**\n * Fees selection dialogue.\n * Modifies fees\n * .initialFee = set initial fee\n * .getFeeSuggestions = function that returns fee suggestions\n * .setFee = function that sets fees *\n */\nexport const FeesSelection = (props: any) => {\n  // get necessary items from props\n  const initialFee = props.initialFee\n  // e.g. state.choices.feeRate\n  const setFeeExternal = props.setFee\n  // e.g. changeChoicesBNSAction(state, dispatch, { feeRate: cleanNumber })\n  const getFeeSuggestionsExternal = props.getFeeSuggestions\n  //  e.g. await addNewApiTaskAction(state, dispatch, () =>\n  //    getFeeEstimatesAPI(state.network, state.api.path)\n  //  )\n\n  // local states to track fees and suggestions\n  const [feeText, setFeeText] = React.useState(initialFee)\n  const [feeSuggestions, setFeeSuggestions] = React.useState({\n    showSuggestions: false,\n    apiSuccess: false,\n    min20: 1,\n    min40: 1,\n    min60: 1\n  })\n\n  // feeSuggestions click listener to handle menu closing\n  React.useEffect(() => {\n    const onClickElsewhere = () => {\n      if (feeSuggestions.showSuggestions) {\n        setFeeSuggestions({ ...feeSuggestions, showSuggestions: false })\n      }\n    }\n\n    document.addEventListener('click', onClickElsewhere)\n    return () => {\n      document.removeEventListener('click', onClickElsewhere)\n    }\n  }, [feeSuggestions])\n\n  // get new suggestions if never got them through api\n  // otherwise show previous\n  const tryFees = async () => {\n    // if haven't already got api results\n    if (!feeSuggestions.apiSuccess) {\n      try {\n        // get fee estimates from provided function (e.g. API)\n        const apiSuggest: any = await getFeeSuggestionsExternal()\n        // remember fee estimates\n        setFeeSuggestions({\n          min20: apiSuggest['2'],\n          min40: apiSuggest['4'],\n          min60: apiSuggest['6'],\n          apiSuccess: true,\n          showSuggestions: true\n        })\n      } catch (e) {}\n    } else {\n      // if already know suggestions, show the previous values\n      setFeeSuggestions({\n        ...feeSuggestions,\n        showSuggestions: !feeSuggestions.showSuggestions\n      })\n    }\n  }\n\n  /* -------------------------------------------------------------------------- */\n  /*                                   render                                   */\n  /* -------------------------------------------------------------------------- */\n\n  return (\n    <div className={[styles.fees, props.className].join(' ')}>\n      <div className={styles.fees__rate}>\n        <aside>Fee rate (sat / vByte):</aside>\n        <textarea\n          spellCheck={false}\n          value={feeText}\n          placeholder={'e.g. 1.2'}\n          onChange={e => {\n            let cleanText = sanitize(e.target.value, [\n              'numbers',\n              'decimal_point',\n              'no_leading_zeros',\n              'max_decimal_places:3'\n            ])\n            cleanText = setFeeExternal(cleanText) || cleanText\n            setFeeText(cleanText)\n          }}\n        ></textarea>\n      </div>\n      <div className={styles.fees__apicall}>\n        <RoundButton\n          onClick={() => {\n            tryFees()\n          }}\n          minor={'true'}\n        >\n          Suggest\n        </RoundButton>\n        {feeSuggestions.showSuggestions && (\n          <div className={styles.fees__feeSelection}>\n            <div\n              className={styles.fees__feeSelection__choice}\n              onClick={() => {\n                // set fee rate shown\n                setFeeText(feeSuggestions.min20)\n                // export fee\n                setFeeExternal(feeSuggestions.min20)\n                // hide fee window\n                setFeeSuggestions({ ...feeSuggestions, showSuggestions: false })\n              }}\n            >\n              {'< '}20 min ( {feeSuggestions.min20?.toFixed(1)} sat / vByte )\n            </div>\n            <div\n              className={styles.fees__feeSelection__choice}\n              onClick={() => {\n                setFeeText(feeSuggestions.min40)\n                setFeeExternal(feeSuggestions.min40)\n                setFeeSuggestions({ ...feeSuggestions, showSuggestions: false })\n              }}\n            >\n              {'< '}40 min ( {feeSuggestions.min40?.toFixed(1)} sat / vByte )\n            </div>\n            <div\n              className={styles.fees__feeSelection__choice}\n              onClick={() => {\n                setFeeText(feeSuggestions.min60)\n                setFeeExternal(feeSuggestions.min60)\n                setFeeSuggestions({ ...feeSuggestions, showSuggestions: false })\n              }}\n            >\n              {'< '}60 min ( {feeSuggestions.min60?.toFixed(1)} sat / vByte )\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Store } from '../../../store/'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P6Broadcast.module.css'\nimport {\n  changePageInfoAction,\n  addNewApiTaskAction,\n  changeChoicesBNSAction\n} from '../../../store/actions'\nimport { calcTx } from './../../../helpers/bns/'\nimport { txPushAPI } from './../../../api/blockstream'\nimport { getUnspentSum } from '../../../helpers/bns/bitcoin'\nimport { Details } from './../../general/Details'\nimport { FeesSelection } from './../../general/FeesSelection'\nimport { getFeeEstimatesAPI } from './../../../api/blockstream'\n\n/**\n * Broadcast tx page.\n * Fee selection.\n * Transaction summary/status. *\n */\nexport const P6Broadcast = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  // tx calculation\n  let tx: any\n  let txIssue = ''\n  try {\n    // attempt to calculate the tx content\n    tx = calcTx(state.wallet, state.domain, state.choices, state.network)\n  } catch (e) {\n    txIssue = String(e.message)\n    if (txIssue.endsWith('has no matching Script')) {\n      txIssue += ' \\n(address provided seems invalid)'\n    }\n    console.log('error details if necessary:', e)\n  }\n\n  // summarize number of updates in the embeded string\n  const numberOfUpdates =\n    state.choices.embedString\n      .split(' ')\n      .reduce(\n        (countSoFar: number, word: string, index: number) =>\n          index % 2 === 1 ? countSoFar + 1 : countSoFar,\n        0\n      ) + state.choices.embedBuffers.length\n\n  // keep track of broadcast\n  const [broadcastStatus, setBroadcastStatus] = React.useState({\n    ok: false,\n    txid: '',\n    reason: ''\n  })\n\n  // show BTC balance with styling and proper units based on network\n  const unitBTC = state.network === 'testnet' ? ' tBTC ' : ' BTC '\n  const showBTC = (sats = 0): JSX.Element => (\n    <>\n      <span className={styles.balance}>{(sats / 1e8).toFixed(8)}</span>\n      {unitBTC}\n    </>\n  )\n\n  const finalCost = tx\n    ? // No point confusing user if the cost is negative.\n      // Possible with enough anyone-can-spend utxo found.\n      Math.max(tx.gatheredFromWallet - tx.change, 0)\n    : undefined\n\n  /* -------------------------------------------------------------------------- */\n  /*                                   render                                   */\n  /* -------------------------------------------------------------------------- */\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.title}>Finalize transaction details</div>\n      <div className={styles.fees}>\n        <FeesSelection\n          initialFee={state.choices.feeRate}\n          getFeeSuggestions={async () => {\n            return await addNewApiTaskAction(state, dispatch, () =>\n              getFeeEstimatesAPI(state.network, state.api.path)\n            )\n          }}\n          setFee={(feeRate: string) => {\n            if (+feeRate > 1000) feeRate = String(1000)\n            if (+feeRate < 1) feeRate = String(1)\n            changeChoicesBNSAction(state, dispatch, {\n              feeRate: parseFloat(feeRate)\n            })\n            return feeRate\n          }}\n        />\n      </div>\n      <div className={styles.totalCost}>\n        {!!tx ? <>Your final cost: {showBTC(finalCost)}</> : ' '}\n      </div>\n      <div className={[styles.txSummary, 'letter_breakable'].join(' ')}>\n        {!!tx && (\n          <>\n            <Details>\n              <table className={'word_breakable'}>\n                <tbody>\n                  <tr>\n                    <td>Action:</td>\n                    <td>{state.choices.action.info}</td>\n                  </tr>\n                  <tr>\n                    <td>Updates:</td>\n                    <td>{numberOfUpdates}</td>\n                  </tr>\n                  <tr>\n                    <td>Wallet:</td>\n                    <td>\n                      <p>\n                        {showBTC(getUnspentSum(state.wallet.utxoList))} total\n                        across {state.wallet.utxoList.length} utxo\n                      </p>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Inputs:</td>\n                    <td>\n                      <p>\n                        {showBTC(tx.gatheredFromWallet)} from{' '}\n                        {tx.nInputsFromWallet} wallet utxo\n                      </p>\n                      <p>\n                        {showBTC(tx.gatheredFromOther)} from{' '}\n                        {tx.nInputsFromOther} notification utxo\n                      </p>\n                      <p>\n                        {showBTC(tx.totalGathered)} total (\n                        {tx.nInputsFromWallet + tx.nInputsFromOther} inputs)\n                      </p>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Outputs:</td>\n                    <td>\n                      <p>Burning {showBTC(tx.burnAmount)} at #0</p>\n                      <p>\n                        Sending {showBTC(tx.notifyAmount)} at #1 (notification)\n                      </p>\n                      <p>Change of {showBTC(tx.change)} sent back at #2</p>\n                      <p>Refunds of {showBTC(tx.refundsAmount)} total</p>\n                      <p>\n                        {showBTC(tx.totalGathered - tx.fee)} total (\n                        {tx.nOutputs} outputs)\n                      </p>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Miner fee:</td>\n                    <td>\n                      <p>\n                        {showBTC(tx.fee)} (\n                        {((tx.fee / tx.valueNeeded) * 100.0).toFixed(1)}%)\n                      </p>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Size:</td>\n                    <td>{tx.thisVirtualSize} vBytes</td>\n                  </tr>\n                  <tr>\n                    <td>Cost:</td>\n                    <td>\n                      <p>+ Transaction requires {showBTC(tx.valueNeeded)}</p>\n                      <p>\n                        - Using {showBTC(tx.gatheredFromOther)} from\n                        anyone-can-spend utxo\n                      </p>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Net user cost:</td>\n                    <td>{showBTC(tx.gatheredFromWallet - tx.change)}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </Details>\n          </>\n        )}\n        {!tx && (\n          <div\n            className={[styles.txSummary, 'word_breakable', styles.error].join(\n              ' '\n            )}\n          >\n            calculation failed <br />\n            {txIssue}\n          </div>\n        )}\n      </div>\n      <div className={styles.status}>\n        {broadcastStatus.ok ? (\n          <>\n            <div\n              className={[styles.status__button, 'canPress'].join(' ')}\n              onClick={() => {\n                const PATH =\n                  `https://blockstream.info/` +\n                  `${state.network === 'testnet' ? 'testnet/' : ''}tx/` +\n                  `${broadcastStatus.txid}`\n                window.open(PATH, '_blank')\n              }}\n            >\n              Success! Open in explorer\n            </div>\n          </>\n        ) : broadcastStatus.reason.length > 0 ? (\n          <div className={styles.status__failed}>{broadcastStatus.reason}</div>\n        ) : tx && tx.hex ? (\n          <span className={styles.notify}>BNS transaction ready</span>\n        ) : (\n          ''\n        )}\n      </div>\n      <div className={styles.buttonWrapper}>\n        <RoundButton\n          back={'true'}\n          onClick={() => {\n            changePageInfoAction(state, dispatch, 5)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          show={tx?.hex !== '' ? 'true' : 'false'}\n          onClick={async () => {\n            if (tx && tx.hex) {\n              try {\n                const res: any = await addNewApiTaskAction(\n                  state,\n                  dispatch,\n                  () => txPushAPI(tx.hex, state.network, state.api.path)\n                )\n                setBroadcastStatus({ ok: true, txid: res.txid, reason: '' })\n              } catch (e) {\n                setBroadcastStatus({ ok: false, txid: '', reason: e.message })\n              }\n            } else {\n              setBroadcastStatus({ ok: false, txid: '', reason: '' })\n            }\n          }}\n        >\n          Broadcast\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Store } from '../../store/'\nimport { CreateHeader } from './../CreateSteps/CreateHeader'\nimport { P1RestoreOrBackup } from '../CreateSteps/P1RestoreOrBackup'\nimport { P2LoadWallet } from '../CreateSteps/P2LoadWallet'\nimport { P3DomainAndWallet } from '../CreateSteps/P3DomainAndWallet'\nimport { P4ActionChoice } from '../CreateSteps/P4ActionChoice'\nimport { P5CustomForwards } from '../CreateSteps/P5CustomForwards'\nimport { P6Broadcast } from './../CreateSteps/P6Broadcast'\nimport styles from './CreateNavigator.module.css'\n\n/**\n * Handle navigation of alias manipulation\n */\nexport const CreateNavigator = () => {\n  // global state\n  const { state } = React.useContext(Store)\n\n  const page = state.pageInfo?.current\n\n  !page && console.log('Unknown Page')\n\n  return (\n    <>\n      <div className={[styles.wrapper].join(' ')}>\n        <CreateHeader />\n        <div className={[styles.scroller, 'scrollbar'].join(' ')}>\n          <div className={[styles.horizontalScaler].join(' ')}>\n            {page === 1 && <P1RestoreOrBackup />}\n            {page === 2 && <P2LoadWallet />}\n            {page === 3 && <P3DomainAndWallet />}\n            {page === 4 && <P4ActionChoice />}\n            {page === 5 && <P5CustomForwards />}\n            {page === 6 && <P6Broadcast />}\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { CreateNavigator } from './../components/CreateNavigator'\n\nexport function Create () {\n  return (\n    <>\n      <CreateNavigator />\n    </>\n  )\n}\n","/**\n * Difference between timestampMsec timestamp relative to current time or another reference referenceTimestampMsec timestamp.\n * Returns days-hours-minutes string, days-hours string, if expired, and ms of difference.\n * @param   {number}  timestampMsec               Timestamp of interest (milliseconds).\n * @param   {number}  [referenceTimestampMsec=]   Reference timestamp (milliseconds).\n * @returns {object}                              { dhm, dh, isExpired, msDiff, ... }.\n */\nexport default function timeDiff (\n  timestampMsec: number,\n  referenceTimestampMsec: number = Date.now()\n): {\n  dhm: string\n  dh: string\n  isExpired: boolean\n  msDiff: number\n  timestampMsec: number\n  referenceTimestampMsec: number\n} {\n  let diff = timestampMsec - referenceTimestampMsec\n  // note sign\n  const isExpired = diff <= 0\n  // mod away higher time frames\n  diff = Math.abs(diff)\n  const d = Math.floor(diff / (1000 * 60 * 60 * 24))\n  // remove days\n  diff -= d * (1000 * 60 * 60 * 24)\n  const h = Math.floor(diff / (1000 * 60 * 60)) % 24\n  // remove hours\n  diff -= h * (1000 * 60 * 60)\n  const m = Math.floor(diff / (1000 * 60)) % 60\n  return {\n    dhm: `${d} days ${h} hours ${m} min`,\n    dh: `${d} days ${h} hours`,\n    isExpired, // time difference is to the past of now? (boolean)\n    msDiff: diff,\n    timestampMsec,\n    referenceTimestampMsec\n  }\n}\n","import React from 'react'\nimport { Store, getOwner, getBidding } from '../../store/'\nimport { Link } from 'react-router-dom'\nimport styles from './SearchResults.module.css'\nimport timeDiff from './../../helpers/timediff'\nimport {\n  OWNERSHIP_DURATION_BY_BLOCKS,\n  CHALLENGE_PERIOD_DURATION_BY_BLOCKS,\n  interpretFw,\n  findLatestForwards\n} from '../../helpers/bns/'\nimport { Details } from './../general/Details'\n\nexport const SearchResults = () => {\n  // global state\n  const { state } = React.useContext(Store)\n\n  // calc time left in ownership via block heights\n  // temp object to keep track of timers\n  let diff = { isExpired: true, dh: '', msDiff: 0 }\n  const owner = getOwner(state)\n  if (owner) {\n    const heightOfExpiration = owner.winHeight + OWNERSHIP_DURATION_BY_BLOCKS\n    const blocksUntilExpires = heightOfExpiration - state.chain.height\n    const msUntilExpires = blocksUntilExpires * 10.0 * 60.0 * 1000.0\n    diff = timeDiff(msUntilExpires, 0)\n  }\n\n  // show BTC balance with styling and proper units based on network\n  const unitBTC = state.network === 'testnet' ? ' tBTC ' : ' BTC '\n  const showBTC = (sats = 0): JSX.Element => (\n    <>\n      <span className={styles.balance}>{(sats / 1e8).toFixed(8)}</span>\n      {unitBTC}\n    </>\n  )\n\n  const notificationLink = (\n    <span\n      className={[styles.breakable, styles.linkable].join(' ')}\n      key={'notify1'}\n      onClick={() => {\n        const pathEdit = state.network === 'testnet' ? 'testnet/' : ''\n        window.open(\n          `https://blockstream.info/${pathEdit}address/${state.domain.notificationAddress}`,\n          '_blank'\n        )\n      }}\n    >\n      {state.domain.notificationAddress}\n    </span>\n  )\n\n  let nAddress = 0\n  const addressLink = (address: string) => (\n    <span\n      className={[styles.breakable, styles.linkable].join(' ')}\n      key={address + nAddress++}\n      onClick={() => {\n        const pathEdit = state.network === 'testnet' ? 'testnet/' : ''\n        window.open(\n          `https://blockstream.info/${pathEdit}address/${address}`,\n          '_blank'\n        )\n      }}\n    >\n      {address}\n    </span>\n  )\n\n  // get ownership info\n  const tabledOwnershipData = owner\n    ? [\n        [['Owner'], [[addressLink(owner.address)]]],\n        [['Notifications'], [[notificationLink]]],\n        [\n          ['Ownership extended'],\n          [\n            [owner.winHeight + ' block height'],\n            [new Date(owner.winTimestamp * 1000).toUTCString()],\n            [timeDiff(owner.winTimestamp * 1000).dh + ' ago'],\n            [\n              <React.Fragment key={'ownership1'}>\n                {showBTC(owner.burnAmount)} winning bid\n              </React.Fragment>\n            ]\n          ]\n        ],\n        [\n          ['Ownership expires'],\n          [\n            [owner.winHeight + OWNERSHIP_DURATION_BY_BLOCKS + ' block height'],\n            [\n              '≈ ' +\n                new Date(\n                  (OWNERSHIP_DURATION_BY_BLOCKS * 10.0 * 60.0 +\n                    owner.winTimestamp) *\n                    1000\n                ).toUTCString()\n            ],\n            ['in ≈ ' + diff.dh]\n          ]\n        ]\n      ]\n    : []\n\n  // get burning info\n  const { isBurn, bidding } = getBidding(state)\n  const tabledBiddingData = isBurn\n    ? [\n        [['Owner'], [['Owner will be determined when bidding period ends']]],\n        [['Notifications'], [[notificationLink]]],\n        [\n          ['Bidding start'],\n          [\n            [bidding.startHeight + ' block height'],\n            // first bid is one that starts it so unix time stamp accurate\n            [new Date(bidding.bids[0].timestamp * 1000.0).toUTCString()],\n            [timeDiff(bidding.bids[0].timestamp * 1000.0).dh + ' ago']\n          ]\n        ],\n        [\n          ['Bidding ends'],\n          [\n            [bidding.endHeight + ' block height'],\n            [\n              '≈ ' +\n                new Date(\n                  bidding.bids[0].timestamp * 1000.0 +\n                    CHALLENGE_PERIOD_DURATION_BY_BLOCKS * 10.0 * 60.0 * 1000.0\n                ).toUTCString()\n            ],\n            [\n              'in ≈ ' +\n                timeDiff(\n                  bidding.bids[0].timestamp * 1000.0 +\n                    CHALLENGE_PERIOD_DURATION_BY_BLOCKS * 10.0 * 60.0 * 1000.0\n                ).dh\n            ]\n          ]\n        ],\n        [\n          ['Bidders'],\n          [\n            ...bidding.bids.map((thisBid: any, bidIndex: number) => [\n              <React.Fragment key={'bidding' + bidIndex}>\n                {showBTC(thisBid.value)} burned by{' '}\n                <span className={styles.breakable}>{thisBid.address}</span>\n              </React.Fragment>\n            ])\n          ]\n        ]\n      ]\n    : []\n\n  // get most basic available domain info\n  const tabledAvailableDomainData = [\n    [['Owner'], [['No owner. No bids.']]],\n    [['Notifications'], [[notificationLink]]]\n  ]\n\n  // display data in styled table format\n  const expandableTable = (inputData: Array<any>, inputDescription: string) => {\n    if (inputData.length === 0) return ''\n    return (\n      <div className={styles.ownershipDetails}>\n        <Details description={inputDescription}>\n          <table>\n            <tbody>\n              {inputData.map((rows: any, index: number) => (\n                <tr key={rows[0][0]}>\n                  <td>{rows[0][0]}</td>\n                  <td>\n                    {rows[1].map((dataRows: any, dataRowIndex: number) => (\n                      <p key={[index, dataRowIndex].join(' ')}>{dataRows}</p>\n                    ))}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </Details>\n      </div>\n    )\n  }\n\n  // calculate latest forwards\n  const latestForwards = owner ? findLatestForwards(owner.forwards) : []\n\n  /* -------------------------------------------------------------------------- */\n  /*                                   render                                   */\n  /* -------------------------------------------------------------------------- */\n\n  return (\n    <div className={styles.wrapper}>\n      {/* summarize search */}\n      <div className={styles.matches}>\n        <div>\n          {state.domain.txHistory.length} transaction\n          {state.domain.txHistory.length === 1 ? '' : 's'} found on{' '}\n          {state.network}\n        </div>\n        <div>\n          {latestForwards.length} current forward\n          {latestForwards.length === 1 ? '' : 's'}\n        </div>\n      </div>\n\n      <div className={[styles.scrollbars, 'scrollbar'].join(' ')}>\n        {/* scrollable search results */}\n        <div className={styles.listContainer}>\n          <div className={styles.describe}>\n            {/* no wonder but bidding period started */}\n            {!!isBurn &&\n              expandableTable(\n                tabledBiddingData,\n                'Bidding period domain details'\n              )}\n\n            {/* if no owner and no bidding - totally available */}\n            {!isBurn &&\n              !owner &&\n              expandableTable(\n                tabledAvailableDomainData,\n                'Unowned domain details'\n              )}\n\n            {/* owner exists - ownership details */}\n            {!!owner &&\n              expandableTable(tabledOwnershipData, 'Owned domain details')}\n          </div>\n\n          {/* -------------------------------------------------------------------------- */}\n          {/*                           search result forwards                           */}\n          {/* -------------------------------------------------------------------------- */}\n\n          {latestForwards.map((fw: any) => {\n            // convert forward info to specifics of what to display and link to for this front-end\n            const ifw = interpretFw(fw, state.network)\n            if (ifw.render) {\n              return (\n                <a\n                  key={fw.network}\n                  className={styles.listItem}\n                  href={ifw?.link || '' || undefined}\n                  target='_blank'\n                  rel='noopener noreferrer'\n                >\n                  <span className={styles.key}>{ifw.where}</span>\n                  {ifw.what}\n                </a>\n              )\n            } else {\n              return ''\n            }\n          })}\n\n          {/* show owner address as a forward */}\n          {/* {!!owner && (\n            <a\n              className={styles.listItem}\n              href={\n                interpretFw(\n                  {\n                    network: 'btc',\n                    address: state.domain.currentOwner,\n                    updateHeight: 0,\n                    updateTimestamp: 0\n                  },\n                  state.network\n                ).link || undefined\n              }\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              <span className={styles.key}>control address: </span>\n              {state.domain.currentOwner}\n            </a>\n          )} */}\n\n          {/* show if domain is available */}\n          <div className={styles.avaiability}>\n            {!owner && (\n              <Link to='/create' className={styles.createLink}>\n                {isBurn ? 'Join bidding' : 'Domain available!'}\n              </Link>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","export enum Mode {\n  HISTORY = 'HISTORY',\n  SENDING = 'SENDING',\n  MAIN = 'MAIN'\n}\n\nexport interface I_Attempt {\n  describe: string // describe what happened briefly\n  txid: string // txid for clicking if possible\n  message: string // error message\n  success: boolean // ok or bad?\n  txBuilder: I_TxBuilder // detailed clone object\n  timestamp: number // timestamp for sorting\n}\n\nexport interface I_Wallet {\n  headline: string // title\n  mode: string | Mode // page\n  history: I_Attempt[] // previous actions\n  lastError: string\n}\n\n// everything I need to build any tx\n// matching as close as possible to bitcoinjs psbt design\nexport interface I_TxBuilder {\n  showUI: boolean // show UI\n  notifyUI: string // what to set wallet title to\n  loadMode: string // what mode to load\n\n  network: 'bitcoin' | 'testnet' // testnet or bitcoin\n  setVersion: number | null // tx version\n  setLocktime: number | null // default locktime\n\n  feeRate: number | null // starting fee rate\n\n  minFeeRate: number // min fee rate sat/vByte\n  maxFeeRate: number // max fee rate sat/vByte\n  minDustValue: number | null // smallest output value (except OP_RETURN) sats\n\n  result: {\n    hex: string // hex of tx\n    virtualSize: number // vbytes\n    outgoingValue: number // sats initial outputs to pay (not change)\n    minOutgoingValue: number // min sats outputs allowed (not change)\n    changeValue: number // sats in output returning (change)\n    inputsValue: number // sats in used inputs\n    availableInputsValue: number // max sats available for inputs\n    fee: number // sats going to miners\n    txid: string // txid of tx\n  }\n\n  // used inputs\n  inputs: {\n    [inputIndex: string]: I_Input\n  }\n\n  // MUST USE / USED inputs as exact input info object with input index as keys\n  // so specific indexes can be set by user, the rest filled in automiatcally.\n  inputsFixed: {\n    [inputIndex: string]: I_Input\n  }\n\n  // OPTIONAL INPUTS:\n  // array of other possible inputs to use,\n  // used in exact order of this array,\n  // priority given to defined inputs always.\n  // (TODO) if only address + keys given, wallet could get missing info\n  // to create 1-multiple inputs from 1 address\n  // adds to inputs if used\n  utxoList: Array<any> | null\n\n  // used outputs\n  outputs: {\n    [outputIndex: string]: {\n      address: string | null // standard tx to address that will generate output at that addrss\n\n      // for OP_RETURN that has no address can be fed for with data to embed\n      // bitcoin.payments.embed({ data: [bufferOfDataToEmbed] }).output\n      script: Buffer | null\n\n      value: number // sats we need to pay\n      info: string\n    }\n  }\n\n  // MUST use outputs\n  outputsFixed: {\n    [outputIndex: string]: {\n      address: string | null\n      script: Buffer | null\n      value: number\n      minValue: number\n      info: string\n    }\n  }\n\n  changeAddress: string | null // where left over change goes, adds to outputs if used\n}\n\ntype ObjectOrNull = Exclude<{ [any: string]: any } | null, undefined>\n\ninterface I_Input {\n  // to create input\n\n  hash: string | null // txid (32B, 64 char hex) (dislike little endian buffer)\n  index: number | null // vout (integer)\n  sequence: number | null // e.g. 0xfffffffe\n  nonWitnessUtxo: Buffer | null // raw tx buffer, only 1 that works for all types\n  witnessScript: Buffer | null // original script, via bitcoin.script.compile([opcodes, ...])\n  redeemScript: Buffer | null // original script, via bitcoin.script.compile([opcodes, ...])\n\n  // to sign and finalize:\n\n  // could do from asm and pass as string instead of function\n  // then replace signature<index> publickey<index> with matching\n  // keyPairs[index] and if needed sighashTypes[index], numbers can be encoded\n  // into string before.\n  // https://github.com/bitcoinjs/bitcoinjs-lib/blob/f48abd322f14f6eec8bfc19e7838a1a150eefb56/test/integration/cltv.spec.ts#L43\n  // ((TODO): psbt.getHashForSig , .hashForSignature , hashForWitnessV0 , keypair.sign(hash))\n  inputScript: string | null\n\n  // ( (TODO):\n  //  canJustSign:\n  //    true means wallet just use\n  //      psbt.signInput(vin, keyPair); psbt.finalizeInput(vin);\n  //    false means it is fancy script so have to feed it\n  //      psbt.finalizeInput(vin, getFinalScripts({ inputScript, network }))\n  // )\n  canJustSign: boolean | null\n  keyPairs: ObjectOrNull[] | null\n  sighashTypes: number[] | null\n\n  // to explain to user each value when waiting for confirmation\n  address: string | null\n  value: number | null\n  confirmed: boolean | null\n  info: string | null\n}\n","import { I_Forward } from '../types'\n\n/**\n * Reads a single forward info object to interpret its values\n * as where the forwarding address should be used, what it is, and what link to use.\n * Returns {what: string, where: string, link: string, render: boolean}.\n */\nexport function interpretFw (fw: I_Forward, blockchain?: string) {\n  // blank address means it was removed\n  // ! at start means it's a command, not a network\n  if (fw.network === '' || fw.address === '' || fw.network.startsWith('!')) {\n    return {\n      render: false\n    }\n  }\n\n  // remove version modifier (anything after ! after network)\n  const onNetwork = fw.network.split('!')[0]\n\n  if (\n    onNetwork === 'p2wsh' ||\n    onNetwork === 'btc' ||\n    onNetwork === 'p2pkh' ||\n    onNetwork === 'p2wpkh' ||\n    onNetwork === 'p2sh'\n  ) {\n    return {\n      where: 'btc:',\n      what: fw.address,\n      link:\n        `https://blockstream.info/${\n          blockchain === 'testnet' ? 'testnet/' : ''\n        }address/` + fw.address,\n      render: true\n    }\n  }\n\n  if (decodeURIComponent(onNetwork) === '?') {\n    const xpub = decodeURIComponent(fw.address)\n      .replace('>', '') // safety precaution\n      .replace('<', '') // safety precaution\n    return {\n      where: 'stealth-address:',\n      what: `${xpub.slice(0, 6)}...${xpub.slice(-6)}`,\n      link: undefined,\n      render: true\n    }\n  }\n\n  if (\n    onNetwork === 'http' ||\n    onNetwork === 'https' ||\n    onNetwork === 'url' ||\n    onNetwork === 'web' ||\n    onNetwork === 'forums'\n  ) {\n    return {\n      where: 'https://',\n      what: fw.address,\n      link: 'https://' + fw.address,\n      render: true\n    }\n  }\n\n  if (onNetwork === 'twitter') {\n    return {\n      where: 'twitter.com/',\n      what: fw.address,\n      link: 'https://twitter.com/' + fw.address,\n      render: true\n    }\n  }\n\n  if (onNetwork === 'github') {\n    return {\n      where: 'github.com/',\n      what: fw.address,\n      link: 'https://github.com/' + fw.address,\n      render: true\n    }\n  }\n\n  if (onNetwork === 'youtube') {\n    return {\n      where: 'youtu.be/',\n      what: fw.address,\n      link: 'https://www.youtube.com/watch?v=' + fw.address,\n      render: true\n    }\n  }\n\n  if (onNetwork === 'email' || onNetwork === 'e-mail') {\n    return {\n      where: 'mailto:',\n      what: fw.address.replace('%40', '@'),\n      link: 'mailto:' + fw.address,\n      render: true\n    }\n  }\n\n  return {\n    where: onNetwork + ' :',\n    what: ' ' + fw.address,\n    link: undefined,\n    render: true\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport { RoundButton } from './../general/RoundButton'\nimport { Store } from '../../store/'\nimport { searchAction, changeAliasAction } from './../../store/actions/'\nimport { useHistory, Redirect } from 'react-router-dom'\nimport { SearchResults } from './../SearchResults'\nimport styles from './HomeContent.module.css'\n\n/**\n * Root landing page.\n */\nexport const HomeContent = (props: any): JSX.Element => {\n  const { state, dispatch } = React.useContext(Store)\n  // url changer\n  const history = useHistory()\n\n  // if page is loaded with #/id/:alias format\n  // this will change alias to that one\n  // then it will navigate to '/'\n  // and then it will do search with new alias\n  // http://localhost:3000/#/id/satoshi\n  const alias = props?.match?.params?.alias\n  const hash = window.location.hash\n  const reroute = () => {\n    if (window.location.hash !== '#/') history.push('/')\n  }\n  if (alias && hash !== '#/') {\n    console.log('alias id detected in url:', alias, hash)\n    searchAction({ ...state, alias }, dispatch)\n      .then(() => reroute())\n      .catch(() => reroute())\n  }\n\n  // is serach done\n  const isSearchDone = () => state.pageInfo.checkedLightSearch\n\n  // put the textarea into focus on mount and move caret to end\n  const inputEl = useRef<HTMLTextAreaElement>(null)\n  useEffect(() => {\n    if (inputEl && inputEl.current) {\n      inputEl.current.selectionEnd = inputEl.current.value.length\n      inputEl.current.selectionStart = inputEl.current.value.length\n      inputEl.current.focus()\n    }\n  }, [])\n\n  // key presses set focus on textarea\n  useEffect(() => {\n    const onAnyKey = (e: any) => {\n      // check session storage if wallet is visible so don't focus\n      const walletVisible =\n        window.sessionStorage.getItem('fromWallet') === String(true)\n      // don't count reserved keys\n      const EXCEPTIONS = ['`']\n      if (!walletVisible && !EXCEPTIONS.some(v => v === e.key)) {\n        if (document.activeElement?.id !== 'txtSearch') {\n          inputEl?.current?.focus()\n        }\n      }\n    }\n    document.addEventListener('keydown', onAnyKey)\n    return () => {\n      document.removeEventListener('keydown', onAnyKey)\n    }\n  }, [])\n\n  /* -------------------------------------------------------------------------- */\n  /*                                   render                                   */\n  /* -------------------------------------------------------------------------- */\n\n  return (\n    <div className={styles.wrapper}>\n      {/* only way routing asap doesn't give \"cant change state during render...\" */}\n      {alias && hash !== '#/' && <Redirect to='/' />}\n\n      <div\n        className={\n          !isSearchDone()\n            ? [styles.lblMainTitle].join(' ')\n            : [styles.lblMainTitle, styles.lblMainTitleAfter].join(' ')\n        }\n        onClick={() => {\n          changeAliasAction(state, dispatch, '') // reset search box\n        }}\n      >\n        <span>Bitcoin</span> Name System\n      </div>\n      <div\n        className={\n          !isSearchDone()\n            ? styles.divSearch\n            : [styles.divSearch, styles.divSearchAfter].join(' ')\n        }\n      >\n        <textarea\n          id='txtSearch'\n          className={styles.txtSearch}\n          cols={30}\n          rows={1}\n          spellCheck={false}\n          value={state.alias}\n          placeholder={'e.g. satoshi'}\n          ref={inputEl}\n          onChange={e => {\n            changeAliasAction(state, dispatch, e?.target?.value)\n          }}\n          onKeyPress={e => {\n            e.key === 'Enter' && searchAction(state, dispatch)\n          }}\n        ></textarea>\n        <RoundButton\n          sizebutton='2.6'\n          onClick={() => {\n            searchAction(state, dispatch)\n          }}\n        >\n          .btc\n        </RoundButton>\n      </div>\n      {/* <div\n        className={styles.results}\n        style={{ display: isSearchDone() ? 'block' : 'none' }}\n      > */}\n      {!!isSearchDone() && <SearchResults />}\n      {/* </div> */}\n    </div>\n  )\n}\n","import React from 'react'\nimport { HomeContent } from './../components/HomeContent'\n\nexport const Home = (props: any): JSX.Element => {\n  return (\n    <>\n      <HomeContent {...props} />\n    </>\n  )\n}\n","import React from 'react'\nimport styles from './SettingsContent.module.css'\nimport { Switch } from './../general/Switch'\nimport { InputForm } from './../general/InputForm'\nimport { Store } from './../../store'\nimport { ActionTypes } from './../../interfaces'\n\nexport const SettingsContent = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  return (\n    <div className={[styles.wrapper, 'scrollbar'].join(' ')}>\n      <div className={styles.contentWrapper}>\n        <div className={styles.title}>Settings</div>\n        Subject to changes until beta. <br />\n        Not yet reviewed: high chance of bugs and losses. <br />\n        <div>\n          Network:\n          <Switch\n            choices={[\n              {\n                value: 'testnet',\n                do: () => {\n                  dispatch({\n                    type: ActionTypes.LOAD_STATE,\n                    payload: { ...state, network: 'testnet' }\n                  })\n                }\n              },\n              {\n                value: 'mainnet',\n                do: () => {\n                  dispatch({\n                    type: ActionTypes.LOAD_STATE,\n                    payload: { ...state, network: 'bitcoin' }\n                  })\n                }\n              }\n            ]}\n          />\n        </div>\n        <InputForm\n          style={{ width: '80%' }}\n          thisInputLabel={'Path for full node with esplora API'}\n          thisInitialValue={state.api.path[state.network]}\n          showBonusInformation={'true'}\n          sanitizeFilters={['url']}\n          thisSubmitButtonOnClick={(textValue: string) => {\n            state.api.path[state.network] = textValue\n            console.log('click set value to ', textValue)\n            dispatch({\n              type: ActionTypes.LOAD_STATE,\n              payload: { ...state }\n            })\n          }}\n        >\n          {state.network} : {state.api.path[state.network]}\n        </InputForm>\n        <br />\n        {/* <div>\n          Automatically save data to browser (local storage) ? (todo)\n          <br />\n          <Switch choices={[{ value: 'not allow' }, { value: 'allow' }]} />\n        </div>\n        <div>\n          (if yes) Provide a password to encrypt local storage <br />\n          with to hide it from other applications (todo)\n          <br /> [todo textbox form]\n        </div> */}\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { SettingsContent } from './../components/SettingsContent/'\n\n/**\n * Settings path page. (temporarily used for testing)\n */\nexport const Settings = (): JSX.Element => {\n  // global state\n\n  return (\n    <>\n      <SettingsContent />\n    </>\n  )\n}\n","import React from 'react'\nimport {\n  Store,\n  unitsBTC,\n  satsToBTCSpaced,\n  getUnspentSum\n  // getNetworkName\n} from '../../../store/'\nimport styles from './Withdraw.module.css'\nimport { RoundButton } from './../../general/RoundButton'\nimport { ActionTypes } from './../../../interfaces'\nimport {\n  scanAddressFullyAction,\n  changePageInfoAction,\n  searchAction\n} from './../../../store/actions'\nimport { useHistory } from 'react-router-dom'\nimport { InputForm } from './../../general/InputForm'\nimport { findOwnersForwards } from './../../../helpers/bns'\n\n/**\n * Allow withdrawals.\n */\nexport const Withdraw = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n  // keep track if button already clicked\n  const [btnAvailable, setBtnAvailable] = React.useState(true)\n  // first load\n  const [initialized, setInitialized] = React.useState(false)\n\n  // address to send to, local state\n  const [withdrawAddress, setWithdrawAddress] = React.useState('')\n\n  const controlBalance = getUnspentSum(state.wallet.utxoList)\n\n  // format btc values and units for render\n  const showBTC = (sats = 0): JSX.Element => (\n    <div className={styles.total}>\n      <span className={styles.total__value}>{satsToBTCSpaced(sats)}</span>\n      <span className={styles.total__units}>{' ' + unitsBTC(state) + ' '}</span>\n    </div>\n  )\n\n  // if wallet is not loaded, send to create page 1 to load wallet\n  const history = useHistory()\n  if (!state.wallet.mnemonic) {\n    changePageInfoAction(state, dispatch, 1)\n    history.push('/create')\n  }\n\n  /* ------------------------------- scan wallet ------------------------------ */\n\n  // scan the wallet\n  const scanWallet = async () => {\n    if (btnAvailable) {\n      // wrap in try so if page switches too fast so button can't be set, no issue\n      try {\n        setBtnAvailable(false)\n        await scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_WALLET)\n        setBtnAvailable(true)\n      } catch (e) {}\n    }\n  }\n\n  const scanWalletButton = () => (\n    <RoundButton\n      className={styles.btnScan}\n      onClick={async () => {\n        scanWallet()\n      }}\n      minor={'true'}\n    >\n      {!btnAvailable && 'scanning...'}\n      {btnAvailable && state.pageInfo.checkedWallet && 're-scan'}\n      {btnAvailable && !state.pageInfo.checkedWallet && 'scan'}\n    </RoundButton>\n  )\n\n  // run scan on load if wallet hasn't been scanned\n  if (!initialized && !state.pageInfo.checkedWallet) {\n    setInitialized(true)\n    const initialScan = async () => {\n      await scanWallet()\n    }\n    initialScan()\n  }\n\n  /* ------------------------------- to address ------------------------------- */\n\n  const destinationAddressForm = () => (\n    <InputForm\n      className={styles.withdraw_control}\n      thisInputLabel={`Send to`}\n      placeholder={'Bitcoin address or *.btc BNS alias'}\n      showButton={'true'}\n      sanitizeFilters={['oneline']}\n      thisInitialValue={''}\n      thisInputOnChange={(e: any) => {\n        setWithdrawAddress(e.target.value)\n      }}\n      getDropdowns={async (searchTerm: string) => {\n        // do nothing if doesn't end in .btc\n        if (!searchTerm.endsWith('.btc')) return []\n        // queue api for .btc name, returns state object\n        const res = await searchAction(state, dispatch, {\n          otherDomain: searchTerm\n        })\n        // return items to show for the term if possible\n        return !res ? [] : findOwnersForwards(res).toSpaceSeparated\n      }}\n      renderDropdowns={({\n        textValue,\n        item\n      }: {\n        textValue: string\n        item: string\n        handleClick: any\n      }) => {\n        const [type, address] = item.split(' ')\n        return {\n          // what is shown for each of found textValue's items\n          contents: (\n            <>\n              <b>\n                {decodeURIComponent(type)}@{textValue}\n              </b>\n              &nbsp;&nbsp;\n              {decodeURIComponent(address)}\n            </>\n          ),\n          // what goes into the address bar\n          selection: address\n        }\n      }}\n      thisSubmitButtonOnClick={(textValue: string) => {\n        // abort if empty\n        if (!textValue) return undefined\n\n        console.log('submitting withdrawal to wallet')\n\n        /* ----------------------------- loading wallet ----------------------------- */\n\n        // clone utxo\n        const utxoList = JSON.parse(JSON.stringify(state.wallet.utxoList))\n        // load wallet utxo with additional info\n        utxoList.forEach((utxo: any) => {\n          utxo.sequence = 0xfffffffe\n          utxo.canJustSign = true\n          utxo.keyPairs = [state.wallet.WIF] // (TODO: remove later)\n          utxo.sighashTypes = ['SIGHASH_ALL'] // SIGHASH_ALL or 0x01\n          utxo.address = state.wallet.address\n          utxo.confirmed = true\n          utxo.info = 'BNS control wallet'\n        })\n        // create payload to send to wallet\n        const payload: { [key: string]: any } = {\n          showUI: true,\n          loadMode: 'SENDING',\n          notifyUI: 'Withdraw from wallet?',\n          network: state.network,\n          // wallet utxo's\n          utxoList,\n\n          // specific outputs\n          outputsFixed: {\n            '0': {\n              address: withdrawAddress,\n              value: controlBalance, // value sent\n              minValue: 500 // lowest value sent can be\n            }\n          },\n\n          changeAddress: state.wallet.address\n        }\n        // send payload to wallet\n        addToSessionStorage(payload)\n      }}\n    />\n  )\n\n  /* -------------------------------------------------------------------------- */\n  /*                                   render                                   */\n  /* -------------------------------------------------------------------------- */\n\n  return (\n    <div className={styles.wrapper}>\n      {/* page title */}\n      <div className={styles.top}>\n        <div className={styles.top__title}>\n          Withdraw from <span>BNS</span>\n        </div>\n      </div>\n      <div className={styles.contentWrapper}>\n        <div>\n          {/* show control address balance */}\n          {state.pageInfo.checkedWallet && <>{showBTC(controlBalance)}</>}\n\n          {/* scan wallet button */}\n          <div className={styles.buttonWrapper}>{scanWalletButton()}</div>\n        </div>\n        {/* show address from which this withdraws */}\n        <div>\n          {state.pageInfo.checkedWallet && (\n            <div className={styles.from}>\n              <div className={styles.from__label}>\n                From{' '}\n                <span\n                  className={[styles.from__alias, 'letter_breakable'].join(' ')}\n                >\n                  {state.alias}.btc\n                </span>{' '}\n                owner address\n              </div>\n              <div\n                className={[styles.from__address, 'letter_breakable'].join(' ')}\n              >\n                {state.wallet.address}\n              </div>\n            </div>\n          )}\n        </div>\n        {state.pageInfo.checkedWallet && (\n          <>\n            {/* editable to address */}\n            {destinationAddressForm()}\n          </>\n        )}\n      </div>\n    </div>\n  )\n}\n\n/* ------------------------- add to session storage ------------------------- */\nconst addToSessionStorage = (payload: any) => {\n  // add stringified payload to session storage under 'toWallet' key\n  window.sessionStorage.setItem('toWallet', JSON.stringify(payload))\n  // this appears necessary\n  window.dispatchEvent(new StorageEvent('storage'))\n}\n","import React from 'react'\nimport { Withdraw } from './../components/wallet/Withdraw'\n\nexport const Wallet = (props: any): JSX.Element => {\n  return (\n    <>\n      <Withdraw {...props} />\n    </>\n  )\n}\n","import React from 'react'\nimport styles from './Logo.module.css'\n\n/**\n * Bitcoin Logo.\n */\nexport const Logo = (props: any) => {\n  return (\n    <div\n      className={[styles.outershell2, props.className].join(' ')}\n      style={\n        props.size\n          ? ({\n              '--btcLogoInputSize': props.size.toString()\n            } as React.CSSProperties)\n          : {}\n      }\n    >\n      <div className={[styles.btcLogo, styles.cutoffs].join(' ')}>\n        <div className={[styles.btcLogo, styles.background].join(' ')}></div>\n        <div className={[styles.btcLogo, styles.theB].join(' ')}>B</div>\n      </div>\n    </div>\n  )\n}\n","import { I_Wallet, I_TxBuilder, Mode } from './../interfaces'\n\nexport const initialWallet: I_Wallet = {\n  headline: 'BNS Wallet',\n  mode: Mode.MAIN,\n  history: [],\n  lastError: ''\n}\n\nexport const initialTxBuilder: I_TxBuilder = {\n  // notifying wallet\n  showUI: false,\n  notifyUI: '',\n  loadMode: '',\n\n  // tx data\n  network: 'testnet',\n  setVersion: 2,\n  setLocktime: 0,\n  feeRate: 1.0,\n\n  minFeeRate: 1.0,\n  maxFeeRate: 1000.0,\n\n  minDustValue: 500,\n\n  result: {\n    hex: '',\n    virtualSize: 0,\n    outgoingValue: 0,\n    minOutgoingValue: 0,\n    changeValue: 0,\n    inputsValue: 0,\n    availableInputsValue: 0,\n    fee: 0,\n    txid: ''\n  },\n\n  inputs: {},\n  inputsFixed: {},\n  utxoList: null,\n\n  outputs: {},\n  outputsFixed: {},\n  changeAddress: null\n}\n","import React from 'react'\nimport styles from './Sending.module.css'\nimport { FeesSelection } from './../../../../general/FeesSelection'\nimport { InputForm } from './../../../../general/InputForm'\nimport { I_Wallet, I_TxBuilder, Mode } from './../../interfaces'\nimport { RoundButton } from '../../../../general/RoundButton'\n\nexport const Sending = (props: any): JSX.Element => {\n  const {\n    wallet,\n    setWallet,\n    txBuilder,\n    setTxBuilder,\n    recalcBuilder,\n    setShowInterface\n  }: {\n    wallet: I_Wallet\n    setWallet: (param: I_Wallet) => any\n    txBuilder: I_TxBuilder\n    setTxBuilder: (param: I_TxBuilder) => any\n    recalcBuilder: any\n    setShowInterface: any\n  } = props.passedstate\n\n  return (\n    <>\n      <div className={styles.title}>{wallet.headline}</div>\n\n      {/* allow fee customization */}\n      <FeesSelection\n        className={styles.feeSelection}\n        initialFee={txBuilder.feeRate}\n        getFeeSuggestions={() => props.api.getFeeSuggestions()}\n        setFee={(feeRate: string) => {\n          if (+feeRate > txBuilder.maxFeeRate)\n            feeRate = String(txBuilder.maxFeeRate)\n          if (+feeRate < txBuilder.minFeeRate)\n            feeRate = String(txBuilder.minFeeRate)\n          props.export.feeRate(parseFloat(feeRate)) // outside wallet\n          setTxBuilder({ ...txBuilder, feeRate: parseFloat(feeRate) }) // inside wallet\n          return feeRate\n        }}\n      />\n\n      {/* amount customization */}\n      {Object.keys(txBuilder.outputsFixed).map(\n        (vout: string, index: number) => {\n          const output = txBuilder.outputsFixed[vout]\n          return (\n            <InputForm\n              key={'outputform' + String(index)}\n              className={styles.amounts}\n              thisInputLabel={\n                <>\n                  #{vout} Sending {(output.value * 1e-8).toFixed(8)}{' '}\n                  {txBuilder!.network === 'testnet' ? 'tBTC' : 'BTC'} to{' '}\n                  <span className={'letter_breakable'}>{output.address}</span>\n                </>\n              }\n              showButton={'false'}\n              thisInitialValue={(output.value * 1e-8).toFixed(8)}\n              onBlur={() => (output.value * 1e-8).toFixed(8)}\n              sanitizeFilters={[\n                'fractions',\n                'decimal_point',\n                'no_leading_zeros',\n                'max_decimal_places:8'\n              ]}\n              thisInputOnChange={(e: any) => {\n                // convert string in BTC to number of satoshi\n                const thisValue = Math.round(+e.target.value * 1e8)\n                // change the fixed output value\n                // const isChanged = output.value !== thisValue\n                output.value = thisValue\n                e.target.value = String(+(output.value * 1e-8).toFixed(8))\n\n                // update builder and wallet state w/ new change\n                const lastError = recalcBuilder({ txBuilder })\n                setWallet({ ...wallet, lastError })\n                setTxBuilder({ ...txBuilder })\n              }}\n            />\n          )\n        }\n      )}\n\n      {/* calculated outputs */}\n      {Object.keys(txBuilder.outputs).map((vout: string, index: number) => {\n        // make sure it's not fixed output\n        if (txBuilder.outputsFixed[vout])\n          return <div key={`calcoutput_${index}`}></div>\n        const output = txBuilder.outputs[vout]\n\n        return (\n          <div\n            className={[styles.calculatedAmounts, 'word_breakable'].join(' ')}\n            key={`calcoutput_${index}`}\n          >\n            #{vout} Sending {(+output.value * 1e-8).toFixed(8)}{' '}\n            {txBuilder.network === 'testnet' ? 'tBTC' : 'BTC'}\n            {output.info ? ` for ${output.info} ` : ' '}to{' '}\n            <span className={'letter_breakable'}>{output.address}</span>\n          </div>\n        )\n      })}\n\n      {/* status */}\n      {!!wallet.lastError && (\n        <div className={[styles.lastError, 'word_breakable'].join(' ')}>\n          {wallet.lastError}\n        </div>\n      )}\n\n      <div className={styles.buttonWrapper}>\n        <RoundButton\n          minor={'true'}\n          onClick={() => {\n            setShowInterface(false)\n          }}\n        >\n          Cancel\n        </RoundButton>\n        <RoundButton\n          showdisabled={txBuilder.result.hex ? undefined : 'true'}\n          onClick={async () => {\n            console.log('Send clicked')\n            // abort if no hex\n            if (txBuilder.result.hex === '') return undefined\n            console.log('attempting to broadcast')\n            console.log('hex:\\n', txBuilder!.result.hex)\n            try {\n              const res = await props.api.broadcastTx(txBuilder.result.hex)\n              console.log('broadcast success:', res)\n              // add this to historic events\n              wallet.history.push({\n                describe: `outgoing transaction`,\n                txid: res.txid,\n                message: '',\n                success: true,\n                txBuilder: JSON.parse(JSON.stringify(txBuilder)),\n                timestamp: Date.now()\n              })\n            } catch (e) {\n              console.log('broadcast failed:', e)\n              // add this to historic events\n              wallet.history.push({\n                describe: `outgoing transaction`,\n                txid: '',\n                message: e.message,\n                success: false,\n                txBuilder: JSON.parse(JSON.stringify(txBuilder)),\n                timestamp: Date.now()\n              })\n            }\n            wallet.mode = Mode.HISTORY\n            setWallet({ ...wallet })\n          }}\n        >\n          Send\n        </RoundButton>\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport styles from './Wallet.module.css'\nimport { getTx } from './helpers/getTx'\nimport { resetUrl, handleHashChange } from './helpers/urlReading'\nimport { Logo } from './../../general/Logo/'\nimport { RoundButton } from '../../general/RoundButton'\n\nimport { I_Wallet, I_TxBuilder, I_Attempt, Mode } from './interfaces'\nimport { initialWallet, initialTxBuilder } from './store'\n\nimport { Sending } from './components/sending'\n\nconst RESERVED_FROM_WALLET_KEY = 'fromWallet'\nconst RESERVED_TO_WALLET_KEY = 'toWallet'\n\n// which feeds to use\nconst USE_URL_AS_SOURCE = false\nconst USE_SESSION_STORAGE_AS_SOURCE = true\n// if development mode\n// const TESTING = process.env.NODE_ENV === 'development'\n\n// written so easy to separate into separate app later\n\n// logic flow\n// outside wallet -> params -> txBuilder -> user\n// separating params and txBuilder to place formatting logic\n\n// session storage temporarily used instead of other means like URI to be dropped in later\n// entry toWallet is used to send data to wallet\n// entry fromWallet is used to send data from wallet\n\n/**\n * Reusable component for creating a wallet.\n * Simulates behavior of browser/desktop wallet plugins so I can move it outside later.\n */\nexport const Wallet = (props: any): JSX.Element => {\n  // initialize\n  const [initialized, setInitialized] = React.useState(false)\n\n  // wallet general state\n  const [wallet, setWallet]: [I_Wallet, any] = React.useState(initialWallet)\n\n  // stores raw fed params before organizing them for txBuilder\n  const [params, setParams]: [any, (args: any) => void] = React.useState({})\n\n  // stores state for building tx\n  const [txBuilder, setTxBuilder]: [I_TxBuilder, any] = React.useState({\n    ...initialTxBuilder,\n    ...(props.txBuilder || {})\n  })\n\n  // show/hide pop up interface\n  const [showInterface, setShowInterface] = React.useState(false)\n\n  // run methods to handle evenlisteners for new parameters from all sources\n  if (!initialized) {\n    setInitialized(true)\n    handleListeners(params, setParams)\n  }\n\n  // run methods to move new parameters 'params' into txBuilder\n  React.useEffect(() => processNewParams(params, setTxBuilder), [params])\n\n  // once fed data is organized (on txbuilder changes) attempt to create a transaction\n  React.useEffect(() => {\n    // handle the change in txBuilder object\n    console.log('txBuilder object changed')\n\n    // just handle interface showing on/off once\n    if (txBuilder.showUI) {\n      setShowInterface(true)\n      recalcBuilder({ txBuilder })\n      setTxBuilder({ ...txBuilder, showUI: false })\n      return undefined\n    }\n\n    // just handle mode to load once\n    if (txBuilder.loadMode) {\n      // checks if string matches enum for mode\n      if (Object.values(Mode as any).includes(txBuilder.loadMode)) {\n        setWallet((w: I_Wallet) => ({\n          ...w,\n          mode: txBuilder.loadMode\n        }))\n        // Mode[txBuilder.loadMode as keyof typeof Mode] as Mode\n        setTxBuilder({ ...txBuilder, loadMode: '' })\n        return undefined\n      }\n    }\n\n    // update the headline once\n    if (txBuilder.notifyUI) {\n      setWallet((w: I_Wallet) => {\n        if (txBuilder.notifyUI && txBuilder.notifyUI !== w.headline)\n          // update wallet headline\n          return { ...w, headline: txBuilder.notifyUI }\n        else if (txBuilder.notifyUI && txBuilder.notifyUI === w.headline)\n          // no changes to wallet headline\n          return w\n        // reset wallet headline\n        else return { ...w, headline: initialWallet.headline }\n      })\n\n      setTxBuilder({ ...txBuilder, notifyUI: '' })\n      return undefined\n    }\n  }, [txBuilder])\n\n  // update session storage about interface showing\n  React.useEffect(() => {\n    window.sessionStorage.setItem(\n      RESERVED_FROM_WALLET_KEY,\n      String(showInterface)\n    )\n  }, [showInterface])\n\n  // (TODO) separate views into separate components\n\n  /* ------------------------------ view history ------------------------------ */\n  const viewHistory = () => (\n    <>\n      <div className={styles.title}>Past transactions</div>\n      <div className={styles.entries}>\n        {wallet.history\n          .slice()\n          .reverse()\n          .map((entry: I_Attempt, index: number) => (\n            <div\n              key={`historicEntry_${index}`}\n              className={styles.entries__entry}\n            >\n              <div\n                className={\n                  entry.success\n                    ? styles.entries__entry__done\n                    : styles.entries__entry__error\n                }\n              >\n                {entry.describe} : {entry.success ? 'Done' : 'Failed'}\n              </div>\n              {entry.success ? (\n                <RoundButton\n                  className={styles.entries__entry__button}\n                  minor={'true'}\n                  onClick={() => {\n                    const PATH =\n                      `https://blockstream.info/` +\n                      `${\n                        entry.txBuilder.network === 'testnet' ? 'testnet/' : ''\n                      }tx/` +\n                      `${entry.txid}`\n                    window.open(PATH, '_blank')\n                  }}\n                >\n                  See online\n                </RoundButton>\n              ) : (\n                <div className={styles.entries__entry__message}>\n                  {entry.message}\n                </div>\n              )}\n              <div className={styles.entries__entry__time}>\n                {new Date(entry.timestamp).toUTCString()}\n              </div>\n            </div>\n          ))}\n      </div>\n    </>\n  )\n\n  /* ------------------------------ general view ------------------------------ */\n\n  const viewMain = () => (\n    <>\n      <div className={styles.title}>BNS Wallet</div>\n      <div>not loaded</div>\n    </>\n  )\n\n  /* -------------------------------------------------------------------------- */\n  /*                                  Rendering                                 */\n  /* -------------------------------------------------------------------------- */\n\n  return (\n    <>\n      {/* visual wallet interface */}\n      {showInterface && (\n        <>\n          {/* hidden full screen div for closing wallet interface */}\n          <div\n            className={styles.interface_not}\n            onClick={() => {\n              setShowInterface(false)\n            }}\n          />\n\n          {/* visible wallet interface */}\n          <div className={[styles.interface, 'dropshadow'].join(' ')}>\n            {/* views to render */}\n            {wallet.mode === Mode.SENDING && (\n              <Sending\n                {...props}\n                passedstate={{\n                  wallet,\n                  setWallet,\n                  txBuilder,\n                  setTxBuilder,\n                  recalcBuilder,\n                  setShowInterface\n                }}\n              />\n            )}\n            {wallet.mode === Mode.HISTORY && viewHistory()}\n            {wallet.mode === Mode.MAIN && viewMain()}\n          </div>\n        </>\n      )}\n\n      {/* wallet icon */}\n      <div\n        className={[styles.logo_wrapper, props.className || ''].join(' ')}\n        onClick={() => {\n          console.log({ params, txBuilder, wallet })\n          setShowInterface(!showInterface)\n        }}\n      >\n        <div>\n          <Logo\n            className={[\n              styles.logo,\n              showInterface ? styles.logo_selected : ''\n            ].join(' ')}\n          />\n        </div>\n      </div>\n    </>\n  )\n}\n\n/* -------------------------------------------------------------------------- */\n/*                               event listeners                              */\n/* -------------------------------------------------------------------------- */\n\n// if events not firing need to use\n// window.dispatchEvent(new Event('storage'))\n\n// Run methods to handle detection and clean up of parameters passed.\n// Was easiest to do it with access to params.\nconst handleListeners = (params: any, setParams: any) => {\n  // Events added to move user data from listening sources to params\n  addListeners(params, setParams)\n\n  // clean up function is returned to run if component is removed (or changed)\n  return () => {\n    // clean up listeners\n    removeListeners(params, setParams)\n\n    // clean up url as well\n    if (USE_URL_AS_SOURCE) resetUrl()\n  }\n}\n\nconst addListeners = (params: any, setParams: any) => {\n  // even to detect session storage edit\n  if (USE_SESSION_STORAGE_AS_SOURCE)\n    window.addEventListener('storage', handleStorageChange(params, setParams))\n\n  // event to detect url change\n  if (USE_URL_AS_SOURCE)\n    window.addEventListener('hashchange', handleHashChange(params, setParams))\n}\n\nconst removeListeners = (params: any, setParams: any) => {\n  // clean up storage listener\n  if (USE_SESSION_STORAGE_AS_SOURCE)\n    window.removeEventListener(\n      'storage',\n      handleStorageChange(params, setParams)\n    )\n\n  // clean up url hash listener\n  if (USE_URL_AS_SOURCE)\n    window.removeEventListener(\n      'hashchange',\n      handleHashChange(params, setParams)\n    )\n}\n\n/* -------------------------------------------------------------------------- */\n/*                convert matching params to wallet properties                */\n/* -------------------------------------------------------------------------- */\nconst processNewParams = (params: any, setTxBuilder: any) => {\n  // only update state if necessary\n  if (Object.keys(params).length > 0) {\n    // add params to txBuilder\n    setTxBuilder((prevTxBuilder: any) => ({\n      ...prevTxBuilder,\n      ...params\n    }))\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                             attempt to build tx                            */\n/* -------------------------------------------------------------------------- */\nconst recalcBuilder = ({ txBuilder }: any) => {\n  let lastError = ''\n  try {\n    // attempt to build within try/catch\n    const res = getTx(txBuilder)\n    console.log('successful tx done:\\n', res)\n  } catch (e) {\n    console.log('can not do psbt yet:', e)\n    lastError = e.message\n    // setInfo({ text: e.message })\n  }\n\n  console.log('recalc builder', txBuilder)\n  return lastError\n}\n\n/* -------------------------------------------------------------------------- */\n/*                    reading params from sessions storage                    */\n/* -------------------------------------------------------------------------- */\n\n/**\n * Session storage scan. Read key value pairs, clean session storage after.\n */\nconst handleStorageChange = (params: any, setParams: any) => (): void => {\n  // if (e) console.warn(e)\n  console.log('handle Storage Change ran')\n\n  // do not want spam of events going off in middle of this\n  removeListeners(params, setParams)\n\n  const fedValues: { [key: string]: string } = {}\n\n  // check for data sent to wallet\n  const found = window.sessionStorage[RESERVED_TO_WALLET_KEY]\n  const foundObject = found\n    ? JSON.parse(window.sessionStorage[RESERVED_TO_WALLET_KEY])\n    : null\n\n  console.log('found values:', foundObject)\n\n  if (foundObject)\n    Object.keys(\n      // cloned session storage so can delete safely while parsing\n      foundObject\n    ).forEach((thisKey: string) => {\n      const thisValue = foundObject[thisKey]\n      fedValues[thisKey] = thisValue\n    })\n\n  // only update state if there are actual values\n  if (Object.keys(fedValues).length > 0) {\n    const newParams = { ...params, ...fedValues }\n    console.log('new params added:', newParams)\n    setParams(newParams)\n  }\n\n  // clear session storage\n  // sessionStorage.removeItem(RESERVED_TO_WALLET_KEY)\n\n  // safe to add listeners again\n  addListeners(params, setParams)\n}\n\n/**\n * temp notes\n *\n * what's best for passing data?\n * - querry strings\n *    - users can accidentally edit or on purpose (I like that it's visible and customizable)\n *    - works cross origin (just put in confirmation checks)\n *    - needs unique path or could be confusing to other components\n *    - confusing url for user (needs cleanup after read imo)\n *    - much less data can be passed (so have to get your own data)\n *    - if pass ? after #, not querry string so no forced refresh\n *      and separate from querry string search links\n *\n * - local storage\n *    - cross origin safe\n *    - harder to accidentally edit but also harder to customize\n *    - invisible to user\n *    - persistent across browser sessions\n *    - significant size, more than block size!\n *\n * - session storage\n *    - same as local storage but erased between browser sessions*\n *\n */\n\n// url parameters after #:\n\n// value could have base58 or similar so it's encoded\n// keys are kept simple\n// encodeURIComponent() escapes all characters except: A-Z a-z 0-9 - _ . ! ~ * ' ( )\n// e.g. const randomDataFed1 = 'who1=' + encodeURIComponent('878b8=ABCD-=+_`' + Math.random().toFixed(2))\n\n// window.origin is url up to but not including '/' before the '#'\n// search params are found after '?' but before the '#'\n// window.location.pathname is path after window.origin but before #\n// then the rest is window.hash that includes # and everything after\n// '?' after # are not search params so can be separate\n\n// other way to update url:\n// window.history.replaceState({}, '', `${location.pathname}?${params}`);\n\n// sessionStorage is bound not only to the origin, but also to the browser tab\n// survives page refresh but not tab close and never seen by another tab\n// https://javascript.info/localstorage\n// combined with encryption sounds good\n// only data\n\n// Save data to sessionStorage\n// sessionStorage.setItem('key', 'value');\n// Get saved data from sessionStorage\n// let data = sessionStorage.getItem('key');\n// Remove saved data from sessionStorage\n// sessionStorage.removeItem('key');\n// Remove all saved data from sessionStorage\n// sessionStorage.clear();\n\n// props are unescaped and many times appear in html, most dangerous\n\n// https://owasp.org/www-community/xss-filter-evasion-cheatsheet\n\n// user feeds data into wallet component from any of following (if enabled):\n// 1. props (object with key:values inside props.txBuilder)\n// 2. querry strings (#*?key=value&key=value format, values with encodeURIcomponent encoding)\n// 3. session storage with (key:JSON.stringify(value))\n// 4. via forms in wallet gui\n// querry strings and session storage is wiped after data is copied\n// all new values are fed into same 'params' local state\n// 'params' key:values are processed and added in correct formats to 'txBuilder' state\n// 'txBuilder' state changes trigger updated calculations\n// user can check what's missing\n// user is notified if tx is ready (session storage)\n","import React from 'react'\nimport styles from './Spinner.module.css'\n\nexport const Spinner = (props: any): JSX.Element => {\n  return (\n    <div\n      className={[styles.spinner, props.className].join(' ')}\n      style={\n        props.width\n          ? ({\n              '--widthSpinner': props.width\n            } as React.CSSProperties)\n          : {}\n      }\n    >\n      <div className={styles.block}></div>\n      <div className={styles.chain}></div>\n    </div>\n  )\n}\n","import React from 'react'\nimport styles from './VisualAPI.module.css'\nimport { Spinner } from './../../general/Spinner'\n\nconsole.log('VisualApi component imported')\n\nconst LOOP_TIMEOUT = 2000 // ms when loop is considered timed out\n\n// persistent reference to capture latest state\nconst last: any = { props: {}, loops: {} }\n\n/**\n * API rate limited task queue with visual interface.\n * @param setProcessId - function to run when API task queue launches.\n * @param processId - stores the id of the running loop\n * @param tasks - array of current tasks to watch\n * @param setTasks - action to remove 1 task\n * @param delayBusy - ms of delay when tasks exist.\n * @param delayStandby - ms of delay when no tasks\n */\nexport const VisualAPI = (props: any) => {\n  // grab latest props on re-renders\n  if (props.processId !== undefined) last.props.processId = props.processId\n  last.props.setProcessId = props.setProcessId\n  last.props.tasks = props.tasks\n  last.props.setTasks = props.setTasks\n  last.props.setBusy = props.setBusy\n  last.props.busy = props.busy\n\n  /* -------------------------------------------------------------------------- */\n  /*                           api loop initialization                          */\n  /* -------------------------------------------------------------------------- */\n\n  // initialize api loop\n  React.useEffect(() => {\n    // processId is id (timestamp of creation) of loop that\n    // was registered externally to be only one running\n    const processId = last.props.processId // null or number\n\n    // only initialize if have all the parameters\n    if (\n      last.props.processId !== undefined &&\n      last.props.setProcessId !== undefined &&\n      last.props.tasks !== undefined &&\n      last.props.setTasks !== undefined &&\n      last.props.setBusy !== undefined &&\n      last.props.busy !== undefined\n    ) {\n      if (processId === null) {\n        // if no process id during rerender,\n        // it means the loop starting hasn't been confirmed yet\n        // so try to start\n        const { delayStandby, delayBusy } = props\n        ;(async () => {\n          const loop = await apiLoop({\n            delayBusy,\n            delayStandby\n          })\n\n          if (loop) {\n            // otherwise grab id and launch apiloop\n            const { id, launch } = loop()\n            launch()\n\n            // send loop id back to user\n            props.setProcessId(id)\n          }\n        })()\n      }\n    }\n  }, [props])\n\n  /* -------------------------------------------------------------------------- */\n  /*                                  rendering                                 */\n  /* -------------------------------------------------------------------------- */\n  return (\n    <>\n      <div\n        onClick={props.onClick}\n        className={[styles.wrapper, props.className || ''].join(' ')}\n      >\n        <div\n          className={styles.text}\n          onClick={() => {\n            // console log active async api loop object\n            console.log(\n              Object.keys(last.loops).map((loopKey: any) => ({\n                ...last.loops[loopKey],\n                timedOut: Date.now() - last.loops[loopKey].time > LOOP_TIMEOUT\n              }))\n            )\n          }}\n        >\n          {props.message}\n          {props.tasks.length > 0 ? (\n            <> busy ({props.tasks.length})</>\n          ) : (\n            <> ready</>\n          )}\n        </div>\n      </div>\n\n      {/* loading spinner */}\n      {props.tasks.length > 0 && <Spinner className={styles.spinner} />}\n    </>\n  )\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                  api loop                                  */\n/* -------------------------------------------------------------------------- */\n/**\n * Main API Loop.\n * Shorter delay { delayStandby: } is used when on standby (ms).\n * Longer delay { delayBusy: } is used with items in queue (ms).\n * @returns {\n *  id: (timestamp of initialization),\n *  launch: (function to launch loop)\n * }\n */\nconst apiLoop = async ({\n  delayStandby = 1000,\n  delayBusy = 5000,\n  id = null\n}: {\n  delayStandby?: number\n  delayBusy?: number\n  id?: number | null\n}) => {\n  // initialization w/o id with callback to launch loop with id\n  if (!id) {\n    const newId = Date.now()\n    return () => ({\n      id: newId,\n      launch: () => apiLoop({ delayStandby, delayBusy, id: newId })\n    })\n  }\n\n  // grab constants global to this module from time of import\n  const tasks = last.props.tasks\n  const setTasks = last.props.setTasks\n  const processId = last.props.processId\n\n  // terminate if you got request\n  if (checkSelfTerminate(id)) return undefined\n\n  // report if you're still alive\n  const time = Date.now()\n  const me = { id, time, terminate: false }\n  last.loops[id.toString()] = me\n\n  // check if the loop doesn't match processId externally\n  //if (processId && id !== processId) {\n  handleWrongProcessIds({ time, processId, id })\n  //}\n\n  /* -------------------------- task execution start -------------------------- */\n\n  const canRunTask = tasks && processId && id === processId && !last.props.busy\n\n  if (canRunTask) {\n    // check first item in queue\n    const task = tasks[0]\n\n    if (task) {\n      try {\n        // set as busy\n        last.props.setBusy(true)\n        // run task with rate limit passed along if necessary\n        console.log(\n          `apiloop #${id} executing api call`,\n          JSON.stringify(last, null, 2)\n        )\n        const res = await task.run({\n          delay: () => delay({ ms: delayBusy })\n        })\n        // send back solved value\n        task.resolve(res)\n      } catch (error) {\n        console.warn(error)\n        // reject promise\n        task.reject(error)\n      }\n      // remove first task from queue\n      setTasks(tasks.slice(1))\n\n      // force delay before letting go of busy state\n      // to prevent another async process\n      // from running it too often\n      delay({ ms: delayBusy })\n\n      // update you're not using it\n      last.props.setBusy(false)\n    }\n  }\n\n  /* --------------------------- task execution end --------------------------- */\n\n  // no tasks (array is empty) use standby rate\n  if (!canRunTask || tasks.length === 0) {\n    await delay({ ms: delayStandby })\n  }\n\n  // terminate if you got request\n  if (checkSelfTerminate(id)) return undefined\n\n  // loop self, no await, this call should terminate asap\n  apiLoop({ delayStandby, delayBusy, id })\n}\n\n/* -------------------------------------------------------------------------- */\n/*                             if wrong process id                            */\n/* -------------------------------------------------------------------------- */\n\nconst checkSelfTerminate = (id: number) => {\n  if (last.loops[id.toString()]?.terminate) {\n    // terminate. sad.\n    console.log(\n      `apiloop #${id} following termination request`,\n      JSON.stringify(last, null, 2)\n    )\n    return true\n  } else {\n    return false\n  }\n}\n\nconst handleWrongProcessIds = ({\n  time,\n  processId,\n  id\n}: {\n  [k: string]: number\n}) => {\n  // check if there are other loops registering recently\n\n  let isProcessIdLoopAlive = false\n  let isThisTheNewestLoop = true\n  Object.keys(last.loops).forEach((idKey: string) => {\n    const otherLoop = last.loops[idKey]\n    if (time - otherLoop.time < LOOP_TIMEOUT) {\n      // note if there's an existing active process loop\n      if (processId && otherLoop.id !== processId) isProcessIdLoopAlive = true\n    }\n\n    // terminate all older loops, note if you're newest\n    if (otherLoop.id < id) {\n      otherLoop.terminate = true\n      isThisTheNewestLoop = false\n    }\n  })\n  // if you're the last living loop that isn't timed out,\n  // update external processId reference\n  if (\n    processId && // process id exists\n    id !== processId && // you are not it yet\n    !isProcessIdLoopAlive && // neither is any other living loop\n    isThisTheNewestLoop // you are last loop\n  ) {\n    console.log(\n      `${id} is new api loop replacing ${processId}`,\n      JSON.stringify(last.loops, null, 2),\n      last\n    )\n    last.loops[id.toString()].terminate = false\n    last.props.setProcessId(id)\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                           event triggers for loop                          */\n/* -------------------------------------------------------------------------- */\n\n// send data this way instead of params (later)\n// export const sendDataToAPI = (data: any) => {\n//   return window.dispatchEvent(\n//     new CustomEvent('apiloop_alivecheck', {\n//       detail: { data }\n//     })\n//   )\n// }\n\n/**\n * Returns promise that resolves in given { ms: } or to give rate of { callsPerSec: }.\n * Don't forget to await it (again).\n */\nconst delay = (\n  { callsPerSec = undefined, ms = undefined } = { ms: 500 }\n): Promise<any> => new Promise(r => setTimeout(r, ms || 1000 / callsPerSec!))\n","import React from 'react'\nimport { Store } from '../../store/'\nimport { useHistory } from 'react-router-dom'\nimport styles from './Navbar.module.css'\nimport { Wallet } from './../wallet/Wallet'\nimport { VisualAPI } from './../wallet/VisualAPI'\nimport {\n  setApiAction,\n  addNewApiTaskAction,\n  changeChoicesBNSAction\n} from './../../store'\n\nimport { getFeeEstimatesAPI, txPushAPI } from './../../api/blockstream'\n\nconst MAX_BUTTONS_TO_SHOW_UNCOLLAPSED = 4\n\nexport const Navbar = (): JSX.Element => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n  // url changer\n  const history = useHistory()\n\n  // references for objects of interest\n  const refButton = React.useRef<HTMLDivElement>(null)\n  const toggleMenuButtonDiv = React.useRef<HTMLDivElement>(null)\n  const overflowMenuDiv = React.useRef<HTMLDivElement>(null)\n\n  // local state for navbar\n  const [nav, setNav] = React.useState({\n    buttonWidth: !!refButton.current\n      ? refButton.current.offsetWidth\n      : undefined,\n    showCollapsed: false,\n    resizeTimer: 0\n  })\n\n  // initialize nav bar measurements\n  if (!nav.buttonWidth) {\n    window.setTimeout(() => {\n      window.dispatchEvent(new Event('resize'))\n    }, 200)\n  }\n\n  // selection rules for buttons\n  const isCreatePage = useHistory().location.pathname === '/create'\n  const isHomePage = useHistory().location.pathname === '/'\n  const isAboutPage = useHistory().location.pathname === '/about'\n  const isSettingsPage = useHistory().location.pathname === '/settings'\n  // const isWalletPage = useHistory().location.pathname === '/wallet'\n\n  React.useEffect(() => {\n    // place overflow menu and show it\n    const updateMenuPosition = () => {\n      if (toggleMenuButtonDiv.current && overflowMenuDiv.current) {\n        const menu = overflowMenuDiv.current.getBoundingClientRect()\n        const button = toggleMenuButtonDiv.current.getBoundingClientRect()\n\n        const menuLeft = Math.round(\n          button.left + 0.5 * button.width - 0.5 * menu.width\n        )\n        const menuTop = Math.round(\n          button.top - menu.height - button.height * 0.4\n        )\n        overflowMenuDiv.current!.style.top = menuTop + 'px'\n        overflowMenuDiv.current!.style.left = menuLeft + 'px'\n        overflowMenuDiv.current!.style.opacity = 'var(--finalOpacity)'\n      }\n    }\n    window.setTimeout(updateMenuPosition, 100)\n\n    // resize event\n    const onResize = () => {\n      if (refButton.current) {\n        //adds a class to get rid of any animations / transitions while resizing just for that moment\n        document.body.classList.add('resize-animation-stopper')\n        clearTimeout(nav.resizeTimer)\n        const resizeTimer = setTimeout(() => {\n          document.body.classList.remove('resize-animation-stopper')\n        }, 400)\n        setNav({\n          ...nav,\n          resizeTimer: resizeTimer as any,\n          showCollapsed: false,\n          buttonWidth: refButton.current.getBoundingClientRect().width\n        })\n      }\n    }\n    // handle resize event listeners\n    window.addEventListener('resize', onResize)\n\n    // return happens on onloading of this div before rerender\n    return () => window.removeEventListener('resize', onResize)\n  }, [nav])\n\n  // click closes menu, outside or inside menu\n  React.useEffect(() => {\n    const onClickAnywhere = () => {\n      if (nav.showCollapsed) {\n        setNav({ ...nav, showCollapsed: false })\n      }\n    }\n    document.addEventListener('click', onClickAnywhere)\n    return () => {\n      document.removeEventListener('click', onClickAnywhere)\n    }\n  }, [nav])\n\n  /* ------------------------------ main buttons ------------------------------ */\n\n  const buttonSearch = [\n    <div\n      key={'search'}\n      ref={!isHomePage ? refButton : undefined}\n      className={[styles.button, isHomePage ? styles.selected : ''].join(' ')}\n      onClick={() => {\n        !isHomePage && history.push('/')\n      }}\n    >\n      search\n    </div>\n  ]\n\n  const buttonUser = [\n    <div\n      key={'create'}\n      ref={!!isHomePage ? refButton : undefined}\n      className={[styles.button, isCreatePage ? styles.selected : ''].join(' ')}\n      onClick={() => {\n        !isCreatePage && history.push('/create')\n      }}\n    >\n      owners\n    </div>\n  ]\n\n  const buttonSource = [\n    <div\n      key={'git'}\n      className={[styles.button].join(' ')}\n      onClick={() => {\n        window.open('https://github.com/ildarmgt/BitcoinNameSystem', '_blank')\n      }}\n    >\n      &lt;{'source'}&gt;\n    </div>\n  ]\n\n  const buttonAbout = [\n    <div\n      key={'about'}\n      className={[styles.button, isAboutPage ? styles.selected : ''].join(' ')}\n      onClick={() => {\n        !isAboutPage && history.push('/about')\n      }}\n    >\n      about\n    </div>\n  ]\n\n  const buttonSettings = [\n    <div\n      key={'settings'}\n      className={[styles.button, isSettingsPage ? styles.selected : ''].join(\n        ' '\n      )}\n      onClick={() => {\n        !isSettingsPage && history.push('/settings')\n      }}\n    >\n      settings\n    </div>\n  ]\n\n  const buttonsArray = [\n    isHomePage ? buttonUser : buttonSearch,\n    isHomePage ? buttonSearch : buttonUser,\n    buttonSource,\n    buttonAbout,\n    buttonSettings\n  ]\n\n  /* -------------------------------------------------------------------------- */\n  /*                           adding/removing buttons                          */\n  /* -------------------------------------------------------------------------- */\n\n  // using search button as metric, estimate how many buttons to show\n  const windowWidth = window.innerWidth\n  // calc(1*var(--s)), --s 0.5v 0.5w calculation\n  const stdSizer = 0.005 * (window.innerWidth + window.innerHeight)\n  const margin = 0.25 * stdSizer\n  const safeWidthFraction = 0.5 // fraction of screen to use\n  // adding extra 0.5 width for the ... button\n  const howManyButtonsFitSafely = nav.buttonWidth\n    ? Math.min(\n        Math.max(\n          Math.floor(\n            (windowWidth * safeWidthFraction) /\n              (nav.buttonWidth * 1.5 + 2 * margin)\n          ),\n          1\n        ),\n        MAX_BUTTONS_TO_SHOW_UNCOLLAPSED\n      )\n    : 1\n\n  const buttonsOnNavbar = buttonsArray.filter(\n    (btn: any, i: number) => i <= howManyButtonsFitSafely - 1\n  )\n  const buttonsOverflow =\n    buttonsArray.filter(\n      (btn: any, i: number) => i > howManyButtonsFitSafely - 1\n    ) || []\n\n  const TESTING = process.env.NODE_ENV === 'development'\n\n  /* -------------------------------------------------------------------------- */\n  /*                                   render                                   */\n  /* -------------------------------------------------------------------------- */\n\n  return (\n    <>\n      <div className={[styles.warning, 'dropshadow'].join(' ')}>\n        <input type='checkbox' id={'closewarning'} />\n        <label htmlFor='closewarning'>✕</label>\n        <div>\n          {TESTING && (\n            <>\n              development mode <br />\n            </>\n          )}\n          not reviewed for use\n        </div>\n      </div>\n\n      <div className={styles.leftCorner}>\n        <div className={styles.wallet}>\n          <Wallet\n            txBuilder={{\n              network: state.network,\n              feeRate: state.choices.feeRate\n            }}\n            export={{\n              feeRate: (cleanNumber: number) =>\n                changeChoicesBNSAction(state, dispatch, {\n                  feeRate: cleanNumber\n                })\n            }}\n            api={{\n              getFeeSuggestions: () =>\n                addNewApiTaskAction(state, dispatch, () =>\n                  getFeeEstimatesAPI(state.network, state.api.path)\n                ),\n              broadcastTx: (hex: string) =>\n                addNewApiTaskAction(state, dispatch, () =>\n                  txPushAPI(hex, state.network, state.api.path)\n                )\n            }}\n          />\n        </div>\n\n        {/* page numbers (on tx creating pages) */}\n        {isCreatePage && (\n          <div className={styles.pageNum}>Page {state.pageInfo.current}/6</div>\n        )}\n\n        <div className={styles.api}>\n          <VisualAPI\n            processId={state.api.processId}\n            setProcessId={(processId: any) => {\n              if (processId) setApiAction(state, dispatch, { processId })\n            }}\n            tasks={state.api.tasks}\n            setTasks={(tasks: any) => setApiAction(state, dispatch, { tasks })}\n            busy={state.api.running}\n            setBusy={(running: boolean) => {\n              setApiAction(state, dispatch, { running })\n              console.log('setbusy:', running)\n            }}\n            delayBusy={1000 / state.api.rateLimit}\n            delayStandby={100}\n            message={state.network}\n          />\n        </div>\n      </div>\n\n      <div className={styles.nav}>\n        {/* collapsed menu toggle button */}\n        {!!buttonsOverflow.length && (\n          <div\n            className={[\n              styles.collapsitron,\n              // styles.button,\n              nav.showCollapsed ? styles.menuShown : ''\n            ].join(' ')}\n            ref={toggleMenuButtonDiv}\n            onClick={() => {\n              setNav({ ...nav, showCollapsed: !nav.showCollapsed })\n            }}\n          >\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            <div className={styles.dots}>\n              <div />\n            </div>\n          </div>\n        )}\n\n        {/* regular nav bar */}\n        {buttonsOnNavbar\n          .map((thisButton: any, index: number) => {\n            return (\n              <React.Fragment key={'nevbarbuttons' + index}>\n                {thisButton[0]}\n              </React.Fragment>\n            )\n          })\n          .reverse()}\n      </div>\n\n      {/* collapsed menu window */}\n      {nav.showCollapsed && (\n        <div className={styles.overflowMenu} ref={overflowMenuDiv}>\n          <div>\n            {buttonsOverflow\n              .map((thisButton: any, index: number) => {\n                return (\n                  <React.Fragment key={'overflowbuttons' + index}>\n                    {thisButton[0]}\n                  </React.Fragment>\n                )\n              })\n              .reverse()}\n          </div>\n        </div>\n      )}\n    </>\n  )\n}\n\n// Hash history cannot PUSH the same path; a new entry will not be added to the history stack\n// Only issue is the warning in console, but that only exists in development mode so can be ignored.\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport { Home, About, Create, Wallet, Settings } from './pages/'\nimport { Navbar } from './components/Navbar'\nimport './css/app.css'\n\n// using for routing\nconst App = (): JSX.Element => {\n  // forwarding from url?name:\n\n  // onbtc.me?satoshi can now forward to onbtc.me/#/id/satoshi which resets to onbtc.me after search\n\n  // redirect to auto searching path routed in return and remove query from url\n  const searchParam = new URLSearchParams(window.location.search).keys().next()\n    .value\n  searchParam && console.log('search param detected after ?', searchParam)\n  // no forward slash before # in string is vital\n  searchParam &&\n    window.history.pushState(\n      {},\n      '',\n      window.location.pathname + '#/id/' + searchParam\n    )\n\n  return (\n    <>\n      {/* switch only renders first match instead of all matches */}\n      <div className={'content'}>\n        <Switch>\n          <Route path='/id/:alias' component={Home} />\n          <Route exact path='/id/' component={Home} />\n          <Route path='/about' component={About} />\n          <Route path='/create' component={Create} />\n          <Route path='/wallet' component={Wallet} />\n          <Route path='/settings' component={Settings} />\n          <Route path='/:noise' component={Home} />\n          <Route exact path='/' component={Home} />\n        </Switch>\n      </div>\n      <Navbar />\n      {/* <Route exact path=\"/\" render={() => <Home />} /> */}\n    </>\n  )\n}\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter } from 'react-router-dom'\nimport './css/global.css'\nimport App from './App'\nimport { StoreProvider } from './store/'\nimport { DevPanel } from './components/DevPanel'\n\n// Using for store access and hash router base\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider>\n      <HashRouter>\n        <App />\n      </HashRouter>\n      <DevPanel />\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\n// import * as serviceWorker from './serviceWorker';\n// serviceWorker.unregister();\n","import React, { useState, useEffect } from 'react'\nimport styles from './DevPanel.module.css'\nimport { Store } from '../../store/'\nimport { ActionTypes } from './../../interfaces/'\n\ninterface I_State {\n  blShow: boolean\n  setShow: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nexport const DevPanel = (props: any): JSX.Element => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  // now can show dev panel whenever in npm run start instead of deployed build\n  const TESTING = process.env.NODE_ENV === 'development'\n\n  // store if DevPanel is hidden\n  const [hidden, setHidden] = useState<boolean>(TESTING)\n\n  // reruns to reattach keyup event to toggle hidden class\n  useEffect(() => {\n    const onDevKey = (e: any) => {\n      if (e.key === '`') {\n        setHidden(!hidden)\n      } else {\n        // give focus back to the input bar\n        // if (document.activeElement?.id !== 'txtSearch') {\n        //   const txtSearch = document.getElementById(\n        //     'txtSearch'\n        //   ) as HTMLTextAreaElement\n        //   txtSearch?.focus()\n        // }\n      }\n    }\n    document.addEventListener('keyup', onDevKey)\n    return () => {\n      document.removeEventListener('keyup', onDevKey)\n    }\n  }, [hidden])\n\n  const onOutlineClick = () => {\n    const id = 'outliner'\n    const sheet: HTMLElement | null = document.getElementById(id)\n    if (!sheet) {\n      const outlineCss = '* {box-shadow: 0 0 0 1px red;}'\n      const style = document.createElement('style')\n      style.type = 'text/css'\n      style.id = id\n      style.appendChild(document.createTextNode(outlineCss))\n      document.head.appendChild(style)\n    } else {\n      sheet.parentNode?.removeChild(sheet)\n    }\n  }\n\n  // const dlState = () => {\n  //   const data =\n  //     'text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(state))\n  //   const a = document.createElement('a')\n  //   a.href = 'data:' + data\n  //   a.download = 'test.json'\n  //   a.innerHTML = 'download JSON'\n  //   const container = document.getElementById('container')\n  //   container?.appendChild(a)\n  //   a.click()\n  //   a.remove()\n  // }\n\n  /* -------------------------------------------------------------------------- */\n  /*                                   render                                   */\n  /* -------------------------------------------------------------------------- */\n\n  return (\n    <div\n      className={[styles.divDev, !hidden ? styles.hidden : ''].join(' ')}\n      {...props}\n    >\n      <div>\n        <b>DevPanel</b>\n      </div>\n\n      {/* <div\n        className={styles.button}\n        onClick={() => {\n          dlState()\n        }}\n      >\n        Save File State\n      </div>\n\n      <div\n        className={styles.button}\n        onClick={() => {\n          console.log(json)\n          dispatch({ type: ActionTypes.LOAD_STATE, payload: json })\n        }}\n      >\n        Load File State\n      </div> */}\n\n      <div\n        className={[styles.btnOutline, styles.button].join(' ')}\n        onClick={onOutlineClick}\n      >\n        Outline\n      </div>\n\n      <div\n        className={[styles.button].join(' ')}\n        onClick={() => {\n          localStorage.setItem('state', JSON.stringify(state))\n        }}\n      >\n        Save localStorage\n      </div>\n\n      <div\n        className={[styles.button].join(' ')}\n        onClick={() => {\n          const state = JSON.parse(localStorage.getItem('state') || '')\n          if (state) {\n            dispatch({\n              type: ActionTypes.LOAD_STATE,\n              payload: { ...state, api: { ...state.api, processId: null } }\n            })\n          }\n        }}\n      >\n        Load localStorage\n      </div>\n\n      <div\n        className={styles.button}\n        onClick={() => {\n          console.log(state)\n        }}\n      >\n        Console State\n      </div>\n    </div>\n  )\n}\n","import bs58check from 'bs58check'\nimport { newUser, newState } from './initialState'\nimport {\n  OWNERSHIP_DURATION_BY_BLOCKS,\n  MIN_BURN,\n  MIN_NOTIFY,\n  CHALLENGE_PERIOD_DURATION_BY_BLOCKS,\n  CHALLENGE_MIN_MULTIPLY\n} from './constants'\nimport {\n  I_User,\n  I_Forward,\n  I_BnsState,\n  I_TX,\n  I_UTXO,\n  I_Bid,\n  BnsBidType\n} from './types/'\nimport { decryptToBuffer } from './cryptography'\nimport { deterministicRandomBid } from './deterministicRandom'\n\n/* -------------------------------------------------------------------------- */\n/*                              helper functions                              */\n/* -------------------------------------------------------------------------- */\n\n/**\n * Returns true if owner exists.\n */\nexport const existsCurrentOwner = (st: I_BnsState): boolean =>\n  st.domain.currentOwner !== ''\nexport const existsUser = (st: I_BnsState, address: string): boolean =>\n  !!st.domain.users[address]\n\nexport const createNewUser = (st: I_BnsState, address: string): void => {\n  // create new user\n  st.domain.users[address] = JSON.parse(JSON.stringify(newUser))\n  // update its address for easy access\n  st.domain.users[address].address = address\n}\n\nexport const getOwnerAddress = (st: I_BnsState): string =>\n  st.domain.currentOwner || ''\n\nexport const setOwner = (st: I_BnsState, newOwnerAddress: string) => {\n  st.domain.currentOwner = newOwnerAddress\n}\n\nexport const getUser = (st: I_BnsState, address: string): I_User => {\n  if (!existsUser(st, address)) {\n    console.warn(\n      'You called',\n      getUser,\n      'without checking if user exists via existsUser()'\n    )\n  }\n  return st.domain.users[address]\n}\n\nexport const getOwner = (st: I_BnsState) => {\n  const ownerAddress = getOwnerAddress(st)\n  if (!ownerAddress) return undefined\n  if (!existsUser(st, ownerAddress)) return undefined\n  return getUser(st, ownerAddress)\n}\n\nexport const updateOwnerHistory = (st: I_BnsState): void => {\n  st.domain.ownersHistory.push(\n    getOwner(st) || JSON.parse(JSON.stringify(newUser))\n  )\n}\n\nexport const clearOwner = (st: I_BnsState): void => {\n  st.domain.currentOwner = ''\n}\n\nexport const getCurrentHeight = (st: I_BnsState): number =>\n  st.chain?.currentHeight || 0\nexport const getParsedHeight = (st: I_BnsState): number =>\n  st.chain?.parsedHeight || 0\nexport const setParsedHeight = (st: I_BnsState, height: number): void => {\n  st.chain && (st.chain.parsedHeight = height)\n}\n\nexport const getNotificationAddress = (st: I_BnsState): string =>\n  st.domain.notificationAddress || ''\n\nexport const getLastOwnerBurnedValue = (st: I_BnsState): number =>\n  getOwner(st)?.burnAmount || 0\n\nexport const isOwnerExpired = (st: I_BnsState): boolean => {\n  if (!existsCurrentOwner(st)) return true // no owner same as expired\n  const owner = getOwner(st)\n  if (!owner) {\n    console.log(\n      'isOwnerExpired: owner exists but no user with such address stored'\n    )\n    return true\n  }\n  const blocksSinceUpdate = getParsedHeight(st) - owner.winHeight\n  return blocksSinceUpdate > OWNERSHIP_DURATION_BY_BLOCKS\n}\n\n/**\n * Returns nonce of user based on address.\n * If no previous user history for domain, nonce is 0, otherwise last tx height.\n */\nexport const getNonce = (st: I_BnsState, address: string): number => {\n  const doesExist = existsUser(st, address)\n  if (!doesExist) {\n    return 0\n  } else {\n    const user = getUser(st, address)\n    return user.nonce\n  }\n}\n\n// ===== tx functions (getters) =====================\n\nexport const getTxTimestamp = (tx: I_TX): number => tx.status.block_time || 0\nexport const getTxHeight = (tx: I_TX): number => tx.status.block_height || 0\n\nexport const getTxOutput0BurnValue = (tx: I_TX): number =>\n  tx.vout[0]?.value || 0\nexport const getTxOutput0Data = (tx: I_TX): string => {\n  if (isOpreturnOutput0(tx)) {\n    // remove 'OP_RETURN OP_PUSHBYTES_5 ' from it and return the rest\n    return tx.vout[0].scriptpubkey_asm\n      .split(' ')\n      .slice(2)\n      .join('')\n  }\n  return ''\n}\n\nexport const getTxOutput1NotifyValue = (tx: I_TX): number =>\n  tx.vout[1]?.value || 0\nexport const getTxOutput1NotifyAddress = (tx: I_TX): string =>\n  tx.vout[1]?.scriptpubkey_address || ''\n\nexport const getTxInput0SourceUserAddress = (tx: I_TX): string =>\n  tx.vin[0]?.prevout.scriptpubkey_address || ''\n\n// ======= update state from tx (setters) ========\n\n// update the info for the source user of the tx within bns state\n// when ran a second time, it simply updates nonce for post-tx value\nexport const updateSourceUserFromTx = (st: I_BnsState, tx: I_TX): void => {\n  const fromAddress = getTxInput0SourceUserAddress(tx)\n\n  // create new user if not already one of users\n  // if (!(fromAddress in st.domain.users)) {\n  if (!existsUser(st, fromAddress)) {\n    // create new user object by copying values of newUser object\n    createNewUser(st, fromAddress)\n    console.log('new source created:', fromAddress)\n  }\n\n  // update user heights/times\n  const user = st.domain.users[fromAddress]\n  user.nonce = user.updateHeight\n  user.updateHeight = getTxHeight(tx)\n}\n\nexport const addToUserForwards = (\n  st: I_BnsState,\n  fromAddress: string,\n  forwardsInThisTx: Array<I_Forward>\n) => {\n  const user = getUser(st, fromAddress)\n  user.forwards = [...user.forwards, ...forwardsInThisTx]\n}\n\n// parse embedded data and store in forwards\nexport const readEmbeddedData = (st: I_BnsState, tx: I_TX): void => {\n  // only go on if there is op_return with embedded data on output 0\n  if (!isOpreturnOutput0(tx)) {\n    console.log(getTxHeight(tx), ': no op_return found for txid')\n    return undefined\n  }\n\n  // get useful object references\n  const fromAddress = getTxInput0SourceUserAddress(tx)\n  const user = getUser(st, fromAddress)\n  const nonce = getNonce(st, fromAddress).toString()\n\n  // get embedded raw data hex\n  const embeddedDataHex = getTxOutput0Data(tx)\n  // convert hex to a buffer\n  const embeddedDataBuffer = Buffer.from(embeddedDataHex, 'hex')\n\n  // deterministic symmetric decryption key from nonce\n  const decryptionKey = st.domain.domainName + user.address + nonce\n  console.log(\n    '%cembeded data found:',\n    'color: green;',\n    getTxHeight(tx),\n    '  decryption key (w/ added spaces and pre hash): ',\n    st.domain.domainName,\n    user.address,\n    nonce\n  )\n\n  // decrypt embedded data buffer to decrypted buffer\n  const embeddedDataBufferDecrypted = decryptToBuffer(\n    embeddedDataBuffer,\n    decryptionKey\n  )\n  // console.log(\n  //   '',\n  //   getTxHeight(tx),\n  //   '  raw buffer to utf8:',\n  //   `\"${embeddedDataBufferDecrypted.toString('utf8')}\"`\n  // )\n\n  // split by spaces into array\n  const separator = Buffer.from(' ')\n  const emptyBuffer = Buffer.from('')\n  const embeddedDataBufferArray: Buffer[] = []\n  for (let i = 0; i < embeddedDataBufferDecrypted.length; i++) {\n    // go byte by byte through the decrypted buffer\n    const thisByte = embeddedDataBufferDecrypted.slice(i, i + 1)\n    // check if this byte is the separator\n    const isSeparator = Buffer.compare(separator, thisByte) === 0\n    // initialize new separated buffer\n    if (i === 0) embeddedDataBufferArray.push(emptyBuffer)\n    // on separators initialize another separated buffer\n    if (isSeparator) embeddedDataBufferArray.push(emptyBuffer)\n    // on non-separators add current byte to last buffer\n    if (!isSeparator) {\n      // if not separator or just starting, add this byte to the current separated buffer\n      const wordIndex = embeddedDataBufferArray.length - 1\n      embeddedDataBufferArray[wordIndex] = Buffer.concat([\n        embeddedDataBufferArray[wordIndex],\n        thisByte\n      ])\n    }\n  }\n  console.log(\n    'array of embedded buffers (logged as utf8):',\n    embeddedDataBufferArray,\n    '\\nseparated:',\n    embeddedDataBufferArray.reduce(\n      (outputText: string, sepBuffer: Buffer) =>\n        `${outputText} [${sepBuffer.toString('utf8')}]`,\n      ''\n    )\n  )\n  // const embeddedDataUtf8Array = embeddedDataUtf8.split(' ')\n\n  // collect all forwards in this tx\n  const forwardsInThisTx: Array<I_Forward> = []\n\n  embeddedDataBufferArray.forEach((word: Buffer, index: number) => {\n    // everything must be space separated in pairs\n    // so single block might mean failed decryption or\n    // last unpaired block might be padding or future versioning\n    // grabbing only odd and 1 before it values, only grabbing pairs\n    if (index % 2 === 1) {\n      const networkPiece = embeddedDataBufferArray[index - 1].toString('utf8')\n      const forwardingAddressPiece =\n        networkPiece === '?'\n          ? bs58check.encode(word) // if it's stealth address so base58check\n          : word.toString('utf8') // otherwise it's just utf8\n\n      const thisForward = {\n        // encoding text here before inserting it into global state\n        // encodeURIComponent() escapes all characters except: A-Z a-z 0-9 - _ . ! ~ * ' ( )\n        // majority of usecases do not need special characters\n        // for special cases users can just\n        // create a rule for specific network to decodeURIComponent & handle carefully\n        network: encodeURIComponent(networkPiece),\n        address: encodeURIComponent(forwardingAddressPiece),\n        updateHeight: getTxHeight(tx),\n        updateTimestamp: getTxTimestamp(tx)\n      }\n      forwardsInThisTx.push(thisForward)\n    }\n  })\n\n  // update forwards on the user\n  addToUserForwards(st, fromAddress, forwardsInThisTx)\n\n  console.log('%c------------------------------------------\\n', 'color: green;')\n}\n\n// ===== rule checks (getters) =====\n\n// Describe:    2 outputs minimum\nexport const atLeastTwoOutputs = (tx: I_TX): boolean => tx.vout.length >= 2\n\n// Describe:    Is [0] output OP_RETURN type\nexport const isOpreturnOutput0 = (tx: I_TX): boolean =>\n  tx.vout[0].scriptpubkey_asm.split(' ')[0] === 'OP_RETURN'\n\n// Describe:    Is [1] output this domain's notification address?\nexport const isNotify = (st: I_BnsState, tx: I_TX): boolean =>\n  getTxOutput1NotifyAddress(tx) === getNotificationAddress(st)\n\n// Describe:    At least minimum amount used in notification output? (Dust level is main danger)\nexport const didNotifyMin = (tx: I_TX): boolean =>\n  getTxOutput1NotifyValue(tx) >= MIN_NOTIFY\n\n// Describe:    Is address the current domain owner?\nexport const isAddressTheCurrentOwner = (\n  st: I_BnsState,\n  address: string\n): boolean => getOwnerAddress(st) === address\n\n// Describe:    Is tx sender the current domain owner (input [0], id'ed by address)?\nexport const isSenderTheCurrentOwner = (st: I_BnsState, tx: I_TX): boolean =>\n  getOwnerAddress(st) === getTxInput0SourceUserAddress(tx)\n\n// Describe:    At least minimum amount burned?\nexport const didBurnMin = (tx: I_TX): boolean =>\n  getTxOutput0BurnValue(tx) >= MIN_BURN\n\n// Describe:    Burned at least as much as previously burnt\nexport const burnedPreviousRateMin = (st: I_BnsState, tx: I_TX): boolean =>\n  getTxOutput0BurnValue(tx) >= getLastOwnerBurnedValue(st)\n\n/**\n * Checks if this command exists at tx height from tx user.\n */\nexport const isCommandCalled = (\n  st: I_BnsState,\n  tx: I_TX,\n  command: string\n): boolean => {\n  return !!getCommandCalled(st, tx, command)\n}\n\n/**\n * Gets command called in most recent forwards from user of tx.\n */\nexport const getCommandCalled = (\n  st: I_BnsState,\n  tx: I_TX,\n  command: string\n): I_Forward | undefined => {\n  // get tx height (only current height is relevant for commands)\n  const txHeight = getTxHeight(tx)\n  // who sent the tx\n  const fromAddress = getTxInput0SourceUserAddress(tx)\n  // get user object of the tx sender\n  const user = getUser(st, fromAddress)\n  // array of forwards\n  const forwards = user.forwards\n\n  // scan height and name of each forward\n  for (const thisForward of forwards) {\n    const network = thisForward.network\n    const forwardHeight = thisForward.updateHeight\n    if (forwardHeight === txHeight) {\n      // commands are identified via a string (starts with !)\n      if (network.startsWith(command)) {\n        // found it so return in\n        return thisForward\n      }\n    }\n  }\n\n  return undefined\n}\n\n// Describe: update current derivedUtxoList from tx\n// Since utxo in question are the notificaiton address utxo,\n// they will always be part of txHistory\nexport const updateUtxoFromTx = (st: I_BnsState, tx: I_TX): void => {\n  const notificationAddress = getNotificationAddress(st)\n\n  // scan every tx input for notification address and remove those from utxo set\n  tx.vin.forEach((input: any) => {\n    // can scan by previous address or by current utxo list's txid+vout pairs\n    if (input.prevout.scriptpubkey_address === notificationAddress) {\n      const txid = input.txid\n      const vout = input.vout\n      // find first match with these values in derivedUtxoList\n      const spentUtxoIndex = st.domain.derivedUtxoList.findIndex(\n        utxo => utxo.txid === txid && utxo.vout === vout\n      )\n      // remove element at the position found\n      // utxo can only be spent once so first match ok\n      st.domain.derivedUtxoList.splice(spentUtxoIndex, 1)\n    }\n  })\n\n  // scan every tx output for notification address and add those to utxo set\n  tx.vout.forEach((output: any, vout: number) => {\n    if (output.scriptpubkey_address === notificationAddress) {\n      // if output address is notification address, it's always new utxo\n      // mark from address as address @ input 0 of the tx\n      st.domain.derivedUtxoList.push({\n        txid: tx.txid,\n        vout: vout,\n        status: tx.status,\n        value: output.value,\n        from_scriptpubkey_address: getTxInput0SourceUserAddress(tx)\n      } as I_UTXO)\n    }\n  })\n}\n\n// returns true only if there are no utxo (at notification address)\n// where the sender address (input[0] in the past) is the same as\n// the sender address of this tx (input[0])\nexport const noUnspentUserNotificationsUtxo = (\n  st: I_BnsState,\n  tx: I_TX\n): boolean => {\n  // sender address of this tx\n  const userOfTxAddress = getTxInput0SourceUserAddress(tx)\n  const txHeight = getTxHeight(tx)\n\n  // go through all derived utxo and make sure none are from this sender\n  for (const utxo of st.domain.derivedUtxoList) {\n    // user that created this utxo\n    const userThatCreatedThisUtxo = utxo.from_scriptpubkey_address\n\n    // block height of utxo creation\n    const utxoHeight = utxo.status.block_height\n\n    // only utxo formed before this tx height matter\n    // this tx would've likely created a new utxo that shouldn't count\n    const isInThePast = utxoHeight < txHeight\n\n    // all utxo in derived set should have from address\n    !userThatCreatedThisUtxo &&\n      console.log(\n        'st.domain.derivedUtxoList for some reason has undefined from_scriptpubkey_address'\n      )\n    // if even 1 matches, the check failed\n    if (userThatCreatedThisUtxo === userOfTxAddress && isInThePast) {\n      return false\n    }\n  }\n\n  // only gets this far if no utxo creators match our current tx user\n  return true\n}\n\n/**\n * Reset bidding.\n */\nexport const resetBidding = (st: I_BnsState): void => {\n  st.domain.bidding = {\n    ...JSON.parse(JSON.stringify(newState.domain.bidding))\n  }\n}\n\n/**\n * Start bidding period.\n */\nexport const startBidding = (st: I_BnsState, tx: I_TX, type: BnsBidType) => {\n  const txHeight = getTxHeight(tx)\n\n  // reset bidding object just in case\n  resetBidding(st)\n\n  // start bidding pediod and set type\n  st.domain.bidding.startHeight = txHeight\n  st.domain.bidding.endHeight = txHeight + CHALLENGE_PERIOD_DURATION_BY_BLOCKS\n  st.domain.bidding.type = type\n\n  console.log(\n    'Bidding period started at height',\n    txHeight,\n    'until',\n    txHeight + CHALLENGE_PERIOD_DURATION_BY_BLOCKS\n  )\n}\n\n/**\n * Add new bid.\n */\nexport const addBid = (st: I_BnsState, tx: I_TX, type: BnsBidType): void => {\n  const userAddress = getTxInput0SourceUserAddress(tx)\n  const txHeight = getTxHeight(tx)\n  const burnValue = getTxOutput0BurnValue(tx)\n\n  // if bidding hasn't started\n  if (txHeight > st.domain.bidding.endHeight) {\n    startBidding(st, tx, type)\n  }\n\n  // add this new bid to bids\n  const bids = st.domain.bidding.bids\n  const bid: I_Bid = {\n    height: txHeight,\n    timestamp: getTxTimestamp(tx),\n    address: userAddress,\n    value: burnValue,\n    valueLeftToRefund: burnValue, // initially same as value\n    blockHash: tx.status.block_hash\n  }\n  bids.push(bid)\n\n  console.log('addBid(): New bid from', userAddress, 'for', burnValue)\n}\n\n/**\n * Return true only if bidding was happening and hasn't been resolved yet into a winner.\n */\nexport const isBiddingOver = (st: I_BnsState): boolean => {\n  // current parsed height (updated elsewhere)\n  const parsedHeight = st.chain!.parsedHeight\n\n  const biddingType = st.domain.bidding.type\n  const endHeight = st.domain.bidding.endHeight\n\n  // real bidding type still assigned (which means bidding WAS happening)\n  // but parsed height is at or above end height for bidding (means bidding ended)\n  if (biddingType !== BnsBidType.NULL && endHeight <= parsedHeight) {\n    return true\n  }\n  return false\n}\n\n/**\n * Return true if there's a current bidding period.\n */\nexport const isBiddingOngoing = (st: I_BnsState): boolean => {\n  if (!st.chain) throw new Error('called st.chain without it defined')\n\n  // current parsed height (updated elsewhere)\n  const parsedHeight = st.chain!.parsedHeight\n\n  const biddingType = st.domain.bidding.type\n  const endHeight = st.domain.bidding.endHeight\n  const startHeight = st.domain.bidding.startHeight\n\n  // real bidding type still assigned but height is at or above end height for bidding\n  if (\n    biddingType !== BnsBidType.NULL &&\n    parsedHeight < endHeight &&\n    parsedHeight >= startHeight\n  ) {\n    console.log('', parsedHeight, 'Action falls within bidding period.')\n    return true\n  }\n  return false\n}\n\n/**\n * Return true if address is one of the bidders.\n */\nexport const isAddressACurrentBidder = (\n  st: I_BnsState,\n  address: string\n): boolean => {\n  if (!isBiddingOngoing) return false\n\n  for (let i = 0; i < st.domain.bidding.bids.length; i++) {\n    const bid = st.domain.bidding.bids[i]\n    // if any bid address matches address provided return true\n    if (bid.address === address) return true\n  }\n\n  return false // no match found\n}\n\n/**\n * Return true if user is one of the bidders.\n */\nexport const isSenderACurrentBidder = (st: I_BnsState, tx: I_TX): boolean => {\n  const userAddress = getTxInput0SourceUserAddress(tx)\n  return isAddressACurrentBidder(st, userAddress)\n}\n\n/**\n * Subtract refunded amounts from active bids.\n */\nexport const subtractRefunds = (st: I_BnsState, tx: I_TX): void => {\n  const txUserAddress = getTxInput0SourceUserAddress(tx)\n  const bids = st.domain.bidding.bids\n\n  // create paidTo object with addresses as key for all refunds in the tx\n  // (step to prevent O(N^2) scaling)\n  const paidTo: { [address: string]: number } = {}\n  for (const output of tx.vout) {\n    const toAddress = output.scriptpubkey_address\n    const toAmount = output.value\n\n    if (\n      toAddress !== undefined && // type of output that has an target address\n      txUserAddress !== toAddress // isn't from the same address (sender === receiver is change, not refund)\n    ) {\n      // set paid amount or add onto existing\n      paidTo[toAddress]\n        ? (paidTo[toAddress] += toAmount)\n        : (paidTo[toAddress] = toAmount)\n    }\n  }\n  // paidTo object done\n\n  // Apply paid object onto all bids\n  for (let i = 0; i < bids.length; i++) {\n    const thisBid = bids[i]\n    const thisBidAddress = thisBid.address\n\n    console.assert(\n      thisBid.height >= st.domain.bidding.startHeight,\n      `Bid height outside allowed range.`\n    )\n    console.assert(\n      thisBid.height < st.domain.bidding.endHeight,\n      `Bid height outside allowed range.`\n    )\n\n    // if paid to this address\n    if (paidTo[thisBidAddress] !== undefined) {\n      // each counted refund falls within range\n      // [0, min(total refunds paid, left to refund for this bid)]\n      // so valueLeftToRefund is 0 or positive only\n      const refund = Math.max(\n        Math.min(paidTo[thisBidAddress], thisBid.valueLeftToRefund),\n        0\n      )\n\n      // subtract out the refund from both paid amount and valueLeftToRefund\n      thisBid.valueLeftToRefund -= refund\n      paidTo[thisBidAddress] -= refund\n\n      console.log(\n        `Height ${getTxHeight(\n          tx\n        )}: ${txUserAddress} refunded ${refund} to ${thisBidAddress} leaving ${\n          thisBid.valueLeftToRefund\n        } to be refunded`\n      )\n    }\n  }\n}\n\n/**\n * Return array of bids that have not been yet fully refunded.\n */\nexport const unrefundedBidsOnly = (st: I_BnsState): Array<I_Bid> => {\n  const bids = st.domain.bidding.bids\n\n  const unrefundedBids: Array<I_Bid> = bids.filter((thisBid: I_Bid) => {\n    return thisBid.valueLeftToRefund > 0\n  })\n\n  return unrefundedBids\n}\n\n/**\n * Return object with only addresses to refund as key and amounts left to refund as value.\n */\nexport const unrefundedAmounts = (\n  st: I_BnsState\n): { [key: string]: number } => {\n  const unrefundedBids = unrefundedBidsOnly(st)\n\n  const amounts = unrefundedBids.reduce((refundsLeft: any, thisBid: I_Bid) => {\n    const address = thisBid.address\n    const amount = thisBid.valueLeftToRefund\n    // sums up amount left to refund per address\n    return refundsLeft[address]\n      ? { ...refundsLeft, [address]: refundsLeft[address] + amount }\n      : { ...refundsLeft, [address]: amount }\n  }, {})\n\n  // console.log('unrefunded amounts:', amounts)\n\n  return amounts\n}\n\n/**\n * Set new owner from bidding period.\n * Note: can be called unknown number of blocks after bidding period ended.\n */\nexport const endBidding = (st: I_BnsState): void => {\n  // Rules for who wins bidding:\n  // 1. List of all bids and how much they paid - have that in domain.bidding.bids.\n  // 2. Remove all bids that have any prior (lower height) bids from other addresses that were not refunded.\n  // 3. First potential winner is the first bid.\n  //    At same height, winner is derived from deterministic pseudorandom function (using block's hash) weighted by bid amount.\n  //    At increasing heights, new winner is who bid at least CHALLENGE_MIN_MULTIPLY times prior (lower height) winner's bid.\n\n  // Step (1)\n  const bids = st.domain.bidding.bids\n  const unrefundedBids = unrefundedBidsOnly(st)\n\n  // Step (2)\n\n  // get all bids that refunded priors\n  const goodBidsThatRefunded: Array<I_Bid> = []\n\n  for (const thisBid of bids) {\n    console.assert(\n      thisBid.height >= st.domain.bidding.startHeight,\n      `Bid height outside allowed range.`\n    )\n    console.assert(\n      thisBid.height < st.domain.bidding.endHeight,\n      `Bid height outside allowed range.`\n    )\n\n    const thisBidHeight = thisBid.height\n\n    // check if any unrefunded past bids\n    const hasUnrefundedPastBids = unrefundedBids.some(\n      (thisUnrefundedBid: I_Bid) => {\n        // return false if this isn't an unrefunded bid that matters\n\n        // must not have unrefunded bids at lower height\n        if (thisUnrefundedBid.height >= thisBidHeight) return false\n        // only different addresses matter\n        if (thisUnrefundedBid.address === thisBid.address) return false\n\n        return true\n      }\n    )\n\n    // if no unrefunded bids in the past, add to goodBidsThatRefunded\n    if (!hasUnrefundedPastBids) {\n      goodBidsThatRefunded.push(thisBid)\n      console.log(\n        `endBidding: at height ${thisBidHeight}, this bid fully refunded previous and counts`,\n        thisBid\n      )\n    } else {\n      console.log(\n        `endBidding: at height ${thisBidHeight}, this bid failed to refund`,\n        thisBid\n      )\n    }\n  }\n\n  // Step (3)\n  // now with only a list of good bids with refunded priors, parse through them\n  // to check that each bid at higher height paid/burned at least *(CHALLENGE_MIN_MULTIPLY) of next lower height bid\n  let winner: I_Bid = {\n    address: '',\n    height: 0,\n    timestamp: 0,\n    value: 0,\n    valueLeftToRefund: 0,\n    blockHash: ''\n  }\n  let validBidsAtLastHeight: Array<I_Bid> = []\n  let lastHeight = 0\n  const maxBidIndex = goodBidsThatRefunded.length - 1\n  for (let bidIndex = 0; bidIndex <= maxBidIndex; bidIndex++) {\n    const thisBid = goodBidsThatRefunded[bidIndex]\n\n    // get height from bid\n    const thisHeight = thisBid.height\n\n    if (thisBid.height > lastHeight) {\n      // this means height went up so need to resolve previous heights:\n      // set  winner from X possible winners in the array from previous height\n      // if no entries, no change to winner\n\n      // get winner from array of previous bid height winners\n      winner = deterministicRandomBid(validBidsAtLastHeight) || winner\n\n      // reset validBidsAtLastHeight\n      validBidsAtLastHeight = []\n    }\n\n    // only push into bids array if it meets minimum criteria\n    // compared with winner of lower height calculated this round or before\n    const hasThisBidPaidEnough =\n      thisBid.value >= CHALLENGE_MIN_MULTIPLY * winner.value\n\n    if (hasThisBidPaidEnough) {\n      validBidsAtLastHeight.push(thisBid)\n    }\n\n    // set last height based on this parsed bid\n    lastHeight = thisHeight\n\n    // final item update only (since there's no more bids after to step height)\n    if (bidIndex === maxBidIndex) {\n      // calc winner from array of same height bids, if possible\n      winner = deterministicRandomBid(validBidsAtLastHeight) || winner\n    }\n  }\n\n  // if there's a winner (should be, at least initial bid)\n  if (winner.address !== '') {\n    // set winner to owner\n    setOwner(st, winner.address)\n    getOwner(st)!.burnAmount = winner.value\n    getOwner(st)!.winHeight = winner.height\n    getOwner(st)!.winTimestamp = winner.timestamp\n    console.log(\n      '',\n      winner.height,\n      'Bidding winner and new owner is',\n      winner.address\n    )\n\n    // resets all active bidding info, sets it to null values\n    resetBidding(st)\n  } else {\n    throw new Error(\n      'There should be no cases without a winner since at least 1st bid wins'\n    )\n  }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"InputForm_wrapper__3RO9S\",\"shiftRight\":\"InputForm_shiftRight__16j42\",\"label\":\"InputForm_label__2VQbz\",\"textarea\":\"InputForm_textarea__3jY9y\",\"button\":\"InputForm_button__1gilQ\",\"bonusInformation\":\"InputForm_bonusInformation__J6QjS\",\"invisible\":\"InputForm_invisible__1fPsX\",\"suggestions\":\"InputForm_suggestions__gSVA1\",\"suggestions__item\":\"InputForm_suggestions__item__LcFcw\",\"suggestions__separator\":\"InputForm_suggestions__separator__3DV7k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lblMainTitle\":\"HomeContent_lblMainTitle__1LqCG\",\"results\":\"HomeContent_results__3QLFo\",\"divSearch\":\"HomeContent_divSearch__3dKw5\",\"txtSearch\":\"HomeContent_txtSearch__3HpSp\",\"lblMainTitleAfter\":\"HomeContent_lblMainTitleAfter__J9CsB\",\"divSearchAfter\":\"HomeContent_divSearchAfter__2MAMf\",\"wrapper\":\"HomeContent_wrapper__mPINc\"};","import crypto from 'crypto'\n\n/**\n * Encrypt - symmetric - aes-256-crt\n * @param   {string}  stringText      To be encrypted (up to 80 bytes)\n * @param   {string}  stringForKey    Derive Key from (not final Key).\n * @param   {string}  stringForIV     Derive IV from (not final IV). Defaults as stringForKey.\n * @returns {Buffer}                  Buffer to embed in tx.\n */\nexport const encrypt = (\n  stringText: string,\n  stringForKey: string,\n  stringForIV: string = stringForKey\n) => {\n  // aes-NUMBER-TYPE\n  // Must have key size matching NUMBER (in aes name) of bits (NUMBER/8 bytes)\n  // Must have IV matching encryption block size, 16 bytes for AES128-to-256-range in cbc mode\n  // sha256 can make 32 byte buffer out of anything and then .slice(0, N) can cut it to N bytes\n\n  const key = crypto\n    .createHash('sha256')\n    .update(stringForKey)\n    .digest() // 32 bytes\n  const iv = crypto\n    .createHash('sha256')\n    .update(stringForIV)\n    .digest()\n    .slice(0, 16) // 16 bytes\n\n  const cipher = crypto.createCipheriv('aes-256-ctr', key, iv)\n  let encrypted = cipher.update(Buffer.from(stringText))\n\n  encrypted = Buffer.concat([encrypted, cipher.final()])\n\n  return encrypted\n}\n\n/**\n * Decrypt - symmetric - aes-256-crt\n * @param   {Buffer}  bufferCypher    Buffer to be decrypted.\n * @param   {string}  stringForKey    Derive Key from (not final Key).\n * @param   {string}  stringForIV     Derive IV from (not final IV). Defaults as stringForKey.\n * @returns {string}                  String utf8 after decryption.\n */\nexport const decrypt = (\n  bufferCypher: Buffer,\n  stringForKey: string,\n  stringForIV: string = stringForKey\n) => {\n  const key = crypto\n    .createHash('sha256')\n    .update(stringForKey)\n    .digest() // 32 bytes\n  const iv = crypto\n    .createHash('sha256')\n    .update(stringForIV)\n    .digest()\n    .slice(0, 16) // 16 bytes\n\n  const decipher = crypto.createDecipheriv('aes-256-ctr', key, iv)\n\n  // first part\n  let decrypted = decipher.update(bufferCypher)\n\n  // the rest\n  decrypted = Buffer.concat([decrypted, decipher.final()])\n\n  return decrypted.toString('utf8')\n}\n\n/* -------------------------------------------------------------------------- */\n/*               For cases where just want to encrypt raw buffer              */\n/* -------------------------------------------------------------------------- */\n\n// instead of going from utf8 source\n\n/**\n * Encrypt - symmetric - aes-256-crt\n * @param   {Buffer}  bufferInput     To be encrypted (up to 80 bytes)\n * @param   {string}  stringForKey    Derive Key from (not final Key).\n * @param   {string}  stringForIV     Derive IV from (not final IV). Defaults as stringForKey.\n * @returns {Buffer}                  Buffer after encryption.\n */\nexport const encryptFromBuffer = (\n  bufferInput: Buffer,\n  stringForKey: string,\n  stringForIV: string = stringForKey\n) => {\n  // aes-NUMBER-TYPE\n  // Must have key size matching NUMBER (in aes name) of bits (NUMBER/8 bytes)\n  // Must have IV matching encryption block size, 16 bytes for AES128-to-256-range in cbc mode\n  // sha256 can make 32 byte buffer out of anything and then .slice(0, N) can cut it to N bytes\n\n  const key = crypto\n    .createHash('sha256')\n    .update(stringForKey)\n    .digest() // 32 bytes\n  const iv = crypto\n    .createHash('sha256')\n    .update(stringForIV)\n    .digest()\n    .slice(0, 16) // 16 bytes\n\n  const cipher = crypto.createCipheriv('aes-256-ctr', key, iv)\n  let encrypted = cipher.update(bufferInput)\n\n  encrypted = Buffer.concat([encrypted, cipher.final()])\n\n  return encrypted\n}\n\n/**\n * Decrypt - symmetric - aes-256-crt\n * @param   {Buffer}  bufferCypher    Buffer to be decrypted.\n * @param   {string}  stringForKey    Derive Key from (not final Key).\n * @param   {string}  stringForIV     Derive IV from (not final IV). Defaults as stringForKey.\n * @returns {Buffer}                  Buffer after decryption.\n */\nexport const decryptToBuffer = (\n  bufferCypher: Buffer,\n  stringForKey: string,\n  stringForIV: string = stringForKey\n) => {\n  const key = crypto\n    .createHash('sha256')\n    .update(stringForKey)\n    .digest() // 32 bytes\n  const iv = crypto\n    .createHash('sha256')\n    .update(stringForIV)\n    .digest()\n    .slice(0, 16) // 16 bytes\n\n  const decipher = crypto.createDecipheriv('aes-256-ctr', key, iv)\n\n  // first part\n  let decrypted = decipher.update(bufferCypher)\n\n  // the rest\n  decrypted = Buffer.concat([decrypted, decipher.final()])\n\n  return decrypted\n}","import { I_User, I_BnsState, BnsBidType } from './types/'\n\n/**\n * Initial values for BNS state\n */\nexport const newState: I_BnsState = {\n  domain: {\n    domainName: '',\n    notificationAddress: '',\n    txHistory: [],\n    derivedUtxoList: [],\n    utxoList: [],\n    users: {},\n    currentOwner: '',\n    bidding: {\n      startHeight: 0,\n      endHeight: 0,\n      type: BnsBidType.NULL,\n      bids: []\n    },\n    ownersHistory: []\n  },\n  chain: {\n    parsedHeight: 0,\n    currentHeight: 0\n  }\n}\n\n/**\n * values to initialize users with\n */\nexport const newUser: I_User = {\n  address: '',\n  forwards: [],\n  burnAmount: 0,\n  winHeight: 0,\n  winTimestamp: 0,\n  nonce: 0,\n  updateHeight: 0\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bar\":\"CreateHeader_bar__27ge1\",\"domain\":\"CreateHeader_domain__1TQ7L\",\"alias\":\"CreateHeader_alias__1dNdj\",\"ext\":\"CreateHeader_ext__17sc6\",\"cutOverflow\":\"CreateHeader_cutOverflow__3s_72\",\"spacer\":\"CreateHeader_spacer__3tstm\",\"wrapper\":\"CreateHeader_wrapper__3cPTN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fees\":\"FeesSelection_fees__2ZlKp\",\"fees__rate\":\"FeesSelection_fees__rate__3lHbu\",\"fees__apicall\":\"FeesSelection_fees__apicall__2ham0\",\"fees__feeSelection\":\"FeesSelection_fees__feeSelection__Emkyk\",\"fees__feeSelection__choice\":\"FeesSelection_fees__feeSelection__choice__hZc8T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outershell2\":\"Logo_outershell2__ojy1V\",\"btcLogo\":\"Logo_btcLogo__367Q4\",\"cutoffs\":\"Logo_cutoffs__XLLfg\",\"background\":\"Logo_background__3SgWH\",\"theB\":\"Logo_theB__2iXnu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"divDev\":\"DevPanel_divDev__2q66m\",\"hidden\":\"DevPanel_hidden__Wlj3v\",\"btnOutline\":\"DevPanel_btnOutline__2FJLx\",\"button\":\"DevPanel_button__1DKHt\"};","import * as bitcoin from 'bitcoinjs-lib'\r\nimport bip39 from 'bip39'\r\nimport varuint from 'varuint-bitcoin'\r\n\r\n/**\r\n * Make new mnemonic for p2wpkh m/44'/0'/0'/0/0 address and WIF.\r\n * @param     {string}    strNetwork    String describing network ('bitcoin', 'testnet').\r\n * @returns   {object}                  Object { mnemonic, WIF, address } - all strings.\r\n */\r\nexport const createNewWallet = (strNetwork: string) => {\r\n  // network version. bitcoin or testnet\r\n  const network = bitcoin.networks[strNetwork]\r\n  // create backup phrase\r\n  const mnemonic = bip39.generateMnemonic() // 128 bit & randomBytes by default\r\n  const seedBuffer = bip39.mnemonicToSeed(mnemonic)\r\n  // create derivation master node\r\n  const masterNode = bitcoin.bip32.fromSeed(seedBuffer, network)\r\n  // derive m/44'/0'/0'/0 /0 node\r\n  const childNode0 = masterNode.derivePath(\"m/44'/0'/0'\").derivePath('0/0')\r\n  // get private key in wallet import format for that child node\r\n  const WIF = childNode0.toWIF()\r\n  // derive a standard p2wpkh address from that WIF\r\n  const keyPair = bitcoin.ECPair.fromWIF(WIF, network)\r\n  const address = bitcoin.payments.p2wpkh({\r\n    pubkey: keyPair.publicKey,\r\n    network\r\n  }).address\r\n\r\n  return { mnemonic, WIF, address }\r\n}\r\n\r\n/**\r\n * Load p2wpkh m/44'/0'/0'/0/0 wallet info from mnemonic.\r\n * @param     {string}    strMnemonic     Mnemonic string of 12 words as described in bip39.\r\n * @param     {string}    strNetwork      String describing network ('bitcoin', 'testnet').\r\n * @returns   {object}                    Object { mnemonic, WIF, address } - all strings.\r\n */\r\nexport const loadWallet = (strMnemonic: string, strNetwork: string) => {\r\n  // network version. bitcoin or testnet\r\n  const network = bitcoin.networks[strNetwork]\r\n  const seedBuffer = bip39.mnemonicToSeed(strMnemonic)\r\n  // create derivation master node\r\n  const masterNode = bitcoin.bip32.fromSeed(seedBuffer, network)\r\n  // derive m/44'/0'/0'/0 /0 node\r\n  const childNode0 = masterNode.derivePath(\"m/44'/0'/0'\").derivePath('0/0')\r\n  // get private key in wallet import format for that child node\r\n  const WIF = childNode0.toWIF()\r\n  // derive a standard p2wpkh address from that WIF\r\n  const keyPair = bitcoin.ECPair.fromWIF(WIF, network)\r\n  const address = bitcoin.payments.p2wpkh({\r\n    pubkey: keyPair.publicKey,\r\n    network\r\n  }).address\r\n\r\n  return { mnemonic: strMnemonic, WIF, address }\r\n}\r\n\r\n/**\r\n * Parse UTXO array to get total unspent balance in satoshi.\r\n * @param     {Array}    utxoArray      Array of UTXO objects with '.value' field in satoshi.\r\n * @returns   {number}                  Total number of unspent satoshi.\r\n */\r\nexport function getUnspentSum (utxoArray: Array<any>): number {\r\n  const sumSats =\r\n    utxoArray?.reduce((sum: number, utxo: any) => sum + utxo.value, 0) || 0\r\n\r\n  return sumSats\r\n}\r\n\r\n/**\r\n * Finalize outputs that require custom scripts.\r\n * Based on based on https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/csv.spec.ts\r\n */\r\nexport const getFinalScripts = ({ inputScript, network }: any) => {\r\n  return function (\r\n    inputIndex: number,\r\n    input: any,\r\n    script: Buffer,\r\n    isSegwit: boolean,\r\n    isP2SH: boolean,\r\n    isP2WSH: boolean\r\n  ): {\r\n    finalScriptSig: Buffer | undefined\r\n    finalScriptWitness: Buffer | undefined\r\n  } {\r\n    // Step 1: Check to make sure the meaningful script matches what you expect.\r\n\r\n    // Step 2: Create final scripts\r\n    let payment: any = {\r\n      network,\r\n      output: script,\r\n      input: inputScript\r\n    }\r\n    if (isP2WSH && isSegwit)\r\n      payment = bitcoin.payments.p2wsh({\r\n        network,\r\n        redeem: payment\r\n      })\r\n    if (isP2SH)\r\n      payment = bitcoin.payments.p2sh({\r\n        network,\r\n        redeem: payment\r\n      })\r\n\r\n    function witnessStackToScriptWitness (witness: Buffer[]): Buffer {\r\n      let buffer = Buffer.allocUnsafe(0)\r\n\r\n      function writeSlice (slice: Buffer): void {\r\n        buffer = Buffer.concat([buffer, Buffer.from(slice)])\r\n      }\r\n\r\n      function writeVarInt (i: number): void {\r\n        const currentLen = buffer.length\r\n        const varintLen = varuint.encodingLength(i)\r\n\r\n        buffer = Buffer.concat([buffer, Buffer.allocUnsafe(varintLen)])\r\n        varuint.encode(i, buffer, currentLen)\r\n      }\r\n\r\n      function writeVarSlice (slice: Buffer): void {\r\n        writeVarInt(slice.length)\r\n        writeSlice(slice)\r\n      }\r\n\r\n      function writeVector (vector: Buffer[]): void {\r\n        writeVarInt(vector.length)\r\n        vector.forEach(writeVarSlice)\r\n      }\r\n\r\n      writeVector(witness)\r\n\r\n      return buffer\r\n    }\r\n\r\n    return {\r\n      finalScriptSig: payment.input,\r\n      finalScriptWitness:\r\n        payment.witness && payment.witness.length > 0\r\n          ? witnessStackToScriptWitness(payment.witness)\r\n          : undefined\r\n    }\r\n  }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Details_wrapper__32nmX\",\"buttonWrapper\":\"Details_buttonWrapper__12FS5\",\"toggleDetails\":\"Details_toggleDetails__2jgtb\",\"arrow\":\"Details_arrow__2N1IF\",\"down\":\"Details_down__2irBp\",\"details\":\"Details_details__1lwEd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Switch_wrapper__13KFe\",\"shiftRight\":\"Switch_shiftRight__1BAPW\",\"label\":\"Switch_label__ZC9Fh\",\"choiceArea\":\"Switch_choiceArea__2lIss\",\"choice\":\"Switch_choice__HlPt4\",\"selected\":\"Switch_selected__ynsKV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Sending_title__1S4Q5\",\"feeSelection\":\"Sending_feeSelection__1vHxg\",\"amounts\":\"Sending_amounts__3C7NG\",\"lastError\":\"Sending_lastError__Oh647\",\"calculatedAmounts\":\"Sending_calculatedAmounts__1GMsV\",\"buttonWrapper\":\"Sending_buttonWrapper__3Aw_f\"};","import * as bitcoin from 'bitcoinjs-lib'\nconst op = bitcoin.opcodes\nconst hash160 = bitcoin.crypto.hash160\n\n/**\n * Get p2wsh notificaiton address from domainName and network.\n * @param   {string} domainName         - full domainName to use (e.g. 'satoshi.btc').\n * @param   {string} networkChoice      - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @returns {object}                    - { notificationsAddress - p2wsh address derived from domainName }.\n */\nexport const calcP2WSH = (domainName: string, networkChoice: string) => {\n  const network = bitcoin.networks[networkChoice]\n\n  // convert domainName into buffer so it can be put into script\n  const bufferData = Buffer.from(domainName, 'utf8')\n\n  // easily spendable script for ACS notification output\n  // specific to this domainName\n  const witnessScript = bitcoin.script.compile([\n    hash160(bufferData),\n    op.OP_DROP\n  ])\n\n  // calculate p2wsh address for this witnessScript & network\n  const p2wsh = bitcoin.payments.p2wsh({\n    redeem: {\n      output: witnessScript,\n      network\n    },\n    network\n  })\n  const notificationsAddress = p2wsh.address\n\n  return {\n    notificationsAddress\n  }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AboutContent_wrapper__1kfnm\",\"title\":\"AboutContent_title__16tUj\",\"contentWrapper\":\"AboutContent_contentWrapper__2XHS2\",\"drawing\":\"AboutContent_drawing__1qDTH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CreateNavigator_wrapper__24rTe\",\"scroller\":\"CreateNavigator_scroller__2q-0N\",\"horizontalScaler\":\"CreateNavigator_horizontalScaler__2qmoi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SettingsContent_wrapper__g7M-C\",\"contentWrapper\":\"SettingsContent_contentWrapper__1f-dq\",\"title\":\"SettingsContent_title__17SgK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"VisualAPI_wrapper__1qx_c\",\"spinner\":\"VisualAPI_spinner__2fYAt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"Spinner_spinner__3itsP\",\"block\":\"Spinner_block__1wS0M\",\"moveit\":\"Spinner_moveit__3lwkE\",\"chain\":\"Spinner_chain__-Farp\"};"],"sourceRoot":""}