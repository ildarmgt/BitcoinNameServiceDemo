{"version":3,"sources":["components/CreateNavigator/CreateNavigator.module.css","components/Navbar/Navbar.module.css","helpers/bns/calcBidDomainTx.tsx","components/CreateSteps/P5CustomForwards/P5CustomForwards.module.css","helpers/bns/constants.tsx","components/AboutContent/AboutContent.module.css","components/CreateSteps/P1RestoreOrBackup/P1RestoreOrBackup.module.css","components/CreateSteps/P3DomainAndWallet/P3DomainAndWallet.module.css","components/SearchResults/SearchResults.module.css","components/HomeContent/HomeContent.module.css","interfaces/index.tsx","components/general/RoundButton/RoundButton.tsx","store/reducers/Reducer.tsx","store/index.tsx","helpers/sanitize.js","store/actions/changeAliasAction.tsx","helpers/bns/actions/actions.tsx","helpers/bns/calcBnsState.tsx","helpers/bns/actions/batch.tsx","helpers/bns/stringByteCount.tsx","api/blockstream.tsx","store/actions/searchAction.tsx","helpers/bitcoin.tsx","store/actions/createNewWalletAction.tsx","store/actions/changePageInfoAction.tsx","store/actions/scanAddressFullyAction.tsx","components/SearchResults/SearchResults.tsx","helpers/timediff.tsx","helpers/bns/findLatestForwards.tsx","helpers/bns/interpretFw.tsx","components/HomeContent/HomeContent.tsx","pages/Home.tsx","components/AboutContent/AboutContent.tsx","pages/About.tsx","components/CreateSteps/P1RestoreOrBackup/P1RestoreOrBackup.tsx","components/CreateSteps/CreateHeader/CreateHeader.tsx","components/CreateSteps/P2LoadWallet/P2LoadWallet.tsx","components/CreateSteps/P3DomainAndWallet/P3DomainAndWallet.tsx","components/CreateSteps/P4ActionChoice/P4ActionChoice.tsx","components/CreateSteps/P5CustomForwards/P5CustomForwards.tsx","components/CreateSteps/P6Broadcast/P6Broadcast.tsx","components/CreateNavigator/CreateNavigator.tsx","pages/Create.tsx","components/Navbar/Navbar.tsx","App.tsx","components/DevPanel/DevPanel.tsx","index.tsx","helpers/bns/cryptography.tsx","helpers/bns/formathelpers.tsx","components/DevPanel/DevPanel.module.css","components/CreateSteps/CreateHeader/CreateHeader.module.css","helpers/bns/calcP2WSH.tsx","components/CreateSteps/P2LoadWallet/P2LoadWallet.module.css","helpers/bns/initialState.tsx","components/general/RoundButton/RoundButton.module.css","components/CreateSteps/P4ActionChoice/P4ActionChoice.module.css"],"names":["module","exports","calcBidDomainTx","stringToEmbed","wallet","domain","feeRate","networkChoice","vBytes","user","getUser","address","network","bitcoin","calcP2WSH","domainName","notificationsAddress","fee","Math","ceil","valueNeeded","MIN_BURN","MIN_NOTIFY","usedUtxoOfPayer","totalGathered","utxoList","forEach","utxo","push","value","Error","change","keyPair","fromWIF","WIF","psbt","setVersion","setLocktime","addInput","hash","txid","index","vout","sequence","nonWitnessUtxo","Buffer","from","hex","nonce","toString","encryptionKey","data","encrypt","embed","addOutput","script","output","signInput","validateSignaturesOfInput","finalizeAllInputs","tx","extractTransaction","thisVirtualSize","virtualSize","getId","toHex","console","log","byteLength","warn","BYTES_MAX","OWNERSHIP_DURATION_BY_BLOCKS","ActionTypes","RoundButton","props","style","display","show","colorbutton","colorbuttontext","sizebutton","className","styles","roundButtonWrap","roundButton","back","backArrow","undefined","next","nextArrow","join","children","STORE_SEARCH_RESULTS_FAIL","STORE_SEARCH_RESULTS","TYPING","NEW_WALLET","CHANGE_PAGE_INFO","UPDATE_WALLET","UPDATE_DOMAIN","ACTION_FAIL","LOAD_STATE","reducer","state","action","payload","type","txHistory","checkedHistory","checkedUtxo","lastTimeStamp","Date","now","chain","height","pageInfo","initialState","mnemonic","alias","notificationAddress","extension","users","currentOwner","bidding","current","settings","getOwner","st","ownerAddress","Store","React","createContext","sanitize","inputString","stringOrArray","choices","Array","isArray","filter","logicFilters","choice","str","split","letter","reduce","resultingString","length","warning","outputString","indexOf","fn","OUTS_2","info","status","atLeastTwoOutputs","OUT_0","isOpreturnOutput0","OUT_1","isNotify","NOTIFIED_MIN","didNotifyMin","BURNED_MIN","didBurnMin","NO_OWNER","existsCurrentOwner","EXISTS_OWNER","BURN_LAST_WIN","burnedPreviousRateMin","USER_IS_OWNER","isAddressTheCurrentOwner","IS_OWNER_EXPIRED","isOwnerExpired","claimOwnershipAction","args","permissions","conditions","execute","getTxHeight","senderAddress","getTxInput0SourceUserAddress","setOwner","winHeight","winTimestamp","getTxTimestamp","burnAmount","getTxOutput0BurnValue","currentOwnerRenewAction","owner","autoCheckForOwnerExpired","clearOwner","getParsedHeight","calcBnsState","notificationsHistory","currentHeight","JSON","parse","stringify","newState","slice","reverse","sort","prev","block_height","setParsedHeight","updateSourceUserFromTx","areAllConditionsMet","eaCondition","actions","readEmbeddedData","okConditions","okPermissions","areAllPermissionsMet","eaPermission","updateOwnerHistory","getCurrentHeight","stringByteCount","API_PATH_TESTNET","API_PATH_BITCOIN","getHeight","strNetwork","a","async","API_PATH","axios","get","res","rateLimit","addRawTxToArray","arrayUtxo","erroredOutputs","error","arrayUtxoWithHex","Object","entries","indexString","parseInt","tries","getUTXOList","getAddressHistory","Promise","r","setTimeout","searchAction","dispatch","router","notificationsTxHistory","repeat","createNewWallet","bip39","generateMnemonic","seedBuffer","mnemonicToSeed","fromSeed","derivePath","toWIF","p2wpkh","pubkey","publicKey","loadWallet","strMnemonic","createNewWalletAction","changePageInfoAction","page","scanAddressFullyAction","addressType","walletAddress","walletTxHistory","utxoListWalletAddress","utxoListNotificationAddress","SearchResults","useContext","diff","isExpired","dh","blocksUntilExpires","timestampMsec","referenceTimestampMsec","abs","d","floor","h","m","dhm","msDiff","timeDiff","latestForwards","forwards","sortedForwards","updateHeight","currentNetworks","eaForward","values","findLatestForwards","wrapper","describe","notisExpired","listContainer","to","createLink","map","fw","ifw","render","where","what","link","interpretFw","key","listItem","href","encodeURI","target","rel","HomeContent","match","params","history","isSearchDone","inputEl","useRef","useEffect","selectionEnd","selectionStart","focus","lblMainTitle","lblMainTitleAfter","noselect","divSearch","divSearchAfter","id","txtSearch","cols","rows","spellCheck","placeholder","ref","onChange","e","sanitizedString","changeAliasAction","onKeyPress","onClick","Home","AboutContent","About","pages","CreateHeader","useState","window","innerWidth","width","setWidth","resize","addEventListener","removeEventListener","fontScale","min","barHeight","aliasMarginTop","marginTop","aliasFontSize","fontSize","cutOverflow","bar","ext","spacer","P1RestoreOrBackup","ROOT","setPage","backup","setBackup","wordCount","v","title","Orange","buttonWrapper","LOAD_BACKUP","contentWrapper","thisDiv","document","getElementById","getSelection","selectAllChildren","restoreBackup","cleanString","toLowerCase","trimLeft","trim","P2LoadWallet","qrCode","setQrCode","qr","toDataURL","err","url","imgQr","src","alt","open","pathEdit","P3DomainAndWallet","apiStatus","setApiStatus","utxoArray","readyStatus","isReady","isWalletAddress","isDomainAvailable","isWalletTheOwner","domainInfo","domainButton","walletInfo","walletButton","unspent","balance","sum","toFixed","ownership","P4ActionChoice","checkActions","allActions","checkedActions","checkedPermissions","permission","isAllowed","isUsable","every","permissionList","runAllActionPermissionChecks","P5CustomForwards","customAdd","setCustomAdd","plannedChanges","setPlannedChanges","setTx","combineForwards","objForwards","forwardsString","keys","fwNetwork","bytesOfChanges","changes","bytesLeft","bytesOver","updateItem","updateInfo","updateCancel","newData","stopPropagation","editor","btnDelete","editorNetwork","cleanText","editorAddress","btnAdd","pastList","i","pastPair","pastNetwork","pastAddress","P6Broadcast","feeSelection","Rate","usdAPI","feeAPI","txSummary","CreateNavigator","horizontalScaler","Create","Navbar","root","App","searchParam","URLSearchParams","location","search","pushState","pathname","path","component","exact","json","require","ReactDOM","useReducer","Provider","hidden","setHidden","onDevKey","activeElement","divDev","button","encodeURIComponent","createElement","download","innerHTML","container","appendChild","click","remove","dlState","btnOutline","sheet","parentNode","removeChild","createTextNode","head","stringText","stringForKey","stringForIV","crypto","createHash","update","digest","iv","cipher","createCipheriv","encrypted","concat","final","decrypt","bufferCypher","decipher","createDecipheriv","decrypted","getOwnerAddress","newOwnerAddress","ownersHistory","newUser","parsedHeight","block_time","vin","prevout","scriptpubkey_address","fromAddress","embeddedDataHex","scriptpubkey_asm","getTxOutput0Data","embeddedDataBuffer","decryptionKey","embeddedDataUtf8","embeddedDataUtf8Array","forwardsInThisTx","word","thisForward","updateTimestamp","addToUserForwards","getTxOutput1NotifyAddress","getNotificationAddress","getTxOutput1NotifyValue","getLastOwnerBurnedValue","op","hash160","bufferData","witnessScript","compile","OP_DROP","p2wsh","redeem"],"mappings":"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","file":"static/js/main.c170b4b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CreateNavigator_wrapper__24rTe\",\"horizontalScaler\":\"CreateNavigator_horizontalScaler__2qmoi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Navbar_root__2XES1\",\"warning\":\"Navbar_warning__1HOBZ\"};","import * as bitcoin from 'bitcoinjs-lib'\nimport { calcP2WSH } from './calcP2WSH'\nimport { MIN_BURN, MIN_NOTIFY } from './constants'\nimport { encrypt } from './cryptography'\nimport { IDomain } from './types/'\nimport { getUser } from './formathelpers'\n\n/**\n * Creates hex of tx to bid on domain.\n * Throws error if not enough funds.\n * Leave vBytes blank, it will call itself via recursion until it derives needed size.\n * @param   {string}      stringToEmbed           - string of forwarding information to embed in tx.\n * @param   {object}      wallet                  - { WIF, address, txHistory, utxoList, ... }.\n * @param   {object}      domain                  - all domain info\n * @param   {number}      feeRate                 - fee rate in satoshi/vBytes.\n * @param   {string}      networkChoice           - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @param   {number=}     [vBytes=0]              - size of transaction in vBytes. *\n * @returns {object}                              - { thisVirtualSize, txid, hex, valueNeeded, fee, change }.\n */\nexport const calcBidDomainTx = (\n  stringToEmbed: string,\n  wallet: any,\n  domain: IDomain,\n  feeRate: number,\n  networkChoice: string,\n  vBytes: number = 0\n): any => {\n\n  const user = getUser({ domain }, wallet.address)\n\n  const network = bitcoin.networks[networkChoice]\n  const { notificationsAddress } = calcP2WSH(domain.domainName, networkChoice)\n\n  // calculate funds necessary for this tx, more than needed better than less.\n  const fee = Math.ceil(vBytes * feeRate)\n  const valueNeeded = MIN_BURN + MIN_NOTIFY + fee; // sat\n  // gather necessary utxo to use until enough to cover costs\n  let usedUtxoOfPayer: Array<any> = []\n  let totalGathered = 0 // sat\n  wallet.utxoList?.forEach((utxo: any) => {\n    // while not enough funds\n    if (totalGathered < valueNeeded) {\n      usedUtxoOfPayer.push(utxo)\n      totalGathered += utxo.value\n    }\n  })\n  // if still not enough funds\n  if (totalGathered < valueNeeded) {\n    throw new Error('Not enough funds in all the utxo')\n  }\n  const change = totalGathered - valueNeeded\n\n  // calculate keys from wallet import format key\n  const keyPair = bitcoin.ECPair.fromWIF(wallet.WIF, network)\n  // create Partially Signed Bitcoin Transaction object to build tx\n  const psbt = new bitcoin.Psbt({ network })\n  psbt.setVersion(2)    // default\n  psbt.setLocktime(0)   // default\n\n  // add all inputs (owner address must always be at index 0)\n  usedUtxoOfPayer.forEach(utxo => {\n    psbt.addInput({\n      hash: utxo.txid,\n      index: utxo.vout,\n      sequence: 0xfffffffe,\n      nonWitnessUtxo: Buffer.from(utxo.hex, 'hex') // should work for segwit and nonsegwit inputs\n    })\n  })\n\n  // add inputs of all ACS UTXO from this owner or it doesn't count (TODO)\n\n\n  // add the op_return output (always index 0)\n  // if first time sending, nonce is '0', otherwise the last blockheight when notification was sent from this owner address\n  // TODO calculate nonce in case this owner has unspent acs utxo left at notification address\n  // const nonce = getLastMessageHeight(wallet.address, notificationsAddress, notificationTxHistory)\n  const nonce = user.nonce.toString()\n  const encryptionKey =  domain.domainName + wallet.address + nonce\n  const data = encrypt(stringToEmbed, encryptionKey)\n  const embed = bitcoin.payments.embed({ data: [data] })\n  psbt.addOutput({\n    script: embed.output,\n    value: MIN_BURN,\n  })\n\n  // add notification output (always index 1)\n  psbt.addOutput({\n    address: notificationsAddress, // calculated from domainName provided\n    value: MIN_NOTIFY\n  })\n\n  // add change output (anything is fine for index 2 or higher outputs)\n  psbt.addOutput({\n    address: wallet.address,\n    value: change\n  })\n\n  // at this point all inputs & outputs added so ready to sign\n\n  usedUtxoOfPayer.forEach((utxo, index) => {\n    // sign p2wpkh of controlling\n    psbt.signInput(index, keyPair)\n    // (TODO) signing ACS inputs will need script\n\n    if (!psbt.validateSignaturesOfInput(index)) {\n      throw new Error('Signature validation failed for input index ' + index.toString())\n    }\n  })\n\n  psbt.finalizeAllInputs()\n\n  const tx = psbt.extractTransaction()\n  const thisVirtualSize = tx.virtualSize()\n  const txid = tx.getId()\n  const hex = tx.toHex()\n\n  if (vBytes >= thisVirtualSize) {\n    // If this tx fee was calculated for a vBytes size equal to or larger than the resulting derived tx (thisVirtualSize),\n    // fee should be safe by being equal to or larger than necessary at required feeRate.\n    // Obviously vBytes = 0 will never give the correct fee minimum the first time through.\n    console.log('virtualSize', tx.virtualSize())\n    console.log('byteLength', tx.byteLength())\n    console.log('getId', tx.getId())\n    console.log('hex', tx.toHex())\n    console.log('')\n    return { thisVirtualSize, txid, hex, valueNeeded, fee, change }\n  } else {\n    // Redo this tx calculation using the virtual size we just calculated for vByte optional parameter.\n    return calcBidDomainTx(stringToEmbed, wallet, domain, feeRate, networkChoice, thisVirtualSize)\n  }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P5CustomForwards_wrapper__2kAy2\",\"title\":\"P5CustomForwards_title__29aFH\",\"changes\":\"P5CustomForwards_changes__23bYg\",\"pastList\":\"P5CustomForwards_pastList__3rXdy\",\"buttonWrapper\":\"P5CustomForwards_buttonWrapper__3hvwB\",\"editor\":\"P5CustomForwards_editor__1ZVVF\",\"updateItem\":\"P5CustomForwards_updateItem__1wAhx\",\"updateCancel\":\"P5CustomForwards_updateCancel__3b5bW\",\"updateInfo\":\"P5CustomForwards_updateInfo__2OBcF\",\"editorNetwork\":\"P5CustomForwards_editorNetwork__1L6UB\",\"editorAddress\":\"P5CustomForwards_editorAddress__1N25M\",\"btnAdd\":\"P5CustomForwards_btnAdd__1tiSg\",\"btnDelete\":\"P5CustomForwards_btnDelete__3NCte\",\"pastPair\":\"P5CustomForwards_pastPair__3YvIk\",\"pastNetwork\":\"P5CustomForwards_pastNetwork__35eVe\",\"pastAddress\":\"P5CustomForwards_pastAddress__3-W_H\",\"bytesLeft\":\"P5CustomForwards_bytesLeft__2zySr\",\"bytesOver\":\"P5CustomForwards_bytesOver__ysfMq\"};","/**\n * Constants used to determine rules on BNS\n */\n\n// testing mode true/false to reduce waiting time for tests\nconst TESTING = true\nTESTING && console.warn('Testing mode ON')\n\n// max data safe to embed in OP_RETURN type tx (bytes)\nconst BYTES_MAX = 80\n\n// Satoshis to burn minimum for attempting ownership (satoshi)\nconst MIN_BURN = 1000\n\n//  Minimum to use for notification output (satoshi)\nconst MIN_NOTIFY  = 1000\n\n// Ownership duration after victory (blocks)\nconst OWNERSHIP_DURATION_BY_BLOCKS = !TESTING ? 52560 : 1000\n// ^ (real) 52560 blocks ~365 days.\n// (testing) 288 blocks ~48 hours. 1000 blocks ~ a week\n// Block times can vary from 10 minutes.\n// const CHALLENGE_PERIOD_DURATION_BY_BLOCKS = 3456\n// ^ ~24 hours. Only matters if someone is monitoring specific domainName, otherwise they won't know what domainName the bids are for.\n\nexport {\n  TESTING,\n  MIN_BURN,\n  MIN_NOTIFY,\n  OWNERSHIP_DURATION_BY_BLOCKS,\n  BYTES_MAX\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AboutContent_wrapper__1kfnm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P1RestoreOrBackup_wrapper__32TQJ\",\"title\":\"P1RestoreOrBackup_title__2rH-6\",\"contentWrapper\":\"P1RestoreOrBackup_contentWrapper__1NT85\",\"buttonWrapper\":\"P1RestoreOrBackup_buttonWrapper__2ryAq\",\"describe\":\"P1RestoreOrBackup_describe__1RMqs\",\"Orange\":\"P1RestoreOrBackup_Orange__2IaJN\",\"spacer\":\"P1RestoreOrBackup_spacer__3luud\",\"backup\":\"P1RestoreOrBackup_backup__357rd\",\"restoreBackup\":\"P1RestoreOrBackup_restoreBackup__VUHgs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P3DomainAndWallet_wrapper__1ElFg\",\"contentWrapper\":\"P3DomainAndWallet_contentWrapper__vm5qp\",\"title\":\"P3DomainAndWallet_title__3ing2\",\"domainInfo\":\"P3DomainAndWallet_domainInfo__3p2aJ\",\"domainButton\":\"P3DomainAndWallet_domainButton__2PIDz\",\"walletInfo\":\"P3DomainAndWallet_walletInfo__2cQY0\",\"walletButton\":\"P3DomainAndWallet_walletButton__MmLZ3\",\"unspent\":\"P3DomainAndWallet_unspent__bUWZW\",\"buttonWrapper\":\"P3DomainAndWallet_buttonWrapper__djJkL\",\"ownership\":\"P3DomainAndWallet_ownership__lSY6a\",\"balance\":\"P3DomainAndWallet_balance__2fns7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SearchResults_wrapper__VvaYk\",\"listContainer\":\"SearchResults_listContainer__12vQE\",\"listItem\":\"SearchResults_listItem__3Udwx\",\"key\":\"SearchResults_key__358jo\",\"describe\":\"SearchResults_describe__3HACm\",\"expired\":\"SearchResults_expired__2ptnD\",\"notExpired\":\"SearchResults_notExpired__2m4VI\",\"createLink\":\"SearchResults_createLink__13Wez\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lblMainTitle\":\"HomeContent_lblMainTitle__1LqCG\",\"lblMainTitleAfter\":\"HomeContent_lblMainTitleAfter__J9CsB\",\"divSearch\":\"HomeContent_divSearch__3dKw5\",\"divSearchAfter\":\"HomeContent_divSearchAfter__2MAMf\",\"txtSearch\":\"HomeContent_txtSearch__3HpSp\"};","/**\n * All the interfaces & enums\n */\n\nexport enum ActionTypes {\n  STORE_SEARCH_RESULTS = 'STORE_SEARCH_RESULTS',\n  STORE_SEARCH_RESULTS_FAIL = 'STORE_SEARCH_RESULTS_FAIL',\n  TYPING = 'TYPING',\n  NEW_WALLET = 'NEW_WALLET',\n  CHANGE_PAGE_INFO = 'CHANGE_PAGE_INFO',\n  UPDATE_WALLET = 'UPDATE_WALLET',\n  UPDATE_DOMAIN = 'UPDATE_DOMAIN',\n  ACTION_FAIL = 'ACTION_FAIL',\n  LOAD_STATE = 'LOAD_STATE'\n}\n\nexport type Dispatch = React.Dispatch<IAction>\n\nexport interface IAction {\n  type: ActionTypes\n  payload: any\n}\n\nexport interface Iforward {\n  network: string\n  address: string\n  updateHeight: number\n  updateTimestamp: number\n}\n\nexport interface IUser {\n  address:      string\n  forwards:     Array<Iforward>\n  burnAmount:   number\n  winHeight:    number\n  winTimestamp: number\n  nonce:        number\n  updateHeight: number\n}\n\nexport interface IState {\n  network: string\n  alias: string\n  extension: string\n  domain: {\n    domainName: string\n    notificationAddress: string\n    txHistory: Array<any>\n    utxoList: Array<any>\n    users: {\n      [key: string]: IUser\n    }\n    currentOwner: string\n    bidding: {}\n    checkedHistory: boolean\n    checkedUtxo: boolean\n  }\n  wallet: {\n    address: string\n    mnemonic: string\n    WIF: string\n    txHistory: Array<any>\n    utxoList: Array<any>\n    checkedHistory: boolean\n    checkedUtxo: boolean\n  }\n  chain: {\n    height: number\n  }\n  pageInfo: {\n    current: number\n  }\n  settings: {\n    feeRate: number\n  }\n  lastTimeStamp: number\n}","import React from 'react'\nimport styles from './RoundButton.module.css'\n\n/**\n * Standard button for this app.\n *\n * Pass the following props to customize it.\n *\n * next='true' to add next arrow at right.\n *\n * back='true' to add back arrow on left.\n *\n * show='true' to display element vs show='false' to set display to none (dom still exists).\n *\n * sizebutton='2.9' to make the button size 2.9x standard var(--s) size used (defined in global global.css).\n *\n * colorbutton='var(--colorBitcoinOrange)' to customize color.\n *\n * colorbuttonText='var(--colorButtonText)' to customize text color.\n *\n * Defaults (vars defined in global global.css):\n *\n * sizebutton = 2.5. ( means font size calc(2.5/2.9 * var(--s)) )\n *\n * colorbutton = var(--colorBitcoinOrange).\n *\n * colorbuttontext = var(--colorButtonText).\n */\nexport const RoundButton = (props:any): JSX.Element => {\n  return (\n    <div\n      // variables defined by string will be available to button & its children for scope\n      style={{\n        display: (\n          (props?.show === 'false') ? 'none' : 'inline-block'\n        ) as React.CSSProperties,\n        '--colorThisButton': (\n          props.colorbutton ? props.colorbutton : `var(--colorBitcoinOrange)`\n        )  as React.CSSProperties,\n        '--colorThisButtonText': (\n          props.colorbuttontext ? props.colorbuttontext : `var(--colorButtonText)`\n        ) as React.CSSProperties,\n        '--sizeButton': (\n          props.sizebutton\n          // Button was designed at 2.9 * var(--s) scale font so\n          // this just lets user redefine font & everything else proportionally\n            ? `calc(${props.sizebutton}/2.9 * var(--s))`\n            : `calc(2.5/2.9 * var(--s))`\n        ) as React.CSSProperties\n      }}\n      className={ styles.roundButtonWrap }\n      {...props}\n    >\n      <div\n        className={ [\n          styles.roundButton,\n          props.back ? styles.backArrow : undefined,\n          props.next ? styles.nextArrow : undefined,\n        ].join(' ') }\n      >\n        { props.children }\n      </div>\n    </div>\n  )\n}\n","import { IState, IAction, ActionTypes } from '../../interfaces'\nimport { initialState } from './../'\nconst {\n  STORE_SEARCH_RESULTS_FAIL,\n  STORE_SEARCH_RESULTS,\n  TYPING,\n  NEW_WALLET,\n  CHANGE_PAGE_INFO,\n  UPDATE_WALLET,\n  UPDATE_DOMAIN,\n  ACTION_FAIL,\n  LOAD_STATE\n} = ActionTypes\n\n/**\n * Reducer edits global state via information in payload.\n * Action is object { payload, type }.\n * type describes what type of changes to global state to make.\n * payload contains data provided to make those changes.\n */\nexport default function reducer (state: IState, action: IAction): IState {\n  const { payload } = action\n\n  switch (action.type) {\n\n    case UPDATE_WALLET: {\n      // after full scan of the wallet address\n      return {\n        ...state,\n        wallet: {\n          ...state.wallet, // wif/mnemonic/address unchanged\n          txHistory: payload.wallet.txHistory,\n          utxoList: payload.wallet.utxoList,\n          checkedHistory: true,\n          checkedUtxo: true\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case UPDATE_DOMAIN: {\n      return {\n        ...state,\n        domain: {\n          ...payload.domain,\n          checkedHistory: true,\n          checkedUtxo: true\n        },\n        chain: {\n          height: payload.chain.height\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case CHANGE_PAGE_INFO:\n      // navigation info for controlling domains\n      return {\n        ...state,\n        pageInfo: payload\n      }\n\n    case NEW_WALLET: {\n      // store totally new wallet object\n      return {\n        ...state,\n        wallet: {\n          ...initialState.wallet,\n          address: payload.address,\n          mnemonic: payload.mnemonic,\n          WIF: payload.WIF\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case STORE_SEARCH_RESULTS: {\n      // store results of looking up totally new alias\n      // update notifications and ownership information\n\n      return {\n        ...state,\n        alias: payload.alias,\n        domain: {\n          ...initialState.domain,\n          ...payload.domain,\n          checkedHistory: true\n        },\n        chain: {\n          height: payload.chain.height\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case STORE_SEARCH_RESULTS_FAIL: {\n      // store results of looking up totally new alias\n      // reset notifications and ownership information\n      return {\n        ...state,\n        alias: payload.alias,\n        domain: {\n          ...initialState.domain,\n          domainName: payload.domainName,\n          notificationAddress: payload.notificationAddress\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case TYPING: {\n      // change of alias part of domain name\n      // this change renders owner and notification information outdated\n      return {\n        ...state,\n        alias: payload,\n        domain: initialState.domain,\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case ACTION_FAIL: {\n      return {\n        ...state,\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case LOAD_STATE: {\n      return {\n        ...payload,\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    default: {\n      console.warn('Unknown action type')\n      return state\n    }\n  }\n}\n\n// can split maybe like this later if gets too long\n// https://dev.to/vanderleisilva/global-state-management-with-react-hooks-and-context-5f6h\n\n","import React from 'react'\nimport { IState } from '../interfaces'\nimport reducer from './reducers/Reducer'\n\n// Change state process:\n// 1. Component calls action from src/store/actions/\n// 2. Action does stuff (e.g. API calls) and dispatches results to reducer in src/store/reducer/\n// 3. Reducer modifies state based on dispatched payload and type of action.\n\n// initial state\n// (changes to design need to be matched in reducers & interfaces)\nexport const initialState: IState = {\n  network: 'testnet',             // 'testnet' or 'bitcoin'\n  alias: 'satoshi',               // first half of domain name\n  extension: '.btc',              // last half of domain name\n  domain: {                       // domain info from notifications\n    domainName: '',\n    notificationAddress: '',      // p2wsh address for this domain name (alias + extension)\n    txHistory: [],                // array of all tx for this address (old addressHistory)\n    utxoList: [],                 // array of all current utxo for this address\n    users: {},                    // object with all interacting users\n    currentOwner: '',             // address of user that controls domain\n    bidding: {},                  // bidding info\n    checkedHistory: false,        // if notifications tx history has ever been updated\n    checkedUtxo: false            // if notifications utxo including raw tx has ever been updated\n  },\n  wallet: {                       // wallet information & utxo for controlling domain names\n    address: '',                  // public address (p2wpkh)\n    mnemonic: '',                 // mnemonic for private key derivation\n    WIF: '',                      // wallet import format for private key derivation\n    txHistory: [],                // array of all tx for this address\n    utxoList: [],                 // array of all current utxo for this address\n    checkedHistory: false,        // if wallet tx history has ever been updated\n    checkedUtxo: false            // if wallet utxo including raw tx has ever been updated\n  },\n  chain: {\n    height: 0                     // height of blockchain\n  },\n  pageInfo: {                     // user navigation information for controlling domain name\n    current: 1\n  },\n  settings: {\n    feeRate: 1.1                  // fee rate to use in sat/bByte\n  },\n  lastTimeStamp: Date.now(),      // last change timestamp, to detect any changes to state or time out\n\n}\n\n// helper methods\nexport const getOwner = (st: IState) => {\n  const ownerAddress = st.domain.currentOwner\n  return st.domain.users[ownerAddress]\n}\n\nexport const getUser = (st: IState, address: string) => {\n  return st.domain.users[address]\n}\n\nexport const Store = React.createContext<any>(initialState)\n// returns object with .Provider and .Consumer\n// Provider makes state available to all child components no matter how deep\n\n\n\n// creates wrapping element for global state\nexport function StoreProvider ({ children }: JSX.ElementChildrenAttribute): JSX.Element {\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n\n  return (\n    <Store.Provider value={{ state, dispatch }}>\n      { children }\n    </Store.Provider>\n  )\n}\n","/**\r\n * Takes in a string of interest inputString\r\n * and Array of strings or string describing filter.\r\n * Returns the string of interst with only characters present in filters selected.\r\n */\r\nexport default function  sanitize (inputString, stringOrArray) {\r\n  // get choice input into same form of array of string(s) of choices\r\n  let choices; // :string | Array<string>\r\n  if (Array.isArray(stringOrArray)) {\r\n    choices = stringOrArray;\r\n  }\r\n  if (typeof stringOrArray === 'string') {\r\n    choices = [stringOrArray];\r\n  }\r\n\r\n  // add each choice to filter selection\r\n\r\n  // string mask\r\n  let filter = '';\r\n  // array of functions\r\n  const logicFilters = [];\r\n\r\n  choices.forEach(choice => {\r\n\r\n    // short masks\r\n    if (choice === 'numbers') {\r\n      filter += '0123456789';\r\n    }\r\n    if (choice === 'decimal_point') {\r\n      filter += '.';\r\n    }\r\n    if (choice === 'hex') {\r\n      filter += '0123456789abcdefABCDEF';\r\n    }\r\n    if (choice === 'lowcaps') {\r\n      filter += 'abcdefghijklmnopqrstuvwxyz';\r\n    }\r\n    if (choice === 'highcaps') {\r\n      filter += 'ABCDEFGHIJKLMNOPQRSTUVWYZ';\r\n    }\r\n    if (choice === 'spaces') {\r\n      filter += ' ';\r\n    }\r\n\r\n    // longer masks\r\n    if (choice === 'base58') {\r\n      // https://en.wikipedia.org/wiki/Base58#cite_note-3\r\n      filter += '12345689ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\r\n    }\r\n    if (choice === 'basic') {\r\n      filter += '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    }\r\n    if (choice === 'oneline') {\r\n      filter += '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,./-_!`~[]{}|@#%^&()-=?$';\r\n    }\r\n    if (choice === 'url') {\r\n      filter += `0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:/?#[]@!$&'()*+,;=-_.~`;\r\n    }\r\n\r\n    // ========================================================\r\n    // functions\r\n    // adds anon function to array of functions\r\n\r\n    if (choice === 'no_spaces') {\r\n      logicFilters.push(str =>\r\n        str.split('')\r\n          .filter(letter => letter !== ' ')\r\n          .join(''))\r\n    }\r\n\r\n    if (choice === 'single_space_width') {\r\n      logicFilters.push(str =>\r\n        // split by 2+ spaces and replace with single space\r\n        str.split(/  */).join(' ')\r\n      )\r\n    }\r\n\r\n    // keep only first decimal point\r\n    if (choice === 'decimal_point') {\r\n\r\n      logicFilters.push(str =>\r\n        (str\r\n          // splits to array between .\r\n          .split('.')\r\n          // join first 2 elements with ., others with empty string\r\n          // returns a string\r\n          .reduce((resultingString = '', letter, index) =>\r\n            // real . goes b/w array's index 0 and 1, even if string had . first\r\n            (index === 1)\r\n              ? [ ...resultingString, letter ].join('.')\r\n              : [ ...resultingString, letter ].join('')\r\n          , undefined)\r\n        )\r\n      )\r\n    }\r\n\r\n\r\n\r\n  })\r\n\r\n  if (filter.length === 0 && logicFilters.length === 0) {\r\n    console.warning('sanitize used w/o any known filters', stringOrArray)\r\n  }\r\n\r\n  let outputString = '';\r\n\r\n  // apply string mask to only keep characters within filter string\r\n  outputString = inputString\r\n    .split('')\r\n    .filter(letter => filter.indexOf(letter) > -1)\r\n    .join('');\r\n\r\n  // use every selected logic function on the outputString\r\n  logicFilters.forEach(fn => outputString = fn(outputString))\r\n\r\n  return outputString;\r\n}\r\n\r\n\r\n// function sanitizeOld (inString, type) {\r\n//   let filter;\r\n//   if (type === 'base58') {\r\n//     // https://en.wikipedia.org/wiki/Base58#cite_note-3\r\n//     filter = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\r\n//   } else if (type === 'hex') {\r\n//     filter = '0123456789abcdef';\r\n//   } else if (type === 'basic') {\r\n//     filter = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n//   } else if (type === 'numbers') {\r\n//     filter = '0123456789';\r\n//   } else if (type === 'fractions') {\r\n//     filter = '0123456789.';\r\n//   } else if (type === 'oneline') {\r\n//     filter = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,./-_!`~[]{}|@#%^&()-=?$';\r\n//   } else if (type === 'url') {\r\n//     filter = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ./-_';\r\n//   } else {\r\n//     console.log('sanitize: valid type not provided');\r\n//     return undefined;\r\n//   }\r\n\r\n//   const res = inString\r\n//     .split('')\r\n//     .filter(letter => filter.indexOf(letter) > -1)\r\n//     .join('');\r\n\r\n//   return res;\r\n// }","import { IState, Dispatch } from '../../interfaces'\nimport sanitize from '../../helpers/sanitize'\nimport { ActionTypes } from './../../interfaces'\nconst { TYPING } = ActionTypes;\n\n/**\n * Cleans up the entered string including removing next line characters\n */\nexport const changeAliasAction = async (state: IState, dispatch: Dispatch, value: any) => {\n  // clean up the string\n  const newString = value\n  const sanitizedString = sanitize(newString, 'url')\n\n  return dispatch({\n    type: TYPING,\n    payload: sanitizedString\n  })\n}\n","import { IBnsState } from './../types/'\nimport { MIN_NOTIFY, MIN_BURN } from './../constants'\nimport {\n  existsCurrentOwner,\n  isOwnerExpired,\n  clearOwner,\n  getParsedHeight,\n  atLeastTwoOutputs,\n  isNotify,\n  isOpreturnOutput0,\n  didNotifyMin,\n  didBurnMin,\n  setOwner,\n  getOwner,\n  getUser,\n  getTxInput0SourceUserAddress,\n  getTxHeight,\n  getTxTimestamp,\n  getTxOutput0BurnValue,\n  isAddressTheCurrentOwner,\n  burnedPreviousRateMin\n} from './../formathelpers'\n\n// =========== CONDITIONS / PERMISSIONS ================\n\nconst OUTS_2 = ({ tx }: any) =>\n  ({ info: 'Tx must have 2+ outputs', status: atLeastTwoOutputs(tx) })\n\nconst OUT_0 = ({ tx }: any) =>\n  ({ info: 'Tx must have OP_RETURN @ output[0]', status: isOpreturnOutput0(tx) })\n\nconst OUT_1 = ({ st, tx }: any) =>\n  ({ info: 'Tx must have notification address @ output[1]' , status: isNotify(st, tx) })\n\nconst NOTIFIED_MIN = ({ tx }: any) =>\n  ({ info: `Tx must have minimum ${MIN_NOTIFY} @ output[1]`, status: didNotifyMin(tx) })\n\nconst BURNED_MIN = ({ tx }: any) =>\n  ({ info: `Tx must burn ${MIN_BURN} @ output[0]`, status: didBurnMin(tx) })\n\nconst NO_OWNER = ({ st }: any) =>\n  ({ info: 'There must not be existing owner', status: !existsCurrentOwner(st) })\n\nconst EXISTS_OWNER = ({ st }: any) =>\n  ({ info: 'There must be existing owner', status: existsCurrentOwner(st) })\n\nconst BURN_LAST_WIN = ({ st, tx }: any) =>\n  ({ info: 'Tx must burn the last ownership winning burn amount', status: burnedPreviousRateMin(st, tx) })\n\nconst USER_IS_OWNER = ({ st, address }: any) =>\n  ({ info: `User's address must match owner's address`, status: isAddressTheCurrentOwner(st, address) })\n\nconst IS_OWNER_EXPIRED = ({ st }: any) =>\n  ({ info: 'Ownership must be expired at current parsed height', status: isOwnerExpired(st) })\n\n\n// ============ USER ACTIONs ===============\n\n// Describe: If no owner, sender can claim ownership\nexport const claimOwnershipAction = (st: IBnsState, tx: any = undefined) => {\n  const args = { st, tx }\n\n  return {\n    info: 'Claim ownership of an available domain',\n\n    permissions: () => [\n      NO_OWNER(args)\n    ],\n\n    conditions: () => [\n      OUTS_2(args),\n      OUT_0(args),\n      OUT_1(args),\n      NOTIFIED_MIN(args),\n\n      BURNED_MIN(args)\n    ],\n\n    execute: () => {\n      // ownership source was already created for sure via updateSourceUserFromTx\n      // only have to set owner address to tx address\n      const height = getTxHeight(tx)\n      const senderAddress =  getTxInput0SourceUserAddress(tx)\n      setOwner(st, senderAddress)\n      getUser(st, senderAddress).winHeight = height\n      getUser(st, senderAddress).winTimestamp = getTxTimestamp(tx)\n      getUser(st, senderAddress).burnAmount = getTxOutput0BurnValue(tx)\n\n      // set ownership to this address\n      // update win height / time\n\n      console.log(\n        `${ st.domain.domainName } : ${ getTxHeight(tx) } height: new owner is ${ getUser(st, senderAddress).address }`\n      )\n    }\n  }\n}\n\n\n// Describe: If from current owner & burned past winning minimum, extend ownership.\nexport const currentOwnerRenewAction = (st: IBnsState, address: string, tx: any = undefined) => {\n  const args = { st, address, tx }\n  return {\n    info: 'Extend ownership of this domain',\n\n    permissions: () => [\n      USER_IS_OWNER(args)\n    ],\n\n    conditions: () => [\n      OUTS_2(args),\n      OUT_0(args),\n      OUT_1(args),\n      NOTIFIED_MIN(args),\n\n      BURNED_MIN(args),\n      BURN_LAST_WIN(args)\n    ],\n\n    execute: () => {\n      const owner = getOwner(st)\n      // set owner's win height to current tx height therefore updating ownership\n      owner && (owner.winHeight = getTxHeight(tx))\n      owner && (owner.winTimestamp = getTxTimestamp(tx))\n      console.log(`${ st.domain.domainName } : ${ getTxHeight(tx) } height: owner extended ownership ${ owner?.address }`)\n    }\n  }\n}\n\n// =========== AUTOMATIC PARSED ACTIONS NOT BY USERS (e.g. TIME BASED) ===========\n\n// Describe: if OWNERSHIP_DURATION_BY_BLOCKS blocks since ownership update, no owner again\nexport const autoCheckForOwnerExpired = (st: IBnsState) => {\n  const args = { st }\n  return {\n    info: 'Existing ownerships that expire are removed',\n\n    conditions: () => [\n      EXISTS_OWNER(args),\n      IS_OWNER_EXPIRED(args)\n    ],\n\n    execute: () => {\n      clearOwner(st)\n      console.log(st.domain.domainName, getParsedHeight(st), 'ownership expired')\n    }\n  }\n}","import { calcP2WSH } from './calcP2WSH'\nimport { newState } from './initialState'\nimport * as actions from './actions'\nimport { IBnsState } from './types'\nimport {\n  setParsedHeight,\n  updateSourceUserFromTx,\n  getTxHeight,\n  readEmbeddedData,\n  updateOwnerHistory,\n  getCurrentHeight\n } from './formathelpers'\n\n/**\n * Returns ownership and notification information objects.\n * @param   {Array<any>}  notificationsHistory  - Array of any tx with notificationsAddress.\n * @param   {string}      domainName            - Full domainName to use (e.g. 'satoshi.btc').\n * @param   {number}      currentHeight         - Current blockheight of the network chain selected.\n * @param   {string}      networkChoice         - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @returns {IBnsState}                         - BNS state describing object.\n */\nexport const calcBnsState = (\n  notificationsHistory: Array<any>,\n  domainName: string,\n  currentHeight: number,\n  networkChoice: string\n): IBnsState => {\n\n  // initialize temporary derivation state\n  const st = JSON.parse(JSON.stringify(newState)); // deep object clone\n  st.domain.domainName = domainName\n  st.chain && (st.chain.currentHeight = currentHeight)\n  st.domain.notificationAddress = calcP2WSH(domainName, networkChoice)?.notificationsAddress || ''\n\n  // Sorting history from earliest to latest\n  // reversing should speed it up if not complete it\n  st.domain.txHistory = (notificationsHistory\n    .slice().reverse()\n    .sort((prev, next) => {\n      const aBlockHeight = prev.status.block_height\n      const bBlockHeight = next.status.block_height\n      return aBlockHeight - bBlockHeight\n    })\n  )\n\n  // iterate with blockheights of relevant tx to derive st state\n  // Each tx blockheight serves as reference time\n  st.domain.txHistory.forEach((tx: any) => {\n\n    // update current parsed height based on tx confirmed height\n    setParsedHeight(st, getTxHeight(tx))\n\n    // update or create new basic user info based on source address @ input0\n    // this includes nonce set to previous update height for this user\n    updateSourceUserFromTx(st, tx)\n\n    // check if owner expired\n    actions.runAllAutomaticChecks(st)\n\n    // read embedded data\n    readEmbeddedData(st, tx)\n\n    // run all possible actions\n    actions.runAllUserActions(st, tx)\n\n    // update ownership history each tx\n    updateOwnerHistory(st)\n\n  })\n\n  // final check for current block height\n  setParsedHeight(st, getCurrentHeight(st))\n  actions.autoCheckForOwnerExpired(st)\n\n  return st\n}\n\n","import {\n  currentOwnerRenewAction,\n  claimOwnershipAction,\n  autoCheckForOwnerExpired\n} from './actions'\nimport { IBnsState } from './../types/'\nimport { getTxInput0SourceUserAddress } from './../formathelpers'\n\n/****************************************************************************************\n * Returns what actions are available for specific user address at current state\n */\nexport const runAllActionPermissionChecks = (st: IBnsState, address: string) => {\n\n  // Edit this list to include more actions for checks\n  const allActions = [\n    currentOwnerRenewAction(st, address),\n    claimOwnershipAction(st)\n  ]\n\n  // check which actions are doable\n  const checkedActions: any[] = []\n  allActions.forEach(action => {\n\n    // check each permission in each action\n    const checkedPermissions: any[] = []\n    action.permissions().forEach((permission: any) => {\n      const isAllowed = permission.status\n\n      // add to list of permissions checked in this action & their display info\n      checkedPermissions.push({\n        isAllowed,\n        info: permission.info\n      })\n    })\n\n    // add to list of all actions with summary of all their permissions checks\n    checkedActions.push({\n      info: action.info,\n      isUsable: checkedPermissions.every(permission => permission.isAllowed),\n      permissionList: checkedPermissions\n    })\n  })\n\n  // return array of doable actions\n  return checkedActions\n}\n\n/****************************************************************************************\n * Executes all actions possible by user that sent tx.\n * Nothing returned.\n */\nexport const runAllUserActions = (st: IBnsState, tx: any) => {\n\n  // edit this list\n  const allUserActions = [\n    currentOwnerRenewAction(st, getTxInput0SourceUserAddress(tx), tx),\n    claimOwnershipAction(st, tx)\n  ]\n\n  allUserActions.forEach((action: any) => {\n\n    // check that all conditions & permissions are true\n    const okConditions = action.conditions().reduce(\n      (areAllConditionsMet: boolean, eaCondition: any) => areAllConditionsMet && eaCondition.status\n    , true)\n\n    const okPermissions = action.permissions().reduce(\n      (areAllPermissionsMet: boolean, eaPermission: any) => areAllPermissionsMet && eaPermission.status\n    , true)\n\n    if (okConditions && okPermissions) action.execute()\n  })\n}\n\n/****************************************************************************************\n * Executes non-user actions like ownership expiration over time.\n * Nothing returned.\n */\nexport const runAllAutomaticChecks = (st: IBnsState) => {\n\n  // list of all automatic actions\n  const allAutoChecks = [\n    autoCheckForOwnerExpired(st)\n  ]\n\n  allAutoChecks.forEach(action => {\n    // check that all conditions are true\n    const ok = action.conditions().reduce((areAllConditionsMet, eaCondition) => areAllConditionsMet && eaCondition.status, true)\n    if (ok) action.execute()\n  })\n}\n\n\n","import { encrypt } from './cryptography'\n\n/**\n * Returns number of bytes the string has after encryption.\n * Encryption is used directly to measure result accurately\n * even if cryption method changes in the future.\n */\nexport const stringByteCount = (data: string): number => {\n  const cipher: Buffer = encrypt(data, 'arbitrary key and iv seeding string')\n  // returns buffer, so length should be bytesize\n  return cipher.length;\n}","import axios from 'axios'\n\n// Documentation\n// https://github.com/Blockstream/esplora/blob/esplora_v2.00/API.md\n// https://github.com/Blockstream/esplora/blob/master/API.md#post-tx\n\nconst API_PATH_TESTNET = 'https://blockstream.info/testnet/api/'\nconst API_PATH_BITCOIN = 'https://blockstream.info/api/'\nconst API_RATE_LIMIT = 0.6    // guessing calls per second cap\n\n// (TODO) a single instance of async task executing loop per API to ensure rate limit holds per API\n// Meanwhile calling function can use its own busy flag to ensure promises are resolved before repeats.\n// RawTx requests and multipage history (length > 25) are main risks.\n\n\nexport async function getHeight (strNetwork: string) {\n  const API_PATH = (\n    (strNetwork === 'testnet')\n    ? API_PATH_TESTNET\n    : API_PATH_BITCOIN\n  ) + 'blocks/tip/height'\n  console.log(API_PATH)\n\n  try {\n\n    const res = await axios.get(API_PATH)\n    console.log('getHeight', res.data)\n    return res.data\n\n  } catch (e) {\n\n    console.log(e)\n    await rateLimit()\n    throw new Error('Blockstream.info API height get failed')\n  }\n\n}\n\n/**\n * API request for each UTXO in array to get the raw tx necessary for psbt.\n * @param     {Array}     arrayUtxo       Array of UTXO.\n * @param     {string}    strNetwork      Network type: 'bitcoin' or 'testnet'.\n * @returns   {object}                    { arrayTx: arrayTx w/ .hex, error: string, fails: number }\n */\nexport async function addRawTxToArray (arrayUtxo: Array<any>, strNetwork: string) {\n  // to track failures indecies\n  let erroredOutputs = ''\n\n  // abort if empty array\n  if (arrayUtxo?.length === 0) { return { arrayUtxo, error: 'no utxo' } }\n\n  // clone array\n  const arrayUtxoWithHex = [...arrayUtxo]\n\n  // iterate through original utxo and add hex onto clone, 2 tries max each\n  for (const [indexString, utxo] of Object.entries(arrayUtxo)) {\n    // indexString is a string so convert for array index use\n    const index = parseInt(indexString, 10)\n\n    let tries = 2\n    while (tries-- > 0) {\n      try {\n        const { txid } = utxo\n\n        // raw tx hex path on API\n        const API_PATH = (\n          (strNetwork === 'testnet')\n            ? API_PATH_TESTNET\n            : API_PATH_BITCOIN\n        ) + 'tx/' + txid + '/hex'\n        console.log(API_PATH)\n\n        const res = await axios.get(API_PATH)\n\n        console.log(index, 'index utxo has raw hex of', res.data)\n\n        // add hex data into cloned utxo array\n        arrayUtxoWithHex[index].hex = res.data\n\n        // break while loop if got data, don't need more tries\n        break\n\n      } catch(e) {\n        // keeping track of failures\n        console.log('fail detected', indexString, utxo, tries, erroredOutputs, e)\n        // keep track of indecies missing hex\n        erroredOutputs += indexString + ' '\n      }\n\n      await rateLimit()\n    }\n  }\n\n  // return summary object\n  return { arrayUtxoWithHex, erroredOutputs }\n}\n\n/**\n * API request for all utxo for this address\n * @param     {string}    address       Bitcoin address.\n * @param     {string}    strNetwork    Network type: 'bitcoin' or 'testnet'.\n * @returns   {Array}                   Array of UTXO.\n */\nexport async function getUTXOList (address: string, strNetwork: string) {\n  const API_PATH = (\n    (strNetwork === 'testnet')\n    ? API_PATH_TESTNET\n    : API_PATH_BITCOIN\n  ) + 'address/' + address + '/utxo'\n  console.log(API_PATH)\n\n  try {\n    const res = await axios.get(API_PATH)\n\n    console.log('getUTXOList', res.data)\n\n    await rateLimit()\n\n    return res.data\n\n  } catch (e) {\n\n    console.log(e)\n    await rateLimit()\n    throw new Error('Blockstream.info API access failed')\n\n  }\n}\n\n/**\n * API request all transactions for a specific address.\n * parameters: (address, network).\n * @param   {string} address    - address on network.\n * @param   {string} network    - 'testnet' or 'bitcoin' to match bitcoinjs-lib.\n * @returns {Array<object>}     -  Array of tx objects.\n */\nexport async function getAddressHistory (address: string, network: string) {\n  // https://blockstream.info/testnet/api/address/tb1qprkzdaqt5jkxrhy57ngvra8k0rvq63ulksz8cx85qwke3myhjrtq9s6nj3/txs/chain\n  // GET /address/:address/txs/chain[/:last_seen_txid]\n  // Get confirmed transaction history for the specified address/scripthash, sorted with newest first.\n  // Returns 25 transactions per page. More can be requested by specifying the last txid seen by the previous query.\n\n  const CONFIRMED_PAGES_ADDON = '/txs/chain'\n\n  const API_PATH = (\n    (network === 'testnet')\n    ? API_PATH_TESTNET\n    : API_PATH_BITCOIN\n  ) + 'address/' + address + CONFIRMED_PAGES_ADDON\n\n  try {\n    const res = await axios.get(API_PATH)\n\n    console.log('blockstream.info API address history request', res)\n    return res.data\n\n  } catch (e) {\n    console.log(e)\n    throw new Error('Blockstream.info API access failed')\n  }\n}\n\n/**\n * Broadcasts content onto the blockchain.\n * parameters: (content, network).\n * @param   {string}  content  - raw hex content of transaction.\n * @param   {string}  network  - 'testnet' or 'bitcoin' to match bitcoinjs-lib.\n * @returns {string}           - Successful broadcast returns txid, otherwise error reason.\n */\nexport async function txPush (content: string, network: string) {\n\n  // const API_PATH_TESTNET =\n  //  'https://blockstream.info/testnet/api/broadcast'\n\n  // const API_PATH_BITCOIN =\n  //   'https://blockstream.info/api/broadcast'\n\n  const API_PATH =\n    (network === 'testnet')\n    ? API_PATH_TESTNET + 'broadcast'\n    : API_PATH_BITCOIN + 'broadcast'\n\n  try {\n    const res = await axios.get(API_PATH, {\n      params: {\n        tx: content\n      }\n    })\n\n    // console.log(res)\n    console.log('Broadcasted on', network)\n\n    // returns txid on success\n    return { txid: res.data }\n\n  } catch (e) {\n    console.log('Failed pushtx', network, e)\n\n    // console.log('error main message:', e.response.data)\n    return { error: e.response.data }\n  }\n}\n\n// Slow down based on rate limit.\n// Convert hz to time in milliseconds.\nasync function rateLimit () {\n  return new Promise(r => setTimeout(r, 1000.0 / API_RATE_LIMIT))\n}\n","import { IState, Dispatch, ActionTypes } from '../../interfaces'\nimport { calcP2WSH, calcBnsState } from '../../helpers/bns'\nimport { getAddressHistory, getHeight } from './../../api/blockstream'\nconst { STORE_SEARCH_RESULTS_FAIL, STORE_SEARCH_RESULTS } = ActionTypes;\n\n/**\n * Get address,\n * tx with notification address,\n * calculate owner,\n * find current owner's forwarding info,\n * send/dispatch to reducer to store important data found\n */\nexport const searchAction = async (state: IState, dispatch: Dispatch, router: any = undefined) => {\n  const domainName = state.alias + state.extension\n  // stop if no alias submitted, nothing to save to state\n  if (!state.alias) { return undefined }\n\n  // find address for this alias\n  const { notificationsAddress } = calcP2WSH(domainName, state.network)\n\n  // (TODO) should check if max length for API reached to know if to use pages & append value (25?)\n\n  try {\n\n    // 1. Get current blockheight from API so ownership is using latest possible info\n\n    const currentHeight = await getHeight(state.network)\n\n    // 2. Get API response for all tx history of this address\n    // This will grab all tx that \"notified\" this address by sending to it\n    // Upon failure error should be caught in this function\n    const notificationsTxHistory = await getAddressHistory(notificationsAddress, state.network)\n\n    console.log('\\n'.repeat(5))\n    console.log(notificationsTxHistory)\n    console.log('\\n'.repeat(5))\n\n    // calculate bns data from this history via helper functions\n    const { domain } = calcBnsState(\n      notificationsTxHistory,\n      domainName,\n      currentHeight,\n      state.network\n    )\n\n    // 3. if navigated via id, use router to navigate home w/o id in url\n    if (router) { router?.push('/') }\n\n    // store data\n    return dispatch({\n      type: STORE_SEARCH_RESULTS,\n      payload: {\n        alias: state.alias,\n        domain,\n        chain: {\n          height: currentHeight\n        }\n      }\n    })\n\n  } catch (e) {\n    console.log(e)\n    // still updating the notification address\n    return dispatch({\n      type: STORE_SEARCH_RESULTS_FAIL,\n      payload: {\n        alias: state.alias,               // can save alias\n        domainName,\n        notificationsAddress              // can save this easy derivation\n      }\n    });\n  }\n}\n\n// test address tb1qprkzdaqt5jkxrhy57ngvra8k0rvq63ulksz8cx85qwke3myhjrtq9s6nj3\n// has mixture of tx sent to it on testnet\n// https://blockstream.info/testnet/address/tb1qprkzdaqt5jkxrhy57ngvra8k0rvq63ulksz8cx85qwke3myhjrtq9s6nj3","import * as bitcoin from 'bitcoinjs-lib'\r\nimport bip39 from 'bip39'\r\n\r\n\r\n/**\r\n * Scans the address for utxo on a given network.\r\n * (In BNS would be useful for wallet and notification address)\r\n */\r\n// export const scanAddress = async (address: string, strNetwork: string) => {\r\n  // create array of utxo\r\n\r\n\r\n  // add full tx hex to that array (might take time)\r\n// }\r\n\r\n/**\r\n * Make new mnemonic for p2wpkh m/44'/0'/0'/0/0 address and WIF.\r\n * @param     {string}    strNetwork    String describing network ('bitcoin', 'testnet').\r\n * @returns   {object}                  Object { mnemonic, WIF, address } - all strings.\r\n */\r\nexport const createNewWallet = (strNetwork: string) => {\r\n  // network version. bitcoin or testnet\r\n  const network = bitcoin.networks[strNetwork]\r\n  // create backup phrase\r\n  const mnemonic = bip39.generateMnemonic()\r\n  const seedBuffer = bip39.mnemonicToSeed(mnemonic)\r\n  // create derivation master node\r\n  const masterNode = bitcoin.bip32.fromSeed(seedBuffer, network)\r\n  // derive m/44'/0'/0'/0 /0 node\r\n  const childNode0 = masterNode.derivePath(\"m/44'/0'/0'\").derivePath(\"0/0\")\r\n  // get private key in wallet import format for that child node\r\n  const WIF = childNode0.toWIF()\r\n  // derive a standard p2wpkh address from that WIF\r\n  const keyPair = bitcoin.ECPair.fromWIF(WIF, network)\r\n  const address = bitcoin.payments.p2wpkh({ pubkey: keyPair.publicKey, network }).address\r\n\r\n  return { mnemonic, WIF, address }\r\n}\r\n\r\n/**\r\n * Load p2wpkh m/44'/0'/0'/0/0 wallet info from mnemonic.\r\n * @param     {string}    strMnemonic     Mnemonic string of 12 words as described in bip39.\r\n * @param     {string}    strNetwork      String describing network ('bitcoin', 'testnet').\r\n * @returns   {object}                    Object { mnemonic, WIF, address } - all strings.\r\n */\r\nexport const loadWallet = (strMnemonic: string, strNetwork: string) => {\r\n  // network version. bitcoin or testnet\r\n  const network = bitcoin.networks[strNetwork]\r\n  const seedBuffer = bip39.mnemonicToSeed(strMnemonic)\r\n  // create derivation master node\r\n  const masterNode = bitcoin.bip32.fromSeed(seedBuffer, network)\r\n  // derive m/44'/0'/0'/0 /0 node\r\n  const childNode0 = masterNode.derivePath(\"m/44'/0'/0'\").derivePath(\"0/0\")\r\n  // get private key in wallet import format for that child node\r\n  const WIF = childNode0.toWIF()\r\n  // derive a standard p2wpkh address from that WIF\r\n  const keyPair = bitcoin.ECPair.fromWIF(WIF, network)\r\n  const address = bitcoin.payments.p2wpkh({ pubkey: keyPair.publicKey, network }).address\r\n\r\n  return { mnemonic: strMnemonic, WIF, address }\r\n}\r\n\r\n\r\n//\r\n/**\r\n * Parse UTXO array to get total unspent balance in satoshi.\r\n * @param     {Array}    utxoArray      Array of UTXO objects with '.value' field in satoshi.\r\n * @returns   {number}                  Total number of unspent satoshi.\r\n */\r\nexport function getUnspentSum(utxoArray: Array<any>): number {\r\n\r\n  const sumSats = utxoArray?.reduce(\r\n    (sum: number, utxo: any) => sum + utxo.value\r\n    , 0) || 0\r\n\r\n  return sumSats\r\n}","import { IState, Dispatch } from '../../interfaces'\nimport { ActionTypes } from './../../interfaces'\n\nimport { createNewWallet, loadWallet } from './../../helpers/bitcoin'\n\nconst { NEW_WALLET } = ActionTypes;\n\n/**\n * Create new wallet address & backup.\n * If mnemonic is provided, wallet is generated from that.\n */\nexport const createNewWalletAction = async (\n  state: IState, dispatch: Dispatch, strMnemonic: string = ''\n) => {\n\n  // load all the wallet info from mnemonic or generate new random mnemonic to do it\n  const { mnemonic, WIF, address } = (\n    (strMnemonic === '')\n      ? createNewWallet(state.network)\n      : loadWallet(strMnemonic, state.network)\n  )\n\n  return dispatch({\n    type: NEW_WALLET,\n    payload: { mnemonic, WIF, address }\n  })\n}","import { IState, Dispatch, ActionTypes } from '../../interfaces'\nconst { CHANGE_PAGE_INFO } = ActionTypes;\n\n\n/**\n * Request to change page info that's checked for validity here\n */\nexport const changePageInfoAction = async (state: IState, dispatch: Dispatch, page: number) => {\n  // for now no checks\n\n  const { pageInfo } = state\n  pageInfo.current = page\n\n  return dispatch({\n    type: CHANGE_PAGE_INFO,\n    payload: pageInfo\n  })\n}","import { IState, Dispatch, ActionTypes } from '../../interfaces'\nimport { calcP2WSH, calcBnsState } from '../../helpers/bns'\nimport { getAddressHistory, getUTXOList, addRawTxToArray, getHeight } from '../../api/blockstream'\nconst { UPDATE_WALLET, UPDATE_DOMAIN, ACTION_FAIL } = ActionTypes\n\n/**\n * Scans the address for utxo on a given network (w/ API).\n * Add hex of each tx that created utxo (for psbt).\n * addressType is one of enums ActionTypes that's either UPDATE_WALLET or UPDATE_NOTIFICATION.\n * If scanning wallet, then update wallet state.\n * If scanning notification address, then update notification state.\n * Notification scan will reproduce address scan first before getting details.\n */\nexport const scanAddressFullyAction = async (\n  state: IState,\n  dispatch: Dispatch,\n  addressType: ActionTypes\n) => {\n  const domainName = state.alias + state.extension\n\n  // wallet address scan\n  if (addressType === UPDATE_WALLET) {\n    // wallet address\n\n    try {\n\n      // 1. get address TX history\n\n      const walletAddress = state.wallet.address\n      const walletTxHistory = await getAddressHistory(walletAddress, state.network)\n\n      // 2. get address UTXO list (could also calculate from tx history or API)\n\n      const utxoListWalletAddress = await getUTXOList(walletAddress, state.network)\n\n      // 3. get raw tx for each UTXO (psbt requirement...)\n\n      const { arrayUtxoWithHex, erroredOutputs } = await addRawTxToArray(utxoListWalletAddress, state.network)\n\n      console.log({ walletAddress, walletTxHistory, utxoListWalletAddress, arrayUtxoWithHex, erroredOutputs })\n\n      return dispatch({\n        type: UPDATE_WALLET,\n        payload: {\n          wallet: {\n            txHistory: walletTxHistory,\n            utxoList: arrayUtxoWithHex\n          }\n        }\n      })\n\n    } catch (e) {\n      console.log('Wallet address scan failed')\n      console.log(e)\n      // abort\n      return dispatch({\n        type: ACTION_FAIL,\n        payload: {}\n      });\n    }\n  }\n\n  // notification address scan\n  if (addressType === UPDATE_DOMAIN) {\n\n\n    try {\n\n      // 1. get current blockheight from API so ownership is using latest possible info\n\n      const currentHeight = await getHeight(state.network)\n\n      // 2. get address TX history\n\n      const { notificationsAddress } = calcP2WSH(domainName, state.network)\n      const notificationsTxHistory = await getAddressHistory(notificationsAddress, state.network)\n\n\n      // 3. get address UTXO list (could also calculate from tx history or API)\n\n      const utxoListNotificationAddress = await getUTXOList(notificationsAddress, state.network)\n\n      // 4. get raw tx for each UTXO (psbt requirement...)\n\n      const { arrayUtxoWithHex, erroredOutputs } = await addRawTxToArray(utxoListNotificationAddress, state.network)\n\n      // (TODO) add utxo param & use to calcBnsState\n      const { domain } = calcBnsState(\n        notificationsTxHistory,\n        domainName,\n        currentHeight,\n        state.network\n      )\n\n      console.log({ domain, utxoListNotificationAddress, arrayUtxoWithHex, erroredOutputs })\n\n      return dispatch({\n        type: UPDATE_DOMAIN,\n        payload: {\n          domain: {\n            ...domain,\n            utxoList: arrayUtxoWithHex\n          },\n          chain: {\n            height: currentHeight\n          }\n        }\n      })\n\n    } catch (e) {\n      console.log('Notification address scan failed')\n      console.log(e)\n      // abort\n      return dispatch({\n        type: ACTION_FAIL,\n        payload: {}\n      });\n    }\n\n  }\n\n  throw new Error('unexpected address type')\n}","import React from 'react'\nimport { Store, getOwner } from './../../store'\nimport { Link } from 'react-router-dom'\n\nimport styles from './SearchResults.module.css'\nimport timeDiff from './../../helpers/timediff'\nimport { OWNERSHIP_DURATION_BY_BLOCKS, interpretFw, findLatestForwards } from '../../helpers/bns/'\n\n\nexport const SearchResults = () => {\n  const { state } = React.useContext(Store)\n\n  let diff = { isExpired: true, dh: '' }\n\n  // calc time left in ownership via block heights\n  const owner = getOwner(state)\n\n  if (owner) {\n    const heightOfExpiration = owner.winHeight + OWNERSHIP_DURATION_BY_BLOCKS\n    const blocksUntilExpires = (heightOfExpiration - state.chain.height)\n    const msUntilExpires = blocksUntilExpires * 10.0 * 60.0 * 1000.0\n    diff = timeDiff(msUntilExpires, 0)\n  }\n\n  // account expires or isExpired information\n  const expirationMsg = () => {\n    // abort if no known ownership history\n    if (!owner) return ('')\n    return (\n      <div\n        className={ diff.isExpired ? styles.isExpired : styles.notisExpired }\n      >\n        { !diff.isExpired && ('expires in ' + diff.dh) }\n      </div>\n    )\n  }\n\n  // calculate latest forwards\n  const latestForwards = owner ? findLatestForwards(owner.forwards) : []\n\n  return (\n    <>\n      <div className={ styles.wrapper }>\n        <div\n          className={ styles.describe }\n        >\n          { latestForwards.length } matches on { state.network } {'  '}\n          { expirationMsg() }\n        </div>\n        <div className={ styles.listContainer } >\n          {(diff.isExpired) && (\n            <Link\n              to='/create'\n              className={ styles.createLink }\n            >\n              Domain available!\n            </Link>\n          )}\n        </div>\n        <div className={ styles.listContainer } >\n          {\n            latestForwards.map(fw => {\n              const ifw = interpretFw(fw)\n              if (ifw.render) {\n                return (\n                  <a\n                    key={ fw.network }\n                    className={ styles.listItem }\n                    href={ encodeURI(ifw?.link || '') || undefined }\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <span className={ styles.key }>{ ifw.where }</span>\n                    { ifw.what }\n                  </a>\n                )\n              } else {\n                return ('')\n              }\n            })\n          }\n        </div>\n      </div>\n    </>\n  )\n}\n","\n/**\n * Difference between timestampMsec timestamp relative to current time or another reference referenceTimestampMsec timestamp.\n * Returns days-hours-minutes string, days-hours string, if expired, and ms of difference.\n * @param   {number}  timestampMsec               Timestamp of interest (milliseconds).\n * @param   {number}  [referenceTimestampMsec=]   Reference timestamp (milliseconds).\n * @returns {object}                              { dhm, dh, isExpired, msDiff }.\n */\nexport default function timeDiff(\n  timestampMsec: number, referenceTimestampMsec: number = Date.now()\n): {\n  dhm: string\n  dh: string\n  isExpired: boolean\n  msDiff: number\n} {\n  let diff = timestampMsec - referenceTimestampMsec\n  // note sign\n  const isExpired = (diff <= 0)\n  // mod away higher time frames\n  diff = Math.abs(diff)\n  const d = Math.floor(diff / (1000 * 60 * 60 * 24))\n  // remove days\n  diff -= d * (1000 * 60 * 60 * 24)\n  const h = Math.floor(diff / (1000 * 60 * 60)) % 24\n  // remove hours\n  diff -= h * (1000 * 60 * 60)\n  const m = Math.floor(diff / (1000 * 60)) % 60\n  return {\n    dhm: `${d} days ${h} hours ${m} min`,\n    dh: `${d} days ${h} hours`,\n    isExpired,        // time difference is to the past of now? (boolean)\n    msDiff: diff\n  };\n}","  // take array of all forwards for owner and return array with only latest forwards\nexport const findLatestForwards = (forwards: Array<any>) => {\n  // simplest would be to go through object where keys of cloned network would overwrite\n  // sort first for simplicity\n  const sortedForwards = [...forwards].sort((prev, next) => {\n    // sorts by index proportional to block height and time\n    const prevHeight = prev.updateHeight\n    const nextHeight = next.updateHeight\n    return prevHeight - nextHeight\n  })\n  // now just overwrite values for same networks in order of sorted array\n  const currentNetworks: {[key: string]: any} = {}\n  sortedForwards.forEach(eaForward => {\n    currentNetworks[eaForward.network] = eaForward\n  })\n  // return just array of values, networks still part of values as well\n  return Object.values(currentNetworks)\n}\n","/**\n * Reads a single forward info object to interpret its values\n * as where the forwarding address should be used, what it is, and what link to use.\n * Returns {what: string, where: string, link: string, render: boolean}.\n */\nexport function interpretFw (\n  fw: { network: string, address: string, updateHeight: number, updateTimestamp: number }\n) {\n  // blank address means it was removed\n  if (fw.address === '') {\n    return {\n      render: false\n    }\n  }\n\n  if (fw.network === 'p2wsh' || fw.network === 'btc') {\n    return {\n      where: 'btc:',\n      what: (\n        fw.address\n      ),\n      link: (\n        'https://blockstream.info/address/' + fw.address\n      ),\n      render: true\n    }\n  }\n\n  if (fw.network === 'http' || fw.network === 'https' || fw.network === 'url' || fw.network === 'web') {\n    return {\n      where: 'https://',\n      what: fw.address,\n      link: 'https://' + fw.address,\n      render: true\n    }\n  }\n\n  if (fw.network === 'twitter') {\n    return {\n      where: 'twitter.com/',\n      what: fw.address,\n      link: 'https://twitter.com/' + fw.address,\n      render: true\n    }\n  }\n\n  if (fw.network === 'github') {\n    return {\n      where: 'github.com/',\n      what: fw.address,\n      link: 'https://github.com/' + fw.address,\n      render: true\n    }\n  }\n\n  if (fw.network === 'youtube') {\n    return {\n      where: 'youtu.be/',\n      what: fw.address,\n      link: 'https://www.youtube.com/watch?v=' + fw.address,\n      render: true\n    }\n  }\n\n  // if unknown forward network, no link, and the rest is shown as is\n  return {\n    where: fw.network,\n    what: fw.address,\n    link: undefined,\n    render: true\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport { RoundButton } from './../general/RoundButton'\nimport { Store } from './../../store/'\nimport { searchAction, changeAliasAction } from './../../store/actions/'\nimport { SearchResults } from './../SearchResults'\nimport styles from './HomeContent.module.css'\n\nexport const HomeContent = (props: any): JSX.Element => {\n  const { state, dispatch } = React.useContext(Store)\n\n  // if page is loaded with #/id/:alias format\n  // this will change alias to that one\n  // then it will navigate to '/'\n  // and then it will do search with new alias\n  // http://localhost:3000/#/id/satoshi\n  const alias = props?.match?.params?.alias\n  if (alias) {\n    searchAction({...state, alias}, dispatch, props.history)\n  }\n\n  // is serach done\n  const isSearchDone = () => state.domain.checkedHistory\n\n  // put the textarea (by ref) into focus on mount and move caret to end\n  const inputEl = useRef<HTMLTextAreaElement>(null)\n  useEffect(() => {\n    if (inputEl && inputEl.current) {\n      inputEl.current.selectionEnd = inputEl.current.value.length\n      inputEl.current.selectionStart = inputEl.current.value.length\n      inputEl.current.focus()\n    }\n  }, [])\n\n  const placeHolder = 'satoshi'\n  return (\n    <>\n      <div className={\n        !isSearchDone()\n          ? [styles.lblMainTitle, styles.noselect].join(' ')\n          : [styles.lblMainTitle, styles.lblMainTitleAfter, styles.noselect].join(' ')\n      }>\n        <span>Bitcoin</span> Name System\n      </div>\n      <div className={\n        !isSearchDone()\n          ? styles.divSearch\n          : [styles.divSearch, styles.divSearchAfter].join(' ')\n      }>\n        <textarea\n          id=\"txtSearch\"\n          className={ styles.txtSearch }\n          cols={ 30 }\n          rows={ 1 }\n          spellCheck={ false }\n          value={ state.alias }\n          placeholder={ placeHolder }\n          ref={ inputEl }\n          onChange={ e => changeAliasAction(state, dispatch, e?.target?.value) }\n          onKeyPress={ e => { e.key === 'Enter' && searchAction(state, dispatch) } }\n        ></textarea>\n        <RoundButton\n          sizebutton='2.6'\n          onClick={ () => searchAction(state, dispatch) }\n        >\n          .btc\n        </RoundButton>\n      </div>\n      <div style={{ display: isSearchDone() ? 'block' : 'none' }}>\n        <SearchResults />\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { HomeContent } from './../components/HomeContent'\n\nconst Home = (props: any): JSX.Element => {\n  return (\n    <>\n      <HomeContent { ...props } />\n    </>\n  )\n}\nexport default Home","import React from 'react'\nimport { Store } from './../../store/'\nimport styles from './AboutContent.module.css'\n\nexport const AboutContent = () => {\n  const { state } = React.useContext(Store)\n\n  return (\n    <>\n      <div>\n        About page\n      </div>\n      <div className={ styles.wrapper }>\n        <pre>\n          { JSON.stringify({ ...state }, null, 2) }\n        </pre>\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { AboutContent } from './../components/AboutContent'\n\nexport default function About(): JSX.Element {\n  return (\n    <>\n      <AboutContent />\n    </>\n  )\n}\n\n// for lazy loading:\n// const RoundButton = React.lazy<any>(() => import('../components/RoundButton')\n// <React.Suspense\n//   fallback={\n//     <div>loading...</div>\n//   }\n// >\n// </React.Suspense>\n","import React, { useState } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P1RestoreOrBackup.module.css'\nimport { createNewWalletAction, changePageInfoAction } from '../../../store/actions/'\nimport sanitize from './../../../helpers/sanitize'\nimport { Store } from './../../../store/'\n\nenum pages {\n  ROOT,\n  NEW_WALLET,\n  LOAD_BACKUP\n}\n\n// restore backup or create new\nexport const P1RestoreOrBackup = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n  const [ page, setPage ] = useState(pages.ROOT) // local state\n  const [ backup, setBackup ] = useState('') // local state\n\n  // count non empty string strings separated by spaces\n  const wordCount = backup.split(' ').filter(v => v !== '').length\n\n  return (\n    <div className={ styles.wrapper }>\n\n      {/* ROOT PAGE */}\n      <div\n        style={{ display: page === pages.ROOT ? 'block' : 'none' }}\n      >\n        <div\n          className={ styles.title }\n        >\n          Need <span className={ styles.Orange }>BTC</span>\n          address to control<br />\n          the domain name\n        </div>\n        <div\n          className={ styles.buttonWrapper }\n        >\n          <RoundButton\n            show={ (state.wallet.mnemonic.length > 0) ? 'false' : 'true' }\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n              createNewWalletAction(state, dispatch)\n            }}\n          >\n            I need a new wallet\n          </RoundButton>\n          <RoundButton\n            show={ (state.wallet.mnemonic.length > 0) ? 'true' : 'false' }\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n            }}\n          >\n            Current backup\n          </RoundButton>\n          <RoundButton\n            onClick={() => {\n              setPage(pages.LOAD_BACKUP)\n            }}\n          >\n            Restore from backup\n          </RoundButton>\n          <RoundButton\n            show={ (!!state.wallet?.address).toString() }\n            onClick={() => {\n              changePageInfoAction(state, dispatch, 2)\n            }}\n            next='true'\n            colorbutton={'var(--colorHighlight)'}\n          >\n            Don't change wallet\n          </RoundButton>\n        </div>\n      </div>\n\n      {/* NEW_WALLET PAGE */ }\n\n      <div\n        className={ styles.contentWrapper }\n        style={{ display: page === pages.NEW_WALLET ? 'flex' : 'none' }}\n      >\n        <div className={ styles.describe }>\n          Randomly generated for domain control\n          <br /><br />\n          Backup this private phrase\n          or you will lose access\n        </div>\n        <div\n          id='divBackup'\n          spellCheck={ false }\n          className={ styles.backup }\n          onClick={ () => {\n            // select div entire contents\n            const thisDiv = document?.getElementById('divBackup')\n            if (thisDiv) {\n              window.getSelection()?.selectAllChildren(thisDiv)\n            }\n          }}\n        >\n          { state.wallet.mnemonic }\n        </div>\n        <div className={ styles.buttonWrapper } >\n          <RoundButton\n            onClick={() => {\n              setPage(pages.ROOT)\n            }}\n            back='true'\n          >\n            Back\n          </RoundButton>\n          <RoundButton\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n              createNewWalletAction(state, dispatch)\n            }}\n          >\n            New\n          </RoundButton>\n          <RoundButton\n            next='true'\n            onClick={() => {\n              changePageInfoAction(state, dispatch, 2)\n            }}\n          >\n            I'm done with backup\n          </RoundButton>\n        </div>\n      </div>\n\n      {/* LOAD_BACKUP PAGE */ }\n\n      <div\n        style={{ display: page === pages.LOAD_BACKUP ? 'block' : 'none' }}\n      >\n        <div className={ styles.title }>\n          Type or paste your backup here\n        </div>\n        <br></br>\n        <div>\n          { (wordCount).toString() + ' words now. 12 minimum.' }\n        </div>\n        <br></br>\n        <textarea\n          className={ styles.restoreBackup }\n          cols={ 30 }\n          rows={ 3 }\n          spellCheck={ false }\n          placeholder={ 'mnemonic backup' }\n          onChange={ e => {\n            // lowcaps, spaces, single space max, only one space on left while typing\n            const cleanString = sanitize(\n              e.target.value.toLowerCase(),\n              'lowcaps spaces single_space_width'.split(' ')\n            ).trimLeft()\n            setBackup(cleanString.trim()) // store without trailing space\n            e.target.value = cleanString // quick update\n          } }\n        ></textarea>\n        <div className={ styles.buttonWrapper } >\n          <RoundButton\n            onClick={() => {\n              setPage(pages.ROOT)\n            }}\n            back='true'\n          >\n            Back\n          </RoundButton>\n          <RoundButton\n            // 12 words minimum separated by spaces (TODO): proper checks\n            show={ (wordCount >= 12) ? 'true' : 'false' }\n            next='true'\n            onClick={() => {\n              createNewWalletAction(state, dispatch, backup)\n              changePageInfoAction(state, dispatch, 2)\n            }}\n          >\n            Done\n          </RoundButton>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","import React, { useEffect, useState } from 'react'\nimport styles from './CreateHeader.module.css'\nimport { Store } from './../../../store/'\n\n// restore backup or create new\nexport const CreateHeader = () => {\n  const { state } = React.useContext(Store) // global state\n\n  // Make sure entire alias is always visible on top through\n  // resizing based on letter count.\n  //\n  // get window width in component instance state 'width'\n  // so can resize alias based on char count\n  const [ width, setWidth ] = useState(window.innerWidth)\n  useEffect(() => {\n    const resize = () => { setWidth(window.innerWidth) }\n    window.addEventListener('resize', resize);\n    return () => window.removeEventListener('resize', resize);\n  }, [])\n  const domainName = state.alias + state.extension\n  // enforces max size to font size so 1 letter alias has same font as 19 letter alias\n  const fontScale = Math.min(\n      Math.floor(1.3 * width / domainName.length),\n      Math.floor(1.3 * width / 20)\n  )\n\n  const barHeight = { height: (0.12 * width + 0.4 * fontScale).toString() + 'px' }\n  const aliasMarginTop = { marginTop: (0.03 * width - 0.3 * fontScale).toString() + 'px' }\n  const aliasFontSize = { fontSize: fontScale.toString() + 'px' }\n\n  return (\n    <>\n      <div\n        className={ styles.cutOverflow }\n        style={ barHeight }\n      >\n        <div\n          className={ styles.bar }\n          style={ barHeight }\n        />\n      </div>\n      <div\n        className={ styles.wrapper }\n        style={ aliasMarginTop }\n      >\n        <span\n          className={ styles.alias }\n          style={ aliasFontSize }\n        >{ state.alias }</span>\n        <span\n          className={ styles.ext }\n          style={ aliasFontSize }\n        >{ state.extension }</span>\n      </div>\n      <div className={ styles.spacer } />\n    </>\n  )\n}\n\n","import React, { useState, useEffect } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P2LoadWallet.module.css'\nimport { Store } from '../../../store'\nimport { changePageInfoAction } from '../../../store/actions'\nimport qr from 'qrcode'\n\n/**\n * Load wallet page, including faucet link for testnet users\n */\nexport const P2LoadWallet = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n\n  // load QR code into local state\n  const [ qrCode, setQrCode] = useState()\n  useEffect(() => {\n    qr.toDataURL(state.wallet.address, { type: 'image/jpeg' }, (err: any, url: any) => {\n      if (!err) { setQrCode(url) }\n    })\n  }, [state.wallet.address])\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.contentWrapper }>\n        <div\n          className={ styles.imgQr }\n        >\n          {/* downloadable */}\n          <img src={qrCode} alt={'QR Code'} />\n        </div>\n        <div>\n          Fund your wallet to control domain.\n        </div>\n        <div className={ styles.address }>\n          { state.wallet.address }\n        </div>\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 1)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          colorbutton={'var(--colorHighlight)'}\n          show={ (state.network === 'testnet').toString() }\n          onClick={ () => {\n            // open faucet page in new window\n            // segwit compatible:\n            // 1) https://testnet-faucet.mempool.co/\n            // 2) https://bitcoinfaucet.uo1.net/\n            window.open('https://bitcoinfaucet.uo1.net/', '_blank')\n            // window.open('https://testnet-faucet.mempool.co/', '_blank')\n          }}\n        >\n          Testnet: tBTC faucet\n        </RoundButton>\n        <RoundButton\n          onClick={ () => {\n            // open blockstream explorer for address in new window/tab\n            const pathEdit = (state.network === 'testnet') ? 'testnet/' : ''\n            window.open(\n              `https://blockstream.info/${pathEdit}address/${state.wallet.address}`\n            , '_blank')\n          }}\n        >\n          Open explorer\n        </RoundButton>\n        <RoundButton\n          next='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 3)\n          }}\n        >\n          Ready\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P3DomainAndWallet.module.css'\nimport { Store } from '../../../store'\nimport { changePageInfoAction } from '../../../store/actions'\nimport { scanAddressFullyAction } from './../../../store/actions'\nimport { ActionTypes } from './../../../interfaces'\nimport { getUnspentSum } from './../../../helpers/bitcoin'\n\n/**\n * Bid on network\n */\nexport const P3DomainAndWallet = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n\n  // Local state: keep track if API is busy\n  const [ apiStatus, setApiStatus ] = React.useState('ok')\n\n  // on state update detected by timestamp, reset api status\n  React.useEffect(() => { setApiStatus('ok') }, [ state.lastTimeStamp ])\n\n  // most important for domain notificaiton address is the transaction history to know ownership\n  // but also the current utxo in case we want to control the domain\n  const domainInfo = () => {\n    if (state.domain.checkedHistory && state.domain.checkedUtxo) {\n      return ('✓')\n    } else {\n      return ('needs scan')\n    }\n  }\n\n  // wallet needs utxo info including raw tx & tx history for nonce\n  const walletInfo = () => {\n    if (state.wallet.checkedHistory && state.wallet.checkedUtxo) {\n      return ( '✓' )\n    } else {\n      return ('needs scan')\n    }\n  }\n\n  // are all necessary scans done\n  const areScansDone = () => {\n    return (\n      state.wallet.checkedUtxo &&\n      state.wallet.checkedHistory &&\n      state.domain.checkedUtxo &&\n      state.domain.checkedHistory\n    )\n  }\n\n  // Conditions to enable next pages.\n  // if owner - full control\n  // if domain available - bid\n  // if not owner, warn user\n  // (TODO) if auction period, challenge bids\n  const readyStatus = () => {\n    if (!areScansDone()) {\n      // needs scans\n      return { isReady: false,  type: 'missing', info: 'Scan both to move on' }\n    }\n    const ownerAddress = state.domain.currentOwner;\n    const walletAddress = state.wallet.address;\n    const isWalletAddress = (walletAddress !== '')\n    const isDomainAvailable = (ownerAddress === '')\n    const isWalletTheOwner = (walletAddress === ownerAddress)\n    if (!isWalletAddress) {\n      return { isReady: false,  type: 'nowallet', info: 'No wallet loaded' }\n    }\n    if (isWalletTheOwner && !isDomainAvailable) {\n      return { isReady: true,   type: 'owner',    info: 'Your domain ready' }\n    }\n    if (!isWalletTheOwner && isDomainAvailable) {\n      return { isReady: true,   type: 'open',     info: 'Domain is available' }\n    }\n    if (!isWalletTheOwner && !isDomainAvailable) {\n      return { isReady: false,  type: 'taken',    info: 'Not your domain' }\n    }\n    console.log('Unknown status of ownership', ownerAddress, walletAddress, isWalletAddress, isDomainAvailable, isWalletTheOwner)\n    return { isReady: false,    type: 'unknown',  info: '' }\n  }\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Wallet and domain history needed. <br />\n        (No offline method yet)\n      </div>\n      <div className={ styles.domainInfo }>\n        { (apiStatus !== 'domain')  && 'Domain ' + domainInfo() }\n        { (apiStatus === 'domain')  && 'Domain scanning...' }\n      </div>\n      <div className={ styles.domainButton }>\n        <RoundButton\n          onClick={ () => {\n            if (apiStatus === 'ok') {\n              setApiStatus('domain')\n              scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_DOMAIN)\n            }\n          }}\n        >\n          API Scan\n        </RoundButton>\n      </div>\n      <div className={ styles.walletInfo }>\n        { (apiStatus !== 'wallet')  && 'Wallet ' + walletInfo() }\n        { (apiStatus === 'wallet') && 'Wallet scanning...' }\n      </div>\n      <div className={ styles.walletButton }>\n        <RoundButton\n          onClick={ () => {\n            if (apiStatus === 'ok') {\n              setApiStatus('wallet')\n              scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_WALLET)\n            }\n          }}\n        >\n          API Scan\n        </RoundButton>\n      </div>\n      <div className={ styles.unspent }>\n        <div className={ styles.balance }>\n          { state.wallet.checkedUtxo? (getUnspentSum(state.wallet.utxoList) / 1e8).toFixed(8) : 'n/a' }\n        </div>\n        { (state.network === 'testnet') ? ' tBTC' : ' BTC' }\n      </div>\n      <div className={ styles.ownership }>\n        { readyStatus().info }\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 2)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          show={ readyStatus().isReady ? 'true' : 'false' }\n          next='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 4)\n          }}\n        >\n          Ready\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P4ActionChoice.module.css'\nimport { Store } from '../../../store'\nimport { changePageInfoAction } from '../../../store/actions'\n\nimport { runAllActionPermissionChecks, calcBnsState } from './../../../helpers/bns/'\n\n\n/**\n * Bid on network\n */\nexport const P4ActionChoice = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n\n  // simulate bns state once again just in case\n  // up to current block height\n  const bns = calcBnsState(\n    state.domain.txHistory,\n    state.domain.domainName,\n    state.chain.height,\n    state.network\n  )\n  // and get all permissions\n  const checkActions = runAllActionPermissionChecks(bns, state.wallet.address)\n\n  // console.log('checkActions', checkActions())\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Choose an available action\n      </div>\n      <div className={ styles.contentWrapper }>\n        <div>\n          Allowed actions:\n        </div>\n        <div>\n        {\n          checkActions.map(action => {\n            if (action.isUsable) {\n              return (\n              <RoundButton\n                onClick={ () => {\n                  changePageInfoAction(state, dispatch, 5)\n                }}\n                key={ action.info }\n              >\n                { action.info }\n              </RoundButton>\n              )\n            } else {\n              return ''\n            }\n          })\n        }\n        </div>\n        <div>\n          Unavailable actions:\n        </div>\n        <div>\n        {\n          checkActions.map(action => {\n            if (!action.isUsable) {\n              return (\n                <div\n                  key={action.info}\n                >\n                  <div>\n                    { action.info }\n                  </div>\n                  <div>\n                    { action.permissionList.map((permission: any) => {\n                      return (\n                        <div\n                          key={permission.info}\n                        >\n                          * { permission.info } : { permission.isAllowed ? 'passed' : 'failed' }\n                        </div>\n                      )\n                    })}\n                  </div>\n                </div>\n              )\n            } else {\n              return ('')\n            }\n          })\n        }\n        </div>\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 3)\n          }}\n        >\n          Back\n        </RoundButton>\n      </div>\n    </div>\n  )\n}","import React, { useEffect } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P5CustomForwards.module.css'\nimport { Store, getOwner } from '../../../store'\nimport { changePageInfoAction } from '../../../store/actions'\nimport { calcBidDomainTx, stringByteCount, BYTES_MAX } from '../../../helpers/bns'\nimport sanitize from '../../../helpers/sanitize'\n\n/**\n * Bid on network\n */\nexport const P5CustomForwards = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  // array of network:forwardingAddress objects\n  const forwards = getOwner(state)?.forwards.slice().reverse() || []\n\n  // local state for plannedChanges to embed (content inside textboxes for network/address)\n  const [customAdd, setCustomAdd] = React.useState({network: '', address: '' })\n\n  // local state for all plannedChanges to embed in this tx\n  const initialPlannedChanges = {}\n  const [plannedChanges, setPlannedChanges] = React.useState(\n    initialPlannedChanges as { [key: string]: string }\n  )\n\n  // local state for tx hex\n  const [tx, setTx] = React.useState({ hex: '', txid: '' })\n\n  // combine forwards into a string for the tx\n  const combineForwards = (objForwards: any) => {\n    let forwardsString = ''\n    Object.keys(objForwards).forEach(fwNetwork => {\n      forwardsString += fwNetwork + ' ' + objForwards[fwNetwork] + ' '\n    })\n    if (forwardsString.length > 0) { forwardsString = forwardsString.slice(0, -1) }\n    console.log('string to embed:', '\"' + forwardsString + '\"')\n    return forwardsString\n  }\n\n  // calculate tx (on mount or changes in global state or local plannedChanges to embed)\n  useEffect(() => {\n    try { // to make tx\n      setTx(\n        calcBidDomainTx(\n          combineForwards(plannedChanges),\n          state.wallet,\n          state.domain,\n          state.settings.feeRate,\n          state.network\n        )\n      )\n    } catch (e) {\n      // tx creation expected to fail often\n    }\n  }, [state, plannedChanges])\n\n  console.log('tx attempt info', tx)\n\n  const bytesOfChanges = stringByteCount(combineForwards(plannedChanges))\n  console.log(bytesOfChanges)\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Update forwarding information\n      </div>\n      <div className={ styles.changes }>\n        {/* bytes info */ }\n        { (Object.keys(plannedChanges).length === 0) && 'Nothing added yet' }\n        { (bytesOfChanges <= BYTES_MAX) &&\n          <div className={ styles.bytesLeft }>\n            { BYTES_MAX - bytesOfChanges } Bytes left\n          </div>\n        }\n        { (bytesOfChanges > BYTES_MAX) &&\n          <div className={ styles.bytesOver }>\n            Too much by { bytesOfChanges - BYTES_MAX } Bytes\n          </div>\n        }\n        { Object.keys(plannedChanges).map((fwNetwork) => {\n          return (\n            <div\n              className={ styles.updateItem }\n              key={ fwNetwork }\n              onClick={ () => {\n                setCustomAdd({ network: fwNetwork, address: plannedChanges[fwNetwork] })\n              } }\n            >\n              <div\n                className={ styles.updateInfo }\n              >\n                {\n                  (plannedChanges[fwNetwork] !== '')\n                    ? (<>\n                      Updating forwarding on <span>{ ' ' + fwNetwork + ' ' }</span>\n                      network to address of <span>{ ' ' + plannedChanges[fwNetwork] + ' ' }</span>\n                      <i>{' '}(+{ stringByteCount(fwNetwork + ' ' + plannedChanges[fwNetwork]) }B)</i>\n                    </>)\n                    : (<>\n                      Deleting previously set forwarding information for\n                      <span>{ ' ' + fwNetwork + ' '}</span> network\n                      <i>{' '}(+{ stringByteCount(fwNetwork + ' ' + plannedChanges[fwNetwork]) }B)</i>\n                    </>)\n                }\n              </div>\n              <div\n                className={ ['btnCircle', styles.updateCancel, 'addTooltipRight'].join(' ') }\n                onClick={ (e) => {\n                  const newData = { ...plannedChanges }\n                  delete newData[fwNetwork]\n                  setPlannedChanges(newData)\n                  e.stopPropagation()\n                } }\n              >\n                <span>×</span>\n                <aside>Remove from planned changes</aside>\n              </div>\n            </div>\n          )\n        }) }\n      </div>\n      <div className={ styles.editor } >\n        { (customAdd.network.length > 0) && <div\n          className={ [styles.btnDelete, 'canPress'].join(' ') }\n          onClick={ () => {\n            setPlannedChanges({\n              ...plannedChanges,\n              [customAdd.network]: ''\n            })\n            setCustomAdd({ network: '', address: '' })\n          } }\n        >\n            No address\n        </div> }\n        <textarea\n          spellCheck={ false }\n          value={ customAdd.network }\n          className={ styles.editorNetwork }\n          placeholder={ 'network' }\n          onChange={ (e) => {\n            const cleanText = sanitize(e.target.value, 'oneline')\n            setCustomAdd({ ...customAdd, network: cleanText })\n            e.target.value = cleanText\n          } }\n        ></textarea>\n        <textarea\n          spellCheck={ false }\n          value={ customAdd.address }\n          className={ styles.editorAddress }\n          placeholder={ 'address on network' }\n          onChange={ (e) => {\n            const cleanText = sanitize(e.target.value, 'oneline')\n            setCustomAdd({ ...customAdd, address: e.target.value })\n            e.target.value = cleanText\n          } }\n        ></textarea>\n        <div\n          className={ ['btnCircle', styles.btnAdd, 'canPress', 'addTooltip'].join(' ') }\n          onClick={ () => {\n            setPlannedChanges({\n              ...plannedChanges,\n              [customAdd.network]: customAdd.address\n            })\n            setCustomAdd({ network: '', address: '' })\n          } }\n        >\n          <span>+</span>\n          <aside>Add to planned changes</aside>\n        </div>\n      </div>\n      <div className={ styles.pastList } >\n        { forwards.map((fw: any, i: number) => {\n          return (\n            <div\n              className={ styles.pastPair }\n              key={ i }\n              onClick={ () => {\n                setCustomAdd({ network: fw.network, address: fw.address })\n              } }\n            >\n              <div className={ styles.pastNetwork } >\n                { fw.network }\n              </div>\n              <div className={ styles.pastAddress } >\n                { fw.address }\n              </div>\n            </div>\n          )\n        }) }\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 3)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          next='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 6)\n          }}\n        >\n          Ready\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport { Store } from '../../../store'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P6Broadcast.module.css'\nimport { changePageInfoAction } from '../../../store/actions'\n\n/**\n * Broadcast tx page.\n * Fee selection.\n * Transaction summary/status. *\n */\nexport const P6Broadcast = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Decide fee rate to broadcast\n      </div>\n      <div className={ styles.feeSelection }>\n        <div className={ styles.Rate }>\n          Fee 1.1 sat/vByte\n        </div>\n        <div className={ styles.usdAPI }>\n          get USD estimates\n        </div>\n        <div className={ styles.feeAPI }>\n          get fee estimates\n        </div>\n      </div>\n      <div className={ styles.txSummary }>\n        tx stats or tx fail\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton>\n          Broadcast (TODO)\n        </RoundButton>\n        <RoundButton\n          onClick={ () => changePageInfoAction(state, dispatch, 4)\n          }\n        >\n          Back\n        </RoundButton>\n      </div>\n\n    </div>\n  )\n}","import React from 'react'\nimport { Store } from './../../store/'\nimport { P1RestoreOrBackup } from '../CreateSteps/P1RestoreOrBackup'\nimport { P2LoadWallet } from '../CreateSteps/P2LoadWallet'\nimport { P3DomainAndWallet } from '../CreateSteps/P3DomainAndWallet'\nimport { P4ActionChoice } from '../CreateSteps/P4ActionChoice'\nimport { P5CustomForwards } from '../CreateSteps/P5CustomForwards'\nimport { P6Broadcast } from './../CreateSteps/P6Broadcast'\nimport styles from './CreateNavigator.module.css'\n\n/**\n * Handle navigation of alias manipulation\n */\nexport const CreateNavigator = () => {\n  // global state\n  const { state } = React.useContext(Store)\n\n  const page = state.pageInfo?.current\n\n  !page && console.log('Unknown Page')\n\n  return (\n    <div className={ [styles.wrapper, 'scrollbar'].join(' ') }>\n      <div className={ styles.horizontalScaler } >\n        { (page === 1) && <P1RestoreOrBackup /> }\n        { (page === 2) && <P2LoadWallet /> }\n        { (page === 3) && <P3DomainAndWallet /> }\n        { (page === 4) && <P4ActionChoice /> }\n        { (page === 5) && <P5CustomForwards /> }\n        { (page === 6) && <P6Broadcast /> }\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { CreateHeader } from './../components/CreateSteps/CreateHeader'\nimport { CreateNavigator } from './../components/CreateNavigator'\n\n/**\n * Combine header & body components for alias manipulation\n */\nexport default function Create () {\n  return (\n    <>\n      <CreateHeader />\n      <CreateNavigator />\n    </>\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styles from './Navbar.module.css'\n\nexport const Navbar = (): JSX.Element => {\n  return (\n    <>\n      <div\n        className={ styles.warning }\n      >\n        FOR TESTING, DO NOT USE\n      </div>\n      <div\n        className={ styles.root }\n      >\n        <a\n          href=\"https://github.com/ildarmgt/BitcoinNameSystem\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          { 'source' }\n        </a>\n        <Link to='/about'>about</Link>\n        <Link to='/create'>owners</Link>\n        <Link to='/'>search</Link>\n      </div>\n    </>\n  )\n}\n\n// Hash history cannot PUSH the same path; a new entry will not be added to the history stack\n// Only issue is the warning in console, but that only exists in development mode so can be ignored.","import React from 'react';\nimport { Route, Switch } from 'react-router-dom'\nimport Home from './pages/Home'\nimport About from './pages/About'\nimport Create from './pages/Create'\nimport { Navbar } from './components/Navbar'\n\n// using for routing\nconst App = (): JSX.Element => {\n  // onbtc.me?satoshi can now forward to onbtc.me/#/id/satoshi which resets to onbtc.me after search\n  // redirect to auto searching path routed in return and remove query from url\n  const searchParam = (new URLSearchParams(window.location.search)).keys().next().value\n  searchParam && console.log('search param detected after ?', searchParam)\n  // no forward slash before # in string is vital\n  searchParam && window.history.pushState({}, '', window.location.pathname + '#/id/' + searchParam)\n\n  return (\n    <>\n      {/* switch only renders first match instead of all matches */}\n      <Switch>\n        <Route path='/id/:alias' component={Home} />\n        <Route exact path='/id/' component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/create\" component={Create} />\n        <Route path='/:noise' component={Home} />\n        <Route exact path='/' component={Home} />\n      </Switch>\n      <Navbar />\n      {/* <Route exact path=\"/\" render={() => <Home />} /> */}\n    </>\n  );\n}\nexport default App;\n","import React, { useState, useEffect } from 'react'\nimport styles from './DevPanel.module.css'\nimport { Store } from '../../store/'\nimport { ActionTypes } from './../../interfaces/'\nconst json = require('./../../utils/test.json');\n\ninterface IState {\n  blShow: boolean\n  setShow: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nexport const DevPanel = (props: any): JSX.Element => {\n  const { state, dispatch } = React.useContext(Store) // global state\n\n  // store if DevPanel is hidden\n  const [hidden, setHidden] = useState<boolean>(false);\n\n  // reruns to reattach keyup event to toggle hidden class\n  useEffect(() => {\n    const onDevKey = (e: any) => {\n      if (e.key === '`') {\n        setHidden(!hidden)\n      } else {\n        // give focus back to the input bar\n        if (document.activeElement?.id !== 'txtSearch') {\n          const txtSearch = document.getElementById('txtSearch') as HTMLTextAreaElement\n          txtSearch?.focus()\n        }\n      }\n    }\n    document.addEventListener('keyup', onDevKey)\n    return () => {\n      document.removeEventListener('keyup', onDevKey)\n    }\n  }, [hidden])\n\n  const onOutlineClick = () => {\n    const id: string = 'outliner';\n    const sheet: HTMLElement | null = document.getElementById(id);\n    if (!sheet) {\n      const outlineCss = '* {box-shadow: 0 0 0 1px red;}'\n      const style = document.createElement('style')\n      style.type = 'text/css'\n      style.id = id\n      style.appendChild(document.createTextNode(outlineCss))\n      document.head.appendChild(style)\n    } else {\n      sheet.parentNode?.removeChild(sheet)\n    }\n  }\n\n  const dlState = () => {\n    let data = \"text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(state))\n    let a = document.createElement('a')\n    a.href = 'data:' + data\n    a.download = 'test.json'\n    a.innerHTML = 'download JSON'\n    let container = document.getElementById('container')\n    container?.appendChild(a)\n    a.click()\n    a.remove()\n  }\n\n  return (\n    <div\n      className={[\n        styles.divDev,\n        !hidden ? styles.hidden : ''\n      ].join(' ')}\n      { ...props }\n    >\n      <div><b>DevPanel</b></div>\n      <div\n        className={ styles.button }\n        onClick={ () => {\n          dlState()\n        } }\n      >\n        Save State\n      </div>\n      <div\n        className={ [styles.btnOutline, styles.button].join(' ') }\n        onClick={ onOutlineClick }\n      >\n        Outline\n      </div>\n      <div\n        className={ styles.button }\n        onClick={ () => {\n          console.log(json);\n          dispatch({ type: ActionTypes.LOAD_STATE, payload: json });\n        } }\n      >\n        Load State\n      </div>\n      <div\n        className={ styles.button }\n        onClick={ () => {\n          console.log(state);\n        } }\n      >\n        Console State\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './css/global.css';\nimport App from './App';\nimport { StoreProvider } from './store'\nimport { DevPanel } from './components/DevPanel'\n\n// Using for store access and hash router base\nReactDOM.render(\n  <StoreProvider>\n    <HashRouter>\n      <App />\n    </HashRouter>\n    <DevPanel />\n  </StoreProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\n// import * as serviceWorker from './serviceWorker';","import crypto from 'crypto'\n\n/**\n * Encrypt - symmetric - aes-256-crt\n * @param   {string}  stringText      To be encrypted (up to 80 bytes)\n * @param   {string}  stringForKey    Derive Key from (not final Key).\n * @param   {string}  stringForIV     Derive IV from (not final IV). Defaults as stringForKey.\n * @returns {Buffer}                  Buffer to embed in tx.\n */\nexport const encrypt = (\n  stringText: string, stringForKey: string, stringForIV: string = stringForKey\n) => {\n  // aes-NUMBER-TYPE\n  // Must have key size matching NUMBER (in aes name) of bits (NUMBER/8 bytes)\n  // Must have IV matching encryption block size, 16 bytes for AES128-to-256-range in cbc mode\n  // sha256 can make 32 byte buffer out of anything and then .slice(0, N) can cut it to N bytes\n\n  const key = crypto.createHash('sha256').update(stringForKey).digest()             // 32 bytes\n  const iv = crypto.createHash('sha256').update(stringForIV).digest().slice(0, 16)  // 16 bytes\n\n  let cipher = crypto.createCipheriv('aes-256-ctr', key, iv)\n  let encrypted = cipher.update(Buffer.from(stringText))\n\n  encrypted = Buffer.concat([encrypted, cipher.final()])\n\n  return encrypted\n}\n\n /**\n * Decrypt - symmetric - aes-256-crt\n * @param   {Buffer}  stringText      Buffer to be decrypted.\n * @param   {string}  stringForKey    Derive Key from (not final Key).\n * @param   {string}  stringForIV     Derive IV from (not final IV). Defaults as stringForKey.\n * @returns {Buffer}                  Buffer to utf8 embeded in tx.\n */\nexport const decrypt = (\n  bufferCypher: Buffer, stringForKey: string, stringForIV: string = stringForKey\n) => {\n\n  const key = crypto.createHash('sha256').update(stringForKey).digest()             // 32 bytes\n  const iv = crypto.createHash('sha256').update(stringForIV).digest().slice(0, 16)  // 16 bytes\n\n  let decipher = crypto.createDecipheriv('aes-256-ctr', key, iv)\n\n  // first part\n  let decrypted = decipher.update(bufferCypher)\n\n  // the rest\n  decrypted = Buffer.concat([decrypted, decipher.final()])\n\n  return decrypted.toString('utf8')\n}\n\n","import { newUser } from './initialState'\nimport { OWNERSHIP_DURATION_BY_BLOCKS, MIN_BURN, MIN_NOTIFY } from './constants'\nimport { IUser, Iforward, IBnsState } from './types/'\nimport { decrypt } from './cryptography'\n\n// ========== helper functions =====================\n\nexport const existsCurrentOwner = (st: IBnsState): boolean => st.domain.currentOwner !== ''\n\nexport const getOwnerAddress = (st: IBnsState): string => st.domain.currentOwner || ''\n\nexport const setOwner = (st: IBnsState, newOwnerAddress: string) => { st.domain.currentOwner = newOwnerAddress }\n\nexport const getUser = (st: IBnsState, address: string): IUser => st.domain.users[address]\n\nexport const getOwner = (st: IBnsState) => {\n  const ownerAddress = getOwnerAddress(st)\n  if (!ownerAddress) return undefined\n  return getUser(st, ownerAddress)\n}\n\nexport const updateOwnerHistory = (st: IBnsState): void => {\n  st.domain.ownersHistory.push(getOwner(st) || JSON.parse(JSON.stringify(newUser)))\n}\n\nexport const clearOwner = (st: IBnsState): void => { st.domain.currentOwner = '' }\n\nexport const getCurrentHeight = (st: IBnsState): number => st.chain?.currentHeight || 0\nexport const getParsedHeight = (st: IBnsState): number => st.chain?.parsedHeight || 0\nexport const setParsedHeight = (st: IBnsState, height: number): void => { st.chain && (st.chain.parsedHeight = height) }\n\nexport const getNotificationAddress = (st: IBnsState): string => st.domain.notificationAddress || ''\n\nexport const getLastOwnerBurnedValue = (st: IBnsState): number => getOwner(st)?.burnAmount || 0\n\nexport const isOwnerExpired = (st: IBnsState): boolean => {\n  if (existsCurrentOwner(st)) return true\n  const owner = getOwner(st)\n  if (!owner) return true\n  const blocksSinceUpdate = getParsedHeight(st) - owner.winHeight\n  return blocksSinceUpdate > OWNERSHIP_DURATION_BY_BLOCKS\n}\n\n// ===== tx functions (getters) =====================\n\nexport const getTxTimestamp = (tx: any): number => tx.status.block_time || 0\nexport const getTxHeight = (tx: any): number => tx.status.block_height || 0\n\nexport const getTxOutput0BurnValue = (tx: any): number => tx.vout[0]?.value || 0\nexport const getTxOutput0Data = (tx: any):string => {\n  if (isOpreturnOutput0(tx)) {\n    // remove 'OP_RETURN OP_PUSHBYTES_5 ' from it and return the rest\n    return tx.vout[0].scriptpubkey_asm.split(' ').slice(2).join('')\n  }\n  return ''\n}\n\nexport const getTxOutput1NotifyValue = (tx: any): number => tx.vout[1]?.value || 0\nexport const getTxOutput1NotifyAddress = (tx: any): string => tx.vout[1]?.scriptpubkey_address || ''\n\nexport const getTxInput0SourceUserAddress = (tx: any): string => tx.vin[0]?.prevout.scriptpubkey_address || ''\n\n\n// ======= update state from tx (setters) ========\n\n// update the info for the source user of the tx within bns state\nexport const updateSourceUserFromTx = (st: IBnsState, tx: any): void => {\n  const fromAddress = getTxInput0SourceUserAddress(tx)\n\n  // create new user if not already one of users\n  if (!(fromAddress in st.domain.users)) {\n    // create new user object by copying values of newUser object\n    st.domain.users[fromAddress] = JSON.parse(JSON.stringify(newUser))\n    console.log('new source created:')\n  }\n\n  // update user\n  const user = st.domain.users[fromAddress]\n  user.address = fromAddress\n  user.nonce = user.updateHeight\n  user.updateHeight = getTxHeight(tx)\n  console.log('source:', user)\n}\n\nexport const addToUserForwards = (st: IBnsState, fromAddress: string, forwardsInThisTx: Array<Iforward>) => {\n  const user = getUser(st, fromAddress)\n  user.forwards = [...user.forwards, ...forwardsInThisTx]\n}\n\nexport const readEmbeddedData = (st: IBnsState, tx: any):void => {\n  // only go on if there is op_return with embedded data on output 0\n  if (!isOpreturnOutput0(tx)) {\n    console.log(getTxHeight(tx), ': no op_return found for txid')\n    return undefined\n  }\n\n  // get useful object references\n  const fromAddress = getTxInput0SourceUserAddress(tx)\n  const user = getUser(st, fromAddress)\n  const nonce = user.nonce.toString()\n\n  const embeddedDataHex = getTxOutput0Data(tx)\n  const embeddedDataBuffer = Buffer.from(embeddedDataHex, 'hex')\n\n  const decryptionKey = st.domain.domainName + user.address + nonce\n  const embeddedDataUtf8 = decrypt(embeddedDataBuffer, decryptionKey)\n  console.log(getTxHeight(tx), ': found embedded data:', embeddedDataUtf8)\n\n  // split by spaces into array\n  const embeddedDataUtf8Array = embeddedDataUtf8.split(' ')\n\n  // collect all forwards in this tx\n  const forwardsInThisTx: Array<Iforward> = []\n\n  embeddedDataUtf8Array.forEach((word: string, index: number) => {\n    // everything must be space separated in pairs\n    // so single block might mean failed decryption or\n    // last unpaired block might be padding or future versioning\n    // grabbing only odd and 1 before it values, only grabbing pairs\n    if (index % 2 === 1) {\n      const networkPiece = embeddedDataUtf8Array[index - 1]\n      const forwardingAddressPiece = word\n      const thisForward = {\n        network:          networkPiece,\n        address:          forwardingAddressPiece,\n        updateHeight:     getTxHeight(tx),\n        updateTimestamp:  getTxTimestamp(tx)\n      }\n      forwardsInThisTx.push(thisForward)\n    }\n  })\n\n  // update forwards on the user\n  addToUserForwards(st, fromAddress, forwardsInThisTx)\n}\n\n// ===== rule checks (getters) =====\n\n// Describe:    2 outputs minimum\n// Required:    ALL\nexport const atLeastTwoOutputs = (tx: any): boolean => tx.vout.length >= 2\n\n// Describe:    Is [0] output OP_RETURN type\n// Required:    ALL\nexport const isOpreturnOutput0 = (tx: any): boolean => tx.vout[0].scriptpubkey_asm.split(' ')[0] === 'OP_RETURN'\n\n// Describe:    Is [1] output this domain's notification address?\n// Required:    ALL\nexport const isNotify =  (st: IBnsState, tx: any): boolean => getTxOutput1NotifyAddress(tx) === getNotificationAddress(st)\n\n// Describe:    At least minimum amount used in notification output? (Dust level is main danger)\n// Required:    ALL\nexport const didNotifyMin = (tx: any): boolean => getTxOutput1NotifyValue(tx) >= MIN_NOTIFY\n\n// Describe:    Is sender the current domain owner (input [0], id'ed by address)?\n// Required:    renew lease\n// Irrelevant:  available domain claim, forwarding information updates (warn)\nexport const isAddressTheCurrentOwner = (st: IBnsState, address: string): boolean =>  getOwnerAddress(st) === address\n\n// Describe:    At least minimum amount burned?\n// Required:    available domain claim, renew lease\n// Irrelevant:  forwarding information updates\nexport const didBurnMin = (tx: any): boolean => getTxOutput0BurnValue(tx) >= MIN_BURN\n\n// Describe:    Burned at least as much as previously burnt\nexport const burnedPreviousRateMin = (st: IBnsState, tx: any): boolean => getTxOutput0BurnValue(tx) >= getLastOwnerBurnedValue(st)\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"divDev\":\"DevPanel_divDev__2q66m\",\"hidden\":\"DevPanel_hidden__Wlj3v\",\"btnOutline\":\"DevPanel_btnOutline__2FJLx\",\"button\":\"DevPanel_button__1DKHt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cutOverflow\":\"CreateHeader_cutOverflow__3s_72\",\"bar\":\"CreateHeader_bar__27ge1\",\"wrapper\":\"CreateHeader_wrapper__3cPTN\",\"alias\":\"CreateHeader_alias__1dNdj\",\"ext\":\"CreateHeader_ext__17sc6\",\"spacer\":\"CreateHeader_spacer__3tstm\"};","import * as bitcoin from 'bitcoinjs-lib'\nconst op = bitcoin.opcodes;\nconst hash160 = bitcoin.crypto.hash160;\n\n\n/**\n * Get p2wsh notificaiton address from domainName and network.\n * @param   {string} domainName         - full domainName to use (e.g. 'satoshi.btc').\n * @param   {string} networkChoice      - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @returns {object}                    - { notificationsAddress - p2wsh address derived from domainName }.\n */\nexport const calcP2WSH = (domainName: string, networkChoice: string) => {\n  const network = bitcoin.networks[networkChoice];\n\n  // convert domainName into buffer so it can be put into script\n  const bufferData = Buffer.from(domainName, 'utf8');\n\n  // easily spendable script for ACS notification output\n  // specific to this domainName\n  const witnessScript = bitcoin.script.compile([\n    hash160(bufferData),\n    op.OP_DROP\n  ]);\n\n  // calculate p2wsh address for this witnessScript & network\n  const p2wsh = bitcoin.payments.p2wsh({\n    redeem: {\n      output: witnessScript,\n      network\n    },\n    network\n  })\n  const notificationsAddress = p2wsh.address;\n\n  return {\n    notificationsAddress\n  };\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P2LoadWallet_wrapper__vI_bb\",\"contentWrapper\":\"P2LoadWallet_contentWrapper__UNLo4\",\"buttonWrapper\":\"P2LoadWallet_buttonWrapper__1rrct\",\"address\":\"P2LoadWallet_address__37xx2\",\"imgQr\":\"P2LoadWallet_imgQr__3Avh3\"};","import { IUser, IBnsState } from './types/'\n\n// Initializing values\n\nexport const newState: IBnsState = {\n  domain: {                                     // notification info for this domain name\n    domainName:                   '',           // domain name\n    notificationAddress:          '',           // p2wsh address for this domain name (alias + extension)\n    txHistory:                    [],           // array of all tx for this address (old addressHistory)\n    utxoList:                     [],           // array of all current utxo for this address\n    users:                        {},           // keeps track of interacting users / source addresses with addresses as keys\n    currentOwner:                 '',           // points to a source address or blank string\n    bidding:                      {},           // bidding\n    ownersHistory:                []            // owner history log\n  },\n  chain: {\n    parsedHeight:                 0,            // parsed height for derivation\n    currentHeight:                0             // real world block height\n  }\n}\n\n// values to initialize users with\nexport const newUser: IUser = {\n  address:        '',           // address in control\n  forwards:       [],           // for forwards later\n  burnAmount:     0,            // burned to get ownership\n  winHeight:      0,            // blockheight winning bid\n  winTimestamp:   0,            // winHeight in block's timestamp\n  nonce:          0,            // for counting previous notification height from this address, no matter good/bad/type\n  updateHeight:   0             // the height of most current parsed update, created after nonce height & therefore using it\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"roundButtonWrap\":\"RoundButton_roundButtonWrap__2X50a\",\"roundButton\":\"RoundButton_roundButton__tfjmf\",\"nextArrow\":\"RoundButton_nextArrow__SS6Nl\",\"backArrow\":\"RoundButton_backArrow__2MJJm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P4ActionChoice_wrapper__2u2J5\"};"],"sourceRoot":""}