{"version":3,"sources":["components/CreateNavigator/CreateNavigator.module.css","components/CreateSteps/P5CustomForwards/P5CustomForwards.module.css","components/CreateSteps/P6Broadcast/P6Broadcast.module.css","helpers/bns/constants.tsx","helpers/bns/calcTx.tsx","components/AboutContent/AboutContent.module.css","components/CreateSteps/P1RestoreOrBackup/P1RestoreOrBackup.module.css","components/CreateSteps/P4ActionChoice/P4ActionChoice.module.css","components/CreateSteps/P3DomainAndWallet/P3DomainAndWallet.module.css","components/SearchResults/SearchResults.module.css","helpers/bns/cryptography.tsx","helpers/bns/types/types.tsx","interfaces/index.tsx","components/general/RoundButton/RoundButton.tsx","store/reducers/Reducer.tsx","store/index.tsx","helpers/sanitize.js","store/actions/changeAliasAction.tsx","helpers/bns/actions/actions.tsx","helpers/bns/calcBnsState.tsx","helpers/bns/actions/batch.tsx","helpers/bns/findLatestForwards.tsx","helpers/bns/stringByteCount.tsx","api/blockstream.tsx","store/actions/searchAction.tsx","helpers/bitcoin.tsx","store/actions/createNewWalletAction.tsx","store/actions/changePageInfoAction.tsx","store/actions/scanAddressFullyAction.tsx","store/actions/changeChoicesBNSAction.tsx","components/SearchResults/SearchResults.tsx","helpers/timediff.tsx","helpers/bns/interpretFw.tsx","components/HomeContent/HomeContent.tsx","pages/Home.tsx","components/AboutContent/AboutContent.tsx","pages/About.tsx","components/CreateSteps/P1RestoreOrBackup/P1RestoreOrBackup.tsx","components/CreateSteps/CreateHeader/CreateHeader.tsx","components/CreateSteps/P2LoadWallet/P2LoadWallet.tsx","components/CreateSteps/P3DomainAndWallet/P3DomainAndWallet.tsx","components/CreateSteps/P4ActionChoice/P4ActionChoice.tsx","components/CreateSteps/P5CustomForwards/P5CustomForwards.tsx","components/CreateSteps/P6Broadcast/P6Broadcast.tsx","components/CreateNavigator/CreateNavigator.tsx","pages/Create.tsx","components/Navbar/Navbar.tsx","App.tsx","components/DevPanel/DevPanel.tsx","index.tsx","components/HomeContent/HomeContent.module.css","components/DevPanel/DevPanel.module.css","components/general/RoundButton/RoundButton.module.css","components/CreateSteps/CreateHeader/CreateHeader.module.css","components/Navbar/Navbar.module.css","helpers/bns/calcP2WSH.tsx","components/CreateSteps/P2LoadWallet/P2LoadWallet.module.css","helpers/bns/formathelpers.tsx","helpers/bns/initialState.tsx"],"names":["module","exports","console","warn","BYTES_MAX","MIN_BURN","MIN_NOTIFY","OWNERSHIP_DURATION_BY_BLOCKS","calcTx","wallet","domain","choices","networkChoice","vBytes","feeRate","user","getUser","address","network","bitcoin","calcP2WSH","domainName","notificationsAddress","fee","Math","ceil","valueNeeded","usedUtxoOfPayer","totalGathered","utxoList","forEach","utxo","push","value","Error","change","keyPair","fromWIF","WIF","psbt","setVersion","setLocktime","addInput","hash","txid","index","vout","sequence","nonWitnessUtxo","Buffer","from","hex","nonce","toString","encryptionKey","log","data","encrypt","embedString","embed","burnAmount","action","special","reduce","maxBurn","list","rules","max","output0value","addOutput","script","output","signInput","validateSignaturesOfInput","finalizeAllInputs","tx","extractTransaction","thisVirtualSize","virtualSize","getId","toHex","nInputs","ins","length","nOutputs","outs","byteLength","stringText","stringForKey","stringForIV","key","crypto","createHash","update","digest","iv","slice","cipher","createCipheriv","encrypted","concat","final","decrypt","bufferCypher","decipher","createDecipheriv","decrypted","BNSActions","ActionTypes","RoundButton","props","style","display","show","colorbutton","colorbuttontext","sizebutton","className","styles","roundButtonWrap","back","undefined","join","roundButton","backArrow","next","nextArrow","children","overhead","STORE_SEARCH_RESULTS_FAIL","STORE_SEARCH_RESULTS","TYPING","NEW_WALLET","CHANGE_PAGE_INFO","UPDATE_WALLET","UPDATE_DOMAIN","ACTION_FAIL","LOAD_STATE","CHOICES_BNS_ACTION","reducer","state","payload","type","lastTimeStamp","Date","now","txHistory","pageInfo","checkedWallet","chain","height","checkedDomain","current","initialState","mnemonic","alias","checkedLightSearch","notificationAddress","extension","users","currentOwner","bidding","ownersHistory","txHex","getOwner","st","ownerAddress","Store","React","createContext","sanitize","inputString","stringOrArray","Array","isArray","filter","logicFilters","choice","str","split","letter","resultingString","numbers","digits","map","parseInt","warning","outputString","indexOf","fn","RENEW","ONLY_FORWARDS","CLAIM_OWNERSHIP","OUTS_2","info","status","atLeastTwoOutputs","OUT_0","isOpreturnOutput0","OUT_1","isNotify","NOTIFIED_MIN","didNotifyMin","BURNED_MIN","didBurnMin","NO_OWNER","existsCurrentOwner","EXISTS_OWNER","BURN_LAST_WIN","burnedPreviousRateMin","getLastOwnerBurnedValue","USER_IS_OWNER","isSenderTheCurrentOwner","isAddressTheCurrentOwner","IS_OWNER_EXPIRED","isOwnerExpired","claimOwnershipAction","args","permissions","conditions","execute","getTxHeight","senderAddress","getTxInput0SourceUserAddress","setOwner","winHeight","winTimestamp","getTxTimestamp","getTxOutput0BurnValue","currentOwnerRenewAction","owner","updateForwardingInfoAction","readEmbeddedData","autoCheckForOwnerExpired","clearOwner","getParsedHeight","calcBnsState","notificationsHistory","currentHeight","JSON","parse","stringify","newState","reverse","sort","prev","block_height","setParsedHeight","updateSourceUserFromTx","areAllConditionsMet","eaCondition","actions","okConditions","okPermissions","areAllPermissionsMet","eaPermission","updateOwnerHistory","findLatestForwards","forwards","sortedForwards","updateHeight","currentNetworks","eaForward","startsWith","Object","values","stringByteCount","API_PATH_TESTNET","API_PATH_BITCOIN","getFeeEstimates","strNetwork","a","async","axios","get","res","rateLimit","getHeight","API_PATH","addRawTxToArray","arrayUtxo","erroredOutputs","error","arrayUtxoWithHex","entries","indexString","tries","getUTXOList","getAddressHistory","txPush","content","params","response","Promise","r","setTimeout","searchAction","dispatch","router","notificationsTxHistory","createNewWallet","bip39","generateMnemonic","seedBuffer","mnemonicToSeed","fromSeed","derivePath","toWIF","p2wpkh","pubkey","publicKey","loadWallet","strMnemonic","getUnspentSum","utxoArray","sum","createNewWalletAction","changePageInfoAction","page","scanAddressFullyAction","addressType","walletAddress","walletTxHistory","utxoListWalletAddress","utxoListNotificationAddress","changeChoicesBNSAction","SearchResults","useContext","diff","isExpired","dh","blocksUntilExpires","timestampMsec","referenceTimestampMsec","abs","d","floor","h","m","dhm","msDiff","timeDiff","latestForwards","wrapper","describe","expired","notExpired","listContainer","to","createLink","fw","ifw","render","where","what","link","interpretFw","listItem","href","encodeURI","target","rel","HomeContent","match","history","isSearchDone","inputEl","useRef","useEffect","selectionEnd","selectionStart","focus","lblMainTitle","lblMainTitleAfter","divSearch","divSearchAfter","id","txtSearch","cols","rows","spellCheck","placeholder","ref","onChange","e","sanitizedString","changeAliasAction","onKeyPress","onClick","Home","AboutContent","About","pages","CreateHeader","useState","window","innerWidth","width","setWidth","resize","addEventListener","removeEventListener","fontScale","min","barHeight","aliasMarginTop","marginTop","aliasFontSize","fontSize","cutOverflow","bar","ext","spacer","P1RestoreOrBackup","ROOT","setPage","backup","setBackup","wordCount","v","title","Orange","buttonWrapper","LOAD_BACKUP","contentWrapper","restoreBackup","cleanString","toLowerCase","trimLeft","trim","P2LoadWallet","qrCode","setQrCode","qr","toDataURL","err","url","imgQr","src","alt","open","pathEdit","P3DomainAndWallet","apiStatus","setApiStatus","readyStatus","isReady","domainInfo","domainButton","walletInfo","walletButton","unspent","balance","toFixed","ownership","P4ActionChoice","checkActions","allActions","checkedActions","checkedPermissions","permission","isAllowed","specialTxDirections","condition","isUsable","every","permissionList","runAllActionPermissionChecks","availableActions","unavailableActions","unavailableActions__title","unavailableActions__actionList","unavailableActions__actionList__action","unavailableActions__actionList__action__title","unavailableActions__actionList__action__permissionList","unavailableActions__actionList__action__permissionList__permission","P5CustomForwards","plannedChanges","plannedChangesSoFar","word","words","setPlannedChanges","objForwards","forwardsString","keys","fwNetwork","pastForwards","textboxContent","setTextboxContent","bytesOfChanges","combineForwards","changes","bytesLeft","bytesOver","updateItem","updateInfo","updateCancel","newData","stopPropagation","editor","btnDelete","editorNetwork","cleanText","editorAddress","btnAdd","pastList","i","pastPair","pastNetwork","pastAddress","P6Broadcast","feeText","setFeeText","showSuggestions","apiSuccess","min20","min40","min60","feeSuggestions","setFeeSuggestions","message","numberOfUpdates","countSoFar","ok","reason","broadcastStatus","setBroadcastStatus","fees","fees__rate","cleanNumber","parseFloat","fees__apicall","apiSuggest","tryFees","fees__feeSelection","fees__feeSelection__choice","txSummary","txid__button","PATH","txid__failed","CreateNavigator","horizontalScaler","Create","Navbar","isCreatePage","useHistory","location","pathname","isHomePage","isAboutPage","root","pageNum","selected","App","searchParam","URLSearchParams","search","pushState","path","component","exact","json","require","ReactDOM","useReducer","Provider","hidden","setHidden","onDevKey","document","activeElement","getElementById","divDev","button","encodeURIComponent","createElement","download","innerHTML","container","appendChild","click","remove","dlState","btnOutline","sheet","parentNode","removeChild","createTextNode","head","op","hash160","bufferData","witnessScript","compile","OP_DROP","p2wsh","redeem","getOwnerAddress","newOwnerAddress","newUser","parsedHeight","block_time","vin","prevout","scriptpubkey_address","fromAddress","embeddedDataHex","scriptpubkey_asm","getTxOutput0Data","embeddedDataBuffer","decryptionKey","embeddedDataUtf8","embeddedDataUtf8Array","forwardsInThisTx","thisForward","updateTimestamp","addToUserForwards","getTxOutput1NotifyAddress","getNotificationAddress","getTxOutput1NotifyValue"],"mappings":"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","file":"static/js/main.b459fc3a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CreateNavigator_wrapper__24rTe\",\"horizontalScaler\":\"CreateNavigator_horizontalScaler__2qmoi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P5CustomForwards_wrapper__2kAy2\",\"title\":\"P5CustomForwards_title__29aFH\",\"changes\":\"P5CustomForwards_changes__23bYg\",\"pastList\":\"P5CustomForwards_pastList__3rXdy\",\"buttonWrapper\":\"P5CustomForwards_buttonWrapper__3hvwB\",\"editor\":\"P5CustomForwards_editor__1ZVVF\",\"updateItem\":\"P5CustomForwards_updateItem__1wAhx\",\"updateCancel\":\"P5CustomForwards_updateCancel__3b5bW\",\"updateInfo\":\"P5CustomForwards_updateInfo__2OBcF\",\"editorNetwork\":\"P5CustomForwards_editorNetwork__1L6UB\",\"editorAddress\":\"P5CustomForwards_editorAddress__1N25M\",\"btnAdd\":\"P5CustomForwards_btnAdd__1tiSg\",\"btnDelete\":\"P5CustomForwards_btnDelete__3NCte\",\"pastPair\":\"P5CustomForwards_pastPair__3YvIk\",\"pastNetwork\":\"P5CustomForwards_pastNetwork__35eVe\",\"pastAddress\":\"P5CustomForwards_pastAddress__3-W_H\",\"bytesLeft\":\"P5CustomForwards_bytesLeft__2zySr\",\"bytesOver\":\"P5CustomForwards_bytesOver__ysfMq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P6Broadcast_wrapper__32tq-\",\"title\":\"P6Broadcast_title__2fzea\",\"fees\":\"P6Broadcast_fees__STZ2e\",\"txSummary\":\"P6Broadcast_txSummary__24FzE\",\"txid\":\"P6Broadcast_txid__24mxj\",\"txid__button\":\"P6Broadcast_txid__button__1wgsS\",\"txid__failed\":\"P6Broadcast_txid__failed__2YaDs\",\"buttonWrapper\":\"P6Broadcast_buttonWrapper__ROAk6\",\"fees__rate\":\"P6Broadcast_fees__rate__16JxD\",\"fees__apicall\":\"P6Broadcast_fees__apicall__3yPVT\",\"fees__feeSelection\":\"P6Broadcast_fees__feeSelection__rCjmf\",\"fees__feeSelection__choice\":\"P6Broadcast_fees__feeSelection__choice__1jG8w\"};","/**\n * Constants used to determine rules on BNS\n */\n\n// testing mode true/false to reduce waiting time for tests\nconst TESTING = true\nTESTING && console.warn('Testing mode ON')\n\n// max data safe to embed in OP_RETURN type tx (bytes)\nconst BYTES_MAX = 80\n\n// Satoshis to burn minimum for attempting ownership (satoshi)\nconst MIN_BURN = 1000\n\n//  Minimum to use for notification output (satoshi)\nconst MIN_NOTIFY  = 1000\n\n// Ownership duration after victory (blocks)\nconst OWNERSHIP_DURATION_BY_BLOCKS = !TESTING ? 52560 : 1000\n// ^ (real) 52560 blocks ~365 days.\n// (testing) 288 blocks ~48 hours. 1000 blocks ~ a week\n// Block times can vary from 10 minutes.\n// const CHALLENGE_PERIOD_DURATION_BY_BLOCKS = 3456\n// ^ ~24 hours. Only matters if someone is monitoring specific domainName, otherwise they won't know what domainName the bids are for.\n\nexport {\n  TESTING,\n  MIN_BURN,\n  MIN_NOTIFY,\n  OWNERSHIP_DURATION_BY_BLOCKS,\n  BYTES_MAX\n}","import * as bitcoin from 'bitcoinjs-lib'\nimport { calcP2WSH } from './calcP2WSH'\nimport { MIN_BURN, MIN_NOTIFY } from './constants'\nimport { encrypt } from './cryptography'\nimport { I_Domain, I_Action_Choice } from './types/'\nimport { getUser } from './formathelpers'\n\ninterface I_Tx_Result {\n  thisVirtualSize: number\n  txid: number\n  hex: string\n  valueNeeded: number\n  fee: number\n  change: number\n  burnAmount: number\n  totalGathered: number\n  nInputs: number\n  nOutputs: number\n}\n\n/**\n * Creates hex of tx to bid on domain.\n * Throws error if not enough funds.\n * Leave vBytes blank, it will call itself via recursion until it derives needed size.\n * @param   {object}      wallet                  - { WIF, address, txHistory, utxoList, ... }.\n * @param   {object}      domain                  - all domain info\n * @param   {object}      choices                 - { action, feeRate, embedString, ... }\n * @param   {string}      networkChoice           - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @param   {number=}     [vBytes=0]              - size of transaction in vBytes. *\n * @returns {object}                              - Tx Results.\n */\nexport const calcTx = (\n  wallet: any,\n  domain: I_Domain,\n  choices: { action: I_Action_Choice, feeRate: number, embedString: string, [key: string]: any },\n  networkChoice: string,\n  vBytes: number = 0\n): I_Tx_Result => {\n\n  // grab fee rate\n  const feeRate = choices.feeRate\n  // grab user object\n  const user = getUser({ domain }, wallet.address)\n  // grab network object\n  const network = bitcoin.networks[networkChoice]\n\n  // calculate domain notification address\n  const { notificationsAddress } = calcP2WSH(domain.domainName, networkChoice)\n\n  // calculate funds necessary for this tx, round up sat for more better than being below minimum.\n  const fee = Math.ceil(vBytes * feeRate)\n  const valueNeeded = MIN_BURN + MIN_NOTIFY + fee; // sat\n  // gather necessary utxo to use until enough to cover costs\n  let usedUtxoOfPayer: Array<any> = []\n  let totalGathered = 0 // sat\n  wallet.utxoList?.forEach((utxo: any) => {\n    // while not enough funds\n    if (totalGathered < valueNeeded) {\n      usedUtxoOfPayer.push(utxo)\n      totalGathered += utxo.value\n    }\n  })\n  // if still not enough funds\n  if (totalGathered < valueNeeded) {\n    throw new Error('Not enough funds in all the utxo')\n  }\n  const change = totalGathered - valueNeeded\n\n  // calculate keys from wallet import format key\n  const keyPair = bitcoin.ECPair.fromWIF(wallet.WIF, network)\n  // create Partially Signed Bitcoin Transaction object to build tx\n  const psbt = new bitcoin.Psbt({ network })\n  psbt.setVersion(2)    // default\n  psbt.setLocktime(0)   // default\n\n  // add all inputs (owner address must always be at index 0)\n  usedUtxoOfPayer.forEach(utxo => {\n    psbt.addInput({\n      hash: utxo.txid,\n      index: utxo.vout,\n      sequence: 0xfffffffe,\n      nonWitnessUtxo: Buffer.from(utxo.hex, 'hex') // should work for segwit and nonsegwit inputs\n    })\n  })\n\n  // add inputs of all ACS UTXO from this owner or it doesn't count (TODO)\n\n\n  // add the op_return output (always index 0)\n  // if first time sending, nonce is '0', otherwise the last blockheight when this user has sent ANY tx to that notification address\n  // TODO calculate nonce in case this owner has unspent acs utxo left at notification address\n  const nonce = user.nonce.toString()\n  const encryptionKey =  domain.domainName + wallet.address + nonce\n  console.log('nonce used to encrypt', domain.domainName, wallet.address, nonce)\n  const data = encrypt(choices.embedString, encryptionKey)\n  const embed = bitcoin.payments.embed({ data: [data] })\n\n  // output[0]: check special tx rules for max amount required to burn among all of them\n  const burnAmount = choices.action.special.reduce((maxBurn: number, list: any) => {\n    console.log(maxBurn, list.rules)\n    return (\n      ('output0value' in list.rules) ? Math.max(maxBurn, list.rules.output0value) : maxBurn\n    )\n  }, 0)\n  psbt.addOutput({\n    script: embed.output,\n    value: burnAmount,\n  })\n  console.log('rules say to burn ', burnAmount)\n\n  // add notification output (always index 1)\n  psbt.addOutput({\n    address: notificationsAddress, // calculated from domainName provided\n    value: MIN_NOTIFY\n  })\n\n  // add change output (anything is fine for index 2 or higher outputs)\n  psbt.addOutput({\n    address: wallet.address,\n    value: change\n  })\n\n  // at this point all inputs & outputs added so ready to sign\n\n  usedUtxoOfPayer.forEach((utxo, index) => {\n    // sign p2wpkh of controlling\n    psbt.signInput(index, keyPair)\n    // (TODO) signing ACS inputs will need script\n\n    if (!psbt.validateSignaturesOfInput(index)) {\n      throw new Error('Signature validation failed for input index ' + index.toString())\n    }\n  })\n\n  psbt.finalizeAllInputs()\n\n  const tx = psbt.extractTransaction()\n  const thisVirtualSize = tx.virtualSize()\n  const txid = tx.getId()\n  const hex = tx.toHex()\n  const nInputs = tx.ins.length\n  const nOutputs = tx.outs.length\n\n  if (vBytes >= thisVirtualSize) {\n    // If this tx fee was calculated for a vBytes size equal to or larger than the resulting derived tx (thisVirtualSize),\n    // fee should be safe by being equal to or larger than necessary at required feeRate.\n    // Obviously vBytes = 0 will never give the correct fee minimum the first time through.\n    console.log('virtualSize', tx.virtualSize())\n    console.log('byteLength', tx.byteLength())\n    console.log('getId', tx.getId())\n    console.log('hex', tx.toHex())\n    console.log('')\n    return { thisVirtualSize, txid, hex, valueNeeded, fee, change, burnAmount, totalGathered, nInputs, nOutputs }\n  } else {\n    // Redo this tx calculation using the virtual size we just calculated for vByte optional parameter.\n    return calcTx(\n      wallet, domain, choices, networkChoice, thisVirtualSize\n    )\n  }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AboutContent_wrapper__1kfnm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P1RestoreOrBackup_wrapper__32TQJ\",\"title\":\"P1RestoreOrBackup_title__2rH-6\",\"contentWrapper\":\"P1RestoreOrBackup_contentWrapper__1NT85\",\"buttonWrapper\":\"P1RestoreOrBackup_buttonWrapper__2ryAq\",\"describe\":\"P1RestoreOrBackup_describe__1RMqs\",\"Orange\":\"P1RestoreOrBackup_Orange__2IaJN\",\"spacer\":\"P1RestoreOrBackup_spacer__3luud\",\"backup\":\"P1RestoreOrBackup_backup__357rd\",\"restoreBackup\":\"P1RestoreOrBackup_restoreBackup__VUHgs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P4ActionChoice_wrapper__2u2J5\",\"title\":\"P4ActionChoice_title__2PdRs\",\"availableActions\":\"P4ActionChoice_availableActions__1O5aS\",\"unavailableActions\":\"P4ActionChoice_unavailableActions__3rEYI\",\"buttonWrapper\":\"P4ActionChoice_buttonWrapper__3Sx3Y\",\"unavailableActions__title\":\"P4ActionChoice_unavailableActions__title__2EQ4_\",\"unavailableActions__actionList\":\"P4ActionChoice_unavailableActions__actionList__1VAc_\",\"unavailableActions__actionList__action\":\"P4ActionChoice_unavailableActions__actionList__action__GMwoW\",\"unavailableActions__actionList__action__title\":\"P4ActionChoice_unavailableActions__actionList__action__title__3ljZU\",\"unavailableActions__actionList__action__permissionList\":\"P4ActionChoice_unavailableActions__actionList__action__permissionList__2pKeq\",\"unavailableActions__actionList__action__permissionList__permission\":\"P4ActionChoice_unavailableActions__actionList__action__permissionList__permission__2eF7F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P3DomainAndWallet_wrapper__1ElFg\",\"contentWrapper\":\"P3DomainAndWallet_contentWrapper__vm5qp\",\"title\":\"P3DomainAndWallet_title__3ing2\",\"domainInfo\":\"P3DomainAndWallet_domainInfo__3p2aJ\",\"domainButton\":\"P3DomainAndWallet_domainButton__2PIDz\",\"walletInfo\":\"P3DomainAndWallet_walletInfo__2cQY0\",\"walletButton\":\"P3DomainAndWallet_walletButton__MmLZ3\",\"unspent\":\"P3DomainAndWallet_unspent__bUWZW\",\"buttonWrapper\":\"P3DomainAndWallet_buttonWrapper__djJkL\",\"ownership\":\"P3DomainAndWallet_ownership__lSY6a\",\"balance\":\"P3DomainAndWallet_balance__2fns7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SearchResults_wrapper__VvaYk\",\"listContainer\":\"SearchResults_listContainer__12vQE\",\"listItem\":\"SearchResults_listItem__3Udwx\",\"key\":\"SearchResults_key__358jo\",\"describe\":\"SearchResults_describe__3HACm\",\"expired\":\"SearchResults_expired__2ptnD\",\"notExpired\":\"SearchResults_notExpired__2m4VI\",\"createLink\":\"SearchResults_createLink__13Wez\"};","import crypto from 'crypto'\n\n/**\n * Encrypt - symmetric - aes-256-crt\n * @param   {string}  stringText      To be encrypted (up to 80 bytes)\n * @param   {string}  stringForKey    Derive Key from (not final Key).\n * @param   {string}  stringForIV     Derive IV from (not final IV). Defaults as stringForKey.\n * @returns {Buffer}                  Buffer to embed in tx.\n */\nexport const encrypt = (\n  stringText: string, stringForKey: string, stringForIV: string = stringForKey\n) => {\n  // aes-NUMBER-TYPE\n  // Must have key size matching NUMBER (in aes name) of bits (NUMBER/8 bytes)\n  // Must have IV matching encryption block size, 16 bytes for AES128-to-256-range in cbc mode\n  // sha256 can make 32 byte buffer out of anything and then .slice(0, N) can cut it to N bytes\n\n  const key = crypto.createHash('sha256').update(stringForKey).digest()             // 32 bytes\n  const iv = crypto.createHash('sha256').update(stringForIV).digest().slice(0, 16)  // 16 bytes\n\n  let cipher = crypto.createCipheriv('aes-256-ctr', key, iv)\n  let encrypted = cipher.update(Buffer.from(stringText))\n\n  encrypted = Buffer.concat([encrypted, cipher.final()])\n\n  return encrypted\n}\n\n /**\n * Decrypt - symmetric - aes-256-crt\n * @param   {Buffer}  stringText      Buffer to be decrypted.\n * @param   {string}  stringForKey    Derive Key from (not final Key).\n * @param   {string}  stringForIV     Derive IV from (not final IV). Defaults as stringForKey.\n * @returns {Buffer}                  Buffer to utf8 embeded in tx.\n */\nexport const decrypt = (\n  bufferCypher: Buffer, stringForKey: string, stringForIV: string = stringForKey\n) => {\n\n  const key = crypto.createHash('sha256').update(stringForKey).digest()             // 32 bytes\n  const iv = crypto.createHash('sha256').update(stringForIV).digest().slice(0, 16)  // 16 bytes\n\n  let decipher = crypto.createDecipheriv('aes-256-ctr', key, iv)\n\n  // first part\n  let decrypted = decipher.update(bufferCypher)\n\n  // the rest\n  decrypted = Buffer.concat([decrypted, decipher.final()])\n\n  return decrypted.toString('utf8')\n}\n\n","// for BNS\nexport enum BNSActions {\n  RENEW = 'RENEW',\n  ONLY_FORWARDS = 'ONLY_FORWARDS',\n  CLAIM_OWNERSHIP = 'CLAIM_OWNERSHIP'\n}\n\nexport interface I_BNS_Action {\n  type: BNSActions\n  info: string\n  permissions: Array<any>\n  conditions: Array<any>\n  execute: () => void\n  warning?: string | undefined\n}\n\nexport interface I_BNS_Auto_Action {\n  info: string\n  conditions: Array<any>\n  execute: () => void\n}\n\nexport interface I_Action_Choice {\n  type: BNSActions\n  info: string\n  special: Array<any>\n}\n\nexport interface I_User {\n  address:      string\n  forwards:     Array<I_Forward>\n  burnAmount:   number\n  winHeight:    number\n  winTimestamp: number\n  nonce:        number\n  updateHeight: number\n}\n\n  // each forward object has the following data\nexport interface I_Forward {\n  network: string\n  address: string\n  updateHeight: number\n  updateTimestamp: number\n}\n\nexport interface I_BnsState {\n  domain: I_Domain\n  chain?: {\n    parsedHeight: number\n    currentHeight: number\n  }\n}\n\nexport interface I_Domain {\n  domainName: string\n  notificationAddress: string\n  txHistory: Array<I_TX>\n  utxoList: Array<I_UTXO>\n  users: {\n    [key: string]: I_User\n  }\n  currentOwner: string\n  bidding: {}\n  ownersHistory: Array<I_User>\n}\n\n\nexport interface I_TX {\n  txid: string\n  version: number\n  locktime: number\n  size: number\n  weight: number\n  fee: number\n  vin: Array <{\n    txid: string\n    vout: number\n    prevout: {\n      scriptpubkey: string\n      scriptpubkey_asm: string\n      scriptpubkey_type: string\n      scriptpubkey_address: string\n    }\n    scriptsig: string\n    scriptsig_asm: string\n    witness: {\n      [key: number]: string\n    }\n    is_coinbase: boolean\n    sequence: number\n  }>\n  vout: Array <{\n    scriptpubkey: string\n    scriptpubkey_asm: string\n    scriptpubkey_type: string\n    value: number\n  }>\n  status: {\n    confirmed: boolean\n    block_height: number\n    block_hash: string\n    block_time: number\n  }\n}\n\nexport interface I_UTXO {\n  txid: string\n  vout: number\n  status: {\n    confirmed: boolean\n    block_height: number | null\n    block_hash: string | null\n    block_time: number | null\n  }\n  value: number\n  hex?: string\n}","import {\n  I_Domain,\n  I_TX,\n  I_UTXO,\n  I_Action_Choice\n} from './../helpers/bns/types/'\n\n/**\n * All the interfaces & enums\n */\n\n\nexport * from './../helpers/bns/types/'\n\n// for global state action creators\nexport enum ActionTypes {\n  STORE_SEARCH_RESULTS = 'STORE_SEARCH_RESULTS',\n  STORE_SEARCH_RESULTS_FAIL = 'STORE_SEARCH_RESULTS_FAIL',\n  TYPING = 'TYPING',\n  NEW_WALLET = 'NEW_WALLET',\n  CHANGE_PAGE_INFO = 'CHANGE_PAGE_INFO',\n  UPDATE_WALLET = 'UPDATE_WALLET',\n  UPDATE_DOMAIN = 'UPDATE_DOMAIN',\n  ACTION_FAIL = 'ACTION_FAIL',\n  LOAD_STATE = 'LOAD_STATE',\n  CHOICES_BNS_ACTION = 'CHOICES_BNS_ACTION'\n}\n\nexport type Dispatch = React.Dispatch<I_Action>\n\nexport interface I_Action {\n  type: ActionTypes\n  payload: any\n}\n\nexport interface I_State {\n  network: string\n  alias: string\n  extension: string\n  domain: I_Domain\n  wallet: {\n    address: string\n    mnemonic: string\n    WIF: string\n    txHistory:  Array<I_TX>\n    utxoList: Array<I_UTXO>\n  }\n  chain: {\n    height: number\n  }\n  choices: {\n    action: I_Action_Choice | {}\n    feeRate: number\n    txHex: string\n    embedString: string\n  }\n  pageInfo: {\n    current: number\n    checkedDomain: boolean\n    checkedWallet: boolean\n    checkedLightSearch: boolean\n  }\n  lastTimeStamp: number\n}\n","import React from 'react'\nimport styles from './RoundButton.module.css'\n\n/**\n * Standard button for this app.\n *\n * Pass the following props to customize it.\n *\n * next='true' to add next arrow at right (off if undefined or '').\n *\n * back='true' to add back arrow on left (off if undefined or '').\n *\n * show='true' to display element vs show='false' to set display to none (dom still exists).\n *\n * sizebutton='2.9' to make the button size 2.9x standard var(--s) size used (defined in global global.css).\n *\n * colorbutton='var(--colorBitcoinOrange)' to customize color.\n *\n * colorbuttonText='var(--colorButtonText)' to customize text color.\n *\n * Defaults (vars defined in global global.css):\n *\n * sizebutton = 2.5. ( means font size calc(2.5/2.9 * var(--s)) )\n *\n * colorbutton = var(--colorBitcoinOrange).\n *\n * colorbuttontext = var(--colorButtonText).\n */\nexport const RoundButton = (props:any): JSX.Element => {\n  return (\n    <div\n      // variables defined by string will be available to button & its children for scope\n      style={{\n        display: (\n          (props?.show === 'false') ? 'none' : 'inline-block'\n        ) as React.CSSProperties,\n        '--colorThisButton': (\n          props.colorbutton ? props.colorbutton : `var(--colorBitcoinOrange)`\n        )  as React.CSSProperties,\n        '--colorThisButtonText': (\n          props.colorbuttontext ? props.colorbuttontext : `var(--colorButtonText)`\n        ) as React.CSSProperties,\n        '--sizeButton': (\n          props.sizebutton\n          // Button was designed at 2.9 * var(--s) scale font so\n          // this just lets user redefine font & everything else proportionally\n            ? `calc(${props.sizebutton}/2.9 * var(--s))`\n            : `calc(2.5/2.9 * var(--s))`\n        ) as React.CSSProperties\n      }}\n      className={ [\n        styles.roundButtonWrap,\n        props.back ? styles.back : undefined\n      ].join(' ') }\n      {...props}\n    >\n      <div\n        className={ [\n          styles.roundButton,\n          props.back ? styles.backArrow : undefined,\n          props.next ? styles.nextArrow : undefined,\n        ].join(' ') }\n      >\n        { props.children }\n        <div\n          className={ styles.overhead }\n        ></div>\n      </div>\n    </div>\n  )\n}\n","import { I_State, I_Action, ActionTypes } from '../../interfaces'\nimport { initialState } from './../'\nconst {\n  STORE_SEARCH_RESULTS_FAIL,\n  STORE_SEARCH_RESULTS,\n  TYPING,\n  NEW_WALLET,\n  CHANGE_PAGE_INFO,\n  UPDATE_WALLET,\n  UPDATE_DOMAIN,\n  ACTION_FAIL,\n  LOAD_STATE,\n  CHOICES_BNS_ACTION\n} = ActionTypes\n\n/**\n * Reducer edits global state via information in payload.\n * Action is object { payload, type }.\n * type describes what type of changes to global state to make.\n * payload contains data provided to make those changes.\n */\nexport default function reducer (state: I_State, action: I_Action): I_State {\n  const { payload } = action\n\n  switch (action.type) {\n\n    case CHOICES_BNS_ACTION: {\n      // BNS action chosen\n      return {\n        ...state,\n        choices: {\n          ...state.choices,\n          ...payload\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case UPDATE_WALLET: {\n      // after full scan of the wallet address\n      return {\n        ...state,\n        wallet: {\n          ...state.wallet, // wif/mnemonic/address unchanged\n          txHistory: payload.wallet.txHistory,\n          utxoList: payload.wallet.utxoList\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedWallet: true\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case UPDATE_DOMAIN: {\n      return {\n        ...state,\n        domain: {\n          ...payload.domain\n        },\n        chain: {\n          height: payload.chain.height\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedDomain: true\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case CHANGE_PAGE_INFO:\n      // navigation info for controlling domains\n      return {\n        ...state,\n        pageInfo: {\n          ...state.pageInfo,\n          current: payload\n        }\n      }\n\n    case NEW_WALLET: {\n      // store totally new wallet object\n      return {\n        ...state,\n        wallet: {\n          ...initialState.wallet,\n          address: payload.address,\n          mnemonic: payload.mnemonic,\n          WIF: payload.WIF\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedWallet: false\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case STORE_SEARCH_RESULTS: {\n      // store results of looking up totally new alias\n      // update notifications and ownership information\n\n      return {\n        ...state,\n        alias: payload.alias,\n        domain: {\n          ...initialState.domain,\n          ...payload.domain\n        },\n        chain: {\n          height: payload.chain.height\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedDomain: false,\n          checkedLightSearch: true\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case STORE_SEARCH_RESULTS_FAIL: {\n      // store results of looking up totally new alias\n      // reset notifications and ownership information\n      return {\n        ...state,\n        alias: payload.alias,\n        domain: {\n          ...initialState.domain,\n          domainName: payload.domainName,\n          notificationAddress: payload.notificationAddress\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedDomain: false,\n          checkedLightSearch: false\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case TYPING: {\n      // change of alias part of domain name\n      // this change renders owner and notification information outdated\n      return {\n        ...state,\n        alias: payload,\n        domain: initialState.domain,\n        pageInfo: {\n          ...state.pageInfo,\n          current: 1,\n          checkedDomain: false,\n          checkedLightSearch: false\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case ACTION_FAIL: {\n      return {\n        ...state,\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case LOAD_STATE: {\n      return {\n        ...payload,\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    default: {\n      console.warn('Unknown action type')\n      return state\n    }\n  }\n}\n\n// can split maybe like this later if gets too long\n// https://dev.to/vanderleisilva/global-state-management-with-react-hooks-and-context-5f6h\n\n","import React from 'react'\nimport { I_State } from '../interfaces'\nimport reducer from './reducers/Reducer'\n\n// Change state process:\n// 1. Component calls action from src/store/actions/\n// 2. Action does stuff (e.g. API calls) and dispatches results to reducer in src/store/reducer/\n// 3. Reducer modifies state based on dispatched payload and type of action.\n\n// initial state\n// (changes to design need to be matched in reducers & interfaces)\nexport const initialState: I_State = {\n  network: 'testnet',             // 'testnet' or 'bitcoin'\n  alias: 'satoshi',               // first half of domain name\n  extension: '.btc',              // last half of domain name\n  domain: {                       // domain info from notifications\n    domainName: '',\n    notificationAddress: '',      // p2wsh address for this domain name (alias + extension)\n    txHistory: [],                // array of all tx for this address (old addressHistory)\n    utxoList: [],                 // array of all current utxo for this address\n    users: {},                    // object with all interacting users\n    currentOwner: '',             // address of user that controls domain\n    bidding: {},                  // bidding info\n    ownersHistory: []             // history of ownership\n  },\n  wallet: {                       // wallet information & utxo for controlling domain names\n    address: '',                  // public address (p2wpkh)\n    mnemonic: '',                 // mnemonic for private key derivation\n    WIF: '',                      // wallet import format for private key derivation\n    txHistory: [],                // array of all tx for this address\n    utxoList: [],                 // array of all current utxo for this address\n  },\n  chain: {\n    height: 0                     // height of blockchain\n  },\n  pageInfo: {                     // user navigation information for controlling domain name\n    current: 1,\n    checkedDomain: false,         // current domain notification address was scanned\n    checkedWallet: false,         // current wallet address was scanned\n    checkedLightSearch: false     // if light search was done (no utxo / txhex scan)\n  },\n  choices: {                      // choices made by user via this app\n    action: [],                   // choices and data for action to take\n    feeRate: 1.1,                 // fee rate to use in sat/bByte,\n    txHex: '',                    // hex of raw transaction, ideally ready for broadcast\n    embedString: ''               // string to embed in op_return\n  },\n  lastTimeStamp: Date.now(),      // last change timestamp, to detect any changes to state or time out\n}\n\n// helper methods\nexport const getOwner = (st: I_State) => {\n  const ownerAddress = st.domain.currentOwner\n  return st.domain.users[ownerAddress]\n}\n\nexport const getUser = (st: I_State, address: string) => {\n  return st.domain.users[address]\n}\n\nexport const Store = React.createContext<any>(initialState)\n// returns object with .Provider and .Consumer\n// Provider makes state available to all child components no matter how deep\n\n\n\n// creates wrapping element for global state\nexport function StoreProvider ({ children }: JSX.ElementChildrenAttribute): JSX.Element {\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n\n  return (\n    <Store.Provider value={{ state, dispatch }}>\n      { children }\n    </Store.Provider>\n  )\n}\n","/**\r\n * Takes in a string of interest inputString\r\n * and Array of strings or string describing filter.\r\n * Returns the string of interst with only characters present in filters selected.\r\n */\r\nexport default function  sanitize (inputString, stringOrArray) {\r\n  // get choice input into same form of array of string(s) of choices\r\n  let choices; // :string | Array<string>\r\n  if (Array.isArray(stringOrArray)) {\r\n    choices = stringOrArray;\r\n  }\r\n  if (typeof stringOrArray === 'string') {\r\n    choices = [stringOrArray];\r\n  }\r\n\r\n  // add each choice to filter selection\r\n\r\n  // string mask\r\n  let filter = '';\r\n  // array of functions\r\n  const logicFilters = [];\r\n\r\n  choices.forEach(choice => {\r\n\r\n    // short masks\r\n    if (choice === 'numbers') {\r\n      filter += '0123456789';\r\n    }\r\n    if (choice === 'decimal_point') {\r\n      filter += '.';\r\n    }\r\n    if (choice === 'hex') {\r\n      filter += '0123456789abcdefABCDEF';\r\n    }\r\n    if (choice === 'lowcaps') {\r\n      filter += 'abcdefghijklmnopqrstuvwxyz';\r\n    }\r\n    if (choice === 'highcaps') {\r\n      filter += 'ABCDEFGHIJKLMNOPQRSTUVWYZ';\r\n    }\r\n    if (choice === 'spaces') {\r\n      filter += ' ';\r\n    }\r\n\r\n    // longer masks\r\n    if (choice === 'base58') {\r\n      // https://en.wikipedia.org/wiki/Base58#cite_note-3\r\n      filter += '12345689ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\r\n    }\r\n    if (choice === 'basic') {\r\n      filter += '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    }\r\n    if (choice === 'oneline') {\r\n      filter += '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,./-_!`~[]{}|@#%^&()-=?$';\r\n    }\r\n    if (choice === 'url') {\r\n      filter += `0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:/?#[]@!$&'()*+,;=-_.~`;\r\n    }\r\n\r\n    // ========================================================\r\n    // functions\r\n    // adds anon function to array of functions\r\n\r\n    if (choice === 'no_spaces') {\r\n      logicFilters.push(str =>\r\n        str.split('')\r\n          .filter(letter => letter !== ' ')\r\n          .join(''))\r\n    }\r\n\r\n    if (choice === 'single_space_width') {\r\n      logicFilters.push(str =>\r\n        // split by 2+ spaces and replace with single space\r\n        str.split(/  */).join(' ')\r\n      )\r\n    }\r\n\r\n    // keep only first decimal point\r\n    if (choice === 'decimal_point') {\r\n\r\n      logicFilters.push(str =>\r\n        (str\r\n          // splits to array between .\r\n          .split('.')\r\n          // join first 2 elements with ., others with empty string\r\n          // returns a string\r\n          .reduce((resultingString, numbers, index) => {\r\n            // real . goes b/w array's index 0 and 1, even if string had . first\r\n            const digits = (index === 0 && numbers === '') ? '0' : numbers\r\n            return (index === 1)\r\n              ? [ resultingString, digits ].join('.')\r\n              : [ resultingString, digits ].join('')\r\n          }, '')\r\n        )\r\n      )\r\n    }\r\n\r\n    if (choice === 'no_leading_zeros') {\r\n\r\n      logicFilters.push(str =>\r\n        (str\r\n          // splits to array between .\r\n          .split('.')\r\n          .map((numbers, index) => {\r\n            if (index === 0) {\r\n              return (parseInt(numbers, 10) || 0).toString()\r\n            } else {\r\n              return numbers\r\n            }\r\n          })\r\n          .join('.')\r\n        )\r\n      )\r\n    }\r\n\r\n  })\r\n\r\n  if (filter.length === 0 && logicFilters.length === 0) {\r\n    console.warning('sanitize used w/o any known filters', stringOrArray)\r\n  }\r\n\r\n  let outputString = '';\r\n\r\n  // apply string mask to only keep characters within filter string\r\n  outputString = inputString\r\n    .split('')\r\n    .filter(letter => filter.indexOf(letter) > -1)\r\n    .join('');\r\n\r\n  // use every selected logic function on the outputString\r\n  logicFilters.forEach(fn => outputString = fn(outputString))\r\n\r\n  return outputString;\r\n}\r\n\r\n\r\n// function sanitizeOld (inString, type) {\r\n//   let filter;\r\n//   if (type === 'base58') {\r\n//     // https://en.wikipedia.org/wiki/Base58#cite_note-3\r\n//     filter = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\r\n//   } else if (type === 'hex') {\r\n//     filter = '0123456789abcdef';\r\n//   } else if (type === 'basic') {\r\n//     filter = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n//   } else if (type === 'numbers') {\r\n//     filter = '0123456789';\r\n//   } else if (type === 'fractions') {\r\n//     filter = '0123456789.';\r\n//   } else if (type === 'oneline') {\r\n//     filter = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,./-_!`~[]{}|@#%^&()-=?$';\r\n//   } else if (type === 'url') {\r\n//     filter = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ./-_';\r\n//   } else {\r\n//     console.log('sanitize: valid type not provided');\r\n//     return undefined;\r\n//   }\r\n\r\n//   const res = inString\r\n//     .split('')\r\n//     .filter(letter => filter.indexOf(letter) > -1)\r\n//     .join('');\r\n\r\n//   return res;\r\n// }","import { I_State, Dispatch } from '../../interfaces'\nimport sanitize from '../../helpers/sanitize'\nimport { ActionTypes } from './../../interfaces'\nconst { TYPING } = ActionTypes;\n\n/**\n * Cleans up the entered string including removing next line characters\n */\nexport const changeAliasAction = async (state: I_State, dispatch: Dispatch, value: any) => {\n  // clean up the string\n  const newString = value\n  const sanitizedString = sanitize(newString, 'url')\n\n  return dispatch({\n    type: TYPING,\n    payload: sanitizedString\n  })\n}\n","import { I_BnsState, BNSActions, I_BNS_Action, I_BNS_Auto_Action } from './../types/'\nimport { MIN_NOTIFY, MIN_BURN } from './../constants'\nimport {\n  existsCurrentOwner,\n  isOwnerExpired,\n  clearOwner,\n  getParsedHeight,\n  atLeastTwoOutputs,\n  isNotify,\n  isOpreturnOutput0,\n  didNotifyMin,\n  didBurnMin,\n  setOwner,\n  getOwner,\n  getUser,\n  getTxInput0SourceUserAddress,\n  getTxHeight,\n  getTxTimestamp,\n  getTxOutput0BurnValue,\n  isAddressTheCurrentOwner,\n  burnedPreviousRateMin,\n  readEmbeddedData,\n  getLastOwnerBurnedValue,\n  isSenderTheCurrentOwner\n} from './../formathelpers'\nconst { RENEW, ONLY_FORWARDS, CLAIM_OWNERSHIP } = BNSActions\n\n// =========== CONDITIONS / PERMISSIONS ================\n// Called by the actions for conditions\n// Return object with \"info\": describing condition,\n// \"status\" to check conditoin,\n// and optional \"special\" to give transaction forming specifications\n\nconst OUTS_2 = ({ tx=undefined }: any) => ({\n  info: 'Tx must have 2+ outputs',\n  status: () => atLeastTwoOutputs(tx)\n})\n\nconst OUT_0 = ({ tx=undefined }: any) => ({\n  info: 'Tx must have OP_RETURN @ output[0]',\n  status: () => isOpreturnOutput0(tx)\n})\n\nconst OUT_1 = ({ st, tx=undefined }: any) => ({\n  info: 'Tx must have notification address @ output[1]' ,\n  status: () => isNotify(st, tx)\n})\n\nconst NOTIFIED_MIN = ({ tx=undefined }: any) => ({\n  info: `Tx must have minimum ${MIN_NOTIFY} @ output[1]`,\n  status: () => didNotifyMin(tx)\n})\n\nconst BURNED_MIN = ({ tx=undefined }: any) => ({\n  info: `Tx must burn ${MIN_BURN} @ output[0]`,\n  status: () => didBurnMin(tx),\n  special: { output0value: MIN_BURN }\n})\n\nconst NO_OWNER = ({ st }: any) => ({\n  info: 'There must not be an existing owner',\n  status: () => !existsCurrentOwner(st)\n})\n\nconst EXISTS_OWNER = ({ st }: any) => ({\n  info: 'There must be existing owner',\n  status: () => existsCurrentOwner(st)\n})\n\nconst BURN_LAST_WIN = ({ st, tx=undefined }: any) => ({\n  info: 'Tx must burn the last ownership winning burn amount',\n  status: () => burnedPreviousRateMin(st, tx),\n  special: { output0value: getLastOwnerBurnedValue(st) }\n})\n\n// calculated based on tx if available, otherwise address\nconst USER_IS_OWNER = ({ st, address, tx=undefined }: any) => ({\n  info: `User's address must match owner's address`,\n  status: () => tx ? isSenderTheCurrentOwner(st, tx) : isAddressTheCurrentOwner(st, address)\n})\n\nconst IS_OWNER_EXPIRED = ({ st }: any) => ({\n  info: 'Ownership must be expired at current parsed height',\n  status: () => isOwnerExpired(st)\n})\n\n\n// ============ USER ACTIONs ===============\n\n// Describe: If no owner, sender can claim ownership\nexport const claimOwnershipAction = (st: I_BnsState, tx: any = undefined): I_BNS_Action => {\n  const args = { st, tx }\n  return {\n\n    type: CLAIM_OWNERSHIP,\n    info: 'Claim ownership of an available domain',\n\n    permissions: [\n      NO_OWNER(args)\n    ],\n\n    conditions: [\n      OUTS_2(args),\n      OUT_0(args),\n      OUT_1(args),\n      NOTIFIED_MIN(args),\n\n      BURNED_MIN(args)\n    ],\n\n    execute: () => {\n      // ownership source was already created for sure via updateSourceUserFromTx\n      // only have to set owner address to tx address\n      const height = getTxHeight(tx)\n      const senderAddress =  getTxInput0SourceUserAddress(tx)\n      setOwner(st, senderAddress)\n      getUser(st, senderAddress).winHeight = height\n      getUser(st, senderAddress).winTimestamp = getTxTimestamp(tx)\n      getUser(st, senderAddress).burnAmount = getTxOutput0BurnValue(tx)\n      console.log(\n        `${ st.domain.domainName } : ${ getTxHeight(tx) } height: new owner is ${ getUser(st, senderAddress).address }`\n      )\n    }\n  }\n}\n\n\n// Describe: If from current owner & burned past winning minimum, extend ownership.\nexport const currentOwnerRenewAction = (\n  st: I_BnsState,\n  address: string = '',\n  tx: any = undefined\n): I_BNS_Action => {\n  const args = { st, address, tx }\n  return {\n\n    type: RENEW,\n    info: 'Extend ownership of this domain',\n\n    permissions: [\n      USER_IS_OWNER(args)\n    ],\n\n    conditions: [\n      OUTS_2(args),\n      OUT_0(args),\n      OUT_1(args),\n      NOTIFIED_MIN(args),\n\n      BURNED_MIN(args),\n      BURN_LAST_WIN(args)\n    ],\n\n    execute: () => {\n      const owner = getOwner(st)\n      // set owner's win height to current tx height therefore updating ownership\n      owner && (owner.winHeight = getTxHeight(tx))\n      owner && (owner.winTimestamp = getTxTimestamp(tx))\n      console.log(\n        `${ st.domain.domainName } : ${ getTxHeight(tx) } height: owner extended ownership ${ owner?.address }`\n      )\n    }\n  }\n}\n\n// Describe: update forwarding information.\nexport const updateForwardingInfoAction = (\n  st: I_BnsState,\n  address: string = '',\n  tx: any = undefined\n): I_BNS_Action => {\n  const args = { st, address, tx }\n  return {\n\n    type: ONLY_FORWARDS,\n\n    info: 'Only update forwarding information',\n\n    permissions: [],\n\n    conditions: [\n      OUTS_2(args),\n      OUT_0(args),\n      OUT_1(args),\n      NOTIFIED_MIN(args)\n    ],\n\n    execute: () => {\n      readEmbeddedData(st, tx)\n    },\n\n    // Change info to warning when attempting to update forwarding info\n    // for domain you do not control.\n    // Such a change would be wasted until it's owned.\n    warning:\n      !USER_IS_OWNER(args).status()\n        ? 'Warning: not your domain yet!'\n        : undefined\n  }\n}\n\n// =========== AUTOMATIC PARSED ACTIONS NOT BY USERS (e.g. TIME BASED) ===========\n\n// Describe: if OWNERSHIP_DURATION_BY_BLOCKS blocks since ownership update, no owner again\nexport const autoCheckForOwnerExpired = (st: I_BnsState): I_BNS_Auto_Action => {\n  const args = { st }\n  return {\n    info: 'Existing ownerships that expire are removed',\n\n    conditions: [\n      EXISTS_OWNER(args),\n      IS_OWNER_EXPIRED(args)\n    ],\n\n    execute: () => {\n      clearOwner(st)\n      console.log(st.domain.domainName, getParsedHeight(st), 'ownership expired')\n    }\n  }\n}","import { calcP2WSH } from './calcP2WSH'\nimport { newState } from './initialState'\nimport * as actions from './actions'\nimport { I_BnsState } from './types'\nimport {\n  setParsedHeight,\n  updateSourceUserFromTx,\n  getTxHeight,\n  updateOwnerHistory\n } from './formathelpers'\n\n/**\n * Returns ownership and notification information objects.\n * @param   {Array<any>}  notificationsHistory  - Array of any tx with notificationsAddress.\n * @param   {string}      domainName            - Full domainName to use (e.g. 'satoshi.btc').\n * @param   {number}      currentHeight         - Current blockheight of the network chain selected.\n * @param   {string}      networkChoice         - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @returns {I_BnsState}                         - BNS state describing object.\n */\nexport const calcBnsState = (\n  notificationsHistory: Array<any>,\n  domainName: string,\n  currentHeight: number,\n  networkChoice: string\n): I_BnsState => {\n\n  // initialize temporary derivation state\n  const st = JSON.parse(JSON.stringify(newState)); // deep object clone\n  st.domain.domainName = domainName\n  st.chain && (st.chain.currentHeight = currentHeight)\n  st.domain.notificationAddress = calcP2WSH(domainName, networkChoice)?.notificationsAddress || ''\n\n  // Sorting history from earliest to latest\n  // reversing should speed it up if not complete it\n  st.domain.txHistory = (notificationsHistory\n    .slice().reverse()\n    .sort((prev, next) => {\n      const prevBlockHeight = prev.status.block_height\n      const nextBlockHeight = next.status.block_height\n      return prevBlockHeight - nextBlockHeight\n    })\n  )\n\n  // iterate with blockheights of relevant tx to derive st state\n  // Each tx blockheight serves as reference time\n  st.domain.txHistory.forEach((tx: any) => {\n\n    // update current chain's parsed height based on tx confirmed height\n    setParsedHeight(st, getTxHeight(tx))\n\n    // update or create new basic user info based on source address @ input0\n    // this includes user's NONCE set to height of the user's tx prior to this one\n    updateSourceUserFromTx(st, tx)\n\n    // check if owner expired\n    actions.runAllAutomaticChecks(st)\n\n    // run all possible actions\n    // starting with reading embedded data\n    actions.runAllUserActions(st, tx)\n\n    // update nonce\n    // after this tx, this tx height is the last tx height, so the new nonce\n    updateSourceUserFromTx(st, tx)\n\n    // update ownership history each tx even if not owner\n    updateOwnerHistory(st)\n  })\n\n  // final check for current block height\n  setParsedHeight(st, currentHeight)\n\n  actions.autoCheckForOwnerExpired(st)\n\n  return st\n}\n\n","import {\n  currentOwnerRenewAction,\n  claimOwnershipAction,\n  autoCheckForOwnerExpired,\n  updateForwardingInfoAction\n} from './actions'\nimport { I_BnsState } from './../types/'\n// import {\n//   getTxInput0SourceUserAddress\n// } from './../formathelpers'\n\n/****************************************************************************************\n * Returns what actions are available for specific user address at current state\n */\nexport const runAllActionPermissionChecks = (st: I_BnsState, address: string) => {\n  console.log('currentOwnerRenewAction running:')\n\n  // Edit this list to include more actions for checks\n  const allActions = [\n    updateForwardingInfoAction(st, address),\n    currentOwnerRenewAction(st, address),\n    claimOwnershipAction(st)\n  ]\n\n  // check which actions are doable\n  const checkedActions: any[] = []\n  allActions.forEach(action => {\n\n    // check each permission in each action\n    const checkedPermissions: any[] = []\n    action.permissions.forEach((permission: any) => {\n      const isAllowed = permission.status()\n\n      // add to list of permissions checked in this action & their display info\n      checkedPermissions.push({\n        isAllowed,\n        info: permission.info\n      })\n    })\n\n    // grab every special rule so can put together tx based on them\n    const specialTxDirections: any[] = []\n    action.permissions.forEach((permission: any) => {\n      if ('special' in permission) specialTxDirections.push({\n        info: permission.info,\n        rules: permission.special\n      })\n    })\n    action.conditions.forEach((condition: any) => {\n      if ('special' in condition) specialTxDirections.push({\n        info: condition.info,\n        rules: condition.special\n      })\n    })\n\n\n    // add to list of all actions with summary of all their permissions checks\n    checkedActions.push({\n      type: action.type,\n      info: action.info,\n      isUsable: checkedPermissions.every(permission => permission.isAllowed),\n      warning: action.warning,\n      permissionList: checkedPermissions,\n      special: specialTxDirections\n    })\n  })\n\n  // return array of doable actions\n  return checkedActions\n}\n\n/****************************************************************************************\n * Executes all actions possible by user that sent tx.\n * Nothing returned.\n */\nexport const runAllUserActions = (st: I_BnsState, tx: any) => {\n\n  // edit this list\n  const allUserActions = [\n    updateForwardingInfoAction(st, undefined, tx),\n    currentOwnerRenewAction(st, undefined, tx),\n    claimOwnershipAction(st, tx)\n  ]\n\n  allUserActions.forEach((action: any) => {\n\n    // check that all conditions & permissions are true\n    const okConditions = action.conditions.reduce(\n      (areAllConditionsMet: boolean, eaCondition: any) => areAllConditionsMet && eaCondition.status()\n    , true)\n\n    const okPermissions = action.permissions.reduce(\n      (areAllPermissionsMet: boolean, eaPermission: any) => areAllPermissionsMet && eaPermission.status()\n    , true)\n\n    if (okConditions && okPermissions) action.execute()\n  })\n}\n\n/****************************************************************************************\n * Executes non-user actions like ownership expiration over time.\n * Nothing returned.\n */\nexport const runAllAutomaticChecks = (st: I_BnsState) => {\n\n  // list of all automatic actions\n  const allAutoChecks = [\n    autoCheckForOwnerExpired(st)\n  ]\n\n  allAutoChecks.forEach(action => {\n    // check that all conditions are true\n    const ok = action.conditions.reduce((areAllConditionsMet, eaCondition) => (\n      areAllConditionsMet && eaCondition.status()\n    ), true)\n    if (ok) action.execute()\n  })\n}\n\n\n","import { I_Forward } from './types/'\n/**\n * Returns array with only latest forwards from array of all forwards.\n * Removes actions, ones that start with \"!\" and ones that are blank addresses.\n */\nexport const findLatestForwards = (forwards: Array<I_Forward>): Array<I_Forward> => {\n  // simplest would be to go through object where keys of cloned network would overwrite\n  // sort first for simplicity\n  const sortedForwards = [...forwards].sort((prev, next) => {\n    // sorts by index proportional to block height and time\n    const prevHeight = prev.updateHeight\n    const nextHeight = next.updateHeight\n    return prevHeight - nextHeight\n  })\n  // now just overwrite values for same networks in order of sorted array\n  const currentNetworks: {[key: string]: I_Forward} = {}\n  sortedForwards.forEach(eaForward => {\n    // add all networks that are not commands\n    const isNotCommand = !eaForward.network.startsWith('!')\n    if (isNotCommand) {\n      currentNetworks[eaForward.network] = eaForward\n    }\n    // if the final address is blank, delete it from object\n    const isDeleted = eaForward.address === ''\n    if (isDeleted) {\n      delete currentNetworks[eaForward.network]\n    }\n  })\n\n  // return just array of values, networks still part of values as well\n  return [...Object.values(currentNetworks)]\n}\n","import { encrypt } from './cryptography'\n\n/**\n * Returns number of bytes the string has after encryption.\n * Encryption is used directly to measure result accurately\n * even if cryption method changes in the future.\n */\nexport const stringByteCount = (data: string): number => {\n  const cipher: Buffer = encrypt(data, 'arbitrary key and iv seeding string')\n  // returns buffer, so length should be bytesize\n  return cipher.length;\n}","import axios from 'axios'\n\n// Documentation\n// https://github.com/Blockstream/esplora/blob/esplora_v2.00/API.md\n// https://github.com/Blockstream/esplora/blob/master/API.md#post-tx\n\nconst API_PATH_TESTNET = 'https://blockstream.info/testnet/api/'\nconst API_PATH_BITCOIN = 'https://blockstream.info/api/'\nconst API_RATE_LIMIT = 0.6    // guessing calls per second cap\n\n// (TODO) a single instance of async task executing loop per API to ensure rate limit holds per API\n// Meanwhile calling function can use its own busy flag to ensure promises are resolved before repeats.\n// RawTx requests and multipage history (length > 25) are main risks.\n\nexport async function getFeeEstimates (strNetwork: string) {\n  const API_PATH = (\n    (strNetwork === 'testnet')\n    ? API_PATH_BITCOIN // only main chain fee estimate for better testing\n    : API_PATH_BITCOIN\n  ) + 'fee-estimates'\n\n  try {\n\n    const res = await axios.get(API_PATH)\n    console.log('getFeeEstimates', res.data)\n\n    // await rateLimit()\n\n    return res.data\n\n  } catch (e) {\n\n    console.log(e)\n    await rateLimit()\n    throw new Error('Blockstream.info API getFeeEstimates failed')\n  }\n\n}\n\n\nexport async function getHeight (strNetwork: string) {\n  const API_PATH = (\n    (strNetwork === 'testnet')\n    ? API_PATH_TESTNET\n    : API_PATH_BITCOIN\n  ) + 'blocks/tip/height'\n  console.log(API_PATH)\n\n  try {\n\n    const res = await axios.get(API_PATH)\n    console.log('getHeight', res.data)\n\n    // await rateLimit()\n\n    return res.data\n\n  } catch (e) {\n\n    console.log(e)\n    await rateLimit()\n    throw new Error('Blockstream.info API height get failed')\n  }\n\n}\n\n/**\n * API request for each UTXO in array to get the raw tx necessary for psbt.\n * @param     {Array}     arrayUtxo       Array of UTXO.\n * @param     {string}    strNetwork      Network type: 'bitcoin' or 'testnet'.\n * @returns   {object}                    { arrayTx: arrayTx w/ .hex, error: string, fails: number }\n */\nexport async function addRawTxToArray (arrayUtxo: Array<any>, strNetwork: string) {\n  // to track failures indecies\n  let erroredOutputs = ''\n\n  // abort if empty array\n  if (arrayUtxo?.length === 0) { return { arrayUtxo, error: 'no utxo' } }\n\n  // clone array\n  const arrayUtxoWithHex = [...arrayUtxo]\n\n  // iterate through original utxo and add hex onto clone, 2 tries max each\n  for (const [indexString, utxo] of Object.entries(arrayUtxo)) {\n    // indexString is a string so convert for array index use\n    const index = parseInt(indexString, 10)\n\n    let tries = 2\n    while (tries-- > 0) {\n      try {\n        const { txid } = utxo\n\n        // raw tx hex path on API\n        const API_PATH = (\n          (strNetwork === 'testnet')\n            ? API_PATH_TESTNET\n            : API_PATH_BITCOIN\n        ) + 'tx/' + txid + '/hex'\n        console.log(API_PATH)\n\n        const res = await axios.get(API_PATH)\n\n        console.log(index, 'index utxo has raw hex of', res.data)\n\n        // add hex data into cloned utxo array\n        arrayUtxoWithHex[index].hex = res.data\n\n        // break while loop if got data, don't need more tries\n        break\n\n      } catch(e) {\n        // keeping track of failures\n        console.log('fail detected', indexString, utxo, tries, erroredOutputs, e)\n        // keep track of indecies missing hex\n        erroredOutputs += indexString + ' '\n      }\n\n      await rateLimit()\n    }\n  }\n\n  // return summary object\n  return { arrayUtxoWithHex, erroredOutputs }\n}\n\n/**\n * API request for all utxo for this address\n * @param     {string}    address       Bitcoin address.\n * @param     {string}    strNetwork    Network type: 'bitcoin' or 'testnet'.\n * @returns   {Array}                   Array of UTXO.\n */\nexport async function getUTXOList (address: string, strNetwork: string) {\n  const API_PATH = (\n    (strNetwork === 'testnet')\n    ? API_PATH_TESTNET\n    : API_PATH_BITCOIN\n  ) + 'address/' + address + '/utxo'\n  console.log(API_PATH)\n\n  try {\n    const res = await axios.get(API_PATH)\n\n    console.log('getUTXOList', res.data)\n\n    await rateLimit()\n\n    return res.data\n\n  } catch (e) {\n\n    console.log(e)\n    await rateLimit()\n    throw new Error('Blockstream.info API access failed')\n\n  }\n}\n\n/**\n * API request all transactions for a specific address.\n * parameters: (address, network).\n * @param   {string} address    - address on network.\n * @param   {string} network    - 'testnet' or 'bitcoin' to match bitcoinjs-lib.\n * @returns {Array<object>}     -  Array of tx objects.\n */\nexport async function getAddressHistory (address: string, network: string) {\n  // https://blockstream.info/testnet/api/address/tb1qprkzdaqt5jkxrhy57ngvra8k0rvq63ulksz8cx85qwke3myhjrtq9s6nj3/txs/chain\n  // GET /address/:address/txs/chain[/:last_seen_txid]\n  // Get confirmed transaction history for the specified address/scripthash, sorted with newest first.\n  // Returns 25 transactions per page. More can be requested by specifying the last txid seen by the previous query.\n\n  const CONFIRMED_PAGES_ADDON = '/txs/chain'\n\n  const API_PATH = (\n    (network === 'testnet')\n    ? API_PATH_TESTNET\n    : API_PATH_BITCOIN\n  ) + 'address/' + address + CONFIRMED_PAGES_ADDON\n\n  try {\n    const res = await axios.get(API_PATH)\n\n    console.log('blockstream.info API address history request', res)\n    return res.data\n\n  } catch (e) {\n    console.log(e)\n    throw new Error('Blockstream.info API access failed')\n  }\n}\n\n/**\n * Broadcasts content onto the blockchain.\n * parameters: (content, network).\n * @param   {string}  content  - raw hex content of transaction.\n * @param   {string}  network  - 'testnet' or 'bitcoin' to match bitcoinjs-lib.\n * @returns {string}           - Successful broadcast returns txid, otherwise error reason.\n */\nexport async function txPush (content: string, network: string) {\n\n  const API_PATH =\n    (network === 'testnet')\n    ? API_PATH_TESTNET + 'broadcast'\n    : API_PATH_BITCOIN + 'broadcast'\n\n  try {\n    const res = await axios.get(API_PATH, {\n      params: {\n        tx: content\n      }\n    })\n\n    // console.log(res)\n    console.log('Broadcasted on', network)\n\n    // returns txid on success\n    return { txid: res.data }\n\n  } catch (e) {\n    console.log('Failed pushtx', network, e.response.data )\n\n    throw new Error('Blockstream.info API access failed\\n' + e.response.data)\n  }\n}\n\n// Slow down based on rate limit.\n// Convert hz to time in milliseconds.\nasync function rateLimit () {\n  return new Promise(r => setTimeout(r, 1000.0 / API_RATE_LIMIT))\n}\n","import { I_State, Dispatch, ActionTypes } from '../../interfaces'\nimport { calcP2WSH, calcBnsState } from '../../helpers/bns'\nimport { getAddressHistory, getHeight } from './../../api/blockstream'\nconst { STORE_SEARCH_RESULTS_FAIL, STORE_SEARCH_RESULTS } = ActionTypes;\n\n/**\n * Get address,\n * tx with notification address,\n * calculate owner,\n * find current owner's forwarding info,\n * send/dispatch to reducer to store important data found\n * (No UTXO nor raw TX scan for speed in front page search)\n */\nexport const searchAction = async (state: I_State, dispatch: Dispatch, router: any = undefined) => {\n  const domainName = state.alias + state.extension\n  // stop if no alias submitted, nothing to save to state\n  if (!state.alias) { return undefined }\n\n  // find address for this alias\n  const { notificationsAddress } = calcP2WSH(domainName, state.network)\n\n  // (TODO) should check if max length for API reached to know if to use pages & append value (25?)\n\n  try {\n\n    // 1. Get current blockheight from API so ownership is using latest possible info\n\n    const currentHeight = await getHeight(state.network)\n\n    // 2. Get API response for all tx history of this address\n    // This will grab all tx that \"notified\" this address by sending to it\n    // Upon failure error should be caught in this function\n    const notificationsTxHistory = await getAddressHistory(notificationsAddress, state.network)\n\n    // calculate bns data from this history via helper functions\n    const { domain } = calcBnsState(\n      notificationsTxHistory,\n      domainName,\n      currentHeight,\n      state.network\n    )\n\n    // 3. if navigated via id, use router to navigate home w/o id in url\n    if (router) { router?.push('/') }\n\n    // store data\n    return dispatch({\n      type: STORE_SEARCH_RESULTS,\n      payload: {\n        alias: state.alias,\n        domain,\n        chain: {\n          height: currentHeight\n        }\n      }\n    })\n\n  } catch (e) {\n    console.log(e)\n    // still updating the notification address\n    return dispatch({\n      type: STORE_SEARCH_RESULTS_FAIL,\n      payload: {\n        alias: state.alias,               // can save alias\n        domainName,\n        notificationsAddress              // can save this easy derivation\n      }\n    });\n  }\n}\n\n// test address tb1qprkzdaqt5jkxrhy57ngvra8k0rvq63ulksz8cx85qwke3myhjrtq9s6nj3\n// has mixture of tx sent to it on testnet\n// https://blockstream.info/testnet/address/tb1qprkzdaqt5jkxrhy57ngvra8k0rvq63ulksz8cx85qwke3myhjrtq9s6nj3","import * as bitcoin from 'bitcoinjs-lib'\r\nimport bip39 from 'bip39'\r\n\r\n\r\n/**\r\n * Scans the address for utxo on a given network.\r\n * (In BNS would be useful for wallet and notification address)\r\n */\r\n// export const scanAddress = async (address: string, strNetwork: string) => {\r\n  // create array of utxo\r\n\r\n\r\n  // add full tx hex to that array (might take time)\r\n// }\r\n\r\n/**\r\n * Make new mnemonic for p2wpkh m/44'/0'/0'/0/0 address and WIF.\r\n * @param     {string}    strNetwork    String describing network ('bitcoin', 'testnet').\r\n * @returns   {object}                  Object { mnemonic, WIF, address } - all strings.\r\n */\r\nexport const createNewWallet = (strNetwork: string) => {\r\n  // network version. bitcoin or testnet\r\n  const network = bitcoin.networks[strNetwork]\r\n  // create backup phrase\r\n  const mnemonic = bip39.generateMnemonic()\r\n  const seedBuffer = bip39.mnemonicToSeed(mnemonic)\r\n  // create derivation master node\r\n  const masterNode = bitcoin.bip32.fromSeed(seedBuffer, network)\r\n  // derive m/44'/0'/0'/0 /0 node\r\n  const childNode0 = masterNode.derivePath(\"m/44'/0'/0'\").derivePath(\"0/0\")\r\n  // get private key in wallet import format for that child node\r\n  const WIF = childNode0.toWIF()\r\n  // derive a standard p2wpkh address from that WIF\r\n  const keyPair = bitcoin.ECPair.fromWIF(WIF, network)\r\n  const address = bitcoin.payments.p2wpkh({ pubkey: keyPair.publicKey, network }).address\r\n\r\n  return { mnemonic, WIF, address }\r\n}\r\n\r\n/**\r\n * Load p2wpkh m/44'/0'/0'/0/0 wallet info from mnemonic.\r\n * @param     {string}    strMnemonic     Mnemonic string of 12 words as described in bip39.\r\n * @param     {string}    strNetwork      String describing network ('bitcoin', 'testnet').\r\n * @returns   {object}                    Object { mnemonic, WIF, address } - all strings.\r\n */\r\nexport const loadWallet = (strMnemonic: string, strNetwork: string) => {\r\n  // network version. bitcoin or testnet\r\n  const network = bitcoin.networks[strNetwork]\r\n  const seedBuffer = bip39.mnemonicToSeed(strMnemonic)\r\n  // create derivation master node\r\n  const masterNode = bitcoin.bip32.fromSeed(seedBuffer, network)\r\n  // derive m/44'/0'/0'/0 /0 node\r\n  const childNode0 = masterNode.derivePath(\"m/44'/0'/0'\").derivePath(\"0/0\")\r\n  // get private key in wallet import format for that child node\r\n  const WIF = childNode0.toWIF()\r\n  // derive a standard p2wpkh address from that WIF\r\n  const keyPair = bitcoin.ECPair.fromWIF(WIF, network)\r\n  const address = bitcoin.payments.p2wpkh({ pubkey: keyPair.publicKey, network }).address\r\n\r\n  return { mnemonic: strMnemonic, WIF, address }\r\n}\r\n\r\n\r\n//\r\n/**\r\n * Parse UTXO array to get total unspent balance in satoshi.\r\n * @param     {Array}    utxoArray      Array of UTXO objects with '.value' field in satoshi.\r\n * @returns   {number}                  Total number of unspent satoshi.\r\n */\r\nexport function getUnspentSum(utxoArray: Array<any>): number {\r\n\r\n  const sumSats = utxoArray?.reduce(\r\n    (sum: number, utxo: any) => sum + utxo.value\r\n    , 0) || 0\r\n\r\n  return sumSats\r\n}","import { I_State, Dispatch } from '../../interfaces'\nimport { ActionTypes } from './../../interfaces'\n\nimport { createNewWallet, loadWallet } from './../../helpers/bitcoin'\n\nconst { NEW_WALLET } = ActionTypes;\n\n/**\n * Create new wallet address & backup.\n * If mnemonic is provided, wallet is generated from that.\n */\nexport const createNewWalletAction = async (\n  state: I_State, dispatch: Dispatch, strMnemonic: string = ''\n) => {\n\n  // load all the wallet info from mnemonic or generate new random mnemonic to do it\n  const { mnemonic, WIF, address } = (\n    (strMnemonic === '')\n      ? createNewWallet(state.network)\n      : loadWallet(strMnemonic, state.network)\n  )\n\n  return dispatch({\n    type: NEW_WALLET,\n    payload: { mnemonic, WIF, address }\n  })\n}","import { I_State, Dispatch, ActionTypes } from '../../interfaces'\nconst { CHANGE_PAGE_INFO } = ActionTypes;\n\n\n/**\n * Request to change page info that's checked for validity here\n */\nexport const changePageInfoAction = async (state: I_State, dispatch: Dispatch, page: number) => {\n  // for now no checks\n\n  return dispatch({\n    type: CHANGE_PAGE_INFO,\n    payload: page\n  })\n}","import { I_State, Dispatch, ActionTypes } from '../../interfaces'\nimport { calcP2WSH, calcBnsState } from '../../helpers/bns'\nimport { getAddressHistory, getUTXOList, addRawTxToArray, getHeight } from '../../api/blockstream'\nconst { UPDATE_WALLET, UPDATE_DOMAIN, ACTION_FAIL } = ActionTypes\n\n/**\n * Scans the address for utxo on a given network (w/ API).\n * Add hex of each tx that created utxo (for psbt).\n * addressType is one of enums ActionTypes that's either UPDATE_WALLET or UPDATE_NOTIFICATION.\n * If scanning wallet, then update wallet state.\n * If scanning notification address, then update notification state.\n * Notification scan will reproduce address scan first before getting details.\n */\nexport const scanAddressFullyAction = async (\n  state: I_State,\n  dispatch: Dispatch,\n  addressType: ActionTypes\n) => {\n  const domainName = state.alias + state.extension\n\n  // wallet address scan\n  if (addressType === UPDATE_WALLET) {\n    // wallet address\n\n    try {\n\n      // 1. get address TX history\n\n      const walletAddress = state.wallet.address\n      const walletTxHistory = await getAddressHistory(walletAddress, state.network)\n\n      // 2. get address UTXO list (could also calculate from tx history or API)\n\n      const utxoListWalletAddress = await getUTXOList(walletAddress, state.network)\n\n      // 3. get raw tx for each UTXO (psbt requirement...)\n\n      const { arrayUtxoWithHex, erroredOutputs } = await addRawTxToArray(utxoListWalletAddress, state.network)\n\n      console.log({ walletAddress, walletTxHistory, utxoListWalletAddress, arrayUtxoWithHex, erroredOutputs })\n\n      return dispatch({\n        type: UPDATE_WALLET,\n        payload: {\n          wallet: {\n            txHistory: walletTxHistory,\n            utxoList: arrayUtxoWithHex\n          }\n        }\n      })\n\n    } catch (e) {\n      console.log('Wallet address scan failed')\n      console.log(e)\n      // abort\n      return dispatch({\n        type: ACTION_FAIL,\n        payload: {}\n      });\n    }\n  }\n\n  // notification address scan\n  if (addressType === UPDATE_DOMAIN) {\n\n\n    try {\n\n      // 1. get current blockheight from API so ownership is using latest possible info\n\n      const currentHeight = await getHeight(state.network)\n\n      // 2. get address TX history\n\n      const { notificationsAddress } = calcP2WSH(domainName, state.network)\n      const notificationsTxHistory = await getAddressHistory(notificationsAddress, state.network)\n\n\n      // 3. get address UTXO list (could also calculate from tx history or API)\n\n      const utxoListNotificationAddress = await getUTXOList(notificationsAddress, state.network)\n\n      // 4. get raw tx for each UTXO (psbt requirement...)\n\n      const { arrayUtxoWithHex, erroredOutputs } = await addRawTxToArray(utxoListNotificationAddress, state.network)\n\n      // (TODO) add utxo param & use to calcBnsState\n      const { domain } = calcBnsState(\n        notificationsTxHistory,\n        domainName,\n        currentHeight,\n        state.network\n      )\n\n      console.log({ domain, utxoListNotificationAddress, arrayUtxoWithHex, erroredOutputs })\n\n      return dispatch({\n        type: UPDATE_DOMAIN,\n        payload: {\n          domain: {\n            ...domain,\n            utxoList: arrayUtxoWithHex\n          },\n          chain: {\n            height: currentHeight\n          }\n        }\n      })\n\n    } catch (e) {\n      console.log('Notification address scan failed')\n      console.log(e)\n      // abort\n      return dispatch({\n        type: ACTION_FAIL,\n        payload: {}\n      });\n    }\n\n  }\n\n  throw new Error('unexpected address type')\n}","import { I_State, Dispatch, ActionTypes } from '../../interfaces'\nconst { CHOICES_BNS_ACTION } = ActionTypes;\n\n/**\n * Cleans up the entered string including removing next line characters\n */\nexport const changeChoicesBNSAction = async (\n  state: I_State,\n  dispatch: Dispatch,\n  choices: any\n) => {\n\n  return dispatch({\n    type: CHOICES_BNS_ACTION,\n    payload: choices\n  })\n}\n\n","import React from 'react'\nimport { Store, getOwner } from './../../store'\nimport { Link } from 'react-router-dom'\n\nimport styles from './SearchResults.module.css'\nimport timeDiff from './../../helpers/timediff'\nimport { OWNERSHIP_DURATION_BY_BLOCKS, interpretFw, findLatestForwards } from '../../helpers/bns/'\n\n\nexport const SearchResults = () => {\n  // global state\n  const { state } = React.useContext(Store)\n\n  // temp object to keep track of timers\n  let diff = { isExpired: true, dh: '' }\n\n  // calc time left in ownership via block heights\n  const owner = getOwner(state)\n  if (owner) {\n    const heightOfExpiration = owner.winHeight + OWNERSHIP_DURATION_BY_BLOCKS\n    const blocksUntilExpires = (heightOfExpiration - state.chain.height)\n    const msUntilExpires = blocksUntilExpires * 10.0 * 60.0 * 1000.0\n    diff = timeDiff(msUntilExpires, 0)\n  }\n\n  // account expires or isExpired information\n  const expirationMsg = () => {\n    // abort if no known ownership history\n    if (!owner) return ('')\n    return (\n      <div\n        className={ diff.isExpired ? styles.expired : styles.notExpired }\n      >\n        { !diff.isExpired && ('expires in ' + diff.dh) }\n      </div>\n    )\n  }\n\n  // calculate latest forwards\n  const latestForwards = owner ? findLatestForwards(owner.forwards) : []\n\n  return (\n    <>\n      <div className={ styles.wrapper }>\n        <div\n          className={ styles.describe }\n        >\n          { latestForwards.length } matches on { state.network } {'  '}\n          { expirationMsg() }\n        </div>\n        <div className={ styles.listContainer } >\n          {(diff.isExpired) && (\n            <Link\n              to='/create'\n              className={ styles.createLink }\n            >\n              Domain available!\n            </Link>\n          )}\n        </div>\n        <div className={ styles.listContainer } >\n          {\n            latestForwards.map((fw: any) => {\n              const ifw = interpretFw(fw)\n              if (ifw.render) {\n                return (\n                  <a\n                    key={ fw.network }\n                    className={ styles.listItem }\n                    href={ encodeURI(ifw?.link || '') || undefined }\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <span className={ styles.key }>{ ifw.where }</span>\n                    { ifw.what }\n                  </a>\n                )\n              } else {\n                return ('')\n              }\n            })\n          }\n        </div>\n      </div>\n    </>\n  )\n}\n","\n/**\n * Difference between timestampMsec timestamp relative to current time or another reference referenceTimestampMsec timestamp.\n * Returns days-hours-minutes string, days-hours string, if expired, and ms of difference.\n * @param   {number}  timestampMsec               Timestamp of interest (milliseconds).\n * @param   {number}  [referenceTimestampMsec=]   Reference timestamp (milliseconds).\n * @returns {object}                              { dhm, dh, isExpired, msDiff }.\n */\nexport default function timeDiff(\n  timestampMsec: number, referenceTimestampMsec: number = Date.now()\n): {\n  dhm: string\n  dh: string\n  isExpired: boolean\n  msDiff: number\n} {\n  let diff = timestampMsec - referenceTimestampMsec\n  // note sign\n  const isExpired = (diff <= 0)\n  // mod away higher time frames\n  diff = Math.abs(diff)\n  const d = Math.floor(diff / (1000 * 60 * 60 * 24))\n  // remove days\n  diff -= d * (1000 * 60 * 60 * 24)\n  const h = Math.floor(diff / (1000 * 60 * 60)) % 24\n  // remove hours\n  diff -= h * (1000 * 60 * 60)\n  const m = Math.floor(diff / (1000 * 60)) % 60\n  return {\n    dhm: `${d} days ${h} hours ${m} min`,\n    dh: `${d} days ${h} hours`,\n    isExpired,        // time difference is to the past of now? (boolean)\n    msDiff: diff\n  };\n}","import { I_Forward } from './types/'\n/**\n * Reads a single forward info object to interpret its values\n * as where the forwarding address should be used, what it is, and what link to use.\n * Returns {what: string, where: string, link: string, render: boolean}.\n */\nexport function interpretFw (fw: I_Forward) {\n  // blank address means it was removed\n  // ! at start means it's a command, not a network\n  if (fw.address === '' || fw.network.startsWith('!')) {\n    return {\n      render: false\n    }\n  }\n\n  if (\n    fw.network === 'p2wsh' ||\n    fw.network === 'btc' ||\n    fw.network === 'p2pkh' ||\n    fw.network === 'p2wpkh' ||\n    fw.network === 'p2sh'\n  ) {\n    return {\n      where: 'btc:',\n      what: (\n        fw.address\n      ),\n      link: (\n        'https://blockstream.info/address/' + fw.address\n      ),\n      render: true\n    }\n  }\n\n  if (fw.network === 'http' || fw.network === 'https' || fw.network === 'url' || fw.network === 'web') {\n    return {\n      where: 'https://',\n      what: fw.address,\n      link: 'https://' + fw.address,\n      render: true\n    }\n  }\n\n  if (fw.network === 'twitter') {\n    return {\n      where: 'twitter.com/',\n      what: fw.address,\n      link: 'https://twitter.com/' + fw.address,\n      render: true\n    }\n  }\n\n  if (fw.network === 'github') {\n    return {\n      where: 'github.com/',\n      what: fw.address,\n      link: 'https://github.com/' + fw.address,\n      render: true\n    }\n  }\n\n  if (fw.network === 'youtube') {\n    return {\n      where: 'youtu.be/',\n      what: fw.address,\n      link: 'https://www.youtube.com/watch?v=' + fw.address,\n      render: true\n    }\n  }\n\n  // if unknown forward network, no link, and the rest is shown as is\n  return {\n    where: fw.network,\n    what: fw.address,\n    link: undefined,\n    render: true\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport { RoundButton } from './../general/RoundButton'\nimport { Store } from './../../store/'\nimport { searchAction, changeAliasAction } from './../../store/actions/'\nimport { SearchResults } from './../SearchResults'\nimport styles from './HomeContent.module.css'\n\nexport const HomeContent = (props: any): JSX.Element => {\n  const { state, dispatch } = React.useContext(Store)\n\n  // if page is loaded with #/id/:alias format\n  // this will change alias to that one\n  // then it will navigate to '/'\n  // and then it will do search with new alias\n  // http://localhost:3000/#/id/satoshi\n  const alias = props?.match?.params?.alias\n  if (alias) {\n    searchAction({...state, alias}, dispatch, props.history)\n  }\n\n  // is serach done\n  const isSearchDone = () => state.pageInfo.checkedLightSearch\n\n  // put the textarea (by ref) into focus on mount and move caret to end\n  const inputEl = useRef<HTMLTextAreaElement>(null)\n  useEffect(() => {\n    if (inputEl && inputEl.current) {\n      inputEl.current.selectionEnd = inputEl.current.value.length\n      inputEl.current.selectionStart = inputEl.current.value.length\n      inputEl.current.focus()\n    }\n  }, [])\n\n  return (\n    <>\n      <div className={\n        !isSearchDone()\n          ? [styles.lblMainTitle].join(' ')\n          : [styles.lblMainTitle, styles.lblMainTitleAfter].join(' ')\n      }>\n        <span>Bitcoin</span> Name System\n      </div>\n      <div className={\n        !isSearchDone()\n          ? styles.divSearch\n          : [styles.divSearch, styles.divSearchAfter].join(' ')\n      }>\n        <textarea\n          id=\"txtSearch\"\n          className={ styles.txtSearch }\n          cols={ 30 }\n          rows={ 1 }\n          spellCheck={ false }\n          value={ state.alias }\n          placeholder={ 'e.g. satoshi' }\n          ref={ inputEl }\n          onChange={ e => changeAliasAction(state, dispatch, e?.target?.value) }\n          onKeyPress={ e => { e.key === 'Enter' && searchAction(state, dispatch) } }\n        ></textarea>\n        <RoundButton\n          sizebutton='2.6'\n          onClick={ () => searchAction(state, dispatch) }\n        >\n          .btc\n        </RoundButton>\n      </div>\n      <div style={{ display: isSearchDone() ? 'block' : 'none' }}>\n        <SearchResults />\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { HomeContent } from './../components/HomeContent'\n\nconst Home = (props: any): JSX.Element => {\n  return (\n    <>\n      <HomeContent { ...props } />\n    </>\n  )\n}\nexport default Home","import React from 'react'\nimport { Store } from './../../store/'\nimport styles from './AboutContent.module.css'\n\nexport const AboutContent = () => {\n  const { state } = React.useContext(Store)\n\n  return (\n    <>\n      <div className={ styles.wrapper }>\n        <div>\n          About page (TODO)\n        </div>\n        <pre>\n          { JSON.stringify({ ...state }, null, 2) }\n        </pre>\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { AboutContent } from './../components/AboutContent'\n\nexport default function About(): JSX.Element {\n  return (\n    <>\n      <AboutContent />\n    </>\n  )\n}\n\n// for lazy loading:\n// const RoundButton = React.lazy<any>(() => import('../components/RoundButton')\n// <React.Suspense\n//   fallback={\n//     <div>loading...</div>\n//   }\n// >\n// </React.Suspense>\n","import React, { useState } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P1RestoreOrBackup.module.css'\nimport { createNewWalletAction, changePageInfoAction } from '../../../store/actions/'\nimport sanitize from './../../../helpers/sanitize'\nimport { Store } from './../../../store/'\n\nenum pages {\n  ROOT,\n  NEW_WALLET,\n  LOAD_BACKUP\n}\n\n// restore backup or create new\nexport const P1RestoreOrBackup = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n  const [ page, setPage ] = useState(pages.ROOT) // local state\n  const [ backup, setBackup ] = useState('') // local state\n\n  // count non empty string strings separated by spaces\n  const wordCount = backup.split(' ').filter(v => v !== '').length\n\n  return (\n    <div className={ styles.wrapper }>\n\n      {/* ROOT PAGE */}\n      <div\n        style={{ display: page === pages.ROOT ? 'block' : 'none' }}\n      >\n        <div\n          className={ styles.title }\n        >\n          Need <span className={ styles.Orange }>BTC</span> address to control<br />\n          the domain name\n        </div>\n        <div\n          className={ styles.buttonWrapper }\n        >\n          <RoundButton\n            show={ (state.wallet.mnemonic.length > 0) ? 'false' : 'true' }\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n              createNewWalletAction(state, dispatch)\n            }}\n          >\n            I need a new wallet\n          </RoundButton>\n          <RoundButton\n            show={ (state.wallet.mnemonic.length > 0) ? 'true' : 'false' }\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n            }}\n          >\n            Current backup\n          </RoundButton>\n          <RoundButton\n            onClick={() => {\n              setPage(pages.LOAD_BACKUP)\n            }}\n          >\n            Restore from backup\n          </RoundButton>\n          <RoundButton\n            show={ (!!state.wallet?.address).toString() }\n            onClick={() => {\n              changePageInfoAction(state, dispatch, 2)\n            }}\n            next='true'\n            colorbutton={'var(--colorHighlight)'}\n          >\n            Don't change wallet\n          </RoundButton>\n        </div>\n      </div>\n\n      {/* NEW_WALLET PAGE */ }\n\n      <div\n        className={ styles.contentWrapper }\n        style={{ display: page === pages.NEW_WALLET ? 'flex' : 'none' }}\n      >\n        <div className={ styles.describe }>\n          Randomly generated for domain control\n          <br /><br />\n          Backup this private phrase\n          or you will lose access\n        </div>\n        <div\n          id='divBackup'\n          spellCheck={ false }\n          className={ [styles.backup, 'selectable'].join(' ') }\n          onClick={ () => {\n            // select div entire contents\n            // const thisDiv = document?.getElementById('divBackup')\n            // if (thisDiv) {\n            //   window.getSelection()?.selectAllChildren(thisDiv)\n            // }\n          }}\n        >\n          { state.wallet.mnemonic }\n        </div>\n        <div className={ styles.buttonWrapper } >\n          <RoundButton\n            onClick={() => {\n              setPage(pages.ROOT)\n            }}\n            back='true'\n          >\n            Back\n          </RoundButton>\n          <RoundButton\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n              createNewWalletAction(state, dispatch)\n            }}\n          >\n            New\n          </RoundButton>\n          <RoundButton\n            next='true'\n            onClick={() => {\n              changePageInfoAction(state, dispatch, 2)\n            }}\n          >\n            I'm done with backup\n          </RoundButton>\n        </div>\n      </div>\n\n      {/* LOAD_BACKUP PAGE */ }\n\n      <div\n        style={{ display: page === pages.LOAD_BACKUP ? 'block' : 'none' }}\n      >\n        <div className={ styles.title }>\n          Type or paste your backup here\n        </div>\n        <br></br>\n        <div>\n          { (wordCount).toString() + ' words now. 12 minimum.' }\n        </div>\n        <br></br>\n        <textarea\n          className={ styles.restoreBackup }\n          cols={ 30 }\n          rows={ 3 }\n          spellCheck={ false }\n          placeholder={ 'mnemonic backup' }\n          onChange={ e => {\n            // lowcaps, spaces, single space max, only one space on left while typing\n            const cleanString = sanitize(\n              e.target.value.toLowerCase(),\n              'lowcaps spaces single_space_width'.split(' ')\n            ).trimLeft()\n            setBackup(cleanString.trim()) // store without trailing space\n            e.target.value = cleanString // quick update\n          } }\n        ></textarea>\n        <div className={ styles.buttonWrapper } >\n          <RoundButton\n            onClick={() => {\n              setPage(pages.ROOT)\n            }}\n            back='true'\n          >\n            Back\n          </RoundButton>\n          <RoundButton\n            // 12 words minimum separated by spaces (TODO): proper checks\n            show={ (wordCount >= 12) ? 'true' : 'false' }\n            next='true'\n            onClick={() => {\n              createNewWalletAction(state, dispatch, backup)\n              changePageInfoAction(state, dispatch, 2)\n            }}\n          >\n            Done\n          </RoundButton>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","import React, { useEffect, useState } from 'react'\nimport styles from './CreateHeader.module.css'\nimport { Store } from './../../../store/'\n\n// restore backup or create new\nexport const CreateHeader = () => {\n  const { state } = React.useContext(Store) // global state\n\n  // Make sure entire alias is always visible on top through\n  // resizing based on letter count.\n  //\n  // get window width in component instance state 'width'\n  // so can resize alias based on char count\n  const [ width, setWidth ] = useState(window.innerWidth)\n  useEffect(() => {\n    const resize = () => { setWidth(window.innerWidth) }\n    window.addEventListener('resize', resize);\n    return () => window.removeEventListener('resize', resize);\n  }, [])\n  const domainName = state.alias + state.extension\n  // enforces max size to font size so 1 letter alias has same font as 19 letter alias\n  const fontScale = Math.min(\n      Math.floor(1.1 * width / domainName.length),\n      Math.floor(1.1 * width / 15)\n  )\n\n  const barHeight = { height: (0.12 * width + 0.4 * fontScale).toString() + 'px' }\n  const aliasMarginTop = { marginTop: (0.02 * width - 0.1 * fontScale).toString() + 'px' }\n  const aliasFontSize = { fontSize: fontScale.toString() + 'px' }\n\n  return (\n    <>\n      <div\n        className={ styles.cutOverflow }\n        style={ barHeight }\n      >\n        <div\n          className={ styles.bar }\n          style={ barHeight }\n        />\n      </div>\n      <div\n        className={ styles.wrapper }\n        style={ aliasMarginTop }\n      >\n        <span\n          className={ styles.alias }\n          style={ aliasFontSize }\n        >{ state.alias }</span>\n        <span\n          className={ styles.ext }\n          style={ aliasFontSize }\n        >{ state.extension }</span>\n      </div>\n      <div className={ styles.spacer } />\n    </>\n  )\n}\n\n","import React, { useState, useEffect } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P2LoadWallet.module.css'\nimport { Store } from '../../../store'\nimport { changePageInfoAction } from '../../../store/actions'\nimport qr from 'qrcode'\n\n/**\n * Load wallet page, including faucet link for testnet users\n */\nexport const P2LoadWallet = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n\n  // load QR code into local state\n  const [ qrCode, setQrCode] = useState()\n  useEffect(() => {\n    qr.toDataURL(state.wallet.address, { type: 'image/jpeg' }, (err: any, url: any) => {\n      if (!err) { setQrCode(url) }\n    })\n  }, [state.wallet.address])\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.contentWrapper }>\n        <div\n          className={ styles.imgQr }\n        >\n          {/* downloadable */}\n          <img src={qrCode} alt={'QR Code'} />\n        </div>\n        <div>\n          Fund your wallet to control domain.\n        </div>\n        <div className={ [styles.address, 'selectable'].join(' ') }>\n          { state.wallet.address }\n        </div>\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 1)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          colorbutton={'var(--colorHighlight)'}\n          show={ (state.network === 'testnet').toString() }\n          onClick={ () => {\n            // open faucet page in new window\n            // segwit compatible:\n            // 1) https://testnet-faucet.mempool.co/\n            // 2) https://bitcoinfaucet.uo1.net/\n            window.open('https://bitcoinfaucet.uo1.net/', '_blank')\n            // window.open('https://testnet-faucet.mempool.co/', '_blank')\n          }}\n        >\n          Testnet: tBTC faucet\n        </RoundButton>\n        <RoundButton\n          onClick={ () => {\n            // open blockstream explorer for address in new window/tab\n            const pathEdit = (state.network === 'testnet') ? 'testnet/' : ''\n            window.open(\n              `https://blockstream.info/${pathEdit}address/${state.wallet.address}`\n            , '_blank')\n          }}\n        >\n          Open explorer\n        </RoundButton>\n        <RoundButton\n          next='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 3)\n          }}\n        >\n          Ready\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P3DomainAndWallet.module.css'\nimport { Store } from '../../../store'\nimport { changePageInfoAction } from '../../../store/actions'\nimport { scanAddressFullyAction } from './../../../store/actions'\nimport { ActionTypes } from './../../../interfaces'\nimport { getUnspentSum } from './../../../helpers/bitcoin'\n\n/**\n * Bid on network\n */\nexport const P3DomainAndWallet = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n\n  // Local state: keep track if API is busy\n  const [ apiStatus, setApiStatus ] = React.useState('ok')\n\n  // on state update detected by timestamp, reset api status\n  React.useEffect(() => { setApiStatus('ok') }, [ state.lastTimeStamp ])\n\n  // most important for domain notificaiton address is the transaction history to know ownership\n  // but also the current utxo in case we want to control the domain\n  const domainInfo = () => {\n    if (state.pageInfo.checkedDomain) {\n      return ('✓')\n    } else {\n      return ('needs scan')\n    }\n  }\n\n  // wallet needs utxo info including raw tx & tx history for nonce\n  const walletInfo = () => {\n    if (state.pageInfo.checkedWallet) {\n      return ( '✓' )\n    } else {\n      return ('needs scan')\n    }\n  }\n\n  // Conditions to enable next pages.\n  const readyStatus = () => {\n    if (!state.pageInfo.checkedDomain && !state.pageInfo.checkedWallet) {\n      return { isReady: false,    info: 'Scan both to move on' }\n    }\n    if (!state.pageInfo.checkedDomain && state.pageInfo.checkedWallet) {\n      return { isReady: false,    info: 'Scan domain to move on' }\n    }\n    if (state.pageInfo.checkedDomain && !state.pageInfo.checkedWallet) {\n      return { isReady: false,    info: 'Scan wallet to move on' }\n    }\n    if (state.pageInfo.checkedDomain && state.pageInfo.checkedWallet) {\n      return { isReady: true,     info: '' }\n    }\n    return { isReady: false,      info: 'Unknown status' }\n  }\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Wallet and domain history needed. <br />\n        (No offline method yet)\n      </div>\n      <div className={ styles.domainInfo }>\n        { (apiStatus !== 'domain')  && 'Domain ' + domainInfo() }\n        { (apiStatus === 'domain')  && 'Domain scanning...' }\n      </div>\n      <div className={ styles.domainButton }>\n        <RoundButton\n          onClick={ () => {\n            if (apiStatus === 'ok') {\n              setApiStatus('domain')\n              scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_DOMAIN)\n            }\n          }}\n        >\n          API Scan\n        </RoundButton>\n      </div>\n      <div className={ styles.walletInfo }>\n        { (apiStatus !== 'wallet')  && 'Wallet ' + walletInfo() }\n        { (apiStatus === 'wallet') && 'Wallet scanning...' }\n      </div>\n      <div className={ styles.walletButton }>\n        <RoundButton\n          onClick={ () => {\n            if (apiStatus === 'ok') {\n              setApiStatus('wallet')\n              scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_WALLET)\n            }\n          }}\n        >\n          API Scan\n        </RoundButton>\n      </div>\n      <div className={ styles.unspent }>\n        <div className={ styles.balance }>\n          { state.pageInfo.checkedWallet? (getUnspentSum(state.wallet.utxoList) / 1e8).toFixed(8) : 'n/a' }\n        </div>\n        { (state.network === 'testnet') ? ' tBTC' : ' BTC' }\n      </div>\n      <div className={ styles.ownership }>\n        { readyStatus().info }\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 2)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          show={ readyStatus().isReady ? 'true' : 'false' }\n          next='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 4)\n          }}\n        >\n          Ready\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P4ActionChoice.module.css'\nimport { Store } from '../../../store'\nimport { changePageInfoAction, changeChoicesBNSAction } from '../../../store/actions'\n\nimport { runAllActionPermissionChecks, calcBnsState } from './../../../helpers/bns/'\n\n\n/**\n * Bid on network\n */\nexport const P4ActionChoice = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n\n  // simulate bns state once again just in case\n  // up to current block height\n  const bns = calcBnsState(\n    state.domain.txHistory,\n    state.domain.domainName,\n    state.chain.height,\n    state.network\n  )\n  // and get all permissions\n  const checkActions = runAllActionPermissionChecks(bns, state.wallet.address)\n  console.log(checkActions)\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Available actions\n      </div>\n      <div className={ styles.availableActions }>\n        {\n          checkActions.map(action => {\n            // usable actions only + not displaying actions with warnings\n            if (action.isUsable && !action.warning) {\n              console.log(action.info, 'special tx instructions:', action.special)\n              return (\n              <RoundButton\n                next={ 'true' }\n                onClick={ () => {\n                  changeChoicesBNSAction(state, dispatch, {\n                    action: {\n                      type: action.type,\n                      info: action.info,\n                      special: action.special\n                    }\n                  })\n                  changePageInfoAction(state, dispatch, 5)\n                }}\n                key={ action.info }\n              >\n                { action.info }\n              </RoundButton>\n              )\n            } else {\n              return ''\n            }\n          })\n        }\n      </div>\n      <div className={ styles.unavailableActions }>\n        <div className={ styles.unavailableActions__title }>\n          Unavailable actions:\n        </div>\n        <div className={ styles.unavailableActions__actionList }>\n          {\n            checkActions.map(action => {\n              if (!action.isUsable) {\n                return (\n                  <div\n                    className={\n                      styles.unavailableActions__actionList__action\n                    }\n                    key={ action.info }\n                  >\n                    <div\n                      className={\n                        styles.unavailableActions__actionList__action__title\n                      }\n                    >\n                      { action.info }\n                    </div>\n                    <div\n                      className={\n                        styles.unavailableActions__actionList__action__permissionList\n                      }\n                    >\n                      { action.permissionList.map((permission: any) => {\n                        return (\n                          <div\n                            className={\n                              styles.unavailableActions__actionList__action__permissionList__permission\n                            }\n                            key={permission.info}\n                          >\n                            - { permission.info }\n                          </div>\n                        )\n                      })}\n                    </div>\n                  </div>\n                )\n              } else {\n                return ('')\n              }\n            })\n          }\n        </div>\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 3)\n          }}\n        >\n          Back\n        </RoundButton>\n      </div>\n    </div>\n  )\n}","import React, { useEffect } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P5CustomForwards.module.css'\nimport { Store, getOwner } from '../../../store'\nimport { changePageInfoAction, changeChoicesBNSAction } from '../../../store/actions'\nimport { stringByteCount, BYTES_MAX, findLatestForwards } from '../../../helpers/bns'\nimport sanitize from '../../../helpers/sanitize'\n\ntype Planned_Changes = { [key: string]: string }\n\n/**\n * Edit custom forwards information.\n * state - global state.\n * textboxContent - text content inside the network and address textareas.\n */\nexport const P5CustomForwards = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  // object of planned changes derived from chosen string to embed\n  const plannedChanges = (\n    state.choices.embedString.split(' ').reduce((\n      plannedChangesSoFar: Planned_Changes,\n      word: string,\n      index: number,\n      words: Array<string>\n    ): Planned_Changes => {\n        if (index % 2 === 1) {\n          return { ...plannedChangesSoFar, [words[index - 1]]: word }\n        } else {\n          return plannedChangesSoFar\n        }\n      }\n    , {})\n  )\n\n  // change string to embed from an object of planned changes\n  const setPlannedChanges = (objForwards: Planned_Changes) => {\n    let forwardsString = ''\n    Object.keys(objForwards).forEach(fwNetwork => {\n      forwardsString += fwNetwork + ' ' + objForwards[fwNetwork] + ' '\n    })\n    if (forwardsString.length > 0) { forwardsString = forwardsString.slice(0, -1) }\n    console.log('string to embed:', '\"' + forwardsString + '\"')\n    changeChoicesBNSAction(state, dispatch, {\n      embedString: forwardsString\n    })\n  }\n\n  // array of past network:forwardingAddress objects\n  // display only active ones with latest higher\n  const pastForwards = findLatestForwards(getOwner(state)?.forwards).reverse() || []\n\n  // local state for content in textboxes for new network address changes\n  const [textboxContent, setTextboxContent] = React.useState({network: '', address: '' })\n\n  // combine forwards into a string to embed\n  const combineForwards = (objForwards: any) => {\n    let forwardsString = ''\n    Object.keys(objForwards).forEach(fwNetwork => {\n      forwardsString += fwNetwork + ' ' + objForwards[fwNetwork] + ' '\n    })\n    if (forwardsString.length > 0) { forwardsString = forwardsString.slice(0, -1) }\n    console.log('string to embed:', '\"' + forwardsString + '\"')\n    return forwardsString\n  }\n\n\n  useEffect(() => {\n\n  }, [])\n\n  const bytesOfChanges = stringByteCount(combineForwards(plannedChanges))\n  console.log(bytesOfChanges)\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Update forwarding information\n      </div>\n      <div className={ styles.changes }>\n        {/* bytes info */ }\n        { (Object.keys(plannedChanges).length === 0) && 'Nothing added yet' }\n        { (bytesOfChanges <= BYTES_MAX) &&\n          <div className={ styles.bytesLeft }>\n            { BYTES_MAX - bytesOfChanges } Bytes left\n          </div>\n        }\n        { (bytesOfChanges > BYTES_MAX) &&\n          <div className={ styles.bytesOver }>\n            Too much by { bytesOfChanges - BYTES_MAX } Bytes\n          </div>\n        }\n        { Object.keys(plannedChanges).map((fwNetwork) => {\n          return (\n            <div\n              className={ styles.updateItem }\n              key={ fwNetwork }\n              onClick={ () => {\n                setTextboxContent({ network: fwNetwork, address: plannedChanges[fwNetwork] })\n              } }\n            >\n              <div\n                className={ styles.updateInfo }\n              >\n                {\n                  (plannedChanges[fwNetwork] !== '')\n                    ? (<>\n                      Updating forwarding on <span>{ ' ' + fwNetwork + ' ' }</span>\n                      network to address of <span>{ ' ' + plannedChanges[fwNetwork] + ' ' }</span>\n                      <i>{' '}(+{ stringByteCount(fwNetwork + ' ' + plannedChanges[fwNetwork]) }B)</i>\n                    </>)\n                    : (<>\n                      Deleting previously set forwarding information for\n                      <span>{ ' ' + fwNetwork + ' '}</span> network\n                      <i>{' '}(+{ stringByteCount(fwNetwork + ' ' + plannedChanges[fwNetwork]) }B)</i>\n                    </>)\n                }\n              </div>\n              <div\n                className={ ['btnCircle', styles.updateCancel, 'addTooltipRight'].join(' ') }\n                onClick={ (e) => {\n                  const newData = { ...plannedChanges }\n                  delete newData[fwNetwork]\n                  setPlannedChanges(newData)\n                  e.stopPropagation()\n                } }\n              >\n                <span>×</span>\n                <aside>Remove from planned changes</aside>\n              </div>\n            </div>\n          )\n        }) }\n      </div>\n      <div className={ styles.editor } >\n        { (textboxContent.network.length > 0) &&\n          <div\n            className={ [styles.btnDelete, 'canPress'].join(' ') }\n            onClick={ () => {\n              setPlannedChanges({\n                ...plannedChanges,\n                [textboxContent.network]: ''\n              })\n              setTextboxContent({ network: '', address: '' })\n            } }\n          >\n            No address\n          </div>\n        }\n        <div\n          className={ styles.editorNetwork }\n        >\n          <aside>Network</aside>\n          <textarea\n            spellCheck={ false }\n            value={ textboxContent.network }\n            placeholder={ 'e.g. btc' }\n            onChange={ (e) => {\n              const cleanText = sanitize(e.target.value, 'oneline')\n              setTextboxContent({ ...textboxContent, network: cleanText })\n              e.target.value = cleanText\n            } }\n          ></textarea>\n        </div>\n        <div\n          className={ styles.editorAddress }\n        >\n          <aside>Forwarding address</aside>\n          <textarea\n            spellCheck={ false }\n            value={ textboxContent.address }\n            placeholder={ 'e.g. your btc address' }\n            onChange={ (e) => {\n              const cleanText = sanitize(e.target.value, 'oneline')\n              setTextboxContent({ ...textboxContent, address: e.target.value })\n              e.target.value = cleanText\n            } }\n          ></textarea>\n        </div>\n        <div\n          className={ ['btnCircle', styles.btnAdd, 'canPress', 'addTooltip'].join(' ') }\n          onClick={ () => {\n            setPlannedChanges({\n              ...plannedChanges,\n              [textboxContent.network]: textboxContent.address\n            })\n            setTextboxContent({ network: '', address: '' })\n          } }\n        >\n          <span>+</span>\n          <aside>Add to planned changes</aside>\n        </div>\n      </div>\n      <div className={ styles.pastList } >\n        { pastForwards.map((fw: any, i: number) => {\n          return (\n            <div\n              className={ styles.pastPair }\n              key={ i }\n              onClick={ () => {\n                setTextboxContent({ network: fw.network, address: fw.address })\n              } }\n            >\n              <div className={ styles.pastNetwork } >\n                { fw.network }\n              </div>\n              <div className={ styles.pastAddress } >\n                { fw.address }\n              </div>\n            </div>\n          )\n        }) }\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 4)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          next='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 6)\n          }}\n        >\n          Ready\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport { Store } from '../../../store'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P6Broadcast.module.css'\nimport { changeChoicesBNSAction, changePageInfoAction } from '../../../store/actions'\nimport { calcTx } from './../../../helpers/bns/'\nimport { txPush } from './../../../api/blockstream'\nimport sanitize from './../../../helpers/sanitize'\nimport { getFeeEstimates } from './../../../api/blockstream'\nimport { getUnspentSum } from './../../../helpers/bitcoin'\n\n/**\n * Broadcast tx page.\n * Fee selection.\n * Transaction summary/status. *\n */\nexport const P6Broadcast = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  // local state for fee rate text that can end on decimal\n  const [ feeText, setFeeText ] = React.useState(state.choices.feeRate)\n  const [ feeSuggestions, setFeeSuggestions ] = React.useState({\n    showSuggestions: false,\n    apiSuccess: false,\n    min20: 1,\n    min40: 1,\n    min60: 1,\n  })\n\n  // tx calculation\n  let tx: any;\n  try {\n    tx = calcTx(\n      state.wallet,\n      state.domain,\n      state.choices,\n      state.network\n    )\n  } catch (e) { console.log('tx calc failed:', e.message) }\n\n  // summarize number of updates in the embeded string\n  const numberOfUpdates = (state\n    .choices\n    .embedString\n    .split(' ')\n    .reduce((countSoFar: number, word: string, index: number, words: Array<string>) =>\n      (index % 2 === 1) ? countSoFar + 1 : countSoFar\n    , 0)\n  )\n\n  const [ broadcastStatus, setBroadcastStatus ] = React.useState({\n    ok: false,\n    txid: '123',\n    reason: ''\n  })\n\n  // get new suggestions if never got them through api\n  // otherwise show previous\n  const tryFees = async () => {\n    if (!feeSuggestions.apiSuccess) {\n      try {\n        const apiSuggest = await getFeeEstimates(state.network)\n        setFeeSuggestions({\n          min20: apiSuggest['2'],\n          min40: apiSuggest['4'],\n          min60: apiSuggest['6'],\n          apiSuccess: true,\n          showSuggestions: true\n        })\n\n      } catch (e) {}\n    } else {\n      setFeeSuggestions({\n        ...feeSuggestions,\n        showSuggestions: true\n      })\n    }\n  }\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Finalize transaction details\n      </div>\n      <div className={ styles.fees }>\n        <div className={ styles.fees__rate }>\n          <aside>Fee rate (sat/vByte):</aside>\n          <textarea\n            spellCheck={ false }\n            value={ feeText }\n            placeholder={ 'e.g. 1.2' }\n            onChange={ (e) => {\n              const cleanText = sanitize(e.target.value, [\n                'numbers', 'decimal_point', 'no_leading_zeros'\n              ])\n              setFeeText(cleanText)\n              // 123. works in parseFloat and outputs 123 so safe\n              const cleanNumber = parseFloat(cleanText)\n              changeChoicesBNSAction(state, dispatch, { feeRate: cleanNumber })\n            } }\n          ></textarea>\n        </div>\n        <div className= { styles.fees__apicall }>\n          <RoundButton\n            onClick={ () => {\n              tryFees()\n            } }\n          >\n            Check online\n          </RoundButton>\n        </div>\n          { (feeSuggestions.showSuggestions) && (\n            <div className={ styles.fees__feeSelection }>\n              <div\n                className= { styles.fees__feeSelection__choice }\n                onClick={ () => {\n                  setFeeText(feeSuggestions.min20)\n                  changeChoicesBNSAction(state, dispatch, {\n                    feeRate: feeSuggestions.min20\n                  })\n                  setFeeSuggestions({...feeSuggestions, showSuggestions: false})\n                } }\n              >\n                { '<' }20 min ({ feeSuggestions.min20 } sat/vByte)\n              </div>\n              <div\n                className= { styles.fees__feeSelection__choice }\n                onClick={ () => {\n                  setFeeText(feeSuggestions.min40)\n                  changeChoicesBNSAction(state, dispatch, {\n                    feeRate: feeSuggestions.min40\n                  })\n                  setFeeSuggestions({...feeSuggestions, showSuggestions: false})\n                } }\n              >\n                { '<' }40 min ({ feeSuggestions.min40 } sat/vByte)\n              </div>\n              <div\n                className= { styles.fees__feeSelection__choice }\n                onClick={ () => {\n                  setFeeText(feeSuggestions.min60)\n                  changeChoicesBNSAction(state, dispatch, {\n                    feeRate: feeSuggestions.min60\n                  })\n                  setFeeSuggestions({...feeSuggestions, showSuggestions: false})\n                } }\n              >\n                { '<' }60 min ({ feeSuggestions.min60 } sat/vByte)\n              </div>\n            </div>\n          ) }\n      </div>\n\n      <div className={ styles.txSummary }>\n        { (!!tx) && (\n          <table><tbody>\n            <tr>\n              <th>Action:</th>\n              <th>{ state.choices.action.info }</th>\n            </tr>\n            <tr>\n              <th>Updates:</th>\n              <th>{ numberOfUpdates }</th>\n            </tr>\n            <tr>\n              <th>Inputs:</th>\n              <th>{ tx.nInputs }</th>\n            </tr>\n            <tr>\n              <th>Outputs:</th>\n              <th>{ tx.nOutputs }</th>\n            </tr>\n            <tr>\n              <th>Size:</th>\n              <th>{ tx.thisVirtualSize } vBytes</th>\n            </tr>\n            <tr>\n              <th>Available:</th>\n              <th>{ (getUnspentSum(state.wallet.utxoList) / 1e8).toFixed(8) } BTC</th>\n            </tr>\n            <tr>\n              <th>Burning:</th>\n              <th>\n                { (tx.burnAmount / 1e8).toFixed(8) } BTC\n              </th>\n            </tr>\n            <tr>\n              <th>Miner fee:</th>\n              <th>\n                { (tx.fee / 1e8).toFixed(8) } BTC\n                {' '}\n                ({(tx.fee / tx.valueNeeded * 100.0).toFixed(1)}%)\n              </th>\n            </tr>\n            <tr>\n              <th>Total cost:</th>\n              <th>{ (tx.valueNeeded / 1e8).toFixed(8) } BTC</th>\n            </tr>\n          </tbody></table>\n        )}\n        { (!tx) && (\n          <div className={ styles.txSummary }>\n            calculation failed\n          </div>\n        ) }\n      </div>\n      <div className={ styles.txid }>\n        {/* hex here later, only in console now */}\n        { (broadcastStatus.ok) ? (\n          <>\n            <div\n              className={ [styles.txid__button, 'canPress'].join(' ') }\n              onClick={ () => {\n                const PATH = `https://blockstream.info/` +\n                `${ state.network === 'testnet' ? 'testnet/' : '' }tx/` +\n                `${ broadcastStatus.txid }`\n                window.open(PATH, '_blank')\n              } }\n            >\n              Success! Open in explorer\n            </div>\n          </>\n        ) : (broadcastStatus.reason.length > 0) ? (\n          <div className={ styles.txid__failed }>\n            { broadcastStatus.reason }\n          </div>\n        ) : ''\n      }\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back={ 'true' }\n          onClick={ () => { changePageInfoAction(state, dispatch, 5) } }\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          show={ tx?.hex !== '' ? 'true' : 'false' }\n          onClick={ async () => {\n            try {\n              const res = await txPush(tx.hex, state.network)\n              setBroadcastStatus({ok: true, txid: res.txid, reason: '' })\n            } catch (e) {\n              setBroadcastStatus({ok: false, txid: '', reason: e.message })\n            }\n          } }\n        >\n          Broadcast\n        </RoundButton>\n      </div>\n\n    </div>\n  )\n}","import React from 'react'\nimport { Store } from './../../store/'\nimport { CreateHeader } from './../CreateSteps/CreateHeader'\nimport { P1RestoreOrBackup } from '../CreateSteps/P1RestoreOrBackup'\nimport { P2LoadWallet } from '../CreateSteps/P2LoadWallet'\nimport { P3DomainAndWallet } from '../CreateSteps/P3DomainAndWallet'\nimport { P4ActionChoice } from '../CreateSteps/P4ActionChoice'\nimport { P5CustomForwards } from '../CreateSteps/P5CustomForwards'\nimport { P6Broadcast } from './../CreateSteps/P6Broadcast'\nimport styles from './CreateNavigator.module.css'\n\n/**\n * Handle navigation of alias manipulation\n */\nexport const CreateNavigator = () => {\n  // global state\n  const { state } = React.useContext(Store)\n\n  const page = state.pageInfo?.current\n\n  !page && console.log('Unknown Page')\n\n  return (\n    <>\n      <CreateHeader />\n      <div className={ [styles.wrapper, 'scrollbar'].join(' ') }>\n        <div className={ styles.horizontalScaler } >\n          { (page === 1) && <P1RestoreOrBackup /> }\n          { (page === 2) && <P2LoadWallet /> }\n          { (page === 3) && <P3DomainAndWallet /> }\n          { (page === 4) && <P4ActionChoice /> }\n          { (page === 5) && <P5CustomForwards /> }\n          { (page === 6) && <P6Broadcast /> }\n        </div>\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { CreateNavigator } from './../components/CreateNavigator'\n\nexport default function Create () {\n  return (\n    <>\n      <CreateNavigator />\n    </>\n  )\n}\n","import React from 'react'\nimport { Store } from './../../store'\nimport { Link, useHistory } from 'react-router-dom'\nimport styles from './Navbar.module.css'\n\nexport const Navbar = (): JSX.Element => {\n  // global state\n  const { state } = React.useContext(Store)\n\n  const isCreatePage = useHistory().location.pathname === '/create'\n  const isHomePage = useHistory().location.pathname === '/'\n  const isAboutPage = useHistory().location.pathname === '/about'\n\n  return (\n    <>\n      <div\n        className={ styles.warning }\n      >\n        FOR TESTING, DO NOT USE\n      </div>\n      <div\n        className={ styles.root }\n      >\n        {/* only show page number in create path */}\n        { isCreatePage && (\n          <div className={ styles.pageNum }>\n            { state.pageInfo.current }/6\n          </div>\n        ) }\n        <a\n          href=\"https://github.com/ildarmgt/BitcoinNameSystem\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          { 'source' }\n        </a>\n        <Link\n          className={ isAboutPage ? styles.selected : '' }\n          to='/about'\n        >about</Link>\n        <Link\n          className={ isCreatePage ? styles.selected : '' }\n          to='/create'\n        >owners</Link>\n        <Link\n          className={ isHomePage ? styles.selected : '' }\n          to='/'\n        >search</Link>\n      </div>\n    </>\n  )\n}\n\n// Hash history cannot PUSH the same path; a new entry will not be added to the history stack\n// Only issue is the warning in console, but that only exists in development mode so can be ignored.","import React from 'react';\nimport { Route, Switch } from 'react-router-dom'\nimport Home from './pages/Home'\nimport About from './pages/About'\nimport Create from './pages/Create'\nimport { Navbar } from './components/Navbar'\n\n// using for routing\nconst App = (): JSX.Element => {\n  // onbtc.me?satoshi can now forward to onbtc.me/#/id/satoshi which resets to onbtc.me after search\n  // redirect to auto searching path routed in return and remove query from url\n  const searchParam = (new URLSearchParams(window.location.search)).keys().next().value\n  searchParam && console.log('search param detected after ?', searchParam)\n  // no forward slash before # in string is vital\n  searchParam && window.history.pushState({}, '', window.location.pathname + '#/id/' + searchParam)\n\n  return (\n    <>\n      {/* switch only renders first match instead of all matches */}\n      <Switch>\n        <Route path='/id/:alias' component={Home} />\n        <Route exact path='/id/' component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/create\" component={Create} />\n        <Route path='/:noise' component={Home} />\n        <Route exact path='/' component={Home} />\n      </Switch>\n      <Navbar />\n      {/* <Route exact path=\"/\" render={() => <Home />} /> */}\n    </>\n  );\n}\nexport default App;\n","import React, { useState, useEffect } from 'react'\nimport styles from './DevPanel.module.css'\nimport { Store } from '../../store/'\nimport { ActionTypes } from './../../interfaces/'\nconst json = require('./../../utils/test.json');\n\ninterface I_State {\n  blShow: boolean\n  setShow: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nexport const DevPanel = (props: any): JSX.Element => {\n  const { state, dispatch } = React.useContext(Store) // global state\n\n  // store if DevPanel is hidden\n  const [hidden, setHidden] = useState<boolean>(false);\n\n  // reruns to reattach keyup event to toggle hidden class\n  useEffect(() => {\n    const onDevKey = (e: any) => {\n      if (e.key === '`') {\n        setHidden(!hidden)\n      } else {\n        // give focus back to the input bar\n        if (document.activeElement?.id !== 'txtSearch') {\n          const txtSearch = document.getElementById('txtSearch') as HTMLTextAreaElement\n          txtSearch?.focus()\n        }\n      }\n    }\n    document.addEventListener('keyup', onDevKey)\n    return () => {\n      document.removeEventListener('keyup', onDevKey)\n    }\n  }, [hidden])\n\n  const onOutlineClick = () => {\n    const id: string = 'outliner';\n    const sheet: HTMLElement | null = document.getElementById(id);\n    if (!sheet) {\n      const outlineCss = '* {box-shadow: 0 0 0 1px red;}'\n      const style = document.createElement('style')\n      style.type = 'text/css'\n      style.id = id\n      style.appendChild(document.createTextNode(outlineCss))\n      document.head.appendChild(style)\n    } else {\n      sheet.parentNode?.removeChild(sheet)\n    }\n  }\n\n  const dlState = () => {\n    let data = \"text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(state))\n    let a = document.createElement('a')\n    a.href = 'data:' + data\n    a.download = 'test.json'\n    a.innerHTML = 'download JSON'\n    let container = document.getElementById('container')\n    container?.appendChild(a)\n    a.click()\n    a.remove()\n  }\n\n  return (\n    <div\n      className={[\n        styles.divDev,\n        !hidden ? styles.hidden : ''\n      ].join(' ')}\n      { ...props }\n    >\n      <div><b>DevPanel</b></div>\n      <div\n        className={ styles.button }\n        onClick={ () => {\n          dlState()\n        } }\n      >\n        Save State\n      </div>\n      <div\n        className={ [styles.btnOutline, styles.button].join(' ') }\n        onClick={ onOutlineClick }\n      >\n        Outline\n      </div>\n      <div\n        className={ styles.button }\n        onClick={ () => {\n          console.log(json);\n          dispatch({ type: ActionTypes.LOAD_STATE, payload: json });\n        } }\n      >\n        Load State\n      </div>\n      <div\n        className={ styles.button }\n        onClick={ () => {\n          console.log(state);\n        } }\n      >\n        Console State\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './css/global.css';\nimport App from './App';\nimport { StoreProvider } from './store'\nimport { DevPanel } from './components/DevPanel'\n\n// Using for store access and hash router base\nReactDOM.render(\n  <StoreProvider>\n    <HashRouter>\n      <App />\n    </HashRouter>\n    <DevPanel />\n  </StoreProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\n// import * as serviceWorker from './serviceWorker';","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lblMainTitle\":\"HomeContent_lblMainTitle__1LqCG\",\"lblMainTitleAfter\":\"HomeContent_lblMainTitleAfter__J9CsB\",\"divSearch\":\"HomeContent_divSearch__3dKw5\",\"divSearchAfter\":\"HomeContent_divSearchAfter__2MAMf\",\"txtSearch\":\"HomeContent_txtSearch__3HpSp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"divDev\":\"DevPanel_divDev__2q66m\",\"hidden\":\"DevPanel_hidden__Wlj3v\",\"btnOutline\":\"DevPanel_btnOutline__2FJLx\",\"button\":\"DevPanel_button__1DKHt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"roundButtonWrap\":\"RoundButton_roundButtonWrap__2X50a\",\"roundButton\":\"RoundButton_roundButton__tfjmf\",\"overhead\":\"RoundButton_overhead__As9JW\",\"nextArrow\":\"RoundButton_nextArrow__SS6Nl\",\"backArrow\":\"RoundButton_backArrow__2MJJm\",\"back\":\"RoundButton_back__3z3jD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cutOverflow\":\"CreateHeader_cutOverflow__3s_72\",\"bar\":\"CreateHeader_bar__27ge1\",\"wrapper\":\"CreateHeader_wrapper__3cPTN\",\"alias\":\"CreateHeader_alias__1dNdj\",\"ext\":\"CreateHeader_ext__17sc6\",\"spacer\":\"CreateHeader_spacer__3tstm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Navbar_root__2XES1\",\"warning\":\"Navbar_warning__1HOBZ\",\"pageNum\":\"Navbar_pageNum__1amUi\",\"selected\":\"Navbar_selected__10Mm9\"};","import * as bitcoin from 'bitcoinjs-lib'\nconst op = bitcoin.opcodes;\nconst hash160 = bitcoin.crypto.hash160;\n\n\n/**\n * Get p2wsh notificaiton address from domainName and network.\n * @param   {string} domainName         - full domainName to use (e.g. 'satoshi.btc').\n * @param   {string} networkChoice      - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @returns {object}                    - { notificationsAddress - p2wsh address derived from domainName }.\n */\nexport const calcP2WSH = (domainName: string, networkChoice: string) => {\n  const network = bitcoin.networks[networkChoice];\n\n  // convert domainName into buffer so it can be put into script\n  const bufferData = Buffer.from(domainName, 'utf8');\n\n  // easily spendable script for ACS notification output\n  // specific to this domainName\n  const witnessScript = bitcoin.script.compile([\n    hash160(bufferData),\n    op.OP_DROP\n  ]);\n\n  // calculate p2wsh address for this witnessScript & network\n  const p2wsh = bitcoin.payments.p2wsh({\n    redeem: {\n      output: witnessScript,\n      network\n    },\n    network\n  })\n  const notificationsAddress = p2wsh.address;\n\n  return {\n    notificationsAddress\n  };\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P2LoadWallet_wrapper__vI_bb\",\"contentWrapper\":\"P2LoadWallet_contentWrapper__UNLo4\",\"buttonWrapper\":\"P2LoadWallet_buttonWrapper__1rrct\",\"address\":\"P2LoadWallet_address__37xx2\",\"imgQr\":\"P2LoadWallet_imgQr__3Avh3\"};","import { newUser } from './initialState'\nimport { OWNERSHIP_DURATION_BY_BLOCKS, MIN_BURN, MIN_NOTIFY } from './constants'\nimport { I_User, I_Forward, I_BnsState } from './types/'\nimport { decrypt } from './cryptography'\n\n// ========== helper functions =====================\n\nexport const existsCurrentOwner = (st: I_BnsState): boolean => st.domain.currentOwner !== ''\n\nexport const getOwnerAddress = (st: I_BnsState): string => st.domain.currentOwner || ''\n\nexport const setOwner = (st: I_BnsState, newOwnerAddress: string) => {\n  st.domain.currentOwner = newOwnerAddress\n}\n\nexport const getUser = (st: I_BnsState, address: string): I_User => st.domain.users[address]\n\nexport const getOwner = (st: I_BnsState) => {\n  const ownerAddress = getOwnerAddress(st)\n  if (!ownerAddress) return undefined\n  return getUser(st, ownerAddress)\n}\n\nexport const updateOwnerHistory = (st: I_BnsState): void => {\n  st.domain.ownersHistory.push(getOwner(st) || JSON.parse(JSON.stringify(newUser)))\n}\n\nexport const clearOwner = (st: I_BnsState): void => { st.domain.currentOwner = '' }\n\nexport const getCurrentHeight = (st: I_BnsState): number => st.chain?.currentHeight || 0\nexport const getParsedHeight = (st: I_BnsState): number => st.chain?.parsedHeight || 0\nexport const setParsedHeight = (st: I_BnsState, height: number): void => {\n  st.chain && (st.chain.parsedHeight = height)\n}\n\nexport const getNotificationAddress = (st: I_BnsState): string => st.domain.notificationAddress || ''\n\nexport const getLastOwnerBurnedValue = (st: I_BnsState): number => getOwner(st)?.burnAmount || 0\n\nexport const isOwnerExpired = (st: I_BnsState): boolean => {\n  if (existsCurrentOwner(st)) return true\n  const owner = getOwner(st)\n  if (!owner) return true\n  const blocksSinceUpdate = getParsedHeight(st) - owner.winHeight\n  return blocksSinceUpdate > OWNERSHIP_DURATION_BY_BLOCKS\n}\n\n// ===== tx functions (getters) =====================\n\nexport const getTxTimestamp = (tx: any): number => tx.status.block_time || 0\nexport const getTxHeight = (tx: any): number => tx.status.block_height || 0\n\nexport const getTxOutput0BurnValue = (tx: any): number => tx.vout[0]?.value || 0\nexport const getTxOutput0Data = (tx: any):string => {\n  if (isOpreturnOutput0(tx)) {\n    // remove 'OP_RETURN OP_PUSHBYTES_5 ' from it and return the rest\n    return tx.vout[0].scriptpubkey_asm.split(' ').slice(2).join('')\n  }\n  return ''\n}\n\nexport const getTxOutput1NotifyValue = (tx: any): number => tx.vout[1]?.value || 0\nexport const getTxOutput1NotifyAddress = (tx: any): string => tx.vout[1]?.scriptpubkey_address || ''\n\nexport const getTxInput0SourceUserAddress = (tx: any): string => (\n  tx.vin[0]?.prevout.scriptpubkey_address || ''\n)\n\n\n// ======= update state from tx (setters) ========\n\n// update the info for the source user of the tx within bns state\n// when ran a second time, it simply updates nonce for post-tx value\nexport const updateSourceUserFromTx = (st: I_BnsState, tx: any): void => {\n  const fromAddress = getTxInput0SourceUserAddress(tx)\n\n  // create new user if not already one of users\n  if (!(fromAddress in st.domain.users)) {\n    // create new user object by copying values of newUser object\n    st.domain.users[fromAddress] = JSON.parse(JSON.stringify(newUser))\n    console.log('new source created:')\n  }\n\n  // update user\n  const user = st.domain.users[fromAddress]\n  user.address = fromAddress\n  user.nonce = user.updateHeight\n  user.updateHeight = getTxHeight(tx)\n  console.log('source:', user)\n}\n\nexport const addToUserForwards = (\n  st: I_BnsState,\n  fromAddress: string,\n  forwardsInThisTx: Array<I_Forward>\n) => {\n  const user = getUser(st, fromAddress)\n  user.forwards = [...user.forwards, ...forwardsInThisTx]\n}\n\nexport const readEmbeddedData = (st: I_BnsState, tx: any):void => {\n  // only go on if there is op_return with embedded data on output 0\n  if (!isOpreturnOutput0(tx)) {\n    console.log(getTxHeight(tx), ': no op_return found for txid')\n    return undefined\n  }\n\n  // get useful object references\n  const fromAddress = getTxInput0SourceUserAddress(tx)\n  const user = getUser(st, fromAddress)\n  const nonce = user.nonce.toString()\n\n  const embeddedDataHex = getTxOutput0Data(tx)\n  const embeddedDataBuffer = Buffer.from(embeddedDataHex, 'hex')\n\n  const decryptionKey = st.domain.domainName + user.address + nonce\n  console.log(\n    getTxHeight(tx),\n    ': decryption key: ',\n    st.domain.domainName,\n    user.address,\n    nonce\n  )\n  const embeddedDataUtf8 = decrypt(embeddedDataBuffer, decryptionKey)\n  console.log(getTxHeight(tx), ': found embedded data:', embeddedDataUtf8)\n\n  // split by spaces into array\n  const embeddedDataUtf8Array = embeddedDataUtf8.split(' ')\n\n  // collect all forwards in this tx\n  const forwardsInThisTx: Array<I_Forward> = []\n\n  embeddedDataUtf8Array.forEach((word: string, index: number) => {\n    // everything must be space separated in pairs\n    // so single block might mean failed decryption or\n    // last unpaired block might be padding or future versioning\n    // grabbing only odd and 1 before it values, only grabbing pairs\n    if (index % 2 === 1) {\n      const networkPiece = embeddedDataUtf8Array[index - 1]\n      const forwardingAddressPiece = word\n      const thisForward = {\n        network:          networkPiece,\n        address:          forwardingAddressPiece,\n        updateHeight:     getTxHeight(tx),\n        updateTimestamp:  getTxTimestamp(tx)\n      }\n      forwardsInThisTx.push(thisForward)\n    }\n  })\n\n  // update forwards on the user\n  addToUserForwards(st, fromAddress, forwardsInThisTx)\n}\n\n// ===== rule checks (getters) =====\n\n// Describe:    2 outputs minimum\nexport const atLeastTwoOutputs = (tx: any): boolean => tx.vout.length >= 2\n\n// Describe:    Is [0] output OP_RETURN type\nexport const isOpreturnOutput0 = (tx: any): boolean => (\n  tx.vout[0].scriptpubkey_asm.split(' ')[0] === 'OP_RETURN'\n)\n\n// Describe:    Is [1] output this domain's notification address?\nexport const isNotify =  (st: I_BnsState, tx: any): boolean => (\n  getTxOutput1NotifyAddress(tx) === getNotificationAddress(st)\n)\n\n// Describe:    At least minimum amount used in notification output? (Dust level is main danger)\nexport const didNotifyMin = (tx: any): boolean => getTxOutput1NotifyValue(tx) >= MIN_NOTIFY\n\n// Describe:    Is address the current domain owner?\nexport const isAddressTheCurrentOwner = (st: I_BnsState, address: string): boolean =>\n  getOwnerAddress(st) === address\n\n// Describe:    Is tx sender the current domain owner (input [0], id'ed by address)?\nexport const isSenderTheCurrentOwner = (st: I_BnsState, tx: any): boolean =>\n  getOwnerAddress(st) === getTxInput0SourceUserAddress(tx)\n\n// Describe:    At least minimum amount burned?\nexport const didBurnMin = (tx: any): boolean =>\n  getTxOutput0BurnValue(tx) >= MIN_BURN\n\n// Describe:    Burned at least as much as previously burnt\nexport const burnedPreviousRateMin = (st: I_BnsState, tx: any): boolean => (\n  getTxOutput0BurnValue(tx) >= getLastOwnerBurnedValue(st)\n)\n\n","import { I_User, I_BnsState } from './types/'\n\n// Initializing values\n\nexport const newState: I_BnsState = {\n  domain: {                                     // notification info for this domain name\n    domainName:                   '',           // domain name\n    notificationAddress:          '',           // p2wsh address for this domain name (alias + extension)\n    txHistory:                    [],           // array of all tx for this address (old addressHistory)\n    utxoList:                     [],           // array of all current utxo for this address\n    users:                        {},           // keeps track of interacting users / source addresses with addresses as keys\n    currentOwner:                 '',           // points to a source address or blank string\n    bidding:                      {},           // bidding\n    ownersHistory:                []            // owner history log\n  },\n  chain: {\n    parsedHeight:                 0,            // parsed height for derivation\n    currentHeight:                0             // real world block height\n  }\n}\n\n// values to initialize users with\nexport const newUser: I_User = {\n  address:        '',           // address in control\n  forwards:       [],           // for forwards later\n  burnAmount:     0,            // burned to get ownership\n  winHeight:      0,            // blockheight winning bid\n  winTimestamp:   0,            // winHeight in block's timestamp\n  nonce:          0,            // for counting previous notification height from this address, no matter good/bad/type\n  updateHeight:   0             // the height of most current parsed update, created after nonce height & therefore using it\n}\n"],"sourceRoot":""}