{"version":3,"sources":["components/CreateSteps/P5CustomForwards/P5CustomForwards.module.css","helpers/bns/deterministicRandom.tsx","components/CreateNavigator/CreateNavigator.module.css","components/general/Logo/Logo.module.css","components/general/LogoBackground/LogoBackground.module.css","helpers/bns/constants.tsx","components/SearchResults/SearchResults.module.css","helpers/bns/calcTx.tsx","helpers/bns/types/types.tsx","helpers/bns/types/index.js","helpers/bns/formathelpers.tsx","components/CreateSteps/P1RestoreOrBackup/P1RestoreOrBackup.module.css","components/CreateSteps/P4ActionChoice/P4ActionChoice.module.css","components/Navbar/Navbar.module.css","components/CreateSteps/P6Broadcast/P6Broadcast.module.css","helpers/bns/bitcoin.tsx","components/CreateSteps/P3DomainAndWallet/P3DomainAndWallet.module.css","interfaces/index.tsx","components/general/RoundButton/RoundButton.tsx","store/reducers/Reducer.tsx","store/index.tsx","helpers/sanitize.js","store/actions/changeAliasAction.tsx","helpers/bns/actions/actions.tsx","helpers/bns/actions/batch.tsx","helpers/bns/calcBnsState.tsx","helpers/bns/forwards/findLatestForwards.tsx","helpers/bns/forwards/interpretCommand.tsx","helpers/bns/stringByteCount.tsx","api/blockstream.tsx","store/actions/searchAction.tsx","store/actions/createNewWalletAction.tsx","store/actions/changePageInfoAction.tsx","store/actions/scanAddressFullyAction.tsx","store/actions/changeChoicesBNSAction.tsx","helpers/timediff.tsx","components/general/Details/Details.tsx","components/SearchResults/SearchResults.tsx","helpers/bns/forwards/interpretFw.tsx","components/HomeContent/HomeContent.tsx","pages/Home.tsx","components/AboutContent/graphic.svg","components/AboutContent/AboutContent.tsx","pages/About.tsx","components/CreateSteps/P1RestoreOrBackup/P1RestoreOrBackup.tsx","components/CreateSteps/CreateHeader/CreateHeader.tsx","components/CreateSteps/P2LoadWallet/P2LoadWallet.tsx","components/CreateSteps/P3DomainAndWallet/P3DomainAndWallet.tsx","components/general/InputForm/InputForm.tsx","components/CreateSteps/P4ActionChoice/P4ActionChoice.tsx","components/CreateSteps/P5CustomForwards/P5CustomForwards.tsx","components/wallet/FeesSelection/FeesSelection.tsx","components/CreateSteps/P6Broadcast/P6Broadcast.tsx","components/CreateNavigator/CreateNavigator.tsx","pages/Create.tsx","components/Navbar/Navbar.tsx","components/general/Logo/Logo.tsx","components/general/LogoBackground/LogoBackground.tsx","components/wallet/Withdraw/Withdraw.tsx","pages/Wallet.tsx","App.tsx","components/DevPanel/DevPanel.tsx","index.tsx","components/general/RoundButton/RoundButton.module.css","components/HomeContent/HomeContent.module.css","helpers/bns/cryptography.tsx","helpers/bns/initialState.tsx","components/wallet/FeesSelection/FeesSelection.module.css","components/DevPanel/DevPanel.module.css","components/general/Details/Details.module.css","components/CreateSteps/CreateHeader/CreateHeader.module.css","components/wallet/Withdraw/Withdraw.module.css","helpers/bns/calcP2WSH.tsx","components/CreateSteps/P2LoadWallet/P2LoadWallet.module.css","components/general/InputForm/InputForm.module.css","components/AboutContent/AboutContent.module.css"],"names":["module","exports","deterministicRandomBid","bidArray","undefined","length","maxRange","ranges","map","thisBid","thisRange","min","max","value","weight","bid","blockHash","some","console","warn","rangedHashBigInt","BigInt","i","BYTES_MAX","MIN_BURN","MIN_NOTIFY","OWNERSHIP_DURATION_BY_BLOCKS","CHALLENGE_PERIOD_DURATION_BY_BLOCKS","CHALLENGE_MIN_MULTIPLY","hash160","bitcoin","op","calcTx","wallet","domain","choices","networkChoice","vBytes","utxoList","Error","feeRate","network","calcP2WSH","domainName","notificationsAddress","fee","Math","ceil","valueNeeded","totalGathered","gatheredFromWallet","gatheredFromOther","toBeUsedUtxoOfNotifications","derivedUtxoList","forEach","utxo","from_scriptpubkey_address","address","push","toBeUsedUtxoOfUserWallet","toFixed","keyPair","fromWIF","WIF","psbt","setVersion","setLocktime","addInput","hash","txid","index","vout","sequence","nonWitnessUtxo","Buffer","from","hex","witnessScript","compile","OP_DROP","inputScript","OP_TRUE","nonce","getNonce","toString","encryptionKey","log","finalEmbedString","embedString","data","encrypt","embed","burnAmount","action","suggestions","reduce","maxBurn","thisSuggestion","info","set","name","addOutput","script","output","changeAddress","type","find","suggestion","get","change","signInput","validateSignaturesOfInput","finalizeInput","getFinalScripts","tx","extractTransaction","thisVirtualSize","virtualSize","getId","toHex","nInputs","ins","nOutputs","outs","byteLength","notifyAmount","nInputsFromWallet","nInputsFromOther","BnsActionType","BnsBidType","existsCurrentOwner","st","currentOwner","existsUser","users","createNewUser","JSON","parse","stringify","newUser","getOwnerAddress","setOwner","newOwnerAddress","getUser","getOwner","ownerAddress","updateOwnerHistory","ownersHistory","clearOwner","getParsedHeight","chain","parsedHeight","setParsedHeight","height","getNotificationAddress","notificationAddress","getLastOwnerBurnedValue","isOwnerExpired","owner","winHeight","getTxTimestamp","status","block_time","getTxHeight","block_height","getTxOutput0BurnValue","getTxInput0SourceUserAddress","vin","prevout","scriptpubkey_address","updateSourceUserFromTx","fromAddress","user","updateHeight","readEmbeddedData","isOpreturnOutput0","embeddedDataHex","scriptpubkey_asm","split","slice","join","getTxOutput0Data","embeddedDataBuffer","decryptionKey","embeddedDataUtf8","decrypt","embeddedDataUtf8Array","forwardsInThisTx","word","thisForward","updateTimestamp","forwards","addToUserForwards","atLeastTwoOutputs","isNotify","getTxOutput1NotifyAddress","didNotifyMin","getTxOutput1NotifyValue","isAddressTheCurrentOwner","isSenderTheCurrentOwner","didBurnMin","burnedPreviousRateMin","isCommandCalled","command","getCommandCalled","txHeight","startsWith","updateUtxoFromTx","input","spentUtxoIndex","findIndex","splice","noUnspentUserNotificationsUtxo","userOfTxAddress","userThatCreatedThisUtxo","isInThePast","resetBidding","bidding","newState","addBid","userAddress","burnValue","endHeight","startHeight","startBidding","bids","timestamp","valueLeftToRefund","block_hash","endBidding","relevantTxHistory","txHistory","filter","thisTx","goodBidsThatRefunded","bidsLeftToRefund","thisBidHeight","wereAllBidsRefunded","bidHistory","minHeight","maxHeight","ignoreAddress","winner","validBidsAtSameHeight","lastHeight","maxIndex","thisHeight","winTimestamp","isBiddingOver","biddingType","NULL","bidHistoryCopy","paid","senderAddress","toAddress","toAmount","pastBid","pastBidAddress","minRefund","isPaidInFull","varuint","require","createNewWallet","strNetwork","mnemonic","bip39","generateMnemonic","seedBuffer","mnemonicToSeed","fromSeed","derivePath","toWIF","p2wpkh","pubkey","publicKey","loadWallet","strMnemonic","getUnspentSum","utxoArray","sum","inputIndex","isSegwit","isP2SH","isP2WSH","payment","p2wsh","redeem","p2sh","finalScriptSig","finalScriptWitness","witness","vector","buffer","allocUnsafe","writeVarInt","currentLen","varintLen","encodingLength","concat","encode","writeVarSlice","writeSlice","witnessStackToScriptWitness","ActionTypes","RoundButton","props","style","display","show","colorbutton","colorbuttontext","sizebutton","className","styles","roundButtonWrap","back","roundButton","backArrowPad","next","nextArrowPad","backArrow","children","nextArrow","overhead","STORE_SEARCH_RESULTS_FAIL","STORE_SEARCH_RESULTS","TYPING","NEW_WALLET","CHANGE_PAGE_INFO","UPDATE_WALLET","UPDATE_DOMAIN","ACTION_FAIL","LOAD_STATE","CHOICES_BNS_ACTION","reducer","state","payload","lastTimeStamp","Date","now","pageInfo","checkedWallet","checkedDomain","current","initialState","alias","checkedLightSearch","extension","txHex","Store","React","createContext","sanitize","inputString","stringOrArray","Array","isArray","logicFilters","choice","str","letter","resultingString","numbers","digits","parseInt","warning","outputString","indexOf","fn","RENEW","ONLY_FORWARDS","CLAIM_OWNERSHIP","SEND_OWNERSHIP","CHANGE_ADDRESS","OUTS_2","describe","OUT_0","OUT_1","NOTIFIED_MIN","BURNED_MIN","NO_OWNER","EXISTS_OWNER","BURN_LAST_WIN","USER_IS_OWNER","IS_OWNER_EXPIRED","NO_UNSPENT_USER_NOTIFICATIONS_UTXO","USER_ADDRESS_NOT_NOTIFICATION_ADDRESS","IS_COMMAND_CALLED","IS_BIDDING_OVER","SUGGESTION_SUBMIT_NEW_ADDRESS","SUGGESTION_SUBMIT_NEW_OWNER_ADDRESS","WARNING_POINTLESS_IF_NOT_OWNER","args","bidForOwnershipAction","permissions","conditions","execute","BURN","permission","condition","changeAddressAction","thisCommand","newAddress","oldOwner","sendOwnershipAction","currentOwnerRenewAction","updateForwardingInfoAction","autoCheckForOwnerExpiredAction","updateUtxoFromTxAction","autoCheckForBiddingWinnerNewOwnerAction","runAllAutomaticActions","areAllConditionsMet","eaCondition","calcBnsState","notificationsHistory","currentHeight","reverse","sort","prev","actions","okConditions","okPermissions","areAllPermissionsMet","eaPermission","findLatestForwards","sortedForwards","currentNetworks","eaForward","Object","values","interpretCommand","key","allActions","getterName","stringByteCount","API_PATH_TESTNET","API_PATH_BITCOIN","getFeeEstimates","a","async","axios","res","rateLimit","getHeight","API_PATH","addRawTxToArray","erroredOutputs","error","entries","indexString","tries","getUTXOList","confirmed","getAddressHistory","txPush","content","params","response","Promise","r","setTimeout","searchAction","dispatch","router","notificationsTxHistory","createNewWalletAction","changePageInfoAction","page","scanAddressFullyAction","addressType","walletAddress","walletTxHistory","utxoListWalletAddress","newDomain","changeChoicesBNSAction","timeDiff","timestampMsec","referenceTimestampMsec","diff","isExpired","abs","d","floor","h","m","dhm","dh","msDiff","Details","useState","showDetails","setShowDetails","wrapper","buttonWrapper","toggleDetails","onClick","title","description","arrow","down","details","SearchResults","useContext","unitBTC","showBTC","sats","balance","tabledOwnershipData","breakable","toUTCString","Fragment","isBurn","getBidding","tabledBiddingData","bidIndex","tabledAvailableDomainData","expandableTable","inputData","inputDescription","ownershipDetails","rows","dataRows","dataRowIndex","latestForwards","listContainer","describe__matches","fw","ifw","render","onNetwork","where","what","link","originawhere","interpretFw","listItem","href","encodeURI","target","rel","avaiability","to","createLink","HomeContent","match","history","isSearchDone","inputEl","useRef","useEffect","selectionEnd","selectionStart","focus","lblMainTitle","lblMainTitleAfter","divSearch","divSearchAfter","id","txtSearch","cols","spellCheck","placeholder","ref","onChange","e","sanitizedString","changeAliasAction","onKeyPress","Home","_extends","assign","arguments","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","fillRule","clipRule","clipPath","fill","fontFamily","fontWeight","fontSize","transform","x","y","stroke","strokeWidth","strokeLinecap","strokeLinejoin","strokeMiterlimit","_ref","svgRef","overflow","preserveAspectRatio","viewBox","ForwardRef","forwardRef","AboutContent","contentWrapper","drawing","About","pages","CreateHeader","useHistory","window","innerWidth","width","setWidth","resize","addEventListener","removeEventListener","fontScale","barHeight","aliasMarginTop","marginTop","aliasFontSize","cutOverflow","bar","ext","spacer","P1RestoreOrBackup","ROOT","setPage","backup","setBackup","wordCount","v","Orange","LOAD_BACKUP","restoreBackup","cleanString","toLowerCase","trimLeft","trim","P2LoadWallet","qrCode","setQrCode","qr","toDataURL","color","dark","err","url","imgQr","src","alt","open","pathEdit","P3DomainAndWallet","apiStatus","setApiStatus","readyStatus","isReady","domainInfo","domainButton","walletInfo","walletButton","unspent","ownership","InputForm","shiftRight","label","thisInputLabel","textarea","thisInputValue","thisInputPlaceholder","thisInputOnChange","button","thisSubmitButtonOnClick","P4ActionChoice","extraFormData","setExtraFormData","checkActions","setCheckActions","bns","checkedActions","checkedPermissions","isAllowed","actionSuggestions","isUsable","every","permissionList","runAllActionPermissionChecks","showStatus","availableActions","suggestionsToGet","suggestionToGet","inputForms","cleanText","thisAction","unavailableActions","unavailableActions__title","unavailableActions__actionList","unavailableActions__actionList__action","unavailableActions__actionList__action__title","unavailableActions__actionList__action__permissionList","unavailableActions__actionList__action__permissionList__permission","P5CustomForwards","textboxContent","setTextboxContent","setPlannedChanges","objForwards","forwardsString","fwNetwork","needsChanging","getPlannedChanges","actionRequirementsString","chosenAction","stringFromCommands","getActionEmbedRequirements","plannedChangesSoFar","words","pastForwards","bytesOfChanges","bytesLeft","isSpaceFull","subtitle","changes","bytesOver","bytes","thisByteCostEstimate","interpretation","cmd","allowRemoval","updateItem","updateInfo","updateCancel","newData","stopPropagation","explainForwards","editor","btnDelete","editorNetwork","editorAddress","btnAdd","pastList","pastPair","pastNetwork","pastAddress","FeesSelection","feeText","setFeeText","showSuggestions","apiSuccess","min20","min40","min60","feeSuggestions","setFeeSuggestions","fees","fees__rate","cleanNumber","parseFloat","fees__apicall","apiSuggest","tryFees","fees__feeSelection","fees__feeSelection__choice","P6Broadcast","txIssue","String","message","endsWith","numberOfUpdates","countSoFar","ok","reason","broadcastStatus","setBroadcastStatus","finalCost","totalCost","txSummary","status__button","PATH","status__failed","CreateNavigator","horizontalScaler","Create","Navbar","searchButton","toggleMenuButtonDiv","overflowMenuDiv","buttonWidth","offsetWidth","showCollapsed","resizeTimer","nav","setNav","dispatchEvent","Event","isCreatePage","location","pathname","isHomePage","isAboutPage","isSettingsPage","isWalletPage","menu","getBoundingClientRect","menuLeft","round","left","menuTop","top","opacity","onResize","document","body","classList","add","clearTimeout","remove","onClickAnywhere","buttonsArray","selected","windowWidth","stdSizer","innerHeight","howManyButtonsFitSafely","buttonsOnNavbar","btn","buttonsOverflow","pageNum","collapsitron","menuShown","dots","thisButton","overflowMenu","Logo","logo","LogoBackground","Withdraw","request","total","App","searchParam","URLSearchParams","search","pushState","path","component","exact","Wallet","json","ReactDOM","useReducer","Provider","hidden","setHidden","onDevKey","activeElement","getElementById","divDev","encodeURIComponent","download","innerHTML","container","appendChild","click","dlState","btnOutline","sheet","parentNode","removeChild","createTextNode","head","stringText","stringForKey","stringForIV","crypto","createHash","update","digest","iv","cipher","createCipheriv","encrypted","final","bufferCypher","decipher","createDecipheriv","decrypted","bufferData"],"mappings":"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","file":"static/js/main.d2cc8cf1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P5CustomForwards_wrapper__2kAy2\",\"title\":\"P5CustomForwards_title__29aFH\",\"subtitle\":\"P5CustomForwards_subtitle__1iqt_\",\"changes\":\"P5CustomForwards_changes__23bYg\",\"pastList\":\"P5CustomForwards_pastList__3rXdy\",\"buttonWrapper\":\"P5CustomForwards_buttonWrapper__3hvwB\",\"editor\":\"P5CustomForwards_editor__1ZVVF\",\"updateItem\":\"P5CustomForwards_updateItem__1wAhx\",\"updateCancel\":\"P5CustomForwards_updateCancel__3b5bW\",\"updateInfo\":\"P5CustomForwards_updateInfo__2OBcF\",\"editorNetwork\":\"P5CustomForwards_editorNetwork__1L6UB\",\"editorAddress\":\"P5CustomForwards_editorAddress__1N25M\",\"btnAdd\":\"P5CustomForwards_btnAdd__1tiSg\",\"btnDelete\":\"P5CustomForwards_btnDelete__3NCte\",\"pastPair\":\"P5CustomForwards_pastPair__3YvIk\",\"pastNetwork\":\"P5CustomForwards_pastNetwork__35eVe\",\"pastAddress\":\"P5CustomForwards_pastAddress__3-W_H\",\"bytesLeft\":\"P5CustomForwards_bytesLeft__2zySr\",\"bytesOver\":\"P5CustomForwards_bytesOver__ysfMq\"};","import { I_Bid } from './types'\n\n// this file will be used for various functions that might need deterministic random function\n\n/**\n * Takes array of bids or empty array and returns a winner if possible, otherwise undefined.\n * Winner is derived through deterministic weighted random number weighted by bid values.\n */\nexport const deterministicRandomBid = (bidArray: Array<I_Bid>): I_Bid | undefined => {\n  // easy cases\n  if (bidArray === undefined) return undefined\n  if (bidArray.length === 0) return undefined\n  if (bidArray.length === 1) return bidArray[0]\n\n  // now the harder derivations of N > 1 elements\n\n  // max weight summed up across all elements\n  let maxRange = 0\n  // array of each element including their range based on weight (value)\n  let ranges = bidArray.map(thisBid => {\n    const thisRange = {\n      min: maxRange,\n      max: maxRange + thisBid.value,\n      weight: thisBid.value,\n      bid: thisBid\n    }\n    maxRange = maxRange + thisBid.value\n    return thisRange\n  })\n\n  // Ideally should use block hash at this height to get random value,\n  // which is not predictable or cheap to change when block is found, even by miners.\n  // Grabbing the first blockHash, same at same height (same block = same block hash).\n  const blockHash = bidArray[0].blockHash\n\n  // quickly check that all block hashes are same\n  if (bidArray.some(thisBid => thisBid.blockHash !== blockHash)) {\n    console.warn('bidArray should have same height txs but txs contained different block hashes!!!', bidArray)\n  }\n\n  // convert block hash to hex BigInt can read and create BigInt\n  const hashBigInt = BigInt('0x' + blockHash)\n\n  // take a mod of max range to use as random number\n  const rangedHashBigInt = hashBigInt % BigInt(maxRange)\n\n  // find the range where it landed and return that bid\n  // the overall range of [0, maxRange) is split into separate ranges by each bid the exact length of each bid amount\n  // a number mod of max range has to fall somewhere within the individual ranges, and decide the winner\n  // completely deterministic by anyone independently yet very hard to predict before tx confirmations\n  for (let i = 0; i < ranges.length; i++) {\n    if (BigInt(ranges[i].min) <= rangedHashBigInt) {\n      if (BigInt(ranges[i].max) < rangedHashBigInt) {\n        // found it\n        return ranges[i].bid\n      }\n    }\n  }\n\n  console.warn('something went wrong and no winner was found', ranges, bidArray, maxRange)\n  return undefined\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CreateNavigator_wrapper__24rTe\",\"horizontalScaler\":\"CreateNavigator_horizontalScaler__2qmoi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Logo_wrapper__39M2z\",\"logo\":\"Logo_logo__1yGiJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"LogoBackground_wrapper__2ydbu\",\"logo\":\"LogoBackground_logo__34EFs\",\"rotateMe\":\"LogoBackground_rotateMe__3KDus\"};","/**\n * Constants used to determine rules on BNS.\n */\n\n// testing mode true/false to reduce waiting time for tests\n// on for `npm run start` (development mode)\n// off for `npm run build` (production mode)\nconst TESTING = (process.env.NODE_ENV === 'development')\nTESTING && console.warn('Testing mode ON')\n\n// Block times can vary from 10 minutes but ok for estimate.\n// 52560 blocks ~365 days.\n// 1000 blocks ~ a week.\n// 288 blocks ~48 hours.\n// 144 blocks ~1 day.\n\n// max data safe to embed in OP_RETURN type tx (bytes)\n// ~80 chars\nconst BYTES_MAX = 80\n\n// Satoshis to burn minimum for attempting ownership (satoshi)\nconst MIN_BURN = 1000\n\n//  Minimum to use for notification output (satoshi)\nconst MIN_NOTIFY  = 1000\n\n// Ownership duration after victory (blocks)\n// ~1 year (production) / ~7 days (development)\nconst OWNERSHIP_DURATION_BY_BLOCKS = !TESTING ? 52560 : 1000\n\n// Duration before a top bidder becomes owner (blocks)\n// ~1 day\nconst CHALLENGE_PERIOD_DURATION_BY_BLOCKS = 144\n\n// Multiplier required on burn amount for new bid to beat\n// a previous (lower height) winning bid (assuming meets other conditions by deadline).\n// sets a minimum treshhold for trying to outbid someone else\nconst CHALLENGE_MIN_MULTIPLY = 2\n\nexport {\n  TESTING,\n  MIN_BURN,\n  MIN_NOTIFY,\n  OWNERSHIP_DURATION_BY_BLOCKS,\n  BYTES_MAX,\n  CHALLENGE_PERIOD_DURATION_BY_BLOCKS,\n  CHALLENGE_MIN_MULTIPLY\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SearchResults_wrapper__VvaYk\",\"breakable\":\"SearchResults_breakable__3r3ay\",\"listContainer\":\"SearchResults_listContainer__12vQE\",\"listItem\":\"SearchResults_listItem__3Udwx\",\"key\":\"SearchResults_key__358jo\",\"expired\":\"SearchResults_expired__2ptnD\",\"avaiability\":\"SearchResults_avaiability__3E0Yr\",\"createLink\":\"SearchResults_createLink__13Wez\",\"describe\":\"SearchResults_describe__3HACm\",\"describe__matches\":\"SearchResults_describe__matches__1g7Qb\",\"ownershipDetails\":\"SearchResults_ownershipDetails__1Z7p1\",\"balance\":\"SearchResults_balance__11rok\"};","import * as bitcoin from 'bitcoinjs-lib'\nimport { calcP2WSH } from './calcP2WSH'\nimport { MIN_BURN, MIN_NOTIFY } from './constants'\nimport { encrypt } from './cryptography'\nimport { I_Domain, I_Checked_Action } from './types/'\nimport { getNonce } from './formathelpers'\nimport { getFinalScripts } from './bitcoin'\n\nconst hash160 = bitcoin.crypto.hash160\nconst op = bitcoin.opcodes\n\ninterface I_Tx_Result {\n  thisVirtualSize: number\n  txid: number\n  hex: string\n  valueNeeded: number\n  fee: number\n  change: number\n  burnAmount: number\n  notifyAmount: number\n  totalGathered: number\n  gatheredFromWallet: number\n  gatheredFromOther: number\n  nInputs: number\n  nOutputs: number\n  nInputsFromWallet: number\n  nInputsFromOther: number\n}\n\n/**\n * Creates hex of tx to bid on domain.\n * Throws error if not enough funds.\n * Leave vBytes blank, it will call itself via recursion until it derives needed size.\n * @param   {object}      wallet                  - { WIF, address, txHistory, utxoList, ... }.\n * @param   {object}      domain                  - all domain info\n * @param   {object}      choices                 - { action, feeRate, embedString, ... }\n * @param   {string}      networkChoice           - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @param   {number=}     [vBytes=0]              - size of transaction in vBytes. *\n * @returns {object}                              - Tx Results.\n */\nexport const calcTx = (\n  wallet: any,\n  domain: I_Domain,\n  choices: { action: I_Checked_Action, feeRate: number, embedString: string, [key: string]: any },\n  networkChoice: string,\n  vBytes: number = 0\n): I_Tx_Result => {\n\n  if (wallet.utxoList.length === 0) {\n    throw new Error('Wallet has no funds (utxo) to use')\n  }\n\n  // grab fee rate\n  const feeRate = choices.feeRate\n\n  // grab network object\n  const network = bitcoin.networks[networkChoice]\n\n  // calculate domain notification address\n  const { notificationsAddress } = calcP2WSH(domain.domainName, networkChoice)\n\n  // calculate funds necessary for this tx, round up sat for more better than being below minimum.\n  const fee = Math.ceil(vBytes * feeRate)\n  const valueNeeded = MIN_BURN + MIN_NOTIFY + fee; // sat\n\n  // gather necessary utxo to use until enough to cover costs\n  let totalGathered = 0 // sat\n\n  // track multiple sources for providing detailed information\n  let gatheredFromWallet = 0\n  let gatheredFromOther = 0\n\n  // prepare extra inputs from other rules\n  // adding these first to totalGathered satoshi since have to add them all anyway\n  let toBeUsedUtxoOfNotifications: Array<any> = []\n  // must consume all ACS utxo wallet.address has created\n  // get all utxo for notification address\n  domain.derivedUtxoList.forEach(utxo => {\n    // use only utxo created from this wallet's address\n    if (utxo.from_scriptpubkey_address === wallet.address) {\n      toBeUsedUtxoOfNotifications.push(utxo)\n      totalGathered += utxo.value\n      gatheredFromOther += utxo.value\n    }\n  })\n\n\n  // Adding remaining funds from user's wallet to total Gathered\n  // Must always add at least 1 user utxo @ index 0 to indicate ownership\n  let toBeUsedUtxoOfUserWallet: Array<any> = []\n  wallet.utxoList.forEach((utxo: any) => {\n    // while not enough funds or if haven't added a single user utxo yet\n    if (totalGathered < valueNeeded || toBeUsedUtxoOfUserWallet.length === 0) {\n      toBeUsedUtxoOfUserWallet.push(utxo)\n      totalGathered += utxo.value\n      gatheredFromWallet += utxo.value\n    }\n  })\n\n  // all utxo parsed at this point\n\n  // if still not enough funds after all possible inputs,\n  // there are simply not enough funds to do the tx\n  if (totalGathered < valueNeeded) {\n    throw new Error('Not enough funds available (' + (valueNeeded / 1e8).toFixed(8) + ' BTC)')\n  }\n\n\n  // calculate keys from wallet import format key\n  const keyPair = bitcoin.ECPair.fromWIF(wallet.WIF, network)\n  // create Partially Signed Bitcoin Transaction object to build tx\n  const psbt = new bitcoin.Psbt({ network })\n  psbt.setVersion(2)    // default\n  psbt.setLocktime(0)   // default\n\n  // add all inputs to transaction\n\n  // must be first added as owner address must always be at index 0 input\n  toBeUsedUtxoOfUserWallet.forEach(utxo => {\n    psbt.addInput({\n      hash: utxo.txid,\n      index: utxo.vout,\n      sequence: 0xfffffffe,\n      // should work for segwit and nonsegwit inputs\n      nonWitnessUtxo: Buffer.from(utxo.hex, 'hex')\n    })\n  })\n\n  // calculate witnessScript\n  const witnessScript = bitcoin.script.compile([\n    hash160(Buffer.from(domain.domainName, 'utf8')),\n    op.OP_DROP\n  ])\n\n  const inputScript = bitcoin.script.compile([op.OP_TRUE])\n\n  // add each utxo to inputs\n  toBeUsedUtxoOfNotifications.forEach(utxo => {\n    if (!utxo.hex) {\n      // abort if missing raw hex\n      throw new Error(`Utxo is missing hex, txid: ${utxo.txid}, vout:${utxo.vout}`)\n    }\n    psbt.addInput({\n      hash: utxo.txid,\n      index: utxo.vout,\n      sequence: 0xfffffffe,\n      nonWitnessUtxo: Buffer.from(utxo.hex, 'hex'),\n      witnessScript: witnessScript\n    })\n  })\n\n\n  // inputs done\n\n  // outputs now\n\n  // add the op_return output (always index 0)\n  // if first time notifying, nonce is '0', otherwise the last blockheight when this user has sent ANY tx to that notification address\n  const nonce = getNonce({ domain }, wallet.address).toString()\n  const encryptionKey =  domain.domainName + wallet.address + nonce\n  console.log('nonce used to encrypt', domain.domainName, wallet.address, nonce)\n\n  const finalEmbedString = choices.embedString\n  console.log('string embedded is', '\"' + finalEmbedString + '\"')\n  const data = encrypt(finalEmbedString, encryptionKey)\n  const embed = bitcoin.payments.embed({ data: [data] })\n\n  // output[0]: check special tx rules for max amount required to burn among all of them\n  const burnAmount = choices.action.suggestions.reduce((maxBurn: number, thisSuggestion: any) => {\n    console.log('choices.action.suggestions each item:', thisSuggestion)\n    return (\n      // if there's another burn rule, use the highest value\n      (('set' in thisSuggestion.info) && (thisSuggestion.info.set.name === 'output 0 value'))\n        ? Math.max(maxBurn, thisSuggestion.info.set.value)\n        : maxBurn\n    )\n  }, 0)\n  psbt.addOutput({\n    script: embed.output,\n    value: burnAmount,\n  })\n  console.log('rules say to burn ', burnAmount)\n\n  // output[1] add notification output (always index 1)\n  psbt.addOutput({\n    address: notificationsAddress, // calculated from domainName provided\n    value: MIN_NOTIFY\n  })\n\n  // output[2] add change output (anything is fine for output[2] or higher)\n  // here we can set an address change where user keeps control as the\n  // address to receive the remaining change from this tx\n\n  // choices.action.permissionList[1].info.get.value\n  // suggestions.find((suggestion: any) => ('get' in suggestion.info)).info.get.value // new address\n  const changeAddress = choices.action.type === 'CHANGE_ADDRESS'\n    ? (choices.action.suggestions.find((suggestion: any) => ('get' in suggestion.info))!.info.get!.value)\n    : wallet.address\n  const change = totalGathered - valueNeeded\n  psbt.addOutput({\n    address: changeAddress,\n    value: change\n  })\n\n  // at this point all inputs & outputs added so ready to sign\n\n  toBeUsedUtxoOfUserWallet.forEach((utxo, index) => {\n    // sign p2wpkh of controlling\n    psbt.signInput(index, keyPair)\n    // (TODO) signing ACS inputs will need script\n\n    if (!psbt.validateSignaturesOfInput(index)) {\n      throw new Error('Signature validation failed for input index ' + index.toString())\n    }\n  })\n\n  // finalizing inputs\n  // psbt.finalizeAllInputs()\n\n  // finalize regular p2wsh inputs normally\n  for (let i = 0; i < toBeUsedUtxoOfUserWallet.length; i++) {\n    psbt.finalizeInput(i)\n  }\n  // finalize witness script stack inputs with extra parameter\n  // for the submitted script parameters & original full script\n  for (\n    let i = toBeUsedUtxoOfUserWallet.length;\n    i < toBeUsedUtxoOfUserWallet.length + toBeUsedUtxoOfNotifications.length;\n    i++\n  ) {\n    psbt.finalizeInput(i, getFinalScripts({ inputScript, network }))\n  }\n\n  const tx = psbt.extractTransaction()\n  console.log(tx)\n  const thisVirtualSize = tx.virtualSize()\n  const txid = tx.getId()\n  const hex = tx.toHex()\n  const nInputs = tx.ins.length\n  const nOutputs = tx.outs.length\n\n  if (vBytes >= thisVirtualSize) {\n    // If this tx fee was calculated for a vBytes size equal to or larger than the resulting derived tx (thisVirtualSize),\n    // fee should be safe by being equal to or larger than necessary at required feeRate.\n    // Obviously vBytes = 0 will never give the correct fee minimum the first time through.\n    console.log('virtualSize', tx.virtualSize())\n    console.log('byteLength', tx.byteLength())\n    console.log('getId', tx.getId())\n    console.log('hex', tx.toHex())\n    console.log('')\n    return {\n      txid,\n      thisVirtualSize,\n      hex, valueNeeded,\n      fee,\n      change,\n      burnAmount,\n      notifyAmount: MIN_NOTIFY,\n      totalGathered,\n      gatheredFromWallet,\n      gatheredFromOther,\n      nInputs,\n      nOutputs,\n      nInputsFromWallet: toBeUsedUtxoOfUserWallet.length,\n      nInputsFromOther: toBeUsedUtxoOfNotifications.length || 0\n    }\n  } else {\n    // Redo this tx calculation using the virtual size we just calculated for vByte optional parameter.\n    return calcTx(\n      wallet, domain, choices, networkChoice, thisVirtualSize\n    )\n  }\n}\n\n\n\n","\nexport enum BnsActionType {             // types of user BNS actions that match use in actions.tsx\n  RENEW = 'RENEW',\n  ONLY_FORWARDS = 'ONLY_FORWARDS',\n  CLAIM_OWNERSHIP = 'CLAIM_OWNERSHIP',\n  SEND_OWNERSHIP = 'SEND_OWNERSHIP',\n  CHANGE_ADDRESS = 'CHANGE_ADDRESS'\n}\n\nexport enum BnsBidType {\n  BURN = 'BURN',            // ownership bidding in progress taht requires burns\n  NULL = 'NULL'             // no bidding in progress\n}\n\nexport interface I_BNS_Action {\n  type: BnsActionType\n  info: string\n  permissions: Array<any>\n  conditions: Array<any>\n  execute: () => void\n  args: any\n}\n\nexport interface I_BNS_Auto_Action {\n  info: string\n  conditions: Array<any>\n  execute: () => void\n}\n\n// export interface I_Action_Choice {\n//   type: BnsActionType\n//   info: string\n//   suggestions: Array<any>\n//   actionContent: string\n// }\n\nexport interface I_BnsState {\n  domain: I_Domain\n  chain?: {\n    parsedHeight: number                // parsed height for derivation\n    currentHeight: number               // real world block height (for final update)\n  }\n}\n\nexport interface I_Domain {             // notification info for this domain name\n  domainName: string                    // domain name\n  notificationAddress: string           // p2wsh address for this domain name (alias + extension)\n  txHistory: Array<I_TX>                // array of all tx for this address (old addressHistory)\n  derivedUtxoList: Array<I_UTXO>        // derived utxo set from tx history parse\n  utxoList: Array<I_UTXO>               // array of all real time utxo at address\n  users: {                              // keeps track of interacting users / source addresses\n                                        // with addresses as keys\n    [address: string]: I_User\n  }\n  currentOwner: string                  // points to a source address or blank string\n\n  bidding: {                            // bidding\n    startHeight: number                 // auction/challenge start height\n    endHeight: number                   // \" end height\n    type: BnsBidType                    // type of bidding - e.g. BURN / NULL\n    bids: Array<I_Bid>                  // array of bids\n  }\n\n  ownersHistory: Array<I_User>          // owner history log\n}\n\nexport interface I_Bid {\n  height: number                        // height the bid was confirmed\n  timestamp: number                     // timestamp when bid was confirmed\n  address: string                       // address doing the bidding\n  value: number                         // amount bid\n  valueLeftToRefund: number             // amount of bid left to refund\n  blockHash: string                     // block hash of block where tx was confirmed\n}\n\nexport interface I_User {\n  address:      string                  // address in control\n  forwards:     Array<I_Forward>        // for forwards later\n  burnAmount:   number                  // burned to get ownership\n  winHeight:    number                  // blockheight winning bid\n  winTimestamp: number                  // winHeight in block's timestamp\n  nonce:        number                  // for counting previous notification\n                                        // height from this address, no matter good/bad/type\n  updateHeight: number                  // the height of most current parsed update, created\n                                        // after nonce height & therefore using it\n}\n\n  // each forward object has the following data\nexport interface I_Forward {\n  network: string\n  address: string\n  updateHeight: number\n  updateTimestamp: number\n}\n\nexport interface I_TX {\n  txid: string\n  version: number\n  locktime: number\n  size: number\n  weight: number\n  fee: number\n  vin: Array <{\n    txid: string\n    vout: number\n    prevout: {\n      scriptpubkey: string\n      scriptpubkey_asm: string\n      scriptpubkey_type: string\n      scriptpubkey_address: string\n    }\n    scriptsig: string\n    scriptsig_asm: string\n    witness: {\n      [key: number]: string\n    }\n    is_coinbase: boolean\n    sequence: number\n  }>\n  vout: Array <{\n    scriptpubkey: string\n    scriptpubkey_asm: string\n    scriptpubkey_type: string\n    scriptpubkey_address: string // op return case?\n    value: number\n  }>\n  status: {\n    confirmed: boolean      // unconfirmed case?\n    block_height: number\n    block_hash: string\n    block_time: number\n  }\n}\n\nexport interface I_UTXO {\n  txid: string\n  vout: number\n  status: {\n    confirmed: boolean\n    block_height: number\n    block_hash: string\n    block_time: number\n  }\n  value: number\n  hex?: string\n  from_scriptpubkey_address?: string\n}\n\nexport interface I_Condition {\n  status: () => boolean\n  info: {\n    describe: string                    // string containing explanation for user\n    set?: {                             // object suggesting user sets something to a value\n      value: number | string            // value to set it to (if exact value unknown better to .get it from user)\n      name: string                      // what the value is for\n    }\n    get?: {                             // object of suggested variable to get from user\n      value: number | string            // rules come as key value pair\n      name: string                      // name of variable getting\n      min?: number | null               // possible min value\n      max?: number | null               // possible max value\n    }\n    command?: string                    // command if this is a command to be embedded (value in get/set)\n    warning?: string                    // warn if this is possible but terrible idea\n  }\n}\n\nexport interface I_Evaluated_Condition extends I_Condition {\n                                    // all I_Conditions parameters extended\n  isAllowed: boolean                // if permission passed check\n}\n\n\n// this is checked to know what user options are PER ACTION\nexport interface I_Checked_Action {\n  type: BnsActionType                   // pass each action type to user attempting to create tx\n  info: string                          // describe each action type\n  isUsable: boolean                     // summarize if it meets all permissions for user to do\n  permissionList: [                     // ONLY permissiond checked for this action (all can do before tx)\n    I_Evaluated_Condition\n  ]\n  suggestions: Array<I_Condition>      // info from ALL action's conditions\n}","export * from './types'","import { newUser, newState } from './initialState'\nimport {\n  OWNERSHIP_DURATION_BY_BLOCKS,\n  MIN_BURN,\n  MIN_NOTIFY,\n  CHALLENGE_PERIOD_DURATION_BY_BLOCKS,\n  CHALLENGE_MIN_MULTIPLY\n} from './constants'\nimport { I_User, I_Forward, I_BnsState, I_TX, I_UTXO, I_Bid, BnsBidType } from './types/'\nimport { decrypt } from './cryptography'\nimport { deterministicRandomBid } from './deterministicRandom'\n\n// ========== helper functions =====================\n\nexport const existsCurrentOwner = (st: I_BnsState): boolean => st.domain.currentOwner !== ''\nexport const existsUser = (st: I_BnsState, address: string): boolean => !!st.domain.users[address]\n\nexport const createNewUser = (st: I_BnsState, address: string): void => {\n  // create new user\n  st.domain.users[address] = JSON.parse(JSON.stringify(newUser))\n  // update its address for easy access\n  st.domain.users[address].address = address\n}\n\nexport const getOwnerAddress = (st: I_BnsState): string => st.domain.currentOwner || ''\n\nexport const setOwner = (st: I_BnsState, newOwnerAddress: string) => {\n  st.domain.currentOwner = newOwnerAddress\n}\n\n\nexport const getUser = (st: I_BnsState, address: string): I_User => {\n  if (!existsUser(st, address)) {\n    console.warn('You called', getUser, 'without checking if user exists via existsUser()')\n  }\n  return st.domain.users[address]\n}\n\nexport const getOwner = (st: I_BnsState) => {\n  const ownerAddress = getOwnerAddress(st)\n  if (!ownerAddress) return undefined\n  return getUser(st, ownerAddress)\n}\n\nexport const updateOwnerHistory = (st: I_BnsState): void => {\n  st.domain.ownersHistory.push(getOwner(st) || JSON.parse(JSON.stringify(newUser)))\n}\n\nexport const clearOwner = (st: I_BnsState): void => { st.domain.currentOwner = '' }\n\nexport const getCurrentHeight = (st: I_BnsState): number => st.chain?.currentHeight || 0\nexport const getParsedHeight = (st: I_BnsState): number => st.chain?.parsedHeight || 0\nexport const setParsedHeight = (st: I_BnsState, height: number): void => {\n  st.chain && (st.chain.parsedHeight = height)\n}\n\nexport const getNotificationAddress = (st: I_BnsState): string => st.domain.notificationAddress || ''\n\nexport const getLastOwnerBurnedValue = (st: I_BnsState): number => getOwner(st)?.burnAmount || 0\n\nexport const isOwnerExpired = (st: I_BnsState): boolean => {\n  if (!existsCurrentOwner(st)) return true // no owner same as expired\n  const owner = getOwner(st)\n  if (!owner) {\n    console.log('isOwnerExpired: owner exists but no user with such address stored')\n    return true\n  }\n  const blocksSinceUpdate = getParsedHeight(st) - owner.winHeight\n  return blocksSinceUpdate > OWNERSHIP_DURATION_BY_BLOCKS\n}\n\n/**\n * Returns nonce of user based on address.\n * If no previous user history for domain, nonce is 0, otherwise last tx height.\n */\nexport const getNonce = (st: I_BnsState, address: string): number => {\n  const doesExist = existsUser(st, address)\n  if (!doesExist) {\n    return 0\n  } else {\n    const user = getUser(st, address)\n    return user.nonce\n  }\n}\n\n\n// ===== tx functions (getters) =====================\n\nexport const getTxTimestamp = (tx: I_TX): number => tx.status.block_time || 0\nexport const getTxHeight = (tx: I_TX): number => tx.status.block_height || 0\n\nexport const getTxOutput0BurnValue = (tx: I_TX): number => tx.vout[0]?.value || 0\nexport const getTxOutput0Data = (tx: I_TX):string => {\n  if (isOpreturnOutput0(tx)) {\n    // remove 'OP_RETURN OP_PUSHBYTES_5 ' from it and return the rest\n    return tx.vout[0].scriptpubkey_asm.split(' ').slice(2).join('')\n  }\n  return ''\n}\n\nexport const getTxOutput1NotifyValue = (tx: I_TX): number => tx.vout[1]?.value || 0\nexport const getTxOutput1NotifyAddress = (tx: I_TX): string => tx.vout[1]?.scriptpubkey_address || ''\n\nexport const getTxInput0SourceUserAddress = (tx: I_TX): string => (\n  tx.vin[0]?.prevout.scriptpubkey_address || ''\n)\n\n\n// ======= update state from tx (setters) ========\n\n// update the info for the source user of the tx within bns state\n// when ran a second time, it simply updates nonce for post-tx value\nexport const updateSourceUserFromTx = (st: I_BnsState, tx: I_TX): void => {\n  const fromAddress = getTxInput0SourceUserAddress(tx)\n\n  // create new user if not already one of users\n  // if (!(fromAddress in st.domain.users)) {\n  if (!existsUser(st, fromAddress)) {\n    // create new user object by copying values of newUser object\n    createNewUser(st, fromAddress)\n    console.log('new source created:', fromAddress)\n  }\n\n  // update user heights/times\n  const user = st.domain.users[fromAddress]\n  user.nonce = user.updateHeight\n  user.updateHeight = getTxHeight(tx)\n}\n\nexport const addToUserForwards = (\n  st: I_BnsState,\n  fromAddress: string,\n  forwardsInThisTx: Array<I_Forward>\n) => {\n  const user = getUser(st, fromAddress)\n  user.forwards = [...user.forwards, ...forwardsInThisTx]\n}\n\n// parse embedded data and store in forwards\nexport const readEmbeddedData = (st: I_BnsState, tx: I_TX):void => {\n  // only go on if there is op_return with embedded data on output 0\n  if (!isOpreturnOutput0(tx)) {\n    console.log(getTxHeight(tx), ': no op_return found for txid')\n    return undefined\n  }\n\n  // get useful object references\n  const fromAddress = getTxInput0SourceUserAddress(tx)\n  const user = getUser(st, fromAddress)\n  const nonce = getNonce(st, fromAddress).toString()\n\n  const embeddedDataHex = getTxOutput0Data(tx)\n  const embeddedDataBuffer = Buffer.from(embeddedDataHex, 'hex')\n\n  const decryptionKey = st.domain.domainName + user.address + nonce\n  console.log(\n    '',\n    getTxHeight(tx),\n    ': decryption key: ',\n    st.domain.domainName,\n    user.address,\n    nonce\n  )\n  const embeddedDataUtf8 = decrypt(embeddedDataBuffer, decryptionKey)\n  console.log('', getTxHeight(tx), ': found embedded data:', embeddedDataUtf8)\n\n  // split by spaces into array\n  const embeddedDataUtf8Array = embeddedDataUtf8.split(' ')\n\n  // collect all forwards in this tx\n  const forwardsInThisTx: Array<I_Forward> = []\n\n  embeddedDataUtf8Array.forEach((word: string, index: number) => {\n    // everything must be space separated in pairs\n    // so single block might mean failed decryption or\n    // last unpaired block might be padding or future versioning\n    // grabbing only odd and 1 before it values, only grabbing pairs\n    if (index % 2 === 1) {\n      const networkPiece = embeddedDataUtf8Array[index - 1]\n      const forwardingAddressPiece = word\n      const thisForward = {\n        network:          networkPiece,\n        address:          forwardingAddressPiece,\n        updateHeight:     getTxHeight(tx),\n        updateTimestamp:  getTxTimestamp(tx)\n      }\n      forwardsInThisTx.push(thisForward)\n    }\n  })\n\n  // update forwards on the user\n  addToUserForwards(st, fromAddress, forwardsInThisTx)\n}\n\n// ===== rule checks (getters) =====\n\n// Describe:    2 outputs minimum\nexport const atLeastTwoOutputs = (tx: I_TX): boolean => tx.vout.length >= 2\n\n// Describe:    Is [0] output OP_RETURN type\nexport const isOpreturnOutput0 = (tx: I_TX): boolean => (\n  tx.vout[0].scriptpubkey_asm.split(' ')[0] === 'OP_RETURN'\n)\n\n// Describe:    Is [1] output this domain's notification address?\nexport const isNotify =  (st: I_BnsState, tx: I_TX): boolean => (\n  getTxOutput1NotifyAddress(tx) === getNotificationAddress(st)\n)\n\n// Describe:    At least minimum amount used in notification output? (Dust level is main danger)\nexport const didNotifyMin = (tx: I_TX): boolean => getTxOutput1NotifyValue(tx) >= MIN_NOTIFY\n\n// Describe:    Is address the current domain owner?\nexport const isAddressTheCurrentOwner = (st: I_BnsState, address: string): boolean =>\n  getOwnerAddress(st) === address\n\n// Describe:    Is tx sender the current domain owner (input [0], id'ed by address)?\nexport const isSenderTheCurrentOwner = (st: I_BnsState, tx: I_TX): boolean =>\n  getOwnerAddress(st) === getTxInput0SourceUserAddress(tx)\n\n// Describe:    At least minimum amount burned?\nexport const didBurnMin = (tx: I_TX): boolean =>\n  getTxOutput0BurnValue(tx) >= MIN_BURN\n\n// Describe:    Burned at least as much as previously burnt\nexport const burnedPreviousRateMin = (st: I_BnsState, tx: I_TX): boolean => (\n  getTxOutput0BurnValue(tx) >= getLastOwnerBurnedValue(st)\n)\n\n/**\n * Checks if this command exists at tx height from tx user.\n */\nexport const isCommandCalled = (\n  st: I_BnsState,\n  tx: I_TX,\n  command: string\n): boolean  => {\n  return !!getCommandCalled(st, tx, command)\n}\n\n/**\n * Gets command called in most recent forwards from user of tx.\n */\nexport const getCommandCalled = (\n  st: I_BnsState,\n  tx: I_TX,\n  command: string\n): I_Forward | undefined  => {\n\n  // get tx height (only current height is relevant for commands)\n  const txHeight = getTxHeight(tx)\n  // who sent the tx\n  const fromAddress = getTxInput0SourceUserAddress(tx)\n  // get user object of the tx sender\n  const user = getUser(st, fromAddress)\n  // array of forwards\n  const forwards = user.forwards\n\n\n  // scan height and name of each forward\n  for (const thisForward of forwards) {\n    const network = thisForward.network\n    const forwardHeight = thisForward.updateHeight\n    if (forwardHeight === txHeight) {\n      // commands are identified via a string (starts with !)\n      if (network.startsWith(command)) {\n        // found it so return in\n        return thisForward\n      }\n    }\n  }\n\n  return undefined\n}\n\n// Describe: update current derivedUtxoList from tx\n// Since utxo in question are the notificaiton address utxo,\n// they will always be part of txHistory\nexport const updateUtxoFromTx = (st: I_BnsState, tx: I_TX): void => {\n  const notificationAddress = getNotificationAddress(st)\n\n  // scan every tx input for notification address and remove those from utxo set\n  tx.vin.forEach((input: any) => {\n    // can scan by previous address or by current utxo list's txid+vout pairs\n    if (input.prevout.scriptpubkey_address === notificationAddress) {\n      const txid = input.txid\n      const vout = input.vout\n      // find first match with these values in derivedUtxoList\n      const spentUtxoIndex = st.domain.derivedUtxoList.findIndex(utxo => (\n        utxo.txid === txid && utxo.vout === vout\n      ))\n      // remove element at the position found\n      // utxo can only be spent once so first match ok\n      st.domain.derivedUtxoList.splice(spentUtxoIndex, 1)\n    }\n  })\n\n  // scan every tx output for notification address and add those to utxo set\n  tx.vout.forEach((output: any, vout: number) => {\n    if (output.scriptpubkey_address === notificationAddress) {\n      // if output address is notification address, it's always new utxo\n      // mark from address as address @ input 0 of the tx\n      st.domain.derivedUtxoList.push({\n        txid: tx.txid,\n        vout: vout,\n        status: tx.status,\n        value: output.value,\n        from_scriptpubkey_address: getTxInput0SourceUserAddress(tx)\n      } as I_UTXO)\n    }\n  })\n}\n\n// returns true only if there are no utxo (at notification address)\n// where the sender address (input[0] in the past) is the same as\n// the sender address of this tx (input[0])\nexport const noUnspentUserNotificationsUtxo = (st: I_BnsState, tx: I_TX): boolean => {\n  // sender address of this tx\n  const userOfTxAddress = getTxInput0SourceUserAddress(tx)\n  const txHeight = getTxHeight(tx)\n\n  // go through all derived utxo and make sure none are from this sender\n  for (const utxo of st.domain.derivedUtxoList) {\n    // user that created this utxo\n    const userThatCreatedThisUtxo = utxo.from_scriptpubkey_address\n\n    // block height of utxo creation\n    const utxoHeight = utxo.status.block_height\n\n    // only utxo formed before this tx height matter\n    // this tx would've likely created a new utxo that shouldn't count\n    const isInThePast = utxoHeight < txHeight\n\n    // all utxo in derived set should have from address\n    !userThatCreatedThisUtxo && console.log(\n      'st.domain.derivedUtxoList for some reason has undefined from_scriptpubkey_address'\n    )\n    // if even 1 matches, the check failed\n    if ((userThatCreatedThisUtxo === userOfTxAddress) && isInThePast) {\n      return false\n    }\n  }\n\n  // only gets this far if no utxo creators match our current tx user\n  return true\n}\n\n\n/**\n * Reset bidding.\n */\nexport const resetBidding = (st: I_BnsState): void => {\n  st.domain.bidding = { ...JSON.parse(JSON.stringify(newState.domain.bidding)) }\n}\n\n/**\n * Start bidding period.\n */\nexport const startBidding = (st: I_BnsState, tx: I_TX, type: BnsBidType) => {\n  const txHeight = getTxHeight(tx)\n\n  // reset bidding object just in case\n  resetBidding(st)\n\n  // start bidding pediod and set type\n  st.domain.bidding.startHeight = txHeight\n  st.domain.bidding.endHeight = txHeight + CHALLENGE_PERIOD_DURATION_BY_BLOCKS\n  st.domain.bidding.type = type\n\n  console.log('Bidding period started at height', txHeight, 'until', txHeight + CHALLENGE_PERIOD_DURATION_BY_BLOCKS)\n}\n\n\n/**\n * Add new bid\n */\nexport const addBid = (st: I_BnsState, tx: I_TX, type: BnsBidType): void => {\n  const userAddress = getTxInput0SourceUserAddress(tx);\n  const txHeight = getTxHeight(tx)\n  const burnValue = getTxOutput0BurnValue(tx)\n\n  // if bidding hasn't started\n  if (txHeight > st.domain.bidding.endHeight) {\n    startBidding(st, tx, type)\n  }\n\n  // add this new bid to bids\n  const bids = st.domain.bidding.bids\n  const bid: I_Bid = {\n    height: txHeight,\n    timestamp: getTxTimestamp(tx),\n    address: userAddress,\n    value: burnValue,\n    valueLeftToRefund: burnValue,\n    blockHash: tx.status.block_hash\n  }\n  bids.push(bid)\n\n  console.log('New bid from', userAddress, 'for', burnValue)\n}\n\n/**\n * Set new owner from bidding period.\n * Note: can be called unknown number of blocks after bidding period ended.\n */\nexport const endBidding = (st: I_BnsState): void => {\n\n  const startHeight = st.domain.bidding.startHeight\n  const endHeight = st.domain.bidding.endHeight\n\n  // filter out only relevant notification tx so don't have to filter every time\n  const relevantTxHistory = st.domain.txHistory.filter((thisTx: I_TX) =>\n    ((thisTx.status.block_height >= startHeight) && (thisTx.status.block_height < endHeight))\n  )\n\n  // Rules for who wins bidding:\n  // 1. list of all bids and how much they paid - have that in domain.bidding.bids!\n  // 2. check all bids at bidding start height to this specific bid height - 1 and see if they were refunded (except bids by your own address)\n  // 3. add this bid to list of valid bids if so\n  // 4. parse through valid bids, replace running winner only if burn amount is *CHALLENGE_MIN_MULTIPLY previous winner at last height\n  // 5. tie break same height valid winners by pseudo random number weighted by burn amounts\n  // 6. once done parsing, parse winner is new owner\n\n  // in general it's more expensive to create bids than to refund them - helps limit spam. only output[0] bids count.\n\n  // bids were added by height lowest to highest so list already sorted and\n  // contains all relevant tx/heights that can be used to parse through heights\n\n  // lets keep only bids that meet refund all previous bids rule\n  const goodBidsThatRefunded: Array<I_Bid> = []\n  const bidsLeftToRefund: Array<I_Bid> = []\n  // parsing through history of bids\n  for (const thisBid of st.domain.bidding.bids) {\n    // update bidsLeftToRefund based on relevantTxHistory to see if they were refunded (with notificaiton)\n\n    const thisBidHeight = thisBid.height\n\n    // thisBid itself is not relevant to refund check, only its height is relevant for checking only lower heights\n    // each bid is only responsible for bids before it\n    // refunds from tx w/ height @ [startHeight,endHeight) are checked for each bid w/ height @ [startHeight, thisBidHeight - 1]\n    const hasMetPastRefundCondition = wereAllBidsRefunded({\n      txHistory: relevantTxHistory,\n      bidHistory: bidsLeftToRefund,\n      minHeight: startHeight,\n      maxHeight: thisBidHeight - 1,\n      ignoreAddress: thisBid.address\n    })\n\n    // if all prior bids were refunded, add this bid to the good bid list\n    // otherwise it's ignored\n    if (hasMetPastRefundCondition) {\n      // add this bid to smaller list of bids meeting requirements\n      goodBidsThatRefunded.push(thisBid)\n    }\n\n    // add this bid now to list of bids to refund for higher hights\n    bidsLeftToRefund.push(thisBid)\n  }\n\n  // now with only a list of good bids with refunded priors, parse through them\n  // to check that each bid at higher height paid/burned at least *(CHALLENGE_MIN_MULTIPLY) of next lower height bid\n  let winner: I_Bid = {\n    address: '',\n    height: 0,\n    timestamp: 0,\n    value: 0,\n    valueLeftToRefund: 0,\n    blockHash: ''\n  }\n  let validBidsAtSameHeight: Array<I_Bid> = []\n  let lastHeight = 0\n  let maxIndex = goodBidsThatRefunded.length - 1\n  for (let index = 0; index <= maxIndex; index++) {\n    const thisBid = goodBidsThatRefunded[index]\n\n    // get height from bid\n    const thisHeight = thisBid.height\n\n    if (thisBid.height > lastHeight) {\n      // this means height went up so need to resolve previous heights:\n      // set  winner from X possible winners in the array from previous height\n      // if no entries, no change to winner\n\n      // calc winner from array of same height bids, if possible\n      winner = deterministicRandomBid(validBidsAtSameHeight) || winner\n\n      // reset bidsAtSameHeight\n      validBidsAtSameHeight = []\n    }\n\n    // only push into valid bids array if it meets criteria\n    // compared with winner of lower height calculated this round or before\n    const hasThisBidPaidEnough = thisBid.value >= (CHALLENGE_MIN_MULTIPLY * winner.value)\n\n    if (hasThisBidPaidEnough) {\n      validBidsAtSameHeight.push(thisBid)\n    }\n\n    // set last height based on this parsed bid\n    lastHeight = thisHeight\n\n    // final item update only (since there's no more bids after to step height)\n    if (index === maxIndex) {\n      // calc winner from array of same height bids, if possible\n      winner = deterministicRandomBid(validBidsAtSameHeight) || winner\n    }\n  }\n\n  // if there's a winner (should be, at least initial bid)\n  if (winner.address !== '') {\n    // set winner to owner\n    setOwner(st, winner.address)\n    getOwner(st)!.burnAmount = winner.value\n    getOwner(st)!.winHeight = winner.height\n    getOwner(st)!.winTimestamp = winner.timestamp\n    console.log('', winner.height, 'Bidding winner and new owner is', winner.address)\n  }\n\n  // remove active bidding info\n  resetBidding(st)\n}\n\n\n/**\n * Return true only if bidding was happening and hasn't been resolved yet into a winner.\n */\nexport const isBiddingOver = (st: I_BnsState): boolean => {\n  // current parsed height (updated elsewhere)\n  const parsedHeight = st.chain!.parsedHeight\n\n  const biddingType = st.domain.bidding.type\n  const endHeight = st.domain.bidding.endHeight\n\n  // real bidding type still assigned but height is at or above end height for bidding\n  if ((biddingType !== BnsBidType.NULL) && (endHeight <= parsedHeight)) {\n    return true\n  }\n  return false\n}\n\n\n/**\n * Returns true only if all bids in range [minHeight,  maxHeight] were fully refunded in transactions provided.\n * txHistory must be provided for only range to check.\n * bidHistory will be limited to only ones to fall within the range.\n * The bidder's past address bids even if not refunded shouldn't matter (ignoreAddress for recepient)\n * Any payments by any address to itself should also be ignored.\n */\nfunction wereAllBidsRefunded (\n  { txHistory, bidHistory, minHeight, maxHeight, ignoreAddress }:\n  { txHistory: Array<I_TX>, bidHistory: Array<I_Bid>, minHeight: number, maxHeight: number, ignoreAddress: string }\n): boolean {\n\n  // since parsing the same range of tx history for every bid\n  // should copy bidHistory by local value so edits to it do not remain next time function is called\n  const bidHistoryCopy = JSON.parse(JSON.stringify(bidHistory))\n\n  // create ~hash table of total paid to each address so not to iterate through them every bid\n  const paid: { [address: string]: number } = {}\n  for (const tx of txHistory) {\n    const senderAddress = getTxInput0SourceUserAddress(tx)\n    for (const output of tx.vout) {\n      // for each tx, for each output (payment could be in any of them)\n      const toAddress = output.scriptpubkey_address // can be undefined if burned\n      const toAmount = output.value\n      // add up who got refunded by another address\n      // ignore if burn or if sender is recepient\n      if ((toAddress !== undefined) && (senderAddress !== toAddress)) {\n        paid[toAddress] ? (paid[toAddress] += toAmount) : (paid[toAddress] = toAmount)\n      }\n    }\n  }\n  // paid object complete\n\n  // subtract away refunded amounts\n  for (let i = 0; i < bidHistoryCopy.length; i++) {\n    const pastBid = bidHistoryCopy[i]\n    if ((pastBid.height <= maxHeight) && (pastBid.height >= minHeight)) {\n      // if bid falls within the height range of interest\n\n      // address of who is owed refund for past bid\n      const pastBidAddress = pastBid.address\n\n      if (paid[pastBidAddress] !== undefined) {\n        // if was refunded anything\n\n        // paid[pastBidAddress] is refunds left\n        // can't simply subtract, because could be multiple bids from same address (can't count same refund twice)\n        // that are refunded with multiple payments to same address (refunds left starts as total)\n        // if value left to refund is <= refunds left, should set value left to refund to 0 and refund left reduced by same amount.\n        // if value left to refund is > refunds left, reduece refunds left to 0 and value left to refund by same amount.\n        // in both cases we reduce both amounts by the minimum of the two numbers.\n        // value left to refund should be ignored if it's below 0\n        // refunds left is < 0 should not happen\n\n        // 0 <= minRefund <= paid[pastBidAddress]\n        const minRefund = Math.max(Math.min(pastBid.valueLeftToRefund, paid[pastBidAddress]), 0)\n        // update both; if zero, no change\n        pastBid.valueLeftToRefund -= minRefund // refund still needed\n        paid[pastBidAddress] -= minRefund // refunds still unacounted for\n      }\n\n      // every bid is only checked once since it checks every tx payment at once\n      // so after subtraction or lack of a payment match, each bid can be checked for\n      // 1. paid out in full\n      // 2. OR belongs to ignoreAddress for who this is being considered (refunds to self = useless)\n      const isPaidInFull = (pastBid.valueLeftToRefund <= 0)\n      const isIgnoredAddress = (pastBidAddress === ignoreAddress)\n      // if is not paid in full and isn't ignored address, can safely return false\n      // all other address bids MUST be paid (refunded) in full\n      if (!isIgnoredAddress && !isPaidInFull) {\n        console.log('not all predecesors refunded, failed to refund:', pastBid, 'bid considered is from', ignoreAddress)\n        return false\n      }\n    }\n  }\n\n  // if the check doesn't fail after every bid scan, can return true\n  console.log('all known predecesors are refunded. bid considered is from', ignoreAddress, '& checked for heights <=', maxHeight)\n  return true\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P1RestoreOrBackup_wrapper__32TQJ\",\"title\":\"P1RestoreOrBackup_title__2rH-6\",\"contentWrapper\":\"P1RestoreOrBackup_contentWrapper__1NT85\",\"buttonWrapper\":\"P1RestoreOrBackup_buttonWrapper__2ryAq\",\"describe\":\"P1RestoreOrBackup_describe__1RMqs\",\"Orange\":\"P1RestoreOrBackup_Orange__2IaJN\",\"spacer\":\"P1RestoreOrBackup_spacer__3luud\",\"backup\":\"P1RestoreOrBackup_backup__357rd\",\"restoreBackup\":\"P1RestoreOrBackup_restoreBackup__VUHgs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P4ActionChoice_wrapper__2u2J5\",\"title\":\"P4ActionChoice_title__2PdRs\",\"availableActions\":\"P4ActionChoice_availableActions__1O5aS\",\"inputForms\":\"P4ActionChoice_inputForms__3vlaZ\",\"unavailableActions\":\"P4ActionChoice_unavailableActions__3rEYI\",\"buttonWrapper\":\"P4ActionChoice_buttonWrapper__3Sx3Y\",\"unavailableActions__title\":\"P4ActionChoice_unavailableActions__title__2EQ4_\",\"unavailableActions__actionList\":\"P4ActionChoice_unavailableActions__actionList__1VAc_\",\"unavailableActions__actionList__action\":\"P4ActionChoice_unavailableActions__actionList__action__GMwoW\",\"unavailableActions__actionList__action__title\":\"P4ActionChoice_unavailableActions__actionList__action__title__3ljZU\",\"unavailableActions__actionList__action__permissionList\":\"P4ActionChoice_unavailableActions__actionList__action__permissionList__2pKeq\",\"unavailableActions__actionList__action__permissionList__permission\":\"P4ActionChoice_unavailableActions__actionList__action__permissionList__permission__2eF7F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2imOE\",\"overflowMenu\":\"Navbar_overflowMenu__1dStH\",\"button\":\"Navbar_button__3Xi0T\",\"selected\":\"Navbar_selected__10Mm9\",\"warning\":\"Navbar_warning__1HOBZ\",\"pageNum\":\"Navbar_pageNum__1amUi\",\"collapsitron\":\"Navbar_collapsitron__2qzRt\",\"dots\":\"Navbar_dots__1OrSM\",\"menuShown\":\"Navbar_menuShown__3-TaY\",\"blurme\":\"Navbar_blurme__2nA1q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P6Broadcast_wrapper__32tq-\",\"title\":\"P6Broadcast_title__2fzea\",\"fees\":\"P6Broadcast_fees__STZ2e\",\"txSummary\":\"P6Broadcast_txSummary__24FzE\",\"status\":\"P6Broadcast_status__3SsMv\",\"totalCost\":\"P6Broadcast_totalCost__Agr2T\",\"buttonWrapper\":\"P6Broadcast_buttonWrapper__ROAk6\",\"status__button\":\"P6Broadcast_status__button__fFvc3\",\"status__failed\":\"P6Broadcast_status__failed__1moa8\",\"balance\":\"P6Broadcast_balance__1ZVur\"};","import * as bitcoin from 'bitcoinjs-lib'\r\nimport bip39 from 'bip39'\r\nconst varuint = require('varuint-bitcoin');\r\n\r\n\r\n/**\r\n * Scans the address for utxo on a given network.\r\n * (In BNS would be useful for wallet and notification address)\r\n */\r\n// export const scanAddress = async (address: string, strNetwork: string) => {\r\n  // create array of utxo\r\n\r\n\r\n  // add full tx hex to that array (might take time)\r\n// }\r\n\r\n/**\r\n * Make new mnemonic for p2wpkh m/44'/0'/0'/0/0 address and WIF.\r\n * @param     {string}    strNetwork    String describing network ('bitcoin', 'testnet').\r\n * @returns   {object}                  Object { mnemonic, WIF, address } - all strings.\r\n */\r\nexport const createNewWallet = (strNetwork: string) => {\r\n  // network version. bitcoin or testnet\r\n  const network = bitcoin.networks[strNetwork]\r\n  // create backup phrase\r\n  const mnemonic = bip39.generateMnemonic()\r\n  const seedBuffer = bip39.mnemonicToSeed(mnemonic)\r\n  // create derivation master node\r\n  const masterNode = bitcoin.bip32.fromSeed(seedBuffer, network)\r\n  // derive m/44'/0'/0'/0 /0 node\r\n  const childNode0 = masterNode.derivePath(\"m/44'/0'/0'\").derivePath(\"0/0\")\r\n  // get private key in wallet import format for that child node\r\n  const WIF = childNode0.toWIF()\r\n  // derive a standard p2wpkh address from that WIF\r\n  const keyPair = bitcoin.ECPair.fromWIF(WIF, network)\r\n  const address = bitcoin.payments.p2wpkh({ pubkey: keyPair.publicKey, network }).address\r\n\r\n  return { mnemonic, WIF, address }\r\n}\r\n\r\n/**\r\n * Load p2wpkh m/44'/0'/0'/0/0 wallet info from mnemonic.\r\n * @param     {string}    strMnemonic     Mnemonic string of 12 words as described in bip39.\r\n * @param     {string}    strNetwork      String describing network ('bitcoin', 'testnet').\r\n * @returns   {object}                    Object { mnemonic, WIF, address } - all strings.\r\n */\r\nexport const loadWallet = (strMnemonic: string, strNetwork: string) => {\r\n  // network version. bitcoin or testnet\r\n  const network = bitcoin.networks[strNetwork]\r\n  const seedBuffer = bip39.mnemonicToSeed(strMnemonic)\r\n  // create derivation master node\r\n  const masterNode = bitcoin.bip32.fromSeed(seedBuffer, network)\r\n  // derive m/44'/0'/0'/0 /0 node\r\n  const childNode0 = masterNode.derivePath(\"m/44'/0'/0'\").derivePath(\"0/0\")\r\n  // get private key in wallet import format for that child node\r\n  const WIF = childNode0.toWIF()\r\n  // derive a standard p2wpkh address from that WIF\r\n  const keyPair = bitcoin.ECPair.fromWIF(WIF, network)\r\n  const address = bitcoin.payments.p2wpkh({ pubkey: keyPair.publicKey, network }).address\r\n\r\n  return { mnemonic: strMnemonic, WIF, address }\r\n}\r\n\r\n\r\n//\r\n/**\r\n * Parse UTXO array to get total unspent balance in satoshi.\r\n * @param     {Array}    utxoArray      Array of UTXO objects with '.value' field in satoshi.\r\n * @returns   {number}                  Total number of unspent satoshi.\r\n */\r\nexport function getUnspentSum(utxoArray: Array<any>): number {\r\n\r\n  const sumSats = utxoArray?.reduce(\r\n    (sum: number, utxo: any) => sum + utxo.value\r\n    , 0) || 0\r\n\r\n  return sumSats\r\n}\r\n\r\n\r\n/**\r\n * Finalize outputs that require custom scripts.\r\n * Based on based on https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/csv.spec.ts\r\n */\r\nexport const getFinalScripts = ({ inputScript, network }: any) => {\r\n  return function (\r\n    inputIndex: number,\r\n    input: any,\r\n    script: Buffer,\r\n    isSegwit: boolean,\r\n    isP2SH: boolean,\r\n    isP2WSH: boolean,\r\n  ): {\r\n    finalScriptSig: Buffer | undefined;\r\n    finalScriptWitness: Buffer | undefined;\r\n  } {\r\n    // Step 1: Check to make sure the meaningful script matches what you expect.\r\n\r\n    // Step 2: Create final scripts\r\n    let payment: any = {\r\n      network,\r\n      output: script,\r\n      input: inputScript,\r\n    };\r\n    if (isP2WSH && isSegwit)\r\n      payment = bitcoin.payments.p2wsh({\r\n        network,\r\n        redeem: payment,\r\n      });\r\n    if (isP2SH)\r\n      payment = bitcoin.payments.p2sh({\r\n        network,\r\n        redeem: payment,\r\n      });\r\n\r\n    function witnessStackToScriptWitness(witness: Buffer[]): Buffer {\r\n      let buffer = Buffer.allocUnsafe(0);\r\n\r\n      function writeSlice(slice: Buffer): void {\r\n        buffer = Buffer.concat([buffer, Buffer.from(slice)]);\r\n      }\r\n\r\n      function writeVarInt(i: number): void {\r\n        const currentLen = buffer.length;\r\n        const varintLen = varuint.encodingLength(i);\r\n\r\n        buffer = Buffer.concat([buffer, Buffer.allocUnsafe(varintLen)]);\r\n        varuint.encode(i, buffer, currentLen);\r\n      }\r\n\r\n      function writeVarSlice(slice: Buffer): void {\r\n        writeVarInt(slice.length);\r\n        writeSlice(slice);\r\n      }\r\n\r\n      function writeVector(vector: Buffer[]): void {\r\n        writeVarInt(vector.length);\r\n        vector.forEach(writeVarSlice);\r\n      }\r\n\r\n      writeVector(witness);\r\n\r\n      return buffer;\r\n    }\r\n\r\n    return {\r\n      finalScriptSig: payment.input,\r\n      finalScriptWitness:\r\n        payment.witness && payment.witness.length > 0\r\n          ? witnessStackToScriptWitness(payment.witness)\r\n          : undefined,\r\n    };\r\n  }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P3DomainAndWallet_wrapper__1ElFg\",\"contentWrapper\":\"P3DomainAndWallet_contentWrapper__vm5qp\",\"title\":\"P3DomainAndWallet_title__3ing2\",\"domainInfo\":\"P3DomainAndWallet_domainInfo__3p2aJ\",\"domainButton\":\"P3DomainAndWallet_domainButton__2PIDz\",\"walletInfo\":\"P3DomainAndWallet_walletInfo__2cQY0\",\"walletButton\":\"P3DomainAndWallet_walletButton__MmLZ3\",\"unspent\":\"P3DomainAndWallet_unspent__bUWZW\",\"buttonWrapper\":\"P3DomainAndWallet_buttonWrapper__djJkL\",\"ownership\":\"P3DomainAndWallet_ownership__lSY6a\",\"balance\":\"P3DomainAndWallet_balance__2fns7\"};","import {\n  I_Domain,\n  I_TX,\n  I_UTXO,\n  I_Checked_Action\n} from './../helpers/bns/types/'\n\n/**\n * All the interfaces & enums\n */\n\nexport * from './../helpers/bns/types/'\n\n// for global state \"Store\" action creators\nexport enum ActionTypes {\n  STORE_SEARCH_RESULTS = 'STORE_SEARCH_RESULTS',\n  STORE_SEARCH_RESULTS_FAIL = 'STORE_SEARCH_RESULTS_FAIL',\n  TYPING = 'TYPING',\n  NEW_WALLET = 'NEW_WALLET',\n  CHANGE_PAGE_INFO = 'CHANGE_PAGE_INFO',\n  UPDATE_WALLET = 'UPDATE_WALLET',\n  UPDATE_DOMAIN = 'UPDATE_DOMAIN',\n  ACTION_FAIL = 'ACTION_FAIL',\n  LOAD_STATE = 'LOAD_STATE',\n  CHOICES_BNS_ACTION = 'CHOICES_BNS_ACTION'\n}\n\n// for global state reducer\nexport type Dispatch = React.Dispatch<I_Action>\n\n// for global state \"Store\" actions\nexport interface I_Action {\n  type: ActionTypes\n  payload: any\n}\n\nexport interface I_State {\n  network: string\n  alias: string\n  extension: string\n  domain: I_Domain\n  wallet: {\n    address: string\n    mnemonic: string\n    WIF: string\n    txHistory:  Array<I_TX>\n    utxoList: Array<I_UTXO>\n  }\n  chain: {\n    height: number\n  }\n  choices: {\n    action: I_Checked_Action | {}\n    feeRate: number\n    txHex: string\n    embedString: string\n  }\n  pageInfo: {\n    current: number\n    checkedDomain: boolean\n    checkedWallet: boolean\n    checkedLightSearch: boolean\n  }\n  lastTimeStamp: number\n}\n","import React from 'react'\nimport styles from './RoundButton.module.css'\n\n/**\n * Standard button for this app.\n *\n * Pass the following props to customize it.\n *\n * next='true' to add next arrow at right (off if undefined or '').\n *\n * back='true' to add back arrow on left (off if undefined or '').\n *\n * show='true' to display element vs show='false' to set display to none (dom still exists).\n *\n * sizebutton='2.9' to make the button size 2.9x standard var(--s) size used (defined in global global.css).\n *\n * colorbutton='var(--colorBitcoinOrange)' to customize color.\n *\n * colorbuttonText='var(--colorButtonText)' to customize text color.\n *\n * Defaults (vars defined in global global.css):\n *\n * sizebutton = 2.5. ( means font size calc(2.5/2.9 * var(--s)) )\n *\n * colorbutton = var(--colorBitcoinOrange).\n *\n * colorbuttontext = var(--colorButtonText).\n */\nexport const RoundButton = (props:any): JSX.Element => {\n  return (\n    <div\n      // variables defined by string will be available to button & its children for scope\n      style={ {\n        display: (\n          (props?.show === 'false') ? 'none' : 'inline-block'\n        ) as React.CSSProperties,\n        '--colorThisButton': (\n          props.colorbutton ? props.colorbutton : `var(--colorBitcoinOrange)`\n        )  as React.CSSProperties,\n        '--colorThisButtonText': (\n          props.colorbuttontext ? props.colorbuttontext : `var(--colorButtonText)`\n        ) as React.CSSProperties,\n        '--sizeButton': (\n          props.sizebutton\n          // Button was designed at 2.9 * var(--s) scale font so\n          // this just lets user redefine font & everything else proportionally\n            ? `calc(${props.sizebutton}/2.9 * var(--s))`\n            : `calc(2.5/2.9 * var(--s))`\n        ) as React.CSSProperties\n      } }\n      {...props}\n      className={ [\n        styles.roundButtonWrap,\n        props.back ? styles.back : '',\n        props.className\n      ].join(' ') }\n    >\n      <div\n        className={ [\n          styles.roundButton,\n          props.back ? styles.backArrowPad : undefined,\n          props.next ? styles.nextArrowPad : undefined,\n        ].join(' ') }\n      >\n\n        { (props.back) && (\n          <div\n            className={ styles.backArrow }\n          />\n        ) }\n\n        { props.children }\n\n        { (props.next) && (\n          <div\n            className={ styles.nextArrow }\n          />\n        ) }\n\n        <div\n          className={ styles.overhead }\n        />\n      </div>\n    </div>\n  )\n}\n","import { I_State, I_Action, ActionTypes } from '../../interfaces'\nimport { initialState } from './../'\nconst {\n  STORE_SEARCH_RESULTS_FAIL,\n  STORE_SEARCH_RESULTS,\n  TYPING,\n  NEW_WALLET,\n  CHANGE_PAGE_INFO,\n  UPDATE_WALLET,\n  UPDATE_DOMAIN,\n  ACTION_FAIL,\n  LOAD_STATE,\n  CHOICES_BNS_ACTION\n} = ActionTypes\n\n/**\n * Reducer edits global state via information in payload.\n * Action is object { payload, type }.\n * type describes what type of changes to global state to make.\n * payload contains data provided to make those changes.\n */\nexport default function reducer (state: I_State, action: I_Action): I_State {\n  const { payload } = action\n\n  switch (action.type) {\n\n    case CHOICES_BNS_ACTION: {\n      // BNS action chosen\n      return {\n        ...state,\n        choices: {\n          ...state.choices,\n          ...payload\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case UPDATE_WALLET: {\n      // after full scan of the wallet address\n      return {\n        ...state,\n        wallet: {\n          ...state.wallet, // wif/mnemonic/address unchanged\n          txHistory: payload.wallet.txHistory,\n          utxoList: payload.wallet.utxoList\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedWallet: true\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case UPDATE_DOMAIN: {\n      return {\n        ...state,\n        domain: {\n          ...payload.domain\n        },\n        chain: {\n          height: payload.chain.height\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedDomain: true\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case CHANGE_PAGE_INFO:\n      // navigation info for controlling domains\n      return {\n        ...state,\n        pageInfo: {\n          ...state.pageInfo,\n          current: payload\n        }\n      }\n\n    case NEW_WALLET: {\n      // store totally new wallet object\n      return {\n        ...state,\n        wallet: {\n          ...initialState.wallet,\n          address: payload.address,\n          mnemonic: payload.mnemonic,\n          WIF: payload.WIF\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedWallet: false\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case STORE_SEARCH_RESULTS: {\n      // store results of looking up totally new alias\n      // update notifications and ownership information\n\n      return {\n        ...state,\n        alias: payload.alias,\n        domain: {\n          ...initialState.domain,\n          ...payload.domain\n        },\n        chain: {\n          height: payload.chain.height\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedDomain: false,\n          checkedLightSearch: true\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case STORE_SEARCH_RESULTS_FAIL: {\n      // store results of looking up totally new alias\n      // reset notifications and ownership information\n      return {\n        ...state,\n        alias: payload.alias,\n        domain: {\n          ...initialState.domain,\n          domainName: payload.domainName,\n          notificationAddress: payload.notificationAddress\n        },\n        pageInfo: {\n          ...state.pageInfo,\n          checkedDomain: false,\n          checkedLightSearch: false\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case TYPING: {\n      // change of alias part of domain name\n      // this change renders owner and notification information outdated\n      return {\n        ...state,\n        alias: payload,\n        domain: initialState.domain,\n        pageInfo: {\n          ...state.pageInfo,\n          current: 1,\n          checkedDomain: false,\n          checkedLightSearch: false\n        },\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case ACTION_FAIL: {\n      return {\n        ...state,\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    case LOAD_STATE: {\n      return {\n        ...payload,\n        lastTimeStamp: Date.now()\n      }\n    }\n\n    default: {\n      console.warn('Unknown action type')\n      return state\n    }\n  }\n}\n\n// can split maybe like this later if gets too long\n// https://dev.to/vanderleisilva/global-state-management-with-react-hooks-and-context-5f6h\n\n","import React from 'react'\nimport { I_State, BnsBidType } from '../interfaces'\nimport reducer from './reducers/Reducer'\nimport { newState } from './../helpers/bns/initialState'\n\n// Change state process:\n// 1. Component calls action from src/store/actions/\n// 2. Action does stuff (e.g. API calls) and dispatches results to reducer in src/store/reducer/\n// 3. Reducer modifies state based on dispatched payload and type of action.\n\n/* -------------------------------------------------------------------------- */\n/*                                initial state                               */\n/* -------------------------------------------------------------------------- */\nexport const initialState: I_State = {\n  network: 'testnet',             // 'testnet' or 'bitcoin'\n  alias: 'satoshi',               // first half of domain name\n  extension: '.btc',              // last half of domain name\n  domain: newState.domain,        // using BNS equivalent domain object\n  wallet: {                       // wallet information & utxo for controlling domain names\n    address: '',                  // public address (p2wpkh)\n    mnemonic: '',                 // mnemonic for private key derivation\n    WIF: '',                      // wallet import format for private key derivation\n    txHistory: [],                // array of all tx for this address\n    utxoList: [],                 // array of all current utxo for this address\n  },\n  chain: {\n    height: 0                     // height of blockchain\n  },\n  pageInfo: {                     // user navigation information for controlling domain name\n    current: 1,\n    checkedDomain: false,         // current domain notification address was scanned\n    checkedWallet: false,         // current wallet address was scanned\n    checkedLightSearch: false     // if light search was done (no utxo / txhex scan)\n  },\n  choices: {                      // choices made by user via this app\n    action: {},                   // choices and data for action to take\n    feeRate: 1.1,                 // fee rate to use in sat/bByte,\n    txHex: '',                    // hex of raw transaction, ideally ready for broadcast\n    embedString: ''               // string to embed in op_return\n  },\n  lastTimeStamp: Date.now(),      // last change timestamp, to detect any changes to state or time out\n}\n\n\n/* -------------------------------------------------------------------------- */\n/*                             Global state setup                             */\n/* -------------------------------------------------------------------------- */\nexport const Store = React.createContext<any>(initialState)\n// returns object with .Provider and .Consumer\n// Provider makes context available to all child components no matter how deep\n\n// creates wrapping element for global state\nexport function StoreProvider ({ children }: JSX.ElementChildrenAttribute): JSX.Element {\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n  return (\n    <Store.Provider value={{ state, dispatch }}>\n      { children }\n    </Store.Provider>\n  )\n}\n\n/* -------------------------------------------------------------------------- */\n/*                         Helper functions for state                         */\n/* -------------------------------------------------------------------------- */\n\n/**\n * get owner based on state, or undefined\n */\nexport const getOwner = (st: I_State) => {\n  const ownerAddress = st.domain.currentOwner\n  return st.domain.users[ownerAddress]\n}\n\n/**\n * Undefined if no user, otherwise existing user.\n */\nexport const getUser = (st: I_State, address: string) => {\n  return st.domain.users[address]\n}\n\n/**\n * Get if bidding for ownership period is happening and bidding object.\n */\nexport const getBidding = (st: I_State) => {\n  const bidding = st.domain.bidding\n  return {\n    isBurn: bidding.type === BnsBidType.BURN,\n    bidding\n  }\n}\n","/**\r\n * Takes in a string of interest inputString\r\n * and Array of strings or string describing filter.\r\n * Returns the string of interst with only characters present in filters selected.\r\n */\r\nexport default function  sanitize (inputString, stringOrArray) {\r\n  // get choice input into same form of array of string(s) of choices\r\n  let choices; // :string | Array<string>\r\n  if (Array.isArray(stringOrArray)) {\r\n    choices = stringOrArray;\r\n  }\r\n  if (typeof stringOrArray === 'string') {\r\n    choices = [stringOrArray];\r\n  }\r\n\r\n  // add each choice to filter selection\r\n\r\n  // string mask\r\n  let filter = '';\r\n  // array of functions\r\n  const logicFilters = [];\r\n\r\n  choices.forEach(choice => {\r\n\r\n    // short masks\r\n    if (choice === 'numbers') {\r\n      filter += '0123456789';\r\n    }\r\n    if (choice === 'decimal_point') {\r\n      filter += '.';\r\n    }\r\n    if (choice === 'hex') {\r\n      filter += '0123456789abcdefABCDEF';\r\n    }\r\n    if (choice === 'lowcaps') {\r\n      filter += 'abcdefghijklmnopqrstuvwxyz';\r\n    }\r\n    if (choice === 'highcaps') {\r\n      filter += 'ABCDEFGHIJKLMNOPQRSTUVWYZ';\r\n    }\r\n    if (choice === 'spaces') {\r\n      filter += ' ';\r\n    }\r\n\r\n    // longer masks\r\n    if (choice === 'base58') {\r\n      // https://en.wikipedia.org/wiki/Base58#cite_note-3\r\n      filter += '12345689ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\r\n    }\r\n    if (choice === 'basic') {\r\n      filter += '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    }\r\n    if (choice === 'oneline') {\r\n      filter += '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,./-_!`~[]{}|@#%^&()-=?$';\r\n    }\r\n    if (choice === 'url') {\r\n      //  RFC 3986 (Section 2: Characters) 84 total\r\n      filter += `0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:/?#[]@!$&'()*+,;=-_.~`;\r\n    }\r\n\r\n    // ========================================================\r\n    // functions\r\n    // adds anon function to array of functions\r\n\r\n    if (choice === 'no_spaces') {\r\n      logicFilters.push(str =>\r\n        str.split('')\r\n          .filter(letter => letter !== ' ')\r\n          .join(''))\r\n    }\r\n\r\n    if (choice === 'single_space_width') {\r\n      logicFilters.push(str =>\r\n        // split by 2+ spaces and replace with single space\r\n        str.split(/  */).join(' ')\r\n      )\r\n    }\r\n\r\n    // keep only first decimal point\r\n    if (choice === 'decimal_point') {\r\n\r\n      logicFilters.push(str =>\r\n        (str\r\n          // splits to array between .\r\n          .split('.')\r\n          // join first 2 elements with ., others with empty string\r\n          // returns a string\r\n          .reduce((resultingString, numbers, index) => {\r\n            // real . goes b/w array's index 0 and 1, even if string had . first\r\n            const digits = (index === 0 && numbers === '') ? '0' : numbers\r\n            return (index === 1)\r\n              ? [ resultingString, digits ].join('.')\r\n              : [ resultingString, digits ].join('')\r\n          }, '')\r\n        )\r\n      )\r\n    }\r\n\r\n    if (choice === 'no_leading_zeros') {\r\n\r\n      logicFilters.push(str =>\r\n        (str\r\n          // splits to array between .\r\n          .split('.')\r\n          .map((numbers, index) => {\r\n            if (index === 0) {\r\n              return (parseInt(numbers, 10) || 0).toString()\r\n            } else {\r\n              return numbers\r\n            }\r\n          })\r\n          .join('.')\r\n        )\r\n      )\r\n    }\r\n\r\n  })\r\n\r\n  if (filter.length === 0 && logicFilters.length === 0) {\r\n    console.warning('sanitize used w/o any known filters', stringOrArray)\r\n  }\r\n\r\n  let outputString = '';\r\n\r\n  // apply string mask to only keep characters within filter string\r\n  outputString = inputString\r\n    .split('')\r\n    .filter(letter => filter.indexOf(letter) > -1)\r\n    .join('');\r\n\r\n  // use every selected logic function on the outputString\r\n  logicFilters.forEach(fn => outputString = fn(outputString))\r\n\r\n  return outputString;\r\n}\r\n\r\n\r\n// function sanitizeOld (inString, type) {\r\n//   let filter;\r\n//   if (type === 'base58') {\r\n//     // https://en.wikipedia.org/wiki/Base58#cite_note-3\r\n//     filter = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\r\n//   } else if (type === 'hex') {\r\n//     filter = '0123456789abcdef';\r\n//   } else if (type === 'basic') {\r\n//     filter = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n//   } else if (type === 'numbers') {\r\n//     filter = '0123456789';\r\n//   } else if (type === 'fractions') {\r\n//     filter = '0123456789.';\r\n//   } else if (type === 'oneline') {\r\n//     filter = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,./-_!`~[]{}|@#%^&()-=?$';\r\n//   } else if (type === 'url') {\r\n//     filter = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ./-_';\r\n//   } else {\r\n//     console.log('sanitize: valid type not provided');\r\n//     return undefined;\r\n//   }\r\n\r\n//   const res = inString\r\n//     .split('')\r\n//     .filter(letter => filter.indexOf(letter) > -1)\r\n//     .join('');\r\n\r\n//   return res;\r\n// }","import { I_State, Dispatch } from '../../interfaces'\nimport sanitize from '../../helpers/sanitize'\nimport { ActionTypes } from './../../interfaces'\nconst { TYPING } = ActionTypes;\n\n/**\n * Cleans up the entered string including removing next line characters\n */\nexport const changeAliasAction = async (state: I_State, dispatch: Dispatch, value: any) => {\n  // clean up the string\n  const newString = value\n  const sanitizedString = sanitize(newString, 'url')\n\n  return dispatch({\n    type: TYPING,\n    payload: sanitizedString\n  })\n}\n","import {\n  I_BnsState,\n  BnsActionType,\n  I_BNS_Action,\n  I_BNS_Auto_Action,\n  I_Condition,\n  I_TX,\n  BnsBidType\n} from './../types/'\nimport { MIN_NOTIFY, MIN_BURN } from './../constants'\nimport {\n  existsCurrentOwner,\n  isOwnerExpired,\n  clearOwner,\n  getParsedHeight,\n  atLeastTwoOutputs,\n  isNotify,\n  isOpreturnOutput0,\n  didNotifyMin,\n  didBurnMin,\n  setOwner,\n  getOwner,\n  getUser,\n  getTxInput0SourceUserAddress,\n  getTxHeight,\n  getTxTimestamp,\n  isAddressTheCurrentOwner,\n  burnedPreviousRateMin,\n  readEmbeddedData,\n  getLastOwnerBurnedValue,\n  isSenderTheCurrentOwner,\n  updateUtxoFromTx,\n  noUnspentUserNotificationsUtxo,\n  getNotificationAddress,\n  isCommandCalled,\n  getCommandCalled,\n  existsUser,\n  createNewUser,\n  addBid,\n  isBiddingOver,\n  endBidding\n} from './../formathelpers'\nconst {\n  RENEW,\n  ONLY_FORWARDS,\n  CLAIM_OWNERSHIP,\n  SEND_OWNERSHIP,\n  CHANGE_ADDRESS\n} = BnsActionType\n\n\n/* -------------------------------------------------------------------------- */\n/*                          Conditoins / Permissions                          */\n/* -------------------------------------------------------------------------- */\n\n// Called by the actions for conditions\n// Return object with \"info\": describing condition (accessible w/o tx),\n// \"status\" to check conditoin (accessible w/o tx),\n// and optional \"special\" to give transaction forming specifications (accessible w/o tx)\n\nconst OUTS_2 = ({ tx=undefined }: any = {}): I_Condition => ({\n  status: () => atLeastTwoOutputs(tx),\n  info: { describe: 'Tx must have 2+ outputs' }\n})\n\nconst OUT_0 = ({ tx=undefined }: any = {}): I_Condition => ({\n  status: () => isOpreturnOutput0(tx),\n  info: { describe: 'Tx must have OP_RETURN @ output[0]' }\n})\n\nconst OUT_1 = ({ st, tx=undefined }: any = {}): I_Condition => ({\n  status: () => isNotify(st, tx),\n  info: { describe: 'Tx must have notification address @ output[1]' }\n})\n\nconst NOTIFIED_MIN = ({ tx=undefined }: any = {}): I_Condition => ({\n  status: () => didNotifyMin(tx),\n  info: { describe: `Tx must have minimum ${MIN_NOTIFY} @ output[1]` }\n})\n\nconst BURNED_MIN = ({ tx=undefined }: any = {}): I_Condition => ({\n  status: () => didBurnMin(tx),\n  info: {\n    describe: `Tx must burn ${MIN_BURN} @ output[0]`,\n    set: { name: 'output 0 value', value: MIN_BURN }\n  }\n})\n\nconst NO_OWNER = ({ st }: any = {}): I_Condition => ({\n  status: () => !existsCurrentOwner(st),\n  info: { describe: 'There must not be an existing owner' }\n})\n\nconst EXISTS_OWNER = ({ st }: any = {}): I_Condition => ({\n  status: () => existsCurrentOwner(st),\n  info: { describe: 'There must be existing owner' }\n})\n\nconst BURN_LAST_WIN = ({ st, tx=undefined }: any = {}): I_Condition => ({\n  status: () => burnedPreviousRateMin(st, tx),\n  info: {\n    describe: 'Tx must burn the last ownership winning burn amount',\n    set: { value: getLastOwnerBurnedValue(st), name: 'output 0 value' }\n  }\n})\n\n// calculated based on tx if available, otherwise address\nconst USER_IS_OWNER = ({ st, address, tx=undefined }: any = {}): I_Condition => ({\n  status: () => tx ? isSenderTheCurrentOwner(st, tx) : isAddressTheCurrentOwner(st, address),\n  info: { describe: `User's address must match owner's address` }\n\n})\n\nconst IS_OWNER_EXPIRED = ({ st }: any = {}): I_Condition => ({\n  status: () => isOwnerExpired(st),\n  info: { describe: 'Ownership must be expired at current parsed height' }\n\n})\n\nconst NO_UNSPENT_USER_NOTIFICATIONS_UTXO = ({ st, tx=undefined }: any = {}): I_Condition => ({\n  status: () => noUnspentUserNotificationsUtxo(st, tx),\n  info: { describe: 'There must not be any remaining notification address utxo created by sender' }\n})\n\nconst USER_ADDRESS_NOT_NOTIFICATION_ADDRESS = ({ st, tx=undefined }: any = {}): I_Condition => ({\n  status: () => (getNotificationAddress(st) !== getTxInput0SourceUserAddress(tx)),\n  info: { describe: 'Do not accidentally send from notification address at input[0]' }\n})\n\nconst IS_COMMAND_CALLED = ({ st, command, tx=undefined }: any = {}): I_Condition => ({\n  status: () => (isCommandCalled(st, tx as I_TX, command)),\n  info: { describe: 'Command must be present in forwards at this tx height from tx user' }\n})\n\nconst IS_BIDDING_OVER = ({ st }: any = {}): I_Condition => ({\n  status: () => (isBiddingOver(st)),\n  info: { describe: 'The bidding period must be over but not resolved' }\n})\n\n/* -------------------------------------------------------------------------- */\n/*                         Suggestions (and warnings)                         */\n/* -------------------------------------------------------------------------- */\n\nconst SUGGESTION_SUBMIT_NEW_ADDRESS = ({ command }: any = {}): I_Condition => ({\n  status: () => true,\n  info: {\n    describe: 'Submit your new address (forwards are kept)',\n    get: { value: '', name: 'Your new address' },\n    command\n  }\n})\n\nconst SUGGESTION_SUBMIT_NEW_OWNER_ADDRESS = ({ command }: any = {}): I_Condition => ({\n  status: () => true,\n  info: {\n    describe: 'Submit new owner\\'s address (forwards are not copied)',\n    get: { value: '', name: 'New owner\\'s address' },\n    command\n  }\n})\n\nconst WARNING_POINTLESS_IF_NOT_OWNER = (args: any): I_Condition => ({\n  status: () => true,\n  info: {\n    describe: 'Action not recommended for non-owners',\n    warning: !USER_IS_OWNER(args)?.status() ? 'Useless unless you are the owner or will be owner in future' : undefined\n  }\n})\n\n/* -------------------------------------------------------------------------- */\n/*                           User's possible actions                          */\n/* -------------------------------------------------------------------------- */\n\n// Describe: If no owner, sender can start process to claim ownership\n// Since autoChecks run before user action checks in calcBnsState,\n// after bidding ends owner will be set by time this is checked.\nexport const bidForOwnershipAction = (st: I_BnsState | null, tx: any = undefined): I_BNS_Action => {\n\n  const args = { st, tx }\n\n  const type = CLAIM_OWNERSHIP\n\n  const info = 'Bid for ownership of an available domain'\n\n  const permissions = [\n    // this means no more bids when there's a winner\n    NO_OWNER\n  ]\n\n  const conditions = [\n    // minimum rules to counting tx still apply for bids\n    OUTS_2,\n    OUT_0,\n    OUT_1,\n    NOTIFIED_MIN,\n    NO_UNSPENT_USER_NOTIFICATIONS_UTXO,\n    USER_ADDRESS_NOT_NOTIFICATION_ADDRESS,\n\n    // at very least minimum is burnt, the rest is derived\n    BURNED_MIN\n  ]\n\n  const execute = !st ? () => {} : () => {\n    // have to start or add to bidding\n    // ownership will be derived through automatic check based on bidding started here\n    addBid(st, tx, BnsBidType.BURN)\n  }\n\n  return {\n    permissions: st ? permissions.map(permission => permission(args)) : permissions,\n    conditions: st ? conditions.map(condition => condition(args)) : conditions,\n    args, info, type, execute\n  }\n\n  // need to get user input on burn amount possible minimum (general action guidance)\n  // also needs some guidance for refunds necessary to win (general action guidance)\n\n}\n\n/**\n * Change address. (similar to send ownership, but keeps forwards)\n * network: '!ca'\n * address: 'newaddress'\n */\nexport const changeAddressAction = (st: I_BnsState | null, address: string = '', tx: any = undefined): I_BNS_Action => {\n\n  const command = '!ca'\n\n  const args = { st, address, tx, command }\n\n  const type = CHANGE_ADDRESS\n\n  const info = 'Update your ownership address'\n\n  const permissions = [\n    USER_IS_OWNER,\n\n    // suggestions\n    SUGGESTION_SUBMIT_NEW_ADDRESS\n  ]\n\n  const conditions = [\n    OUTS_2,\n    OUT_0,\n    OUT_1,\n    NOTIFIED_MIN,\n    NO_UNSPENT_USER_NOTIFICATIONS_UTXO,\n    USER_ADDRESS_NOT_NOTIFICATION_ADDRESS,\n\n    IS_COMMAND_CALLED\n  ]\n\n  const execute = !st ? () => {} : () => {\n    const thisCommand = getCommandCalled(st, tx, command)\n    const newAddress = thisCommand?.address;\n    if (!newAddress) {\n      console.log('ownership transfer detected, but no address found')\n    } else {\n      // quite possible user doesn't exist so create blank one\n      if (!existsUser(st, newAddress)) createNewUser(st, newAddress)\n\n      // new owner is created and given old owner's ownership data\n\n      const oldOwner = getOwner(st)\n      setOwner(st, newAddress)\n      // one of conditions is USER_IS_OWNER so there is owner\n      getUser(st, newAddress).winHeight = oldOwner!.winHeight\n      getUser(st, newAddress).winTimestamp = oldOwner!.winTimestamp\n      getUser(st, newAddress).burnAmount = oldOwner!.burnAmount\n      // clone forwards\n      getUser(st, newAddress).forwards = JSON.parse(JSON.stringify(oldOwner!.forwards))\n      // for new user, no changes to updateHeight, nonce\n\n      // old owner loses ownership data\n      oldOwner!.winHeight = 0\n      oldOwner!.winTimestamp = 0\n      oldOwner!.burnAmount = 0\n      // nonce, forwards (not active now), update height are not touched\n      console.log('ownership transfered from', oldOwner!.address, 'to', newAddress)\n    }\n  }\n\n  return {\n    permissions: st ? permissions.map(permission => permission(args)) : permissions,\n    conditions: st ? conditions.map(condition => condition(args)) : conditions,\n    args, info, type, execute\n  }\n}\n\n/**\n * Send ownership to another address. Forwards are not kept.\n * network: '!so'\n * address: 'newaddress'\n */\nexport const sendOwnershipAction = (st: I_BnsState | null, address: string = '', tx: any = undefined): I_BNS_Action => {\n\n  const command = '!so'\n\n  const args = { st, address, tx, command }\n\n  const type = SEND_OWNERSHIP\n\n  const info = 'Give up ownership to another address'\n\n  const permissions = [\n    USER_IS_OWNER,\n\n    // suggestions\n    SUGGESTION_SUBMIT_NEW_OWNER_ADDRESS,\n  ]\n\n  const conditions = [\n    OUTS_2,\n    OUT_0,\n    OUT_1,\n    NOTIFIED_MIN,\n    NO_UNSPENT_USER_NOTIFICATIONS_UTXO,\n    USER_ADDRESS_NOT_NOTIFICATION_ADDRESS,\n\n    IS_COMMAND_CALLED\n  ]\n\n  const execute = !st ? () => {} : () => {\n    const thisCommand = getCommandCalled(st, tx, command)\n    const newAddress = thisCommand?.address;\n    if (!newAddress) {\n      console.log('ownership transfer detected, but no address found')\n    } else {\n      // quite possible user doesn't exist so create blank one\n      if (!existsUser(st, newAddress)) createNewUser(st, newAddress)\n\n      // new owner is created and given old owner's ownership data\n\n      const oldOwner = getOwner(st)\n      setOwner(st, newAddress)\n      // one of conditions is USER_IS_OWNER so there is owner\n      getUser(st, newAddress).winHeight = oldOwner!.winHeight\n      getUser(st, newAddress).winTimestamp = oldOwner!.winTimestamp\n      getUser(st, newAddress).burnAmount = oldOwner!.burnAmount\n      // for new user, no changes to updateHeight, nonce, or forwards\n\n      // old owner loses ownership data\n      oldOwner!.winHeight = 0\n      oldOwner!.winTimestamp = 0\n      oldOwner!.burnAmount = 0\n      // nonce, forwards (not active now), update height are not touched\n\n      console.log('ownership transfered from', oldOwner!.address, 'to', newAddress)\n    }\n  }\n\n  return {\n    permissions: st ? permissions.map(permission => permission(args)) : permissions,\n    conditions: st ? conditions.map(condition => condition(args)) : conditions,\n    args, info, type, execute\n  }\n\n}\n\n\n// Describe: If from current owner & burned past winning minimum, extend ownership.\nexport const currentOwnerRenewAction = (\n  st: I_BnsState | null,\n  address: string = '',\n  tx: any = undefined\n): I_BNS_Action => {\n\n  const args = { st, address, tx }\n\n  const type = RENEW\n\n  const info = 'Extend ownership of this domain'\n\n  const permissions = [\n    USER_IS_OWNER\n  ]\n\n  const conditions = [\n    OUTS_2,\n    OUT_0,\n    OUT_1,\n    NOTIFIED_MIN,\n    NO_UNSPENT_USER_NOTIFICATIONS_UTXO,\n    USER_ADDRESS_NOT_NOTIFICATION_ADDRESS,\n\n    BURNED_MIN,\n    BURN_LAST_WIN\n  ]\n\n  const execute = !st ? () => {} : () => {\n    const owner = getOwner(st)\n    // set owner's win height to current tx height therefore updating ownership\n    owner && (owner.winHeight = getTxHeight(tx))\n    owner && (owner.winTimestamp = getTxTimestamp(tx))\n    console.log(\n      `${ st.domain.domainName } : ${ getTxHeight(tx) } height: owner extended ownership ${ owner?.address }`\n    )\n  }\n\n  return {\n    permissions: st ? permissions.map(permission => permission(args)) : permissions,\n    conditions: st ? conditions.map(condition => condition(args)) : conditions,\n    args, info, type, execute\n  }\n}\n\n// Describe: update forwarding information.\nexport const updateForwardingInfoAction = (\n  st: I_BnsState | null,\n  address: string = '',\n  tx: any = undefined\n): I_BNS_Action => {\n\n  const args = { st, address, tx }\n\n  const type = ONLY_FORWARDS\n\n  const info = 'Only update forwarding information'\n\n  const permissions = [\n    // suggestions\n    WARNING_POINTLESS_IF_NOT_OWNER\n  ]\n\n  const conditions = [\n    OUTS_2,\n    OUT_0,\n    OUT_1,\n    NOTIFIED_MIN,\n    NO_UNSPENT_USER_NOTIFICATIONS_UTXO,\n    USER_ADDRESS_NOT_NOTIFICATION_ADDRESS\n  ]\n\n  const execute = !st ? () => {} : () => {\n    readEmbeddedData(st, tx)\n  }\n\n  return {\n    permissions: st ? permissions.map(permission => permission(args)) : permissions,\n    conditions: st ? conditions.map(condition => condition(args)) : conditions,\n    args, info, type, execute\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                              Automatic Actions                             */\n/* -------------------------------------------------------------------------- */\n\n// Describe: if OWNERSHIP_DURATION_BY_BLOCKS blocks since ownership update, no owner again\nexport const autoCheckForOwnerExpiredAction = (st: I_BnsState): I_BNS_Auto_Action => {\n  const args = { st }\n  return {\n    info: 'Existing ownerships that expire are removed',\n\n    conditions: [\n      EXISTS_OWNER(args),\n      IS_OWNER_EXPIRED(args)\n    ],\n\n    execute: () => {\n      clearOwner(st)\n      console.log(st.domain.domainName, getParsedHeight(st), 'ownership expired')\n    }\n  }\n}\n\n// Describe: always uses this tx to update derivedUtxoList of the domain notificatin address\nexport const updateUtxoFromTxAction = (st: I_BnsState, tx: I_TX): I_BNS_Auto_Action => {\n  return {\n    info: 'Update derivedUtxoList from new tx',\n\n    conditions: [],\n\n    execute: () => {\n      updateUtxoFromTx(st, tx)\n    }\n  }\n}\n\n// Describe: update bidding winner and owner\nexport const autoCheckForBiddingWinnerNewOwnerAction = (st: I_BnsState): I_BNS_Auto_Action => {\n  const args = { st }\n  return {\n    info: 'Derive the new owner from bidding period',\n\n    conditions: [\n      NO_OWNER(args),\n      IS_BIDDING_OVER(args)\n    ],\n\n    execute: () => {\n      endBidding(st)\n\n      console.log('bidding period is over')\n    }\n  }\n}\n","import {\n  currentOwnerRenewAction,\n  bidForOwnershipAction,\n  autoCheckForOwnerExpiredAction,\n  updateForwardingInfoAction,\n  updateUtxoFromTxAction,\n  sendOwnershipAction,\n  changeAddressAction,\n  autoCheckForBiddingWinnerNewOwnerAction\n} from './actions'\nimport { I_BnsState, I_TX, I_Condition } from './../types/'\n\n\n\n\n/**\n * Returns what actions are available for specific user address at current state.\n */\nexport const runAllActionPermissionChecks = (st: I_BnsState, address: string) => {\n  console.log('currentOwnerRenewAction running:')\n\n  // Edit this list to include more actions for checks\n  // (address here only at best, tx not necessary or possible)\n  const allActions = [\n    updateForwardingInfoAction(st, address),\n    currentOwnerRenewAction(st, address),\n    bidForOwnershipAction(st),\n\n    sendOwnershipAction(st, address),\n    changeAddressAction(st, address)\n  ]\n\n  // check which actions are doable\n  const checkedActions: any[] = []\n  allActions.forEach(action => {\n\n    // check each permission in each action\n    const checkedPermissions: any[] = []\n    action.permissions.forEach((permission: any) => {\n      const isAllowed = permission.status()\n\n      // add to list of permissions checked in this action & their display info\n      checkedPermissions.push({\n        isAllowed,\n        ...permission\n      })\n    })\n\n    // grab every condition (for info)\n    const actionSuggestions: any[] = []\n    action.permissions.forEach((permission: any) => {\n      actionSuggestions.push(permission)\n    })\n    action.conditions.forEach((condition: any) => {\n      actionSuggestions.push(condition)\n    })\n\n\n    // add to list of all actions with summary of all their permissions checks\n    checkedActions.push({\n      type: action.type,\n      info: action.info,\n      isUsable: checkedPermissions.every(permission => permission.isAllowed),\n      permissionList: checkedPermissions,\n      suggestions: actionSuggestions\n    })\n  })\n\n  // return array of doable actions\n  return checkedActions\n}\n\n/****************************************************************************************\n * Executes all actions possible by user that sent tx.\n * Nothing returned.\n */\nexport const runAllUserActions = (st: I_BnsState, tx: I_TX): void => {\n\n  // edit this list (tx here, address not necessary)\n  const allUserActions = [\n    updateForwardingInfoAction(st, undefined, tx),  // reads embedded data\n    currentOwnerRenewAction(st, undefined, tx),     // renew ownership\n    bidForOwnershipAction(st, tx),                   // new ownership\n\n    // giving up ownership should go last in case user state needs to be edited first\n    sendOwnershipAction(st, undefined, tx),         // give up ownership to another\n    changeAddressAction(st, undefined, tx)          // change your ownership address\n  ]\n\n  allUserActions.forEach((action: any) => {\n\n    // check that all conditions & permissions are true\n    const okConditions = action.conditions.reduce(\n      (areAllConditionsMet: boolean, eaCondition: any) => areAllConditionsMet && eaCondition.status()\n    , true)\n\n    const okPermissions = action.permissions.reduce(\n      (areAllPermissionsMet: boolean, eaPermission: any) => areAllPermissionsMet && eaPermission.status()\n    , true)\n\n    if (okConditions && okPermissions) action.execute()\n  })\n}\n\n/****************************************************************************************\n * Executes non-user actions like ownership expiration over time or deriving new UTXO.\n * Nothing returned.\n */\nexport const runAllAutomaticActions = (st: I_BnsState, tx: I_TX | undefined): void => {\n\n  // list of all automatic actions\n  const allAutoChecks = [\n    autoCheckForOwnerExpiredAction(st),\n    tx ? updateUtxoFromTxAction(st, tx) : undefined,\n    autoCheckForBiddingWinnerNewOwnerAction(st)\n  ]\n\n  allAutoChecks.forEach(action => {\n    if (!!action) {\n      // check that all conditions are true\n      const ok = action.conditions.reduce(\n        (areAllConditionsMet: boolean, eaCondition: I_Condition ) => (\n          areAllConditionsMet && eaCondition.status()\n        ), true)\n      if (ok) action.execute()\n    }\n  })\n}\n\n/****************************************************************************************\n * Simply returns all user actions without any fed parameters\n */\nexport const scanEveryActionForCommand = () => {\n  // list of all actions to check\n  const actions = [\n    updateForwardingInfoAction(null),\n    currentOwnerRenewAction(null),\n    bidForOwnershipAction(null),\n\n    sendOwnershipAction(null),\n    changeAddressAction(null)\n  ]\n  return actions\n}\n\n// (TODO) rewrite so don't have to list same user actiosn 5 times w/ diff arguments, more generalized","import { calcP2WSH } from './calcP2WSH'\nimport { newState } from './initialState'\nimport * as actions from './actions'\nimport { I_BnsState } from './types'\nimport {\n  setParsedHeight,\n  updateSourceUserFromTx,\n  getTxHeight,\n  updateOwnerHistory\n } from './formathelpers'\n\n/**\n * Returns ownership and notification information objects.\n * @param   {Array<any>}  notificationsHistory  - Array of any tx with notificationsAddress.\n * @param   {string}      domainName            - Full domainName to use (e.g. 'satoshi.btc').\n * @param   {number}      currentHeight         - Current blockheight of the network chain selected.\n * @param   {string}      networkChoice         - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @returns {I_BnsState}                         - BNS state describing object.\n */\nexport const calcBnsState = (\n  notificationsHistory: Array<any>,\n  domainName: string,\n  currentHeight: number,\n  networkChoice: string\n): I_BnsState => {\n\n  // initialize temporary derivation state\n  const st = JSON.parse(JSON.stringify(newState)); // deep object clone\n  st.domain.domainName = domainName\n  st.chain && (st.chain.currentHeight = currentHeight)\n  st.domain.notificationAddress = calcP2WSH(domainName, networkChoice)?.notificationsAddress || ''\n\n  // Sorting history from earliest to latest\n  // reversing should speed it up if not complete it\n  st.domain.txHistory = (notificationsHistory\n    .slice().reverse()\n    .sort((prev, next) => {\n      const prevBlockHeight = prev.status.block_height\n      const nextBlockHeight = next.status.block_height\n      return prevBlockHeight - nextBlockHeight\n    })\n  )\n\n  // iterate with blockheights of relevant tx to derive st state\n  // Each tx blockheight serves as reference time\n  st.domain.txHistory.forEach((tx: any) => {\n\n    // update current chain's parsed height based on tx confirmed height\n    setParsedHeight(st, getTxHeight(tx))\n\n    // update or create new basic user info based on source address @ input0\n    // this includes user's NONCE set to height of the user's tx prior to this one\n    updateSourceUserFromTx(st, tx)\n\n    // check if owner expired & update derivedUtxo\n    actions.runAllAutomaticActions(st, tx)\n\n    // run all possible actions\n    // starting with reading embedded data\n    actions.runAllUserActions(st, tx)\n\n    // update nonce\n    // after this tx, this tx height is the last tx height, so the new nonce\n    updateSourceUserFromTx(st, tx)\n\n    // update ownership history each tx even if not owner\n    updateOwnerHistory(st)\n  })\n\n  // final check for current block height\n  setParsedHeight(st, currentHeight)\n\n  // check if owner expired\n  actions.runAllAutomaticActions(st, undefined)\n\n  return st\n}\n\n","import { I_Forward } from '../types'\n/**\n * Returns array with only latest forwards from array of all forwards.\n * Removes actions, ones that start with \"!\" and ones that are blank addresses.\n */\nexport const findLatestForwards = (forwards: Array<I_Forward>): Array<I_Forward> => {\n  // simplest would be to go through object where keys of cloned network would overwrite\n  // sort first for simplicity\n  const sortedForwards = [...forwards].sort((prev, next) => {\n    // sorts by index proportional to block height and time\n    const prevHeight = prev.updateHeight\n    const nextHeight = next.updateHeight\n    return prevHeight - nextHeight\n  })\n  // now just overwrite values for same networks in order of sorted array\n  const currentNetworks: {[key: string]: I_Forward} = {}\n  sortedForwards.forEach(eaForward => {\n    // add all networks that are not commands\n    const isNotCommand = !eaForward.network.startsWith('!')\n    if (isNotCommand) {\n      currentNetworks[eaForward.network] = eaForward\n    }\n    // if the final address is blank, delete it from object\n    const isDeleted = eaForward.address === ''\n    if (isDeleted) {\n      delete currentNetworks[eaForward.network]\n    }\n  })\n\n  // return just array of values, networks still part of values as well\n  return [...Object.values(currentNetworks)]\n}\n","import { scanEveryActionForCommand } from './../actions/batch'\n\n/**\n * Can grab simple words that explain what command does/did for visualization if found.\n * Otherwise, returns undefined.\n */\nexport const interpretCommand = (key: string, value: string) => {\n\n  // grab all basic action objects\n  const allActions = scanEveryActionForCommand()\n\n\n  // scan each for matching commmand\n  let action\n  for (let i = 0; i < allActions.length; i++) {\n    if (key.startsWith(allActions[i].args.command)) {\n      action = allActions[i]\n      break\n    }\n  }\n\n  if (!action) return undefined\n\n  // scan for getters within\n  let getterName\n  for (let i = 0; i < action.permissions.length; i++) {\n    if ('get' in action.permissions[i]().info) {\n      console.log(action.permissions[i]())\n      getterName = action.permissions[i]().info.get.name\n      break\n    }\n  }\n\n  if (!getterName) return undefined\n\n  return {\n    info: action.info,\n    getterName,\n    value\n  }\n\n}","import { encrypt } from './cryptography'\n\n/**\n * Returns number of bytes the string has after encryption.\n * Encryption is used directly to measure result accurately\n * even if cryption method changes in the future.\n */\nexport const stringByteCount = (data: string): number => {\n  const cipher: Buffer = encrypt(data, 'arbitrary key and iv seeding string')\n  // returns buffer, so length should be bytesize\n  return cipher.length;\n}","import axios from 'axios'\n\n// Documentation\n// https://github.com/Blockstream/esplora/blob/esplora_v2.00/API.md\n// https://github.com/Blockstream/esplora/blob/master/API.md#post-tx\n\nconst API_PATH_TESTNET = 'https://blockstream.info/testnet/api/'\nconst API_PATH_BITCOIN = 'https://blockstream.info/api/'\nconst API_RATE_LIMIT = 0.6    // guessing calls per second cap\n\n// (TODO) a single instance of async task executing loop per API to ensure rate limit holds per API\n// Meanwhile calling function can use its own busy flag to ensure promises are resolved before repeats.\n// RawTx requests and multipage history (length > 25) are main risks.\n\nexport async function getFeeEstimates (strNetwork: string) {\n  const API_PATH = (\n    (strNetwork === 'testnet')\n    ? API_PATH_BITCOIN // only main chain fee estimate for better testing\n    : API_PATH_BITCOIN\n  ) + 'fee-estimates'\n\n  try {\n\n    const res = await axios.get(API_PATH)\n    console.log('getFeeEstimates', res.data)\n\n    // await rateLimit()\n\n    return res.data\n\n  } catch (e) {\n\n    console.log(e)\n    await rateLimit()\n    throw new Error('Blockstream.info API getFeeEstimates failed')\n  }\n\n}\n\n\nexport async function getHeight (strNetwork: string) {\n  const API_PATH = (\n    (strNetwork === 'testnet')\n    ? API_PATH_TESTNET\n    : API_PATH_BITCOIN\n  ) + 'blocks/tip/height'\n  console.log(API_PATH)\n\n  try {\n\n    const res = await axios.get(API_PATH)\n    console.log('getHeight', res.data)\n\n    // await rateLimit()\n\n    return res.data\n\n  } catch (e) {\n\n    console.log(e)\n    await rateLimit()\n    throw new Error('Blockstream.info API height get failed')\n  }\n\n}\n\n/**\n * API request for each UTXO in array to get the raw tx necessary for psbt.\n * @param     {Array}     arrayUtxo       Array of UTXO.\n * @param     {string}    strNetwork      Network type: 'bitcoin' or 'testnet'.\n * @returns   {object}                    { arrayTx: arrayTx w/ .hex, error: string, fails: number }\n */\nexport async function addRawTxToArray (utxoList: Array<any>, strNetwork: string) {\n  // to track failures indecies\n  let erroredOutputs = ''\n\n  // abort if empty array\n  if (utxoList?.length === 0) {\n    return { utxoList, error: 'no utxo' }\n  }\n\n  // iterate through original utxo and add hex onto clone, 2 tries max each\n  for (const [indexString, utxo] of Object.entries(utxoList)) {\n    // indexString is a string so convert for array index use\n    const index = parseInt(indexString, 10)\n\n    let tries = 2\n    while (tries-- > 0) {\n      try {\n        const { txid } = utxo\n\n        // raw tx hex path on API\n        const API_PATH = (\n          (strNetwork === 'testnet')\n            ? API_PATH_TESTNET\n            : API_PATH_BITCOIN\n        ) + 'tx/' + txid + '/hex'\n        console.log(API_PATH)\n\n        const res = await axios.get(API_PATH)\n\n        console.log(index, 'index utxo has raw hex of', res.data)\n\n        // add hex data into cloned utxo array\n        utxoList[index].hex = res.data\n\n        // break while loop if got data, don't need more tries\n        break\n\n      } catch(e) {\n        // keeping track of failures\n        console.log('fail detected', indexString, utxo, tries, erroredOutputs, e)\n        // keep track of indecies missing hex\n        erroredOutputs += indexString + ' '\n      }\n\n      await rateLimit()\n    }\n  }\n\n  // return summary object\n  return { utxoList, erroredOutputs }\n}\n\n/**\n * API request for all utxo for this address.\n * Blockstream utxo do not have addresses that created them!\n * @param     {string}    address       Bitcoin address.\n * @param     {string}    strNetwork    Network type: 'bitcoin' or 'testnet'.\n * @returns   {Array}                   Array of UTXO.\n */\nexport async function getUTXOList (address: string, strNetwork: string) {\n  const API_PATH = (\n    (strNetwork === 'testnet')\n    ? API_PATH_TESTNET\n    : API_PATH_BITCOIN\n  ) + 'address/' + address + '/utxo'\n  console.log(API_PATH)\n\n  try {\n    const res = await axios.get(API_PATH)\n\n    console.log('getUTXOList', res.data)\n\n    await rateLimit()\n\n    // for now lets filter out the unconfirmed tx\n    return res.data.filter((utxo: any) => utxo.status.confirmed)\n\n  } catch (e) {\n\n    console.log(e)\n    await rateLimit()\n    throw new Error('Blockstream.info API access failed')\n\n  }\n}\n\n/**\n * API request all transactions for a specific address.\n * parameters: (address, network).\n * @param   {string} address    - address on network.\n * @param   {string} network    - 'testnet' or 'bitcoin' to match bitcoinjs-lib.\n * @returns {Array<object>}     -  Array of tx objects.\n */\nexport async function getAddressHistory (address: string, network: string) {\n  // https://blockstream.info/testnet/api/address/tb1qprkzdaqt5jkxrhy57ngvra8k0rvq63ulksz8cx85qwke3myhjrtq9s6nj3/txs/chain\n  // GET /address/:address/txs/chain[/:last_seen_txid]\n  // Get confirmed transaction history for the specified address/scripthash, sorted with newest first.\n  // Returns 25 transactions per page. More can be requested by specifying the last txid seen by the previous query.\n\n  const CONFIRMED_PAGES_ADDON = '/txs/chain'\n\n  const API_PATH = (\n    (network === 'testnet')\n    ? API_PATH_TESTNET\n    : API_PATH_BITCOIN\n  ) + 'address/' + address + CONFIRMED_PAGES_ADDON\n\n  try {\n    const res = await axios.get(API_PATH)\n\n    console.log('blockstream.info API address history request', res)\n    return res.data\n\n  } catch (e) {\n    console.log(e)\n    throw new Error('Blockstream.info API access failed')\n  }\n}\n\n/**\n * Broadcasts content onto the blockchain.\n * parameters: (content, network).\n * @param   {string}  content  - raw hex content of transaction.\n * @param   {string}  network  - 'testnet' or 'bitcoin' to match bitcoinjs-lib.\n * @returns {string}           - Successful broadcast returns txid, otherwise error reason.\n */\nexport async function txPush (content: string, network: string) {\n\n  const API_PATH =\n    (network === 'testnet')\n    ? API_PATH_TESTNET + 'broadcast'\n    : API_PATH_BITCOIN + 'broadcast'\n\n  try {\n    const res = await axios.get(API_PATH, {\n      params: {\n        tx: content\n      }\n    })\n\n    // console.log(res)\n    console.log('Broadcasted on', network)\n\n    // returns txid on success\n    return { txid: res.data }\n\n  } catch (e) {\n    console.log('Failed pushtx', network, e.response.data )\n\n    throw new Error('Blockstream.info API access failed\\n' + e.response.data)\n  }\n}\n\n// Slow down based on rate limit.\n// Convert hz to time in milliseconds.\nasync function rateLimit () {\n  return new Promise(r => setTimeout(r, 1000.0 / API_RATE_LIMIT))\n}\n","import { I_State, Dispatch, ActionTypes } from '../../interfaces'\nimport { calcP2WSH, calcBnsState } from '../../helpers/bns'\nimport { getAddressHistory, getHeight } from './../../api/blockstream'\nconst { STORE_SEARCH_RESULTS_FAIL, STORE_SEARCH_RESULTS } = ActionTypes;\n\n/**\n * Get address,\n * tx with notification address,\n * calculate owner,\n * find current owner's forwarding info,\n * send/dispatch to reducer to store important data found\n * (No UTXO nor raw TX scan for speed in front page search necessary yet)\n */\nexport const searchAction = async (state: I_State, dispatch: Dispatch, router: any = undefined) => {\n  const domainName = state.alias + state.extension\n  // stop if no alias submitted, nothing to save to state\n  if (!state.alias) return undefined\n\n  // find address for this alias\n  const { notificationsAddress } = calcP2WSH(domainName, state.network)\n\n  try {\n\n    // 1. Get current blockheight from API so ownership is using latest possible info\n\n    const currentHeight = await getHeight(state.network)\n\n    // 2. Get API response for all tx history of this address\n    // This will grab all tx that \"notified\" this address by sending to it\n    // Upon failure error should be caught in this function\n    const notificationsTxHistory = await getAddressHistory(notificationsAddress, state.network)\n\n    // calculate bns data from this history via helper functions\n    const { domain } = calcBnsState(\n      notificationsTxHistory,\n      domainName,\n      currentHeight,\n      state.network\n    )\n\n    // 3. if navigated via id, use router to navigate home w/o id in url\n    if (router) { router?.push('/') }\n\n    // store data\n    return dispatch({\n      type: STORE_SEARCH_RESULTS,\n      payload: {\n        alias: state.alias,\n        domain,\n        chain: {\n          height: currentHeight\n        }\n      }\n    })\n\n  } catch (e) {\n    console.log('searchAction issue found:', e)\n\n    // if navigated via url id, use router to navigate home w/o id in url\n    // even if api call failed, should navigate away or will be stuck in a loop\n    if (router) { router?.push('/') }\n\n    // still updating the notification address\n    return dispatch({\n      type: STORE_SEARCH_RESULTS_FAIL,\n      payload: {\n        alias: state.alias,               // can save alias\n        domainName,\n        notificationsAddress              // can save this easy derivation\n      }\n    });\n  }\n}\n","import { I_State, Dispatch } from '../../interfaces'\nimport { ActionTypes } from './../../interfaces'\n\nimport { createNewWallet, loadWallet } from '../../helpers/bns/bitcoin'\n\nconst { NEW_WALLET } = ActionTypes;\n\n/**\n * Create new wallet address & backup.\n * If mnemonic is provided, wallet is generated from that.\n */\nexport const createNewWalletAction = async (\n  state: I_State, dispatch: Dispatch, strMnemonic: string = ''\n) => {\n\n  // load all the wallet info from mnemonic or generate new random mnemonic to do it\n  const { mnemonic, WIF, address } = (\n    (strMnemonic === '')\n      ? createNewWallet(state.network)\n      : loadWallet(strMnemonic, state.network)\n  )\n\n  return dispatch({\n    type: NEW_WALLET,\n    payload: { mnemonic, WIF, address }\n  })\n}","import { I_State, Dispatch, ActionTypes } from '../../interfaces'\nconst { CHANGE_PAGE_INFO } = ActionTypes;\n\n\n/**\n * Request to change page info that's checked for validity here\n */\nexport const changePageInfoAction = async (state: I_State, dispatch: Dispatch, page: number) => {\n  // for now no checks\n\n  return dispatch({\n    type: CHANGE_PAGE_INFO,\n    payload: page\n  })\n}","import { I_State, Dispatch, ActionTypes } from '../../interfaces'\nimport { calcP2WSH, calcBnsState } from '../../helpers/bns'\nimport { getAddressHistory, getUTXOList, addRawTxToArray, getHeight } from '../../api/blockstream'\nconst { UPDATE_WALLET, UPDATE_DOMAIN, ACTION_FAIL } = ActionTypes\n\n/**\n * Scans the address for utxo on a given network (w/ API).\n * Add hex of each tx that created utxo (for psbt).\n * addressType is one of enums ActionTypes that's either UPDATE_WALLET or UPDATE_NOTIFICATION.\n * If scanning wallet, then update wallet state.\n * If scanning notification address, then update notification state.\n * Notification scan will reproduce address scan first before getting details.\n */\nexport const scanAddressFullyAction = async (\n  state: I_State,\n  dispatch: Dispatch,\n  addressType: ActionTypes\n) => {\n  const domainName = state.alias + state.extension\n\n  // wallet address scan\n  if (addressType === UPDATE_WALLET) {\n    // wallet address\n\n    try {\n\n      // 1. get address TX history\n\n      const walletAddress = state.wallet.address\n      const walletTxHistory = await getAddressHistory(walletAddress, state.network)\n\n      // 2. get address UTXO list (could also calculate from tx history or API)\n\n      const utxoListWalletAddress = await getUTXOList(walletAddress, state.network)\n\n      // 3. get raw tx for each UTXO (psbt requirement for creating new tx later)\n\n      const { utxoList, erroredOutputs } = await addRawTxToArray(utxoListWalletAddress, state.network)\n\n      !!erroredOutputs && console.log('API had issues during hex utxo scan:', erroredOutputs)\n\n      return dispatch({\n        type: UPDATE_WALLET,\n        payload: {\n          wallet: {\n            txHistory: walletTxHistory,\n            utxoList: utxoList\n          }\n        }\n      })\n\n    } catch (e) {\n      console.log('Wallet address scan failed')\n      console.log(e)\n      // abort\n      return dispatch({\n        type: ACTION_FAIL,\n        payload: {}\n      });\n    }\n  }\n\n  // notification address scan\n  if (addressType === UPDATE_DOMAIN) {\n\n\n    try {\n\n      // 1. get current blockheight from API so ownership is using latest possible info\n\n      const currentHeight = await getHeight(state.network)\n\n      // 2. get address TX history\n\n      const { notificationsAddress } = calcP2WSH(domainName, state.network)\n      const notificationsTxHistory = await getAddressHistory(notificationsAddress, state.network)\n\n\n      // 3. derive new BNS domain state & utxo\n      const { domain: newDomain } = calcBnsState(\n        notificationsTxHistory,\n        domainName,\n        currentHeight,\n        state.network\n      )\n\n\n      // 4. get raw tx for each UTXO (psbt requirement for creating new tx later)\n\n      const { erroredOutputs } = await addRawTxToArray(\n        newDomain.derivedUtxoList,\n        state.network\n      )\n\n      !!erroredOutputs && console.log('API had issues during hex utxo scan:', erroredOutputs)\n\n      return dispatch({\n        type: UPDATE_DOMAIN,\n        payload: {\n          domain: newDomain,\n          chain: {\n            height: currentHeight\n          }\n        }\n      })\n\n    } catch (e) {\n      console.log('Notification address scan failed')\n      console.log(e)\n      // abort\n      return dispatch({\n        type: ACTION_FAIL,\n        payload: {}\n      });\n    }\n\n  }\n\n  throw new Error('unexpected address type')\n}","import { I_State, Dispatch, ActionTypes } from '../../interfaces'\nconst { CHOICES_BNS_ACTION } = ActionTypes;\n\n/**\n * Cleans up the entered string including removing next line characters\n */\nexport const changeChoicesBNSAction = async (\n  state: I_State,\n  dispatch: Dispatch,\n  choices: any\n) => {\n\n  return dispatch({\n    type: CHOICES_BNS_ACTION,\n    payload: choices\n  })\n}\n\n","\n/**\n * Difference between timestampMsec timestamp relative to current time or another reference referenceTimestampMsec timestamp.\n * Returns days-hours-minutes string, days-hours string, if expired, and ms of difference.\n * @param   {number}  timestampMsec               Timestamp of interest (milliseconds).\n * @param   {number}  [referenceTimestampMsec=]   Reference timestamp (milliseconds).\n * @returns {object}                              { dhm, dh, isExpired, msDiff, ... }.\n */\nexport default function timeDiff(\n  timestampMsec: number, referenceTimestampMsec: number = Date.now()\n): {\n  dhm: string\n  dh: string\n  isExpired: boolean\n  msDiff: number\n  timestampMsec: number\n  referenceTimestampMsec: number\n} {\n  let diff = timestampMsec - referenceTimestampMsec\n  // note sign\n  const isExpired = (diff <= 0)\n  // mod away higher time frames\n  diff = Math.abs(diff)\n  const d = Math.floor(diff / (1000 * 60 * 60 * 24))\n  // remove days\n  diff -= d * (1000 * 60 * 60 * 24)\n  const h = Math.floor(diff / (1000 * 60 * 60)) % 24\n  // remove hours\n  diff -= h * (1000 * 60 * 60)\n  const m = Math.floor(diff / (1000 * 60)) % 60\n  return {\n    dhm: `${d} days ${h} hours ${m} min`,\n    dh: `${d} days ${h} hours`,\n    isExpired,        // time difference is to the past of now? (boolean)\n    msDiff: diff,\n    timestampMsec,\n    referenceTimestampMsec\n  };\n}","import React from 'react'\nimport styles from './Details.module.css'\n\n/**\n * Create details expanding/collapsing button.\n * Optional props:\n * title={ 'random text' } to change text shown on the hide/show toggle button\n * show={ 'true } to show initially *\n * Background is automatically styled if <p></p> is used directly inside.\n * If so, <span></span> can be used inside <p></p> to separate\n * paragraphs and indent the wrap as well.\n */\nexport const Details = (props: any) => {\n  // local state for showing or hiding details\n  const [ showDetails, setShowDetails ] = React.useState(props?.show === 'true' || false)\n\n  return (\n    <div className={ styles.wrapper }>\n\n      {/* button that toggles whether details are shown or not */}\n      <div\n        className={ styles.buttonWrapper }\n      >\n        <div\n          className={ styles.toggleDetails }\n          onClick={ () => {\n            setShowDetails(!showDetails)\n          } }\n        >\n          {/* the text on button coems from title prop */}\n          { props.title || props.description || 'Show details' }\n          {/* the arrow that rotates on click */}\n          <div\n            className={ [styles.arrow, showDetails ? styles.down : '' ].join(' ') }\n          />\n        </div>\n      </div>\n\n      {/* the details that is rendered when showDetails = true */}\n      <div\n        className={ styles.details }\n        style={ {\n          display: (\n            showDetails ? 'block' : 'none'\n          )\n        } }\n      >\n        {/* any arbitrary content surrounded by this component brackets */}\n        {/* if <p></p> tags are used, they will be formated */}\n        { props.children }\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Store, getOwner, getBidding } from './../../store'\nimport { Link } from 'react-router-dom'\n\nimport styles from './SearchResults.module.css'\nimport timeDiff from './../../helpers/timediff'\nimport { OWNERSHIP_DURATION_BY_BLOCKS, CHALLENGE_PERIOD_DURATION_BY_BLOCKS, interpretFw, findLatestForwards } from '../../helpers/bns/'\nimport { Details } from './../general/Details'\n\nexport const SearchResults = () => {\n  // global state\n  const { state } = React.useContext(Store)\n\n  // calc time left in ownership via block heights\n  // temp object to keep track of timers\n  let diff = { isExpired: true, dh: '', msDiff: 0 }\n  const owner = getOwner(state)\n  if (owner) {\n    const heightOfExpiration = owner.winHeight + OWNERSHIP_DURATION_BY_BLOCKS\n    const blocksUntilExpires = (heightOfExpiration - state.chain.height)\n    const msUntilExpires = blocksUntilExpires * 10.0 * 60.0 * 1000.0\n    diff = timeDiff(msUntilExpires, 0)\n  }\n\n\n  // show BTC balance with styling and proper units based on network\n  const unitBTC = (state.network === 'testnet') ? ' tBTC ' : ' BTC '\n  const showBTC = (sats: number = 0): JSX.Element => (\n    <>\n      <span className={ styles.balance }>\n        { (sats / 1e8).toFixed(8) }\n      </span>\n      { unitBTC }\n    </>\n  )\n\n  // get ownership info\n  const tabledOwnershipData = owner ? [\n    [['Owner'],               [[\n                                <span\n                                  className={ styles.breakable }\n                                  key={ 'owner1' }\n                                  >\n                                  { owner.address }\n                                </span>\n                              ]]\n    ],\n    [['Notifications'],       [[\n                                <span\n                                  className={ styles.breakable }\n                                  key={'notify1'}\n                                >\n                                  { state.domain.notificationAddress }\n                                </span>\n                              ]]\n    ],\n    [['Ownership extended'],  [\n                                [owner.winHeight + ' block height'],\n                                [new Date(owner.winTimestamp * 1000).toUTCString()],\n                                [timeDiff(owner.winTimestamp * 1000).dh + ' ago'],\n                                [\n                                  <React.Fragment\n                                    key={ 'ownership1' }\n                                  >\n                                    { showBTC(owner.burnAmount) } winning bid\n                                  </React.Fragment>\n                                ]\n                              ]\n    ],\n    [['Ownership expires'],   [\n                                [(owner.winHeight + OWNERSHIP_DURATION_BY_BLOCKS) + ' block height'],\n                                [\n                                  '≈ ' + new Date(\n                                    (OWNERSHIP_DURATION_BY_BLOCKS * 10.0 * 60.0 + owner.winTimestamp) * 1000\n                                  ).toUTCString()\n                                ],\n                                ['in ≈ ' + diff.dh]\n                              ]\n    ]\n  ] : []\n\n  // get burning info\n  const { isBurn, bidding } = getBidding(state)\n  const tabledBiddingData = isBurn ? [\n    [['Owner'],             [['Owner will be determined when bidding period ends']]],\n    [['Notifications'],    [[\n                              <span\n                                className={ styles.breakable }\n                                key={ 'notify1' }\n                              >\n                                { state.domain.notificationAddress }\n                              </span>\n                            ]]\n    ],\n    [['Bidding start'],     [\n                              [bidding.startHeight + ' block height'],\n                              // first bid is one that starts it so unix time stamp accurate\n                              [new Date(bidding.bids[0].timestamp * 1000.0).toUTCString()],\n                              [timeDiff(bidding.bids[0].timestamp * 1000.0).dh + ' ago']\n                            ]\n    ],\n    [['Bidding ends'],      [\n                              [bidding.endHeight + ' block height'],\n                              [\n                                '≈ ' + new Date(\n                                  bidding.bids[0].timestamp * 1000.0 + (CHALLENGE_PERIOD_DURATION_BY_BLOCKS * 10.0 * 60.0 * 1000.0)\n                                ).toUTCString()\n                              ],\n                              [\n                                'in ≈ ' + timeDiff(\n                                  bidding.bids[0].timestamp * 1000.0 + (CHALLENGE_PERIOD_DURATION_BY_BLOCKS * 10.0 * 60.0 * 1000.0)\n                                ).dh\n                              ]\n                            ]\n    ],\n    [['Bidders'],           [\n                              ...(bidding.bids.map((thisBid: any, bidIndex: number) => (\n                                [\n                                  <React.Fragment\n                                    key={ 'bidding' + bidIndex }\n                                  >\n                                    { showBTC(thisBid.value) } burned by\n                                    {' '}<span className={ styles.breakable }>{ thisBid.address }</span>\n                                  </React.Fragment>\n                                ]\n                              )))\n                            ]\n    ]\n  ] : []\n\n  // get most basic available domain info\n  const tabledAvailableDomainData = [\n    [['Owner'],             [['No owner. No bids.']]],\n    [['Notifications'],     [[\n                              <span\n                                className={ styles.breakable }\n                                key={ state.domain.notificationAddress }\n                              >\n                                { state.domain.notificationAddress }\n                              </span>\n                            ]]\n    ]\n  ]\n\n  // display data in styled table format\n  const expandableTable = (inputData: Array<any>, inputDescription: string) => {\n    if (inputData.length === 0) return ''\n    return (\n      <div className={ styles.ownershipDetails }>\n        <Details\n          description={ inputDescription }\n        >\n\n          <table><tbody>\n            { inputData.map((rows: any, index: number) => (\n              <tr\n                key={ rows[0][0] }\n              >\n                <td>{ rows[0][0] }</td>\n                <td>\n                  {\n                    rows[1].map((dataRows: any, dataRowIndex: number) => (\n                      <p\n                        key={ [index,dataRowIndex].join(' ') }\n                      >\n                        { dataRows }\n                      </p>\n                    ))\n                  }\n                </td>\n              </tr>\n            )) }\n          </tbody></table>\n\n        </Details>\n      </div>\n    )\n  }\n\n  // calculate latest forwards\n  const latestForwards = owner ? findLatestForwards(owner.forwards) : []\n\n  return (\n    <>\n      <div className={ styles.wrapper }>\n\n        {/* scrollable search results */}\n        <div className={ styles.listContainer } >\n\n          <div\n            className={ styles.describe }\n          >\n            {/* only show matches when there is owner */}\n            {(!isBurn && !!owner) &&\n            (\n              <div className={ styles.describe__matches } >\n                { latestForwards.length } matches on { state.network } {'  '}\n              </div>\n            )}\n\n            {/* no wonder but bidding period started */}\n            {\n              (isBurn) && (\n                expandableTable(tabledBiddingData, 'Bidding information')\n              )\n            }\n\n            {/* if no owner and no bidding - totally available */}\n            {\n              (!isBurn && !owner) && (\n                expandableTable(tabledAvailableDomainData, 'Available information')\n              )\n            }\n\n            {/* owner exists - ownership details */}\n            {(!!owner) && (\n              <div className={ styles.ownershipDetails }>\n                { expandableTable(tabledOwnershipData, 'Ownership details')}\n              </div>\n            )}\n\n          </div>\n\n          {/* general search results */}\n          {\n            latestForwards.map((fw: any) => {\n              const ifw = interpretFw(fw)\n              if (ifw.render) {\n                return (\n                  <a\n                    key={ fw.network }\n                    className={ styles.listItem }\n                    href={ encodeURI(ifw?.link || '') || undefined }\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <span className={ styles.key }>{ ifw.where }</span>\n                    { ifw.what }\n                  </a>\n                )\n              } else {\n                return ('')\n              }\n            })\n          }\n\n          {/* show if domain is available */}\n          <div className={ styles.avaiability }>\n            {(!owner) && (\n              <Link\n                to='/create'\n                className={ styles.createLink }\n              >\n                { isBurn ? 'Bidding started. Join?' : 'Domain available!' }\n              </Link>\n            )}\n          </div>\n\n        </div>\n      </div>\n    </>\n  )\n}\n\n\n\n","import { I_Forward } from '../types'\n/**\n * Reads a single forward info object to interpret its values\n * as where the forwarding address should be used, what it is, and what link to use.\n * Returns {what: string, where: string, link: string, render: boolean}.\n */\nexport function interpretFw (fw: I_Forward) {\n  // blank address means it was removed\n  // ! at start means it's a command, not a network\n  if (fw.network === '' || fw.address === '' || fw.network.startsWith('!')) {\n    return {\n      render: false\n    }\n  }\n\n  // remove version modifier (anything after ! after network)\n  const onNetwork = fw.network.split('!')[0]\n\n  if (\n    onNetwork === 'p2wsh' ||\n    onNetwork === 'btc' ||\n    onNetwork === 'p2pkh' ||\n    onNetwork === 'p2wpkh' ||\n    onNetwork === 'p2sh'\n  ) {\n    return {\n      where: 'btc:',\n      what: (\n        fw.address\n      ),\n      link: (\n        'https://blockstream.info/address/' + fw.address\n      ),\n      render: true\n    }\n  }\n\n  if (\n    onNetwork === 'http' ||\n    onNetwork === 'https' ||\n    onNetwork === 'url' ||\n    onNetwork === 'web'\n  ) {\n    return {\n      where: 'https://',\n      what: fw.address,\n      link: 'https://' + fw.address,\n      render: true\n    }\n  }\n\n  if (onNetwork === 'twitter') {\n    return {\n      where: 'twitter.com/',\n      what: fw.address,\n      link: 'https://twitter.com/' + fw.address,\n      render: true\n    }\n  }\n\n  if (onNetwork === 'github') {\n    return {\n      where: 'github.com/',\n      what: fw.address,\n      link: 'https://github.com/' + fw.address,\n      render: true\n    }\n  }\n\n  if (onNetwork === 'youtube') {\n    return {\n      where: 'youtu.be/',\n      what: fw.address,\n      link: 'https://www.youtube.com/watch?v=' + fw.address,\n      render: true\n    }\n  }\n\n  // if unknown forward network, no link, and the rest is shown as is\n  console.log({\n    originawhere: fw.network,\n    where: onNetwork,\n    what: fw.address,\n    link: undefined,\n    render: true\n  })\n  return {\n    where: onNetwork,\n    what: fw.address,\n    link: undefined,\n    render: true\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport { RoundButton } from './../general/RoundButton'\nimport { Store } from './../../store/'\nimport { searchAction, changeAliasAction } from './../../store/actions/'\nimport { SearchResults } from './../SearchResults'\nimport styles from './HomeContent.module.css'\n\nexport const HomeContent = (props: any): JSX.Element => {\n  const { state, dispatch } = React.useContext(Store)\n\n  // if page is loaded with #/id/:alias format\n  // this will change alias to that one\n  // then it will navigate to '/'\n  // and then it will do search with new alias\n  // http://localhost:3000/#/id/satoshi\n  const alias = props?.match?.params?.alias\n  if (alias) {\n    searchAction({...state, alias}, dispatch, props.history)\n  }\n\n  // is serach done\n  const isSearchDone = () => state.pageInfo.checkedLightSearch\n\n  // put the textarea (by ref) into focus on mount and move caret to end\n  const inputEl = useRef<HTMLTextAreaElement>(null)\n  useEffect(() => {\n    if (inputEl && inputEl.current) {\n      inputEl.current.selectionEnd = inputEl.current.value.length\n      inputEl.current.selectionStart = inputEl.current.value.length\n      inputEl.current.focus()\n    }\n  }, [])\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={\n        !isSearchDone()\n          ? [styles.lblMainTitle].join(' ')\n          : [styles.lblMainTitle, styles.lblMainTitleAfter].join(' ')\n      }>\n        <span>Bitcoin</span> Name System\n      </div>\n      <div className={\n        !isSearchDone()\n          ? styles.divSearch\n          : [styles.divSearch, styles.divSearchAfter].join(' ')\n      }>\n        <textarea\n          id=\"txtSearch\"\n          className={ styles.txtSearch }\n          cols={ 30 }\n          rows={ 1 }\n          spellCheck={ false }\n          value={ state.alias }\n          placeholder={ 'e.g. satoshi' }\n          ref={ inputEl }\n          onChange={ e => changeAliasAction(state, dispatch, e?.target?.value) }\n          onKeyPress={ e => { e.key === 'Enter' && searchAction(state, dispatch) } }\n        ></textarea>\n        <RoundButton\n          sizebutton='2.6'\n          onClick={ () => searchAction(state, dispatch) }\n        >\n          .btc\n        </RoundButton>\n      </div>\n      <div style={{ display: isSearchDone() ? 'block' : 'none' }}>\n        <SearchResults />\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { HomeContent } from './../components/HomeContent'\n\nconst Home = (props: any): JSX.Element => {\n  return (\n    <>\n      <HomeContent { ...props } />\n    </>\n  )\n}\nexport default Home","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"defs\", null, React.createElement(\"clipPath\", {\n  id: \"clip0\"\n}, React.createElement(\"path\", {\n  d: \"M0 0 1280 0 1280 720 0 720Z\",\n  fillRule: \"evenodd\",\n  clipRule: \"evenodd\"\n})));\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  clipPath: \"url(#clip0)\"\n}, React.createElement(\"text\", {\n  fill: \"#111133\",\n  fontFamily: \"Arial,Arial_MSFontService,sans-serif\",\n  fontWeight: 900,\n  fontSize: 48,\n  transform: \"translate(80 329)\"\n}, \"s\", React.createElement(\"tspan\", {\n  x: 29.3333,\n  y: 0\n}, \"atoshi\"), React.createElement(\"tspan\", {\n  fill: \"#FF9500\",\n  x: 191.18,\n  y: 0\n}, \".btc\")), React.createElement(\"path\", {\n  d: \"M2.27397e-06-3 111.507-2.99992 111.507 3.00008-2.27397e-06 3ZM108.507-14.9999 138.507 0.000104987 108.507 15.0001Z\",\n  fill: \"#111133\",\n  transform: \"matrix(1 0 0 -1 396 313)\"\n}), React.createElement(\"text\", {\n  fill: \"#FF9500\",\n  fontFamily: \"Arial,Arial_MSFontService,sans-serif\",\n  fontWeight: 900,\n  fontSize: 48,\n  transform: \"translate(605.829 174)\"\n}, \"bitcoin\", React.createElement(\"tspan\", {\n  x: 197.333,\n  y: 0\n}, \"address\"), React.createElement(\"tspan\", {\n  fill: \"#111133\",\n  fontSize: 27,\n  x: 0,\n  y: 38\n}, \"bc1qwqdg6squ\"), React.createElement(\"tspan\", {\n  fill: \"#111133\",\n  fontSize: 27,\n  x: 219.38,\n  y: 38\n}, \"sqdg6s795at9\\u2026kxsw\"), React.createElement(\"tspan\", {\n  fill: \"#111133\",\n  fontSize: 27,\n  x: 527.067,\n  y: 38\n}, \"vvzej\"), React.createElement(\"tspan\", {\n  x: 0,\n  y: 119\n}, \"email\"), React.createElement(\"tspan\", {\n  fill: \"#111133\",\n  fontSize: 27,\n  x: 0,\n  y: 158\n}, \"satoshin@gmx.com\"), React.createElement(\"tspan\", {\n  x: 0,\n  y: 238\n}, \"website\"), React.createElement(\"tspan\", {\n  fill: \"#111133\",\n  fontSize: 27,\n  x: 0,\n  y: 276\n}, \"https://bitcoin.org/\"), React.createElement(\"tspan\", {\n  fill: \"#111133\",\n  fontSize: 27,\n  x: 0.00012207,\n  y: 374\n}, \".\"), React.createElement(\"tspan\", {\n  fill: \"#111133\",\n  fontSize: 27,\n  x: 0,\n  y: 333\n}, \".\"), React.createElement(\"tspan\", {\n  fill: \"#111133\",\n  fontSize: 27,\n  x: 0.00012207,\n  y: 417\n}, \".\")), React.createElement(\"path\", {\n  d: \"M589 612C577.678 612 568.5 602.939 568.5 591.762L568.5 334.208C568.5 323.031 559.322 313.97 548 313.97 559.322 313.97 568.5 304.909 568.5 293.732L568.5 149.238C568.5 138.061 577.679 129 589.001 129\",\n  stroke: \"#111133\",\n  strokeWidth: 2,\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"bevel\",\n  strokeMiterlimit: 10,\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}));\n\nvar SvgGraphic = function SvgGraphic(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    overflow: \"hidden\",\n    preserveAspectRatio: \"none\",\n    viewBox: \"0 100 1280 550\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2, _ref3);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgGraphic, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/graphic.669843d0.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react'\n// import { Store } from './../../store/'\nimport styles from './AboutContent.module.css'\nimport { ReactComponent as Drawing } from './graphic.svg'\n\n\nexport const AboutContent = () => {\n  // const { state } = React.useContext(Store)\n\n  return (\n    <>\n      <div className={ [styles.wrapper, 'scrollbar'].join(' ') }>\n        <div className={ styles.title }>\n          <div>\n            Your <span>Bitcoin</span> domain\n            &nbsp;=&nbsp;\n          </div>\n          <div>\n            &nbsp;infinite forwarding addresses\n          </div>\n        </div>\n\n        <div className={ styles.contentWrapper }>\n\n          <Drawing\n            className={ styles.drawing }\n          />\n\n          <p>\n            <span>Bitcoin</span> Domain System (<span>BNS</span>): easy to read custom domain names (i.e. aliases) that can store unlimited forwarding information to long alphanumeric btc addresses or any other types of addreses (e.g. ipfs, https, twitter, ...).\n          </p>\n\n          <p>\n            All <span>BNS</span> data is stored inside transactions on the <span>Bitcoin</span> blockchain. This means that <span>BNS</span> is protected by the most secure, decentralized, permissionless, and censorship resistant public network ever created.\n          </p>\n\n          <a\n            href=\"https://github.com/ildarmgt/BitcoinNameSystem/blob/master/README.md\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            more on github\n          </a>\n\n        </div>\n\n\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { AboutContent } from './../components/AboutContent'\n\nexport default function About(): JSX.Element {\n  return (\n    <>\n      <AboutContent />\n    </>\n  )\n}\n\n// for lazy loading:\n// const RoundButton = React.lazy<any>(() => import('../components/RoundButton')\n// <React.Suspense\n//   fallback={\n//     <div>loading...</div>\n//   }\n// >\n// </React.Suspense>\n","import React, { useState } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P1RestoreOrBackup.module.css'\nimport { createNewWalletAction, changePageInfoAction } from '../../../store/actions/'\nimport sanitize from './../../../helpers/sanitize'\nimport { Store } from './../../../store/'\nimport { Details } from './../../general/Details'\n\nenum pages {\n  ROOT,\n  NEW_WALLET,\n  LOAD_BACKUP\n}\n\n// restore backup or create new\nexport const P1RestoreOrBackup = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n  const [ page, setPage ] = useState(pages.ROOT) // local state\n  const [ backup, setBackup ] = useState('') // local state\n\n  // count non empty string strings separated by spaces\n  const wordCount = backup.split(' ').filter(v => v !== '').length\n\n  return (\n    <div className={ styles.wrapper }>\n\n\n\n      {/* ROOT PAGE */}\n      <div\n        style={{ display: page === pages.ROOT ? 'block' : 'none' }}\n      >\n        <div\n          className={ styles.title }\n        >\n          { state.wallet.address ? (<>\n            Your <span className={ styles.Orange }>BTC</span> wallet for interacting<br />\n            with the domains\n          </>) : (<>\n            Need a <span className={ styles.Orange }>BTC</span> wallet for interacting<br />\n            with the domains\n          </>) }\n        </div>\n        <div>\n          <Details\n            description={ 'Explain' }\n          >\n            <p>\n              <span>This wallet has the built-in unique functionality to create transactions with custom scripts, inputs, and outputs necessary for this application.</span>\n\n              <span>The wallet's address is how users and owners of the domains are identified and should only be used for this purpose.</span>\n\n              <span>1. BIP39 mnemonic is used from backup or generated</span>\n              <span>2. BIP32 master seed is derived from the mnemonic</span>\n              <span>3. Key pair is derived at the m/44'/0'/0'/0/0 path from master seed</span>\n              <span>4. The p2wpkh (pay-to-witness-public-key-hash) address is derived from key pair</span>\n            </p>\n          </Details>\n        </div>\n        <div\n          className={ styles.buttonWrapper }\n        >\n          <RoundButton\n            show={ (state.wallet.mnemonic.length > 0) ? 'false' : 'true' }\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n              createNewWalletAction(state, dispatch)\n            }}\n          >\n            I need a new wallet\n          </RoundButton>\n          <RoundButton\n            show={ (state.wallet.mnemonic.length > 0) ? 'true' : 'false' }\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n            }}\n          >\n            Current mnemonic\n          </RoundButton>\n          <RoundButton\n            onClick={() => {\n              setPage(pages.LOAD_BACKUP)\n            }}\n          >\n            Restore from backup\n          </RoundButton>\n          <RoundButton\n            show={ (!!state.wallet?.address).toString() }\n            onClick={() => {\n              changePageInfoAction(state, dispatch, 2)\n            }}\n            next='true'\n          >\n            Don't change wallet\n          </RoundButton>\n        </div>\n      </div>\n\n      {/* NEW_WALLET PAGE */ }\n\n      <div\n        className={ styles.contentWrapper }\n        style={{ display: page === pages.NEW_WALLET ? 'flex' : 'none' }}\n      >\n        <div className={ styles.describe }>\n          Randomly generated for domain control\n          <br /><br />\n          Backup this private phrase\n          or you will lose access\n        </div>\n        <div\n          id='divBackup'\n          spellCheck={ false }\n          className={ [styles.backup, 'selectable'].join(' ') }\n          onClick={ () => {\n            // select div entire contents\n            // const thisDiv = document?.getElementById('divBackup')\n            // if (thisDiv) {\n            //   window.getSelection()?.selectAllChildren(thisDiv)\n            // }\n          }}\n        >\n          { state.wallet.mnemonic }\n        </div>\n        <div className={ styles.buttonWrapper } >\n          <RoundButton\n            onClick={() => {\n              setPage(pages.ROOT)\n            }}\n            back='true'\n          >\n            Back\n          </RoundButton>\n          <RoundButton\n            onClick={() => {\n              setPage(pages.NEW_WALLET)\n              createNewWalletAction(state, dispatch)\n            }}\n          >\n            New\n          </RoundButton>\n          <RoundButton\n            next='true'\n            onClick={() => {\n              changePageInfoAction(state, dispatch, 2)\n            }}\n          >\n            I'm done with backup\n          </RoundButton>\n        </div>\n      </div>\n\n      {/* LOAD_BACKUP PAGE */ }\n\n      <div\n        style={{ display: page === pages.LOAD_BACKUP ? 'block' : 'none' }}\n      >\n        <div className={ styles.title }>\n          Type or paste your backup here\n        </div>\n        <br></br>\n        <div>\n          { (wordCount).toString() + ' words now. 12 minimum.' }\n        </div>\n        <br></br>\n        <textarea\n          className={ styles.restoreBackup }\n          cols={ 30 }\n          rows={ 3 }\n          spellCheck={ false }\n          placeholder={ 'mnemonic backup' }\n          onChange={ e => {\n            // lowcaps, spaces, single space max, only one space on left while typing\n            const cleanString = sanitize(\n              e.target.value.toLowerCase(),\n              'lowcaps spaces single_space_width'.split(' ')\n            ).trimLeft()\n            setBackup(cleanString.trim()) // store without trailing space\n            e.target.value = cleanString // quick update\n          } }\n        ></textarea>\n        <div className={ styles.buttonWrapper } >\n          <RoundButton\n            onClick={() => {\n              setPage(pages.ROOT)\n            }}\n            back='true'\n          >\n            Back\n          </RoundButton>\n          <RoundButton\n            // 12 words minimum separated by spaces (TODO): proper checks\n            show={ (wordCount >= 12) ? 'true' : 'false' }\n            next='true'\n            onClick={() => {\n              createNewWalletAction(state, dispatch, backup)\n              changePageInfoAction(state, dispatch, 2)\n            }}\n          >\n            Done\n          </RoundButton>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","import React, { useEffect, useState } from 'react'\nimport styles from './CreateHeader.module.css'\nimport { Store } from './../../../store/'\nimport { useHistory } from 'react-router-dom'\n\n// restore backup or create new\nexport const CreateHeader = () => {\n  // global state\n  const { state } = React.useContext(Store)\n\n  const domainName = state.alias + state.extension\n\n  // navigation object\n  const history = useHistory()\n\n  // Make sure entire alias is always visible on top through\n  // resizing based on letter count.\n  //\n  // get window width in component instance state 'width'\n  // so can resize alias based on char count\n  const [ width, setWidth ] = useState(window.innerWidth)\n  useEffect(() => {\n    const resize = () => { setWidth(window.innerWidth) }\n    window.addEventListener('resize', resize);\n    return () => window.removeEventListener('resize', resize);\n  }, [])\n\n  // enforces max size to font size so 1 letter alias has same font as 19 letter alias\n  const fontScale = Math.min(\n      Math.floor(1.1 * width / domainName.length),\n      Math.floor(1.1 * width / 15)\n  )\n\n  const barHeight = { height: (0.12 * width + 0.4 * fontScale).toString() + 'px' }\n  const aliasMarginTop = { marginTop: (0.02 * width - 0.1 * fontScale).toString() + 'px' }\n  const aliasFontSize = { fontSize: fontScale.toString() + 'px' }\n\n  return (\n    <>\n      <div\n        className={ styles.cutOverflow }\n        style={ barHeight }\n      >\n        <div\n          className={ styles.bar }\n          style={ barHeight }\n        />\n      </div>\n      <div\n        className={ styles.domain }\n        style={ aliasMarginTop }\n        onClick={ () => {\n          history.push('/')\n        } }\n      >\n        <span\n          className={ styles.alias }\n          style={ aliasFontSize }\n        >{ state.alias }</span>\n        <span\n          className={ styles.ext }\n          style={ aliasFontSize }\n        >{ state.extension }</span>\n      </div>\n      <div className={ styles.spacer } />\n    </>\n  )\n}\n\n","import React, { useState, useEffect } from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P2LoadWallet.module.css'\nimport { Store } from '../../../store'\nimport { changePageInfoAction } from '../../../store/actions'\nimport qr from 'qrcode'\nimport { useHistory } from 'react-router-dom'\n\n\n/**\n * Load wallet page, including faucet link for testnet users\n */\nexport const P2LoadWallet = () => {\n  const { state, dispatch } = React.useContext(Store) // global state\n\n  // load QR code into local state\n  const [ qrCode, setQrCode] = useState()\n  useEffect(() => {\n    qr.toDataURL(state.wallet.address, {\n      type: 'image/jpeg', color: { dark: '#111133ff'}\n    }, (err: any, url: any) => {\n      if (!err) { setQrCode(url) }\n    })\n  }, [state.wallet.address])\n\n  // url changer\n  const history = useHistory()\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.contentWrapper }>\n        <div\n          className={ styles.imgQr }\n        >\n          {/* downloadable */}\n          <img src={qrCode} alt={'QR Code'} />\n        </div>\n        <div>\n          Fund your wallet to interact with domains.\n        </div>\n        <div className={ [styles.address, 'selectable'].join(' ') }>\n          { state.wallet.address }\n        </div>\n      </div>\n      <div className={ styles.buttonWrapper }>\n\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 1)\n          }}\n        >\n          Back\n        </RoundButton>\n\n        <RoundButton\n          next='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 3)\n          }}\n        >\n          Ready\n        </RoundButton>\n\n        <RoundButton\n          show={ (!!state.wallet?.address).toString() }\n          onClick={() => {\n            history.push('/wallet')\n          }}\n          colorbutton={'var(--colorHighlightDark)'}\n        >\n          Withdraw from wallet\n        </RoundButton>\n\n        <RoundButton\n          colorbutton={'var(--colorHighlightDark)'}\n          show={ (state.network === 'testnet').toString() }\n          onClick={ () => {\n            // open faucet page in new window\n            // segwit compatible:\n            // 1) https://testnet-faucet.mempool.co/\n            // 2) https://bitcoinfaucet.uo1.net/\n            window.open('https://bitcoinfaucet.uo1.net/', '_blank')\n            // window.open('https://testnet-faucet.mempool.co/', '_blank')\n          }}\n        >\n          Testnet: tBTC faucet\n        </RoundButton>\n\n        <RoundButton\n          colorbutton={'var(--colorHighlightDark)'}\n          onClick={ () => {\n            // open blockstream explorer for address in new window/tab\n            const pathEdit = (state.network === 'testnet') ? 'testnet/' : ''\n            window.open(\n              `https://blockstream.info/${pathEdit}address/${state.wallet.address}`\n            , '_blank')\n          }}\n        >\n          Open explorer\n        </RoundButton>\n\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P3DomainAndWallet.module.css'\nimport { Store } from '../../../store'\nimport { changePageInfoAction } from '../../../store/actions'\nimport { scanAddressFullyAction } from './../../../store/actions'\nimport { ActionTypes } from './../../../interfaces'\nimport { getUnspentSum } from '../../../helpers/bns/bitcoin'\n\n/**\n * Bid on network\n */\nexport const P3DomainAndWallet = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  // Local state: keep track if API is busy\n  const [ apiStatus, setApiStatus ] = React.useState('ok')\n\n  // on state update detected by timestamp, reset api status\n  React.useEffect(() => { setApiStatus('ok') }, [ state.lastTimeStamp ])\n\n  // most important for domain notificaiton address is the transaction history to know ownership\n  // but also the current utxo in case we want to control the domain\n  const domainInfo = () => {\n    if (state.pageInfo.checkedDomain) {\n      return ('✓')\n    } else {\n      return ('needs scan')\n    }\n  }\n\n  // wallet needs utxo info including raw tx & tx history for nonce\n  const walletInfo = () => {\n    if (state.pageInfo.checkedWallet) {\n      return ( '✓' )\n    } else {\n      return ('needs scan')\n    }\n  }\n\n  // Conditions to enable next pages.\n  const readyStatus = () => {\n    if (!state.pageInfo.checkedDomain && !state.pageInfo.checkedWallet) {\n      return { isReady: false,    info: 'Scan both to move on' }\n    }\n    if (!state.pageInfo.checkedDomain && state.pageInfo.checkedWallet) {\n      return { isReady: false,    info: 'Scan domain to move on' }\n    }\n    if (state.pageInfo.checkedDomain && !state.pageInfo.checkedWallet) {\n      return { isReady: false,    info: 'Scan wallet to move on' }\n    }\n    if (state.pageInfo.checkedDomain && state.pageInfo.checkedWallet) {\n      return { isReady: true,     info: '' }\n    }\n    return { isReady: false,      info: 'Unknown status' }\n  }\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Wallet and domain history needed. <br />\n        (No offline method yet)\n      </div>\n      <div className={ styles.domainInfo }>\n        { (apiStatus !== 'domain')  && 'Domain ' + domainInfo() }\n        { (apiStatus === 'domain')  && 'Domain scanning...' }\n      </div>\n      <div className={ styles.domainButton }>\n        <RoundButton\n          onClick={ () => {\n            if (apiStatus === 'ok') {\n              setApiStatus('domain')\n              scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_DOMAIN)\n            }\n          }}\n        >\n          API Scan\n        </RoundButton>\n      </div>\n      <div className={ styles.walletInfo }>\n        { (apiStatus !== 'wallet')  && 'Wallet ' + walletInfo() }\n        { (apiStatus === 'wallet') && 'Wallet scanning...' }\n      </div>\n      <div className={ styles.walletButton }>\n        <RoundButton\n          onClick={ () => {\n            if (apiStatus === 'ok') {\n              setApiStatus('wallet')\n              scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_WALLET)\n            }\n          }}\n        >\n          API Scan\n        </RoundButton>\n      </div>\n      <div className={ styles.unspent }>\n        <div className={ styles.balance }>\n          { state.pageInfo.checkedWallet? (getUnspentSum(state.wallet.utxoList) / 1e8).toFixed(8) : 'n/a' }\n        </div>\n        { (state.network === 'testnet') ? ' tBTC' : ' BTC' }\n      </div>\n      <div className={ styles.ownership }>\n        { readyStatus().info }\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 2)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          show={ readyStatus().isReady ? 'true' : 'false' }\n          next='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 4)\n          }}\n        >\n          Ready\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport styles from './InputForm.module.css'\nimport { RoundButton } from './../../general/RoundButton'\n\n/**\n * Reusable and styled form, label, textarea.\n */\nexport const InputForm = (props: any) => {\n  // const [showThis, setShowThis] = React.useState(false)\n\n  return (\n    <div\n      className={ [styles.wrapper, props.className].join(' ') }\n      style={ props.style }\n    >\n      <div className={ styles.shiftRight }>\n        <aside className={ styles.label }>\n          { props.thisInputLabel || '' }\n        </aside>\n        <textarea\n          className={ styles.textarea }\n          spellCheck={ false }\n          value={ props.thisInputValue || '' }\n          placeholder={ props.thisInputPlaceholder || '' }\n          onChange={ (e?: any) => {\n            props.thisInputOnChange ? props.thisInputOnChange(e) : (()=>{})()\n          } }\n        ></textarea>\n        <RoundButton\n          className={ styles.button }\n          next={ 'true' }\n          onClick={ (e?: any) => {\n            props.thisSubmitButtonOnClick ? props.thisSubmitButtonOnClick(e) : (()=>{})()\n          } }\n        >\n          OK\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P4ActionChoice.module.css'\nimport { Store } from '../../../store'\nimport { changePageInfoAction, changeChoicesBNSAction } from '../../../store/actions'\nimport { Details } from './../../general/Details'\nimport { runAllActionPermissionChecks, calcBnsState } from './../../../helpers/bns/'\nimport { InputForm } from './../../general/InputForm'\nimport sanitize from '../../../helpers/sanitize'\n\n/**\n * Bid on network.\n */\nexport const P4ActionChoice = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  // local state for special cases where form is attempting to get data from user\n  const [extraFormData, setExtraFormData] = React.useState()\n  // local state for permission scan so can be used directly and becomes reactive\n  const [checkActions, setCheckActions] = React.useState()\n\n  // calculate and get all permissions (once)\n  if (!checkActions) {\n    // simulate bns state once again just in case\n    // up to current block height\n    const bns = calcBnsState(\n      state.domain.txHistory,\n      state.domain.domainName,\n      state.chain.height,\n      state.network\n    )\n    setCheckActions(runAllActionPermissionChecks(bns, state.wallet.address))\n  }\n\n  console.log('checkActions', checkActions)\n\n  // initializes extra form status from permission checks\n  React.useEffect(() => {\n    // only do if undefined local state (once)\n    if (!extraFormData) {\n      // go through each action, set key to .info and set show status to false\n      const showStatus: { [key: string]: { show: boolean } } = {}\n      checkActions.forEach((action: any) => {\n        showStatus[action.info] = { show: false }\n      })\n      setExtraFormData(showStatus)\n    }\n  }, [checkActions, extraFormData])\n\n  // list available actions for render\n  const listAvailableActions = () => (\n    !!checkActions && checkActions.map((action: any) => {\n      // usable actions only\n      if (action.isUsable) {\n        // abort if it has even 1 warning as well\n        if (action.suggestions.some((suggestion: any) => suggestion.info.warning)) return ''\n        // check if there's data needed from user for this action\n        const suggestionsToGet = action.suggestions.filter((suggestion: any) => ('get' in suggestion.info)) || []\n\n        return (\n          // action div start\n          <div key={ action.info }>\n            {/* change what action button does based on if there's data to get */}\n            <RoundButton\n              next={ suggestionsToGet.length === 0 ? 'true' : undefined }\n              onClick={ () => {\n                if (suggestionsToGet.length === 0) {\n\n                  // if regular action without extra data needed\n                  // set this action as the chosen action\n                  changeChoicesBNSAction(state, dispatch, {\n                    action: JSON.parse(JSON.stringify(action))\n                  })\n                  // change page\n                  changePageInfoAction(state, dispatch, 5)\n\n                } else {\n\n                  // if special action with extra data needed,\n                  // toggle form showing instead based on action info as key\n                  if (extraFormData) {\n                    const { show } = extraFormData[action.info]\n                    setExtraFormData({ ...extraFormData, [action.info]: { show: !show } })\n                  }\n\n                }\n              }}\n            >\n              { action.info }{ suggestionsToGet.length > 0 ? (<>&nbsp;...</>) : '' }\n            </RoundButton>\n\n            {/* create input forms if shown */}\n\n            { (extraFormData && extraFormData[action.info].show) && (\n              suggestionsToGet.map((suggestionToGet: any) => (\n                <InputForm\n\n                  key={ suggestionToGet.info.describe }\n\n                  className={ styles.inputForms }\n\n                  thisInputLabel={ suggestionToGet.info.describe }\n\n                  thisInputValue={ suggestionToGet.info.get.value }\n\n                  thisInputOnChange={ (e: any) => {\n                    // sanitize text\n                    const cleanText = sanitize(e.target.value, ['oneline', 'no_spaces'])\n\n                    // add changed value to checkActions object\n                    // find and edit the value I need to get\n                    checkActions\n                      .find((thisAction: any) => thisAction.type === action.type )\n                      .suggestions\n                      .find((thisSuggestion: any) =>\n                        thisSuggestion.info.describe === suggestionToGet.info.describe\n                      ).info.get.value = cleanText\n                    // notify local state about changes with clone\n                    setCheckActions([...checkActions])\n                  } }\n\n                  thisSubmitButtonOnClick={ () => {\n\n                    // if input is not blank\n                    if (suggestionToGet.info.get.value !== '') {\n                      // place the customized action object entirely into the global state\n                      changeChoicesBNSAction(state, dispatch, {\n                        action: JSON.parse(JSON.stringify(action))\n                      })\n\n                      // change page\n                      changePageInfoAction(state, dispatch, 5)\n                    }\n\n                  } }\n                />\n              ))\n            )}\n          </div>\n        )\n      } else {\n        return ''\n      }\n    })\n  )\n\n  // list unavailable actions for render\n  const listUnavailableActions = () => (\n    !!checkActions && checkActions.map((action: any) => {\n      if (!action.isUsable) {\n        return (\n          <div\n            className={\n              styles.unavailableActions__actionList__action\n            }\n            key={ action.info }\n          >\n            <div\n              className={\n                styles.unavailableActions__actionList__action__title\n              }\n            >\n              { action.info }\n            </div>\n            <div\n              className={\n                styles.unavailableActions__actionList__action__permissionList\n              }\n            >\n              { action.permissionList.map((permission: any) => {\n                if (!permission.isAllowed) {\n                  return (\n                    <div\n                      className={\n                        styles.unavailableActions__actionList__action__permissionList__permission\n                      }\n                      key={ permission.info.describe }\n                    >\n                      - { permission.info.describe }\n                    </div>\n                  )\n                } else { return '' }\n              })}\n            </div>\n          </div>\n        )\n      } else {\n        return ''\n      }\n    })\n  )\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Available actions\n      </div>\n      <div className={ styles.availableActions }>\n        {\n          listAvailableActions()\n        }\n      </div>\n      <div className={ styles.unavailableActions }>\n        <Details\n          description={ 'Show unavailable actions' }\n          className= { styles.unavailableActions__title }\n        >\n          <div className={ styles.unavailableActions__actionList }>\n            {\n              listUnavailableActions()\n            }\n          </div>\n        </Details>\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 3)\n          }}\n        >\n          Back\n        </RoundButton>\n      </div>\n    </div>\n  )\n}","import React from 'react'\nimport { RoundButton } from '../../general/RoundButton'\nimport { Details } from './../../general/Details'\nimport styles from './P5CustomForwards.module.css'\nimport { Store, getOwner } from '../../../store'\nimport { changePageInfoAction, changeChoicesBNSAction } from '../../../store/actions'\nimport { stringByteCount, BYTES_MAX, findLatestForwards, interpretCommand } from '../../../helpers/bns'\nimport sanitize from '../../../helpers/sanitize'\n\ntype Planned_Changes = { [key: string]: string }\n\n/**\n * Component to edit custom forwards information.\n * state - global state.\n * textboxContent - text content inside the network and address textareas.\n */\nexport const P5CustomForwards = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n  // string to embed located at state.choices.embedString\n\n  // local state for content in textboxes for new network address changes\n  const [textboxContent, setTextboxContent] = React.useState({network: '', address: '' })\n\n\n  // Check if the main action requires space in the embed string.\n  // Return necessary string. No extra spaces.\n  // e.g. returns: '', '!ca 234', '!abc '\n  const getActionEmbedRequirements = (): string => {\n    const chosenAction = state.choices.action\n    let stringFromCommands = ''\n    // Go through all action's suggestions and combine any commands found.\n    // This is compatible with 0, 1, or multiple commands being used at same time.\n    chosenAction.suggestions.forEach((thisSuggestion: any) => {\n      if ('command' in thisSuggestion.info) {\n        // command setting found,\n        // so add its contents to string and add value in getter as command match\n        stringFromCommands += thisSuggestion.info.command + ' '\n        stringFromCommands += thisSuggestion.info.get.value + ' '\n      }\n    })\n\n    // remove extra space from end ('' stays '')\n    stringFromCommands = stringFromCommands.slice(0, -1)\n\n    // console.log('after checking', chosenAction.suggestions)\n    // console.log('getActionEmbedRequirements returned', stringFromCommands)\n    return stringFromCommands\n  }\n\n  // set global state's string to embed from an object of planned changes\n  const setPlannedChanges = (objForwards: Planned_Changes  = {}) => {\n    let forwardsString = ''\n    Object.keys(objForwards).forEach(fwNetwork => {\n      forwardsString += fwNetwork + ' ' + objForwards[fwNetwork] + ' '\n    })\n    // remove extra space from end ('' stays '')\n    forwardsString = forwardsString.slice(0, -1)\n\n    // to avoid useless rerenders, only change state\n    // if it current state string doesn't match calculated string\n    const needsChanging = forwardsString !== state.choices.embedString\n\n    if (needsChanging) {\n      changeChoicesBNSAction(state, dispatch, {\n        embedString: forwardsString\n      })\n    }\n  }\n\n  // Object of planned changes derived from\n  // global state embedString and action choice\n  const getPlannedChanges = () => {\n    // this is string that's going to be embedded\n    let forwardsString = state.choices.embedString\n\n    // get required by actions string as well\n    let actionRequirementsString = getActionEmbedRequirements()\n\n    // combine (later string values are given priority)\n    const finalString = (\n      forwardsString\n      // if either are blank, no need to separate with space\n      + ((actionRequirementsString === '' || forwardsString === '') ? '' : ' ')\n      + actionRequirementsString\n    )\n\n    // convert all changes to object so same networks overwrite themselves as keys.\n    const changesObject = finalString.split(' ').reduce(\n      (\n        // add each planned change into plannedChangesSoFar\n        plannedChangesSoFar: Planned_Changes,\n        // from each word\n        word: string,\n        index: number,\n        // out of this array of words\n        words: Array<string>\n      ): Planned_Changes => {\n\n        if (index % 2 === 1) {\n          return { ...plannedChangesSoFar, [words[index - 1]]: word }\n        } else {\n          return plannedChangesSoFar\n        }\n\n      },\n      {} // initial value for plannedChangesSoFar\n    )\n    return changesObject\n  }\n\n\n  // If embed string is empty (to minimize calculations per render), call setPlannedChanges to initialize it\n  // since it doesn't update state unless it's necessary, no refresh is triggered each render\n  if (state.choices.embedString === '') setPlannedChanges(getPlannedChanges())\n\n  // Array of past {[network]:forwardingAddress} objects.\n  // Display only active ones with latest higher.\n  const pastForwards = findLatestForwards(getOwner(state)?.forwards || []).reverse()\n\n  // count # of bytes in string\n  const bytesOfChanges = stringByteCount(state.choices.embedString)\n  // count # of bytes left for storage\n  const bytesLeft = BYTES_MAX - bytesOfChanges\n  // if no more space\n  const isSpaceFull = bytesLeft < 0\n\n\n\n  /**\n   * Render explanation of the change with submitted forwards network name\n   */\n  const explainForwards = (fwNetwork: string) => {\n    const value = getPlannedChanges()[fwNetwork]\n\n    // display byte cost (including separator)\n    const bytes = stringByteCount(fwNetwork + ' ' + value)\n    const thisByteCostEstimate = (\n      <i>\n        {' '}({ bytes }-{ bytes + 1 }B)\n      </i>\n    )\n\n    // return first match for explanation content\n    const interpretation = () => {\n\n      // if it was a command\n      if (fwNetwork.startsWith('!')) {\n        const cmd = interpretCommand(fwNetwork, value)\n        return {\n          content: (\n            <>\n              { cmd ? (\n                <>\n                 { cmd.info } user action. { cmd.getterName } is set to <span>{ cmd.value }</span>.\n                </>\n               ) : 'User action' }\n              { thisByteCostEstimate }\n            </>\n          ),\n          allowRemoval: false\n        }\n      }\n\n      // regular forwarding: network's forwarding address was provided\n      if (value !== '') {\n        return {\n          content: (\n            <>\n              Updating forwarding on <span>{ ' ' + fwNetwork + ' ' }</span>\n              network to address of <span>{ ' ' + value + ' ' }</span>\n              { thisByteCostEstimate }\n            </>\n          ),\n          allowRemoval: true\n        }\n      }\n\n      // regular forwarding: if network's forwarding address was set blank\n      if (value === '') {\n        return {\n          content: (\n            <>\n              Deleting previously set forwarding information for\n              <span>{ ' ' + fwNetwork + ' '}</span> network\n              { thisByteCostEstimate }\n            </>\n          ),\n          allowRemoval: true\n        }\n      }\n\n      return { content: '' }\n   }\n\n\n    return (\n      <div\n        className={ styles.updateItem }\n        key={ fwNetwork }\n        onClick={ () => {\n          // fill in the edit field with these values in case\n          setTextboxContent({ network: fwNetwork, address: value })\n        } }\n      >\n        <div\n          className={ styles.updateInfo }\n        >\n          {\n            interpretation().content\n          }\n        </div>\n        {/* removal button. only render removal button if allowed */}\n        { (interpretation().allowRemoval) && (\n          <div\n            className={ ['btnCircle', styles.updateCancel, 'addTooltipRight'].join(' ') }\n            onClick={ (e) => {\n              const newData = { ...getPlannedChanges() }\n              delete newData[fwNetwork]\n              setPlannedChanges(newData)\n              // block event from also clicking onto the updateItem\n              e.stopPropagation()\n            } }\n          >\n            <span>×</span>\n            <aside>Remove from planned changes</aside>\n          </div>\n        ) }\n      </div>\n    )\n  }\n\n\n  console.log('bytes to embed', bytesOfChanges)\n\n  return (\n    <div className={ styles.wrapper }>\n\n      <div className={ styles.title }>\n        Update forwarding information\n        <div\n          className={ styles.subtitle }\n        >\n          Main actions: { state.choices.action.info }\n        </div>\n      </div>\n\n      <div className={ styles.changes }>\n\n        {/* bytes info */ }\n        { (Object.keys(getPlannedChanges()).length === 0) && 'No forwarding updates' }\n        { (!isSpaceFull) &&\n          <div className={ styles.bytesLeft }>\n            { bytesLeft } Bytes left\n          </div>\n        }\n        { (isSpaceFull) &&\n          <div className={ styles.bytesOver }>\n            Too much by { Math.abs(bytesLeft) } Bytes\n          </div>\n        }\n\n        {/* Show, explain, and allow editing and removing of each added key/value pair to embed */}\n        { Object.keys(getPlannedChanges()).map((fwNetwork: any) => explainForwards(fwNetwork)) }\n\n      </div>\n\n      <div className={ styles.editor } >\n        { (textboxContent.network.length > 0) &&\n          <div\n            className={ [styles.btnDelete, 'canPress'].join(' ') }\n            onClick={ () => {\n              setPlannedChanges({\n                ...getPlannedChanges(),\n                [textboxContent.network]: ''\n              })\n              setTextboxContent({ network: '', address: '' })\n            } }\n          >\n            delete old\n          </div>\n        }\n        <div\n          className={ styles.editorNetwork }\n        >\n          <aside>Network</aside>\n          <textarea\n            spellCheck={ false }\n            value={ textboxContent.network }\n            placeholder={ 'e.g. btc' }\n            onChange={ (e) => {\n              const cleanText = sanitize(e.target.value, ['oneline', 'no_spaces'])\n              setTextboxContent({ ...textboxContent, network: cleanText })\n            } }\n          ></textarea>\n        </div>\n        <div\n          className={ styles.editorAddress }\n        >\n          <aside>Forwarding address</aside>\n          <textarea\n            spellCheck={ false }\n            value={ textboxContent.address }\n            placeholder={ 'e.g. your btc address' }\n            onChange={ (e) => {\n              const cleanText = sanitize(e.target.value, ['oneline', 'no_spaces'])\n              setTextboxContent({ ...textboxContent, address: cleanText })\n              console.log('forwarding satnitized:', '\"' + cleanText + '\"')\n            } }\n          ></textarea>\n        </div>\n        <div\n          className={ ['btnCircle', styles.btnAdd, 'canPress', 'addTooltip'].join(' ') }\n          onClick={ () => {\n            if (textboxContent.network !== '') {\n              setPlannedChanges({\n                ...getPlannedChanges(),\n                [textboxContent.network]: textboxContent.address\n              })\n              setTextboxContent({ network: '', address: '' })\n            }\n          } }\n        >\n          <span>+</span>\n          <aside>Add to planned changes</aside>\n        </div>\n      </div>\n      <div className={ styles.pastList } >\n        <Details\n          description={ 'What\\'s this?' }\n        >\n          <p>\n            Enter the forwarding addresses you want to use (e.g. long bitcoin address) and specify on which network that address should be used (e.g. btc) when someone wants to reach you after looking up your domain alias.<br />\n            <br />\n            Submit new updates by hitting [+] button. Remove updates by hitting [x] buttons.<br />\n            <br />\n            Below, the currently active forwarding addresses are shown, if any.<br />\n            <br />\n            Edit them by reusing the exact same network or remove by setting forwarding address to nothing or hitting [no address] button under network name text.\n          </p>\n        </Details>\n        { pastForwards.map((fw: any, i: number) => {\n          return (\n            <div\n              className={ styles.pastPair }\n              key={ i }\n              onClick={ () => {\n                setTextboxContent({ network: fw.network, address: fw.address })\n              } }\n            >\n              <div className={ styles.pastNetwork } >\n                { fw.network }\n              </div>\n              <div className={ styles.pastAddress } >\n                { fw.address }\n              </div>\n            </div>\n          )\n        }) }\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back='true'\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 4)\n          }}\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          next='true'\n          show={ bytesOfChanges > BYTES_MAX ? 'false' : 'true' }\n          onClick={ () => {\n            changePageInfoAction(state, dispatch, 6)\n          }}\n        >\n          Ready\n        </RoundButton>\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport styles from './FeesSelection.module.css'\nimport { Store } from './../../../store/'\nimport { RoundButton } from './../../general/RoundButton'\nimport sanitize from './../../../helpers/sanitize'\nimport {\n  changeChoicesBNSAction\n} from './../../../store/actions'\nimport { getFeeEstimates } from './../../../api/blockstream'\n\n/**\n * Fees selection dialogue.\n * Modifies global state.choices.feeRate.\n */\nexport const FeesSelection = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  // local states to track fees and suggestions\n  const [ feeText, setFeeText ] = React.useState(state.choices.feeRate)\n  const [ feeSuggestions, setFeeSuggestions ] = React.useState({\n    showSuggestions: false,\n    apiSuccess: false,\n    min20: 1,\n    min40: 1,\n    min60: 1,\n  })\n\n\n  // get new suggestions if never got them through api\n  // otherwise show previous\n  const tryFees = async () => {\n    // if haven't already got api results\n    if (!feeSuggestions.apiSuccess) {\n      try {\n        // get fee estimates from API\n        const apiSuggest = await getFeeEstimates(state.network)\n        setFeeSuggestions({\n          min20: apiSuggest['2'],\n          min40: apiSuggest['4'],\n          min60: apiSuggest['6'],\n          apiSuccess: true,\n          showSuggestions: true\n        })\n\n      } catch (e) {}\n    } else {\n      // show the previous values\n      setFeeSuggestions({\n        ...feeSuggestions,\n        showSuggestions: !feeSuggestions.showSuggestions\n      })\n    }\n  }\n\n\n  return (\n    <div className={ styles.fees }>\n      <div className={ styles.fees__rate }>\n        <aside>Fee rate (sat / vByte):</aside>\n        <textarea\n          spellCheck={ false }\n          value={ feeText }\n          placeholder={ 'e.g. 1.2' }\n          onChange={ (e) => {\n            const cleanText = sanitize(e.target.value, [\n              'numbers', 'decimal_point', 'no_leading_zeros'\n            ])\n            setFeeText(cleanText)\n            // 123. works in parseFloat and outputs 123 so safe\n            const cleanNumber = parseFloat(cleanText)\n            changeChoicesBNSAction(state, dispatch, { feeRate: cleanNumber })\n          } }\n        ></textarea>\n      </div>\n      <div className= { styles.fees__apicall }>\n        <RoundButton\n          onClick={ () => {\n            tryFees()\n          } }\n        >\n          Check online\n        </RoundButton>\n        { (feeSuggestions.showSuggestions) && (\n          <div className={ styles.fees__feeSelection }>\n            <div\n              className= { styles.fees__feeSelection__choice }\n              onClick={ () => {\n                setFeeText(feeSuggestions.min20)\n                changeChoicesBNSAction(state, dispatch, {\n                  feeRate: feeSuggestions.min20\n                })\n                setFeeSuggestions({...feeSuggestions, showSuggestions: false})\n              } }\n            >\n              { '< ' }20 min ( { feeSuggestions.min20.toFixed(3) } sat / vByte )\n            </div>\n            <div\n              className= { styles.fees__feeSelection__choice }\n              onClick={ () => {\n                setFeeText(feeSuggestions.min40)\n                changeChoicesBNSAction(state, dispatch, {\n                  feeRate: feeSuggestions.min40\n                })\n                setFeeSuggestions({...feeSuggestions, showSuggestions: false})\n              } }\n            >\n              { '< ' }40 min ( { feeSuggestions.min40.toFixed(3) } sat / vByte )\n            </div>\n            <div\n              className= { styles.fees__feeSelection__choice }\n              onClick={ () => {\n                setFeeText(feeSuggestions.min60)\n                changeChoicesBNSAction(state, dispatch, {\n                  feeRate: feeSuggestions.min60\n                })\n                setFeeSuggestions({...feeSuggestions, showSuggestions: false})\n              } }\n            >\n              { '< ' }60 min ( { feeSuggestions.min60.toFixed(3) } sat / vByte )\n            </div>\n          </div>\n        ) }\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Store } from '../../../store'\nimport { RoundButton } from '../../general/RoundButton'\nimport styles from './P6Broadcast.module.css'\nimport { changePageInfoAction } from '../../../store/actions'\nimport { calcTx } from './../../../helpers/bns/'\nimport { txPush } from './../../../api/blockstream'\nimport { getUnspentSum } from '../../../helpers/bns/bitcoin'\nimport { Details } from './../../general/Details'\nimport { FeesSelection } from './../../wallet/FeesSelection'\n\n/**\n * Broadcast tx page.\n * Fee selection.\n * Transaction summary/status. *\n */\nexport const P6Broadcast = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n  // tx calculation\n  let tx: any;\n  let txIssue: string = ''\n  try {\n    tx = calcTx(\n      state.wallet,\n      state.domain,\n      state.choices,\n      state.network\n    )\n  } catch (e) {\n    txIssue = String(e.message)\n    if (txIssue.endsWith('has no matching Script')) {\n      txIssue += ' \\n(address provided seems invalid)'\n    }\n    console.log('error details if necessary:', e)\n  }\n\n  // summarize number of updates in the embeded string\n  const numberOfUpdates = (state\n    .choices\n    .embedString\n    .split(' ')\n    .reduce((countSoFar: number, word: string, index: number, words: Array<string>) =>\n      (index % 2 === 1) ? countSoFar + 1 : countSoFar\n    , 0)\n  )\n\n  // keep track of broadcast\n  const [ broadcastStatus, setBroadcastStatus ] = React.useState({\n    ok: false,\n    txid: '123',\n    reason: ''\n  })\n\n  // show BTC balance with styling and proper units based on network\n  const unitBTC = (state.network === 'testnet') ? ' tBTC ' : ' BTC '\n  const showBTC = (sats: number = 0): JSX.Element => (\n    <>\n      <span className={ styles.balance }>\n        { (sats / 1e8).toFixed(8) }\n      </span>\n      { unitBTC }\n    </>\n  )\n\n  const finalCost = tx ? (\n    // No point confusing user if the cost is negative.\n    // Possible with enough anyone-can-spend utxo found.\n    Math.max(tx.gatheredFromWallet - tx.change, 0)\n  ) : undefined\n\n  return (\n    <div className={ styles.wrapper }>\n      <div className={ styles.title }>\n        Finalize transaction details\n      </div>\n      <div className={ styles.fees }>\n        <FeesSelection />\n      </div>\n      <div className={ styles.totalCost }>\n        { (!!tx) ? <>Your final cost: { showBTC(finalCost) }</> : ' ' }\n      </div>\n      <div className={ styles.txSummary }>\n        { (!!tx) && (\n          <>\n            <Details>\n              <table><tbody>\n                <tr>\n                  <td>Action:</td>\n                  <td>{ state.choices.action.info }</td>\n                </tr>\n                <tr>\n                  <td>Updates:</td>\n                  <td>{ numberOfUpdates }</td>\n                </tr>\n                <tr>\n                  <td>Wallet:</td>\n                  <td>\n                    <p>{ showBTC(getUnspentSum(state.wallet.utxoList)) } total\n                    across { state.wallet.utxoList.length } utxo</p>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Inputs:</td>\n                  <td>\n                    <p>{ showBTC(tx.gatheredFromWallet) } from\n                    {' '}{ tx.nInputsFromWallet } wallet utxo</p>\n                    <p>{ showBTC(tx.gatheredFromOther) } from\n                    {' '}{ tx.nInputsFromOther } notification utxo</p>\n                    <p>{ showBTC(tx.totalGathered) } total</p>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Outputs:</td>\n                  <td>\n                    <p>Burning { showBTC(tx.burnAmount) } at #0</p>\n                    <p>Sending { showBTC(tx.notifyAmount) } at #1</p>\n                    <p>Change of { showBTC(tx.change) } sent back at #2</p>\n                    <p>{ tx.nOutputs } total outputs</p>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Miner fee:</td>\n                  <td>\n                    <p>{ showBTC(tx.fee) }{' '}\n                    ({(tx.fee / tx.valueNeeded * 100.0).toFixed(1)}%)</p>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Size:</td>\n                  <td>{ tx.thisVirtualSize } vBytes</td>\n                </tr>\n                <tr>\n                  <td>Cost:</td>\n                  <td>\n                    <p>+ Transaction requires { showBTC(tx.valueNeeded) }</p>\n                    <p>- Using { showBTC(tx.gatheredFromOther) } from anyone-can-spend utxo</p>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Net cost:</td>\n                  <td>{ showBTC(tx.gatheredFromWallet - tx.change) }</td>\n                </tr>\n              </tbody></table>\n            </Details>\n          </>\n        )}\n        { (!tx) && (\n          <div className={ styles.txSummary }>\n            calculation failed <br />\n            { txIssue }\n          </div>\n        ) }\n      </div>\n      <div className={ styles.status }>\n        { (broadcastStatus.ok) ? (\n          <>\n            <div\n              className={ [styles.status__button, 'canPress'].join(' ') }\n              onClick={ () => {\n                const PATH = `https://blockstream.info/` +\n                `${ state.network === 'testnet' ? 'testnet/' : '' }tx/` +\n                `${ broadcastStatus.txid }`\n                window.open(PATH, '_blank')\n              } }\n            >\n              Success! Open in explorer\n            </div>\n          </>\n        ) : (broadcastStatus.reason.length > 0) ? (\n          <div className={ styles.status__failed }>\n            { broadcastStatus.reason }\n          </div>\n        ) : ''\n      }\n      </div>\n      <div className={ styles.buttonWrapper }>\n        <RoundButton\n          back={ 'true' }\n          onClick={ () => { changePageInfoAction(state, dispatch, 5) } }\n        >\n          Back\n        </RoundButton>\n        <RoundButton\n          show={ tx?.hex !== '' ? 'true' : 'false' }\n          onClick={ async () => {\n            if (tx && tx.hex) {\n              try {\n                const res = await txPush(tx.hex, state.network)\n                setBroadcastStatus({ok: true, txid: res.txid, reason: '' })\n              } catch (e) {\n                setBroadcastStatus({ok: false, txid: '', reason: e.message })\n              }\n            } else {\n              setBroadcastStatus({ok: false, txid: '', reason: '' })\n            }\n          } }\n        >\n          Broadcast\n        </RoundButton>\n      </div>\n\n    </div>\n  )\n}","import React from 'react'\nimport { Store } from './../../store/'\nimport { CreateHeader } from './../CreateSteps/CreateHeader'\nimport { P1RestoreOrBackup } from '../CreateSteps/P1RestoreOrBackup'\nimport { P2LoadWallet } from '../CreateSteps/P2LoadWallet'\nimport { P3DomainAndWallet } from '../CreateSteps/P3DomainAndWallet'\nimport { P4ActionChoice } from '../CreateSteps/P4ActionChoice'\nimport { P5CustomForwards } from '../CreateSteps/P5CustomForwards'\nimport { P6Broadcast } from './../CreateSteps/P6Broadcast'\nimport styles from './CreateNavigator.module.css'\n\n/**\n * Handle navigation of alias manipulation\n */\nexport const CreateNavigator = () => {\n  // global state\n  const { state } = React.useContext(Store)\n\n  const page = state.pageInfo?.current\n\n  !page && console.log('Unknown Page')\n\n  return (\n    <>\n      <CreateHeader />\n      <div className={ [styles.wrapper, 'scrollbar'].join(' ') }>\n        <div className={ styles.horizontalScaler } >\n          { (page === 1) && <P1RestoreOrBackup /> }\n          { (page === 2) && <P2LoadWallet /> }\n          { (page === 3) && <P3DomainAndWallet /> }\n          { (page === 4) && <P4ActionChoice /> }\n          { (page === 5) && <P5CustomForwards /> }\n          { (page === 6) && <P6Broadcast /> }\n        </div>\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { CreateNavigator } from './../components/CreateNavigator'\n\nexport default function Create () {\n  return (\n    <>\n      <CreateNavigator />\n    </>\n  )\n}\n","import React from 'react'\nimport { Store } from './../../store'\nimport { Link, useHistory } from 'react-router-dom'\nimport styles from './Navbar.module.css'\n\n\nconst MAX_BUTTONS_TO_SHOW_UNCOLLAPSED = 4\n\nexport const Navbar = (): JSX.Element => {\n  // global state\n  const { state } = React.useContext(Store)\n\n  // references for objects of interest\n  const searchButton = React.useRef<HTMLDivElement>(null)\n  const toggleMenuButtonDiv = React.useRef<HTMLDivElement>(null)\n  const overflowMenuDiv = React.useRef<HTMLDivElement>(null)\n\n  // local state for navbar\n  const [ nav, setNav ] = React.useState({\n    buttonWidth: (!!searchButton.current)\n      ? searchButton.current.offsetWidth\n      : undefined,\n    showCollapsed: false,\n    resizeTimer: 0\n  })\n\n  // initialize nav bar measurements\n  if (!nav.buttonWidth) {\n    window.setTimeout(() => {\n      window.dispatchEvent(new Event('resize'));\n    }, 200);\n  }\n\n  // selection rules for buttons\n  const isCreatePage = useHistory().location.pathname === '/create'\n  const isHomePage = useHistory().location.pathname === '/'\n  const isAboutPage = useHistory().location.pathname === '/about'\n  const isSettingsPage = useHistory().location.pathname === '/settings'\n  const isWalletPage = useHistory().location.pathname === '/wallet'\n\n\n  React.useEffect(() => {\n    // place overflow menu and show it\n    const updateMenuPosition = () => {\n      if (toggleMenuButtonDiv.current && overflowMenuDiv.current) {\n        const menu = overflowMenuDiv.current.getBoundingClientRect()\n        const button = toggleMenuButtonDiv.current.getBoundingClientRect()\n\n        const menuLeft = Math.round(button.left + (0.5 * button.width) - (0.5 * menu.width))\n        const menuTop = Math.round(button.top - menu.height - button.height * 0.3)\n        overflowMenuDiv.current!.style.top = menuTop + 'px'\n        overflowMenuDiv.current!.style.left = menuLeft + 'px'\n        overflowMenuDiv.current!.style.opacity = '0.95'\n      }\n    }\n    window.setTimeout(updateMenuPosition, 200);\n\n    // resize event\n    const onResize = () => {\n      if (searchButton.current) {\n        document.body.classList.add(\"resize-animation-stopper\");\n        clearTimeout(nav.resizeTimer);\n        let resizeTimer = setTimeout(\n          () => {\n            document.body.classList.remove(\"resize-animation-stopper\")\n        }, 400)\n        setNav({\n          ...nav,\n          resizeTimer: (resizeTimer as any),\n          showCollapsed: false,\n          buttonWidth: searchButton.current.getBoundingClientRect().width\n        })\n      }\n    }\n    // handle resize event listeners\n    window.addEventListener('resize', onResize);\n    return () => window.removeEventListener('resize', onResize);\n  }, [nav])\n\n  // click closes menu, outside or inside menu\n  React.useEffect(() => {\n    const onClickAnywhere = (e: any) => {\n      if (nav.showCollapsed) {\n        setNav({ ...nav, showCollapsed: false })\n      }\n    }\n    document.addEventListener('click', onClickAnywhere)\n    return () => { document.removeEventListener('click', onClickAnywhere) }\n  }, [nav])\n\n\n  // all main buttons\n  const buttonsArray = [\n    [\n      <span ref={ searchButton }>\n        <Link\n          className={ isHomePage ? styles.selected : '' }\n          to='/'\n        >\n          search\n        </Link>\n      </span>\n    ],[\n      <Link\n        className={ isCreatePage ? styles.selected : '' }\n        to='/create'\n      >\n        owners\n      </Link>\n    ],[\n      <a\n        href=\"https://github.com/ildarmgt/BitcoinNameSystem\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        &lt;{ 'source' }&gt;\n      </a>\n    ],[\n      <Link\n        className={ isAboutPage ? styles.selected : '' }\n        to='/about'\n      >\n        about\n      </Link>    ],[\n      <Link\n        className={ isSettingsPage ? styles.selected : '' }\n        to='/settings'\n      >\n        settings\n      </Link>\n    ],[\n      <Link\n        className={ isWalletPage ? styles.selected : '' }\n        to='/wallet'\n      >\n        wallet\n      </Link>\n    ],\n  ]\n\n  // using search button as metric, estimate how many buttons to show\n  const windowWidth = window.innerWidth\n  const stdSizer = 0.005 * (window.innerWidth + window.innerHeight)\n  const safeWidthFraction = 0.8;\n  const howManyButtonsFitSafely = nav.buttonWidth ? Math.min(\n    Math.max(\n      Math.floor(\n        (windowWidth - 18 * stdSizer) * safeWidthFraction / ( nav.buttonWidth + stdSizer)\n      ),\n      1\n    )\n    , MAX_BUTTONS_TO_SHOW_UNCOLLAPSED\n  ) : 1\n\n  const buttonsOnNavbar = buttonsArray.filter((btn: any, i: number) =>\n    (i <= howManyButtonsFitSafely - 1)\n  )\n  const buttonsOverflow = buttonsArray.filter((btn: any, i: number) =>\n    (i > howManyButtonsFitSafely - 1)\n  ) || []\n\n  return (\n    <>\n      <div\n        className={ styles.warning }\n      >\n        not reviewed for use\n      </div>\n\n      <div\n        className={ styles.nav }\n      >\n        {/* page numbers (on tx creating pages) */}\n        { isCreatePage && (\n          <div className={ styles.pageNum }>\n            { state.pageInfo.current }/6\n          </div>\n        ) }\n\n        {/* collapsed menu toggle button */}\n        { (!!buttonsOverflow.length) && (\n          <div\n            className={ [\n              styles.collapsitron,\n              // styles.button,\n              nav.showCollapsed ? styles.menuShown : ''\n            ].join(' ') }\n            ref= { toggleMenuButtonDiv }\n            onClick={ () => {\n              setNav({ ...nav, showCollapsed: !nav.showCollapsed })\n            } }\n          >\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            <div className={ styles.dots }><div /></div>\n\n          </div>\n        ) }\n\n        {/* regular nav bar */}\n        { buttonsOnNavbar.map((thisButton: any, index: number) => {\n          return (\n            <React.Fragment\n              key={ 'nevbarbuttons' + index }\n            >\n              { thisButton[0] }\n            </React.Fragment>\n          )\n        }).reverse()}\n\n      </div>\n\n      {/* collapsed menu window */}\n      { (nav.showCollapsed) && (\n        <div\n          className={ styles.overflowMenu }\n          ref={ overflowMenuDiv }\n        >\n          <div>\n            { buttonsOverflow.map((thisButton: any, index: number) => {\n                return (\n                  <React.Fragment\n                    key={ 'overflowbuttons' + index }\n                  >\n                    { thisButton[0] }\n                  </React.Fragment>\n                )\n              }).reverse()\n            }\n          </div>\n        </div>\n      ) }\n\n    </>\n  )\n}\n\n// Hash history cannot PUSH the same path; a new entry will not be added to the history stack\n// Only issue is the warning in console, but that only exists in development mode so can be ignored.","import React from 'react'\nimport styles from './Logo.module.css'\n\n/**\n * Bitcoin Logo\n */\nexport const Logo = (props: any) => {\n  return (\n    <div {...props}>\n      <div className={ styles.wrapper }>\n        <div\n          className={ styles.logo }\n        >\n          <span>₿</span>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Logo } from './../Logo'\nimport styles from './LogoBackground.module.css'\n\n/**\n * Turn logo into background.\n */\nexport const LogoBackground = (props: any) => {\n  return (\n    <div className={ styles.wrapper }>\n      <Logo\n        className={ styles.logo }\n      />\n    </div>\n  )\n}","import React from 'react'\nimport { Store } from './../../../store/'\nimport styles from './Withdraw.module.css'\nimport { RoundButton } from './../../general/RoundButton'\nimport { ActionTypes } from './../../../interfaces'\nimport {\n  scanAddressFullyAction,\n  changePageInfoAction\n} from './../../../store/actions'\nimport { useHistory } from 'react-router-dom'\nimport { getUnspentSum } from '../../../helpers/bns/bitcoin'\nimport { FeesSelection } from './../FeesSelection'\nimport { LogoBackground } from './../../general/LogoBackground'\n\n/**\n * Allow withdrawals\n */\nexport const Withdraw = () => {\n  // global state\n  const { state, dispatch } = React.useContext(Store)\n\n\n  // Local state: keep track if API is busy\n  const [ apiStatus, setApiStatus ] = React.useState('ok')\n\n  // show BTC balance with styling and proper units based on network\n  const unitBTC = (state.network === 'testnet') ? ' tBTC ' : ' BTC '\n  const showBTC = (sats: number = 0): JSX.Element => (\n    <>\n      <span className={ styles.balance }>\n        { (sats / 1e8).toFixed(8) }\n      </span>\n      { unitBTC }\n    </>\n  )\n\n  const history = useHistory()\n\n  // if wallet is not loaded, send to create page 1\n  if (!state.wallet.mnemonic) {\n    changePageInfoAction(state, dispatch, 1)\n    history.push('/create')\n  }\n\n  return (\n    <div className={ styles.wrapper }>\n\n      <LogoBackground />\n\n      (NOT DONE)\n\n      <div className={ styles.title }>\n        Withdraw from wallet\n      </div>\n\n      <div className={ styles.request }>\n        { !state.pageInfo.checkedWallet && (\n          <>\n            <RoundButton\n              onClick={ () => {\n                if (apiStatus === 'ok') {\n                  setApiStatus('wallet')\n                  scanAddressFullyAction(state, dispatch, ActionTypes.UPDATE_WALLET)\n                }\n              }}\n            >\n              Scan wallet\n            </RoundButton>\n          </>\n        ) }\n      </div>\n\n      { state.pageInfo.checkedWallet && (\n        <div className={ styles.fees }>\n          <FeesSelection />\n        </div>\n      ) }\n\n      { state.pageInfo.checkedWallet && (\n        <div className={ styles.total }>\n          { showBTC(\n            getUnspentSum(state.wallet.utxoList)\n          ) }\n        </div>\n      ) }\n      <div>\n        to address\n      </div>\n      <div>\n        to amount\n      </div>\n      <div>\n        returned amount\n      </div>\n      <div>\n        broadcast button\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Withdraw } from './../components/wallet/Withdraw'\n\nconst Home = (props: any): JSX.Element => {\n  return (\n    <>\n      <Withdraw { ...props } />\n    </>\n  )\n}\nexport default Home","import React from 'react';\nimport { Route, Switch } from 'react-router-dom'\nimport Home from './pages/Home'\nimport About from './pages/About'\nimport Create from './pages/Create'\nimport { Navbar } from './components/Navbar'\nimport Wallet from './pages/Wallet'\nimport './css/app.css'\n\n// using for routing\nconst App = (): JSX.Element => {\n  // onbtc.me?satoshi can now forward to onbtc.me/#/id/satoshi which resets to onbtc.me after search\n  // redirect to auto searching path routed in return and remove query from url\n  const searchParam = (new URLSearchParams(window.location.search)).keys().next().value\n  searchParam && console.log('search param detected after ?', searchParam)\n  // no forward slash before # in string is vital\n  searchParam && window.history.pushState({}, '', window.location.pathname + '#/id/' + searchParam)\n\n  return (\n    <>\n      {/* switch only renders first match instead of all matches */}\n      <div className={ 'content' }>\n        <Switch>\n          <Route path='/id/:alias' component={Home} />\n          <Route exact path='/id/' component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/create\" component={Create} />\n          <Route path=\"/wallet\" component={Wallet} />\n          <Route path='/:noise' component={Home} />\n          <Route exact path='/' component={Home} />\n        </Switch>\n      </div>\n      <Navbar />\n      {/* <Route exact path=\"/\" render={() => <Home />} /> */}\n    </>\n  );\n}\nexport default App;\n","import React, { useState, useEffect } from 'react'\nimport styles from './DevPanel.module.css'\nimport { Store } from '../../store/'\nimport { ActionTypes } from './../../interfaces/'\nconst json = require('./../../utils/test.json');\n\ninterface I_State {\n  blShow: boolean\n  setShow: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nexport const DevPanel = (props: any): JSX.Element => {\n  const { state, dispatch } = React.useContext(Store) // global state\n\n  // store if DevPanel is hidden\n  const [hidden, setHidden] = useState<boolean>(false);\n\n  // reruns to reattach keyup event to toggle hidden class\n  useEffect(() => {\n    const onDevKey = (e: any) => {\n      if (e.key === '`') {\n        setHidden(!hidden)\n      } else {\n        // give focus back to the input bar\n        if (document.activeElement?.id !== 'txtSearch') {\n          const txtSearch = document.getElementById('txtSearch') as HTMLTextAreaElement\n          txtSearch?.focus()\n        }\n      }\n    }\n    document.addEventListener('keyup', onDevKey)\n    return () => {\n      document.removeEventListener('keyup', onDevKey)\n    }\n  }, [hidden])\n\n  const onOutlineClick = () => {\n    const id: string = 'outliner';\n    const sheet: HTMLElement | null = document.getElementById(id);\n    if (!sheet) {\n      const outlineCss = '* {box-shadow: 0 0 0 1px red;}'\n      const style = document.createElement('style')\n      style.type = 'text/css'\n      style.id = id\n      style.appendChild(document.createTextNode(outlineCss))\n      document.head.appendChild(style)\n    } else {\n      sheet.parentNode?.removeChild(sheet)\n    }\n  }\n\n  const dlState = () => {\n    let data = \"text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(state))\n    let a = document.createElement('a')\n    a.href = 'data:' + data\n    a.download = 'test.json'\n    a.innerHTML = 'download JSON'\n    let container = document.getElementById('container')\n    container?.appendChild(a)\n    a.click()\n    a.remove()\n  }\n\n  return (\n    <div\n      className={[\n        styles.divDev,\n        !hidden ? styles.hidden : ''\n      ].join(' ')}\n      { ...props }\n    >\n      <div><b>DevPanel</b></div>\n      <div\n        className={ styles.button }\n        onClick={ () => {\n          dlState()\n        } }\n      >\n        Save State\n      </div>\n      <div\n        className={ [styles.btnOutline, styles.button].join(' ') }\n        onClick={ onOutlineClick }\n      >\n        Outline\n      </div>\n      <div\n        className={ styles.button }\n        onClick={ () => {\n          console.log(json);\n          dispatch({ type: ActionTypes.LOAD_STATE, payload: json });\n        } }\n      >\n        Load State\n      </div>\n      <div\n        className={ styles.button }\n        onClick={ () => {\n          console.log(state);\n        } }\n      >\n        Console State\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './css/global.css';\nimport App from './App';\nimport { StoreProvider } from './store'\nimport { DevPanel } from './components/DevPanel'\n\n// Using for store access and hash router base\nReactDOM.render(\n  <StoreProvider>\n    <HashRouter>\n      <App />\n    </HashRouter>\n    <DevPanel />\n  </StoreProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\n// import * as serviceWorker from './serviceWorker';","// extracted by mini-css-extract-plugin\nmodule.exports = {\"roundButtonWrap\":\"RoundButton_roundButtonWrap__2X50a\",\"roundButton\":\"RoundButton_roundButton__tfjmf\",\"overhead\":\"RoundButton_overhead__As9JW\",\"nextArrowPad\":\"RoundButton_nextArrowPad__20zeF\",\"nextArrow\":\"RoundButton_nextArrow__SS6Nl\",\"backArrowPad\":\"RoundButton_backArrowPad__3Epn7\",\"backArrow\":\"RoundButton_backArrow__2MJJm\",\"back\":\"RoundButton_back__3z3jD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lblMainTitle\":\"HomeContent_lblMainTitle__1LqCG\",\"lblMainTitleAfter\":\"HomeContent_lblMainTitleAfter__J9CsB\",\"divSearch\":\"HomeContent_divSearch__3dKw5\",\"divSearchAfter\":\"HomeContent_divSearchAfter__2MAMf\",\"txtSearch\":\"HomeContent_txtSearch__3HpSp\",\"wrapper\":\"HomeContent_wrapper__mPINc\"};","import crypto from 'crypto'\n\n/**\n * Encrypt - symmetric - aes-256-crt\n * @param   {string}  stringText      To be encrypted (up to 80 bytes)\n * @param   {string}  stringForKey    Derive Key from (not final Key).\n * @param   {string}  stringForIV     Derive IV from (not final IV). Defaults as stringForKey.\n * @returns {Buffer}                  Buffer to embed in tx.\n */\nexport const encrypt = (\n  stringText: string, stringForKey: string, stringForIV: string = stringForKey\n) => {\n  // aes-NUMBER-TYPE\n  // Must have key size matching NUMBER (in aes name) of bits (NUMBER/8 bytes)\n  // Must have IV matching encryption block size, 16 bytes for AES128-to-256-range in cbc mode\n  // sha256 can make 32 byte buffer out of anything and then .slice(0, N) can cut it to N bytes\n\n  const key = crypto.createHash('sha256').update(stringForKey).digest()             // 32 bytes\n  const iv = crypto.createHash('sha256').update(stringForIV).digest().slice(0, 16)  // 16 bytes\n\n  let cipher = crypto.createCipheriv('aes-256-ctr', key, iv)\n  let encrypted = cipher.update(Buffer.from(stringText))\n\n  encrypted = Buffer.concat([encrypted, cipher.final()])\n\n  return encrypted\n}\n\n /**\n * Decrypt - symmetric - aes-256-crt\n * @param   {Buffer}  stringText      Buffer to be decrypted.\n * @param   {string}  stringForKey    Derive Key from (not final Key).\n * @param   {string}  stringForIV     Derive IV from (not final IV). Defaults as stringForKey.\n * @returns {Buffer}                  Buffer to utf8 embeded in tx.\n */\nexport const decrypt = (\n  bufferCypher: Buffer, stringForKey: string, stringForIV: string = stringForKey\n) => {\n\n  const key = crypto.createHash('sha256').update(stringForKey).digest()             // 32 bytes\n  const iv = crypto.createHash('sha256').update(stringForIV).digest().slice(0, 16)  // 16 bytes\n\n  let decipher = crypto.createDecipheriv('aes-256-ctr', key, iv)\n\n  // first part\n  let decrypted = decipher.update(bufferCypher)\n\n  // the rest\n  decrypted = Buffer.concat([decrypted, decipher.final()])\n\n  return decrypted.toString('utf8')\n}\n\n","import { I_User, I_BnsState, BnsBidType } from './types/'\n\n/**\n * Initial values for BNS state\n */\nexport const newState: I_BnsState = {\n  domain: {\n    domainName:                   '',\n    notificationAddress:          '',\n    txHistory:                    [],\n    derivedUtxoList:              [],\n    utxoList:                     [],\n    users:                        {},\n    currentOwner:                 '',\n    bidding: {\n      startHeight:                0,\n      endHeight:                  0,\n      type:                       BnsBidType.NULL,\n      bids:                       []\n    },\n    ownersHistory:                []\n  },\n  chain: {\n    parsedHeight:                 0,\n    currentHeight:                0\n  }\n}\n\n/**\n * values to initialize users with\n */\nexport const newUser: I_User = {\n  address:        '',\n  forwards:       [],\n  burnAmount:     0,\n  winHeight:      0,\n  winTimestamp:   0,\n  nonce:          0,\n  updateHeight:   0\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fees\":\"FeesSelection_fees__aYPBm\",\"fees__rate\":\"FeesSelection_fees__rate__ho27f\",\"fees__apicall\":\"FeesSelection_fees__apicall__14yZr\",\"fees__feeSelection\":\"FeesSelection_fees__feeSelection__26meY\",\"fees__feeSelection__choice\":\"FeesSelection_fees__feeSelection__choice__1Ba9j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"divDev\":\"DevPanel_divDev__2q66m\",\"hidden\":\"DevPanel_hidden__Wlj3v\",\"btnOutline\":\"DevPanel_btnOutline__2FJLx\",\"button\":\"DevPanel_button__1DKHt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Details_wrapper__32nmX\",\"buttonWrapper\":\"Details_buttonWrapper__12FS5\",\"toggleDetails\":\"Details_toggleDetails__2jgtb\",\"arrow\":\"Details_arrow__2N1IF\",\"down\":\"Details_down__2irBp\",\"details\":\"Details_details__1lwEd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cutOverflow\":\"CreateHeader_cutOverflow__3s_72\",\"bar\":\"CreateHeader_bar__27ge1\",\"domain\":\"CreateHeader_domain__1TQ7L\",\"alias\":\"CreateHeader_alias__1dNdj\",\"ext\":\"CreateHeader_ext__17sc6\",\"spacer\":\"CreateHeader_spacer__3tstm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Withdraw_wrapper__3h_E8\",\"title\":\"Withdraw_title__1DTCX\",\"request\":\"Withdraw_request__2EjrZ\",\"request__total\":\"Withdraw_request__total__6UrOm\",\"balance\":\"Withdraw_balance__2xjDM\",\"fees\":\"Withdraw_fees__1uZhm\"};","import * as bitcoin from 'bitcoinjs-lib'\nconst op = bitcoin.opcodes;\nconst hash160 = bitcoin.crypto.hash160;\n\n\n/**\n * Get p2wsh notificaiton address from domainName and network.\n * @param   {string} domainName         - full domainName to use (e.g. 'satoshi.btc').\n * @param   {string} networkChoice      - 'testnet' or 'bitcoin' (matches bitcoinjs-lib).\n * @returns {object}                    - { notificationsAddress - p2wsh address derived from domainName }.\n */\nexport const calcP2WSH = (domainName: string, networkChoice: string) => {\n  const network = bitcoin.networks[networkChoice];\n\n  // convert domainName into buffer so it can be put into script\n  const bufferData = Buffer.from(domainName, 'utf8');\n\n  // easily spendable script for ACS notification output\n  // specific to this domainName\n  const witnessScript = bitcoin.script.compile([\n    hash160(bufferData),\n    op.OP_DROP\n  ]);\n\n  // calculate p2wsh address for this witnessScript & network\n  const p2wsh = bitcoin.payments.p2wsh({\n    redeem: {\n      output: witnessScript,\n      network\n    },\n    network\n  })\n  const notificationsAddress = p2wsh.address;\n\n  return {\n    notificationsAddress\n  };\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"P2LoadWallet_wrapper__vI_bb\",\"contentWrapper\":\"P2LoadWallet_contentWrapper__UNLo4\",\"buttonWrapper\":\"P2LoadWallet_buttonWrapper__1rrct\",\"address\":\"P2LoadWallet_address__37xx2\",\"imgQr\":\"P2LoadWallet_imgQr__3Avh3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"InputForm_wrapper__3RO9S\",\"shiftRight\":\"InputForm_shiftRight__16j42\",\"label\":\"InputForm_label__2VQbz\",\"textarea\":\"InputForm_textarea__3jY9y\",\"button\":\"InputForm_button__1gilQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AboutContent_wrapper__1kfnm\",\"title\":\"AboutContent_title__16tUj\",\"contentWrapper\":\"AboutContent_contentWrapper__2XHS2\",\"drawing\":\"AboutContent_drawing__1qDTH\"};"],"sourceRoot":""}